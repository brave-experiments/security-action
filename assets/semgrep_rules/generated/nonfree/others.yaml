---
rules:
- id: generic.dockerfile.missing-zypper-no-confirm-switch.missing-zypper-no-confirm-switch
  severity: WARNING
  languages:
  - dockerfile
  patterns:
  - pattern: 'RUN ... zypper install ...

      '
  - pattern-not: 'RUN ... zypper install ... -y ...

      '
  - pattern-not: 'RUN ... zypper install ... --no-confirm ...

      '
  message: This 'zypper install' is missing the '-y' switch. This might stall builds
    because it requires human intervention. Add the '-y' switch.
  metadata:
    source-rule-url: https://github.com/hadolint/hadolint/wiki/DL3034
    references:
    - https://github.com/hadolint/hadolint/wiki/DL3034
    category: best-practice
    technology:
    - dockerfile
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/generic.dockerfile.missing-zypper-no-confirm-switch.missing-zypper-no-confirm-switch
    shortlink: https://sg.run/R5vK
    semgrep.dev:
      rule:
        rule_id: BYUKJE
        version_id: GxT88Y
        url: https://semgrep.dev/playground/r/GxT88Y/generic.dockerfile.missing-zypper-no-confirm-switch.missing-zypper-no-confirm-switch
        origin: community
  paths:
    include:
    - "*dockerfile*"
    - "*Dockerfile*"
- id: javascript.react.correctness.hooks.set-state-no-op.calling-set-state-on-current-state
  patterns:
  - pattern: "$Y($X);"
  - pattern-inside: |
      const [$X, $Y] = useState(...);
      ...
  message: Calling setState on the current state is always a no-op. Did you mean to
    change the state like $Y(!$X) instead?
  languages:
  - javascript
  severity: ERROR
  metadata:
    technology:
    - react
    category: correctness
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.react.correctness.hooks.set-state-no-op.calling-set-state-on-current-state
    shortlink: https://sg.run/Y8BW
    semgrep.dev:
      rule:
        rule_id: eqUz1k
        version_id: qkTwjn
        url: https://semgrep.dev/playground/r/qkTwjn/javascript.react.correctness.hooks.set-state-no-op.calling-set-state-on-current-state
        origin: community
- id: ocaml.lang.compatibility.deprecated.deprecated-pervasives
  pattern: Pervasives.$X
  message: Pervasives is deprecated and will not be available after 4.10. Use Stdlib.
  languages:
  - ocaml
  severity: ERROR
  metadata:
    category: compatibility
    technology:
    - ocaml
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/ocaml.lang.compatibility.deprecated.deprecated-pervasives
    shortlink: https://sg.run/dKe0
    semgrep.dev:
      rule:
        rule_id: 3qUP1E
        version_id: X0TADB
        url: https://semgrep.dev/playground/r/X0TADB/ocaml.lang.compatibility.deprecated.deprecated-pervasives
        origin: community
- id: ocaml.lang.portability.crlf-support.broken-input-line
  pattern: 'input_line

    '
  message: '''input_line'' leaves a ''\r'' (CR) character when reading lines from
    a Windows text file, whose lines end in "\r\n" (CRLF). This is a problem for any
    Windows file that is being read either on a Unix-like platform or on Windows in
    binary mode. If the code already takes care of removing any trailing ''\r'' after
    reading the line, add a ''(* nosemgrep *)'' comment to disable this warning.'
  languages:
  - ocaml
  severity: WARNING
  metadata:
    category: portability
    technology:
    - ocaml
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/ocaml.lang.portability.crlf-support.broken-input-line
    shortlink: https://sg.run/v2gY
    semgrep.dev:
      rule:
        rule_id: DbUKZX
        version_id: kbTOJw
        url: https://semgrep.dev/playground/r/kbTOJw/ocaml.lang.portability.crlf-support.broken-input-line
        origin: community
- id: ocaml.lang.portability.crlf-support.prefer-read-in-binary-mode
  pattern: open_in
  fix: open_in_bin
  message: "'open_in' behaves differently on Windows and on Unix-like systems with
    respect to line endings. To get the same behavior everywhere, use 'open_in_bin'
    or 'open_in_gen [Open_binary]'. If you really want CRLF-to-LF translations to
    take place when running on Windows, use 'open_in_gen [Open_text]'."
  languages:
  - ocaml
  severity: WARNING
  metadata:
    category: portability
    technology:
    - ocaml
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/ocaml.lang.portability.crlf-support.prefer-read-in-binary-mode
    shortlink: https://sg.run/d0YE
    semgrep.dev:
      rule:
        rule_id: WAUPAJ
        version_id: w8TkYl
        url: https://semgrep.dev/playground/r/w8TkYl/ocaml.lang.portability.crlf-support.prefer-read-in-binary-mode
        origin: community
- id: ocaml.lang.portability.crlf-support.prefer-write-in-binary-mode
  pattern: open_out
  fix: open_out_bin
  message: "'open_out' behaves differently on Windows and on Unix-like systems with
    respect to line endings. To get the same behavior everywhere, use 'open_out_bin'
    or 'open_out_gen [Open_binary]'. If you really want LF-to-CRLF translations to
    take place when running on Windows, use 'open_out_gen [Open_text]'."
  languages:
  - ocaml
  severity: WARNING
  metadata:
    category: portability
    technology:
    - ocaml
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/ocaml.lang.portability.crlf-support.prefer-write-in-binary-mode
    shortlink: https://sg.run/ZkGw
    semgrep.dev:
      rule:
        rule_id: 0oUJY9
        version_id: xyTd6N
        url: https://semgrep.dev/playground/r/xyTd6N/ocaml.lang.portability.crlf-support.prefer-write-in-binary-mode
        origin: community
- id: ocaml.lang.portability.slash-tmp.not-portable-tmp-string
  pattern: '"=~/\/tmp/"

    '
  message: You should probably use Filename.get_temp_dirname().
  languages:
  - ocaml
  severity: WARNING
  metadata:
    category: portability
    technology:
    - ocaml
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/ocaml.lang.portability.slash-tmp.not-portable-tmp-string
    shortlink: https://sg.run/Q4ZZ
    semgrep.dev:
      rule:
        rule_id: zdU100
        version_id: O9Tv1v
        url: https://semgrep.dev/playground/r/O9Tv1v/ocaml.lang.portability.slash-tmp.not-portable-tmp-string
        origin: community
- id: python.flask.best-practice.use-jsonify.use-jsonify
  patterns:
  - pattern: "$JSONDUMPS"
  - pattern-either:
    - pattern-inside: 'return json.dumps($...VAR)

        '
    - pattern-inside: |
        $DATA = json.dumps($...VAR)
        ...
        return $DATA
  - pattern-inside: |
      @app.route(...)
      def $X():
        ...
  - metavariable-pattern:
      metavariable: "$JSONDUMPS"
      pattern: json.dumps($...VAR)
  - focus-metavariable: "$JSONDUMPS"
  fix: 'flask.jsonify($...VAR)

    '
  message: flask.jsonify() is a Flask helper method which handles the correct  settings
    for returning JSON from Flask routes
  languages:
  - python
  severity: ERROR
  metadata:
    category: best-practice
    technology:
    - flask
    references:
    - https://flask.palletsprojects.com/en/2.2.x/api/#flask.json.jsonify
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.flask.best-practice.use-jsonify.use-jsonify
    shortlink: https://sg.run/XBlb
    semgrep.dev:
      rule:
        rule_id: NbUkx6
        version_id: l4TqoX
        url: https://semgrep.dev/playground/r/l4TqoX/python.flask.best-practice.use-jsonify.use-jsonify
        origin: community
- id: python.flask.caching.query-string.flask-cache-query-string
  patterns:
  - pattern-either:
    - pattern: |
        @app.route("...")
        @cache.cached(...)
        def $HANDLER(...):
          ...
          request.args.get(...)
    - pattern: |
        @app.route("...", methods=[..., "POST", ...])
        @cache.cached(...)
        def $HANDLER(...):
          ...
    - pattern: |
        @app.route("...", methods=[..., "PUT", ...])
        @cache.cached(...)
        def $HANDLER(...):
          ...
    - pattern: |
        @app.route("...", methods=[..., "DELETE", ...])
        @cache.cached(...)
        def $HANDLER(...):
          ...
    - pattern: |
        @app.route("...", methods=[..., "PATCH", ...])
        @cache.cached(...)
        def $HANDLER(...):
          ...
  - pattern-not: |
      @app.route("...")
      @cache.cached(..., query_string=True)
      def $HANDLER(...):
        ...
        request.args.get(...)
  message: Flask-caching doesn't cache query strings by default. You have to use `query_string=True`.
    Also you shouldn't cache verbs that can mutate state.
  severity: WARNING
  languages:
  - python
  metadata:
    category: caching
    technology:
    - flask
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.flask.caching.query-string.flask-cache-query-string
    shortlink: https://sg.run/jROJ
    semgrep.dev:
      rule:
        rule_id: kxUko3
        version_id: 44TePj
        url: https://semgrep.dev/playground/r/44TePj/python.flask.caching.query-string.flask-cache-query-string
        origin: community
- id: python.flask.correctness.access-request-in-wrong-handler.avoid-accessing-request-in-wrong-handler
  patterns:
  - pattern-inside: |
      @app.route(..., method="GET")
      def $X(...):
        ...
  - pattern-either:
    - pattern: "$Y = flask.request.json\n"
    - pattern: "$Y = flask.request.form\n"
    - pattern: "$Y = flask.request.data\n"
  message: Accessing request object inside a route handle for HTTP GET command will
    throw due to missing request body.
  languages:
  - python
  severity: WARNING
  metadata:
    category: correctness
    technology:
    - flask
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.flask.correctness.access-request-in-wrong-handler.avoid-accessing-request-in-wrong-handler
    shortlink: https://sg.run/1ZYv
    semgrep.dev:
      rule:
        rule_id: wdUJe5
        version_id: PkTjry
        url: https://semgrep.dev/playground/r/PkTjry/python.flask.correctness.access-request-in-wrong-handler.avoid-accessing-request-in-wrong-handler
        origin: community
- id: python.lang.compatibility.python36.python36-compatibility-Popen1
  pattern: subprocess.Popen(errors=$X, ...)
  message: the `errors` argument to Popen is only available on Python 3.6+
  languages:
  - python
  severity: ERROR
  metadata:
    category: compatibility
    technology:
    - python
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.compatibility.python36.python36-compatibility-Popen1
    shortlink: https://sg.run/weBP
    semgrep.dev:
      rule:
        rule_id: nJUz7A
        version_id: 44Tejz
        url: https://semgrep.dev/playground/r/44Tejz/python.lang.compatibility.python36.python36-compatibility-Popen1
        origin: community
- id: python.lang.compatibility.python36.python36-compatibility-Popen2
  pattern: subprocess.Popen(encoding=$X, ...)
  message: the `encoding` argument to Popen is only available on Python 3.6+
  languages:
  - python
  severity: ERROR
  metadata:
    category: compatibility
    technology:
    - python
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.compatibility.python36.python36-compatibility-Popen2
    shortlink: https://sg.run/x1Dg
    semgrep.dev:
      rule:
        rule_id: EwU2n3
        version_id: PkTj3B
        url: https://semgrep.dev/playground/r/PkTj3B/python.lang.compatibility.python36.python36-compatibility-Popen2
        origin: community
- id: python.lang.compatibility.python36.python36-compatibility-ssl
  pattern: ssl.get_ciphers()
  message: this function is only available on Python 3.6+
  languages:
  - python
  severity: ERROR
  metadata:
    category: compatibility
    technology:
    - python
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.compatibility.python36.python36-compatibility-ssl
    shortlink: https://sg.run/kXn2
    semgrep.dev:
      rule:
        rule_id: ZqU5wR
        version_id: 3ZTLXP
        url: https://semgrep.dev/playground/r/3ZTLXP/python.lang.compatibility.python36.python36-compatibility-ssl
        origin: community
- id: python.lang.compatibility.python37.python37-compatibility-httpconn
  pattern: http.client.HTTPConnection(blocksize=$X,...)
  message: Found usage of the 'blocksize' argument in a HTTPConnection call. This
    is only available on Python 3.7+ and is therefore not backwards compatible. Remove
    this in order for this code to work in Python 3.6 and below.
  languages:
  - python
  severity: ERROR
  metadata:
    category: compatibility
    technology:
    - python
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.compatibility.python37.python37-compatibility-httpconn
    shortlink: https://sg.run/vzAb
    semgrep.dev:
      rule:
        rule_id: 8GUjbX
        version_id: GxToeD
        url: https://semgrep.dev/playground/r/GxToeD/python.lang.compatibility.python37.python37-compatibility-httpconn
        origin: community
- id: python.lang.compatibility.python37.python37-compatibility-httpsconn
  pattern: http.client.HTTPSConnection(blocksize=$X,...)
  message: Found usage of the 'blocksize' argument in a HTTPSConnection call. This
    is only available on Python 3.7+ and is therefore not backwards compatible. Remove
    this in order for this code to work in Python 3.6 and below.
  languages:
  - python
  severity: ERROR
  metadata:
    category: compatibility
    technology:
    - python
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.compatibility.python37.python37-compatibility-httpsconn
    shortlink: https://sg.run/dKwd
    semgrep.dev:
      rule:
        rule_id: gxU1qd
        version_id: RGT2L2
        url: https://semgrep.dev/playground/r/RGT2L2/python.lang.compatibility.python37.python37-compatibility-httpsconn
        origin: community
- id: python.lang.compatibility.python37.python37-compatibility-importlib
  pattern: importlib.source_hash()
  message: source_hash' is only available on Python 3.7+. This does not work in lower
    versions, and therefore is not backwards compatible. Instead, use another hash
    function.
  languages:
  - python
  severity: ERROR
  metadata:
    category: compatibility
    technology:
    - python
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.compatibility.python37.python37-compatibility-importlib
    shortlink: https://sg.run/OPDn
    semgrep.dev:
      rule:
        rule_id: 7KUQOl
        version_id: JdToxL
        url: https://semgrep.dev/playground/r/JdToxL/python.lang.compatibility.python37.python37-compatibility-importlib
        origin: community
- id: python.lang.compatibility.python37.python37-compatibility-importlib2
  pattern: import importlib.resources
  message: Found 'importlib.resources', which is a module only available on Python
    3.7+. This does not work in lower versions, and therefore is not backwards compatible.
    Use importlib_resources instead for older Python versions.
  languages:
  - python
  severity: ERROR
  metadata:
    category: compatibility
    technology:
    - python
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.compatibility.python37.python37-compatibility-importlib2
    shortlink: https://sg.run/eL3y
    semgrep.dev:
      rule:
        rule_id: L1Uy0n
        version_id: 5PTN1p
        url: https://semgrep.dev/playground/r/5PTN1p/python.lang.compatibility.python37.python37-compatibility-importlib2
        origin: community
- id: python.lang.compatibility.python37.python37-compatibility-importlib3
  pattern: import importlib.abc.ResourceReader
  message: Found usage of 'importlib.abc.ResourceReader'. This module is only available
    on Python 3.7+ and is therefore not backwards compatible. Instead, use another
    loader.
  languages:
  - python
  severity: ERROR
  metadata:
    category: compatibility
    technology:
    - python
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.compatibility.python37.python37-compatibility-importlib3
    shortlink: https://sg.run/Zv2o
    semgrep.dev:
      rule:
        rule_id: QrUzJ9
        version_id: A8TNdJ
        url: https://semgrep.dev/playground/r/A8TNdJ/python.lang.compatibility.python37.python37-compatibility-importlib3
        origin: community
- id: python.lang.compatibility.python37.python37-compatibility-ipv4network1
  pattern: ipaddress.IPv4Network.subnet_of($X)
  message: IPv4Network.subnet_of is only available on Python 3.7+ and is therefore
    not backwards compatible. Instead, check if the subnet is in 'subnets'.
  languages:
  - python
  severity: ERROR
  metadata:
    category: compatibility
    technology:
    - python
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.compatibility.python37.python37-compatibility-ipv4network1
    shortlink: https://sg.run/LwRo
    semgrep.dev:
      rule:
        rule_id: JDUyqR
        version_id: 0bTpzo
        url: https://semgrep.dev/playground/r/0bTpzo/python.lang.compatibility.python37.python37-compatibility-ipv4network1
        origin: community
- id: python.lang.compatibility.python37.python37-compatibility-ipv4network2
  pattern: ipaddress.IPv4Network.supernet_of($X)
  message: IPv4Network.supernet_of is only available on Python 3.7+ and is therefore
    not backwards compatible. Instead, check if the supernet is in 'supernet'.
  languages:
  - python
  severity: ERROR
  metadata:
    category: compatibility
    technology:
    - python
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.compatibility.python37.python37-compatibility-ipv4network2
    shortlink: https://sg.run/8y3E
    semgrep.dev:
      rule:
        rule_id: 5rUO61
        version_id: K3Twkg
        url: https://semgrep.dev/playground/r/K3Twkg/python.lang.compatibility.python37.python37-compatibility-ipv4network2
        origin: community
- id: python.lang.compatibility.python37.python37-compatibility-ipv6network1
  pattern: ipaddress.IPv6Network.subnet_of($X)
  message: IPv6Network.subnet_of is only available on Python 3.7+ and is therefore
    not backwards compatible. Instead, check if the subnet is in 'subnets'.
  languages:
  - python
  severity: ERROR
  metadata:
    category: compatibility
    technology:
    - python
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.compatibility.python37.python37-compatibility-ipv6network1
    shortlink: https://sg.run/EkLe
    semgrep.dev:
      rule:
        rule_id: 4bUko0
        version_id: DkT2bY
        url: https://semgrep.dev/playground/r/DkT2bY/python.lang.compatibility.python37.python37-compatibility-ipv6network1
        origin: community
- id: python.lang.compatibility.python37.python37-compatibility-ipv6network2
  pattern: ipaddress.IPv6Network.supernet_of($X)
  message: IPv6Network.supernet_of is only available on Python 3.7+ and is therefore
    not backwards compatible. Instead, check if the supernet is in 'supernet'.
  languages:
  - python
  severity: ERROR
  metadata:
    category: compatibility
    technology:
    - python
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.compatibility.python37.python37-compatibility-ipv6network2
    shortlink: https://sg.run/7orW
    semgrep.dev:
      rule:
        rule_id: PeUZYr
        version_id: WrTYKq
        url: https://semgrep.dev/playground/r/WrTYKq/python.lang.compatibility.python37.python37-compatibility-ipv6network2
        origin: community
- id: python.lang.compatibility.python37.python37-compatibility-locale1
  pattern: locale.format_string(monetary=$X, ...)
  message: Found usage of the 'monetary' argument in a function call of 'locale.format_string'.
    This is only available on Python 3.7+ and is therefore not backwards compatible.
    Instead, remove the 'monetary' argument.
  languages:
  - python
  severity: ERROR
  metadata:
    category: compatibility
    technology:
    - python
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.compatibility.python37.python37-compatibility-locale1
    shortlink: https://sg.run/gLeZ
    semgrep.dev:
      rule:
        rule_id: GdU72R
        version_id: qkTp7L
        url: https://semgrep.dev/playground/r/qkTp7L/python.lang.compatibility.python37.python37-compatibility-locale1
        origin: community
- id: python.lang.compatibility.python37.python37-compatibility-math1
  pattern: math.remainder($X, $Y)
  message: math.remainder is only available on Python 3.7+ and is therefore not backwards
    compatible. Instead, use math.fmod() or calculate $X - n* $Y.
  languages:
  - python
  severity: ERROR
  metadata:
    category: compatibility
    technology:
    - python
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.compatibility.python37.python37-compatibility-math1
    shortlink: https://sg.run/Q50Q
    semgrep.dev:
      rule:
        rule_id: ReUgbz
        version_id: l4TXR1
        url: https://semgrep.dev/playground/r/l4TXR1/python.lang.compatibility.python37.python37-compatibility-math1
        origin: community
- id: python.lang.compatibility.python37.python37-compatibility-multiprocess1
  pattern: multiprocessing.Process.close()
  message: multiprocessing.Process.close() is only available on Python 3.7+ and is
    therefore not backwards compatible. Instead, use join().
  languages:
  - python
  severity: ERROR
  metadata:
    category: compatibility
    technology:
    - python
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.compatibility.python37.python37-compatibility-multiprocess1
    shortlink: https://sg.run/3xjp
    semgrep.dev:
      rule:
        rule_id: AbUzRA
        version_id: YDTYeO
        url: https://semgrep.dev/playground/r/YDTYeO/python.lang.compatibility.python37.python37-compatibility-multiprocess1
        origin: community
- id: python.lang.compatibility.python37.python37-compatibility-multiprocess2
  pattern: multiprocessing.Process.kill()
  message: multiprocessing.Process.kill() is only available on Python 3.7+ and is
    therefore not backwards compatible. Instead, use terminate().
  languages:
  - python
  severity: ERROR
  metadata:
    category: compatibility
    technology:
    - python
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.compatibility.python37.python37-compatibility-multiprocess2
    shortlink: https://sg.run/4x1z
    semgrep.dev:
      rule:
        rule_id: BYUNE9
        version_id: 6xTy90
        url: https://semgrep.dev/playground/r/6xTy90/python.lang.compatibility.python37.python37-compatibility-multiprocess2
        origin: community
- id: python.lang.compatibility.python37.python37-compatibility-os1
  pattern: os.preadv(...)
  message: os.preadv() is only available on Python 3.7+ and is therefore not backwards
    compatible. Instead, use a combination of os.readv() and os.pread().
  languages:
  - python
  severity: ERROR
  metadata:
    category: compatibility
    technology:
    - python
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.compatibility.python37.python37-compatibility-os1
    shortlink: https://sg.run/PJWW
    semgrep.dev:
      rule:
        rule_id: DbUpQQ
        version_id: o5TKDW
        url: https://semgrep.dev/playground/r/o5TKDW/python.lang.compatibility.python37.python37-compatibility-os1
        origin: community
- id: python.lang.compatibility.python37.python37-compatibility-os2-ok2
  patterns:
  - pattern-not-inside: |
      if hasattr(os, 'pwritev'):
          ...
  - pattern: os.pwritev(...)
  message: os.pwritev() is only available on Python 3.3+ and is therefore not backwards
    compatible. Instead, use a combination of pwrite() and writev().
  languages:
  - python
  severity: ERROR
  metadata:
    category: compatibility
    technology:
    - python
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.compatibility.python37.python37-compatibility-os2-ok2
    shortlink: https://sg.run/5Q9X
    semgrep.dev:
      rule:
        rule_id: 0oU5vW
        version_id: zyTG29
        url: https://semgrep.dev/playground/r/zyTG29/python.lang.compatibility.python37.python37-compatibility-os2-ok2
        origin: community
- id: python.lang.compatibility.python37.python37-compatibility-pdb
  pattern: pdb.set_trace(header=$X, ...)
  message: pdb.set_trace() with the header argument is only available on Python 3.7+
    and is therefore not backwards compatible. Instead, use set_trace() without the
    header argument.
  languages:
  - python
  severity: ERROR
  metadata:
    category: compatibility
    technology:
    - python
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.compatibility.python37.python37-compatibility-pdb
    shortlink: https://sg.run/GeA2
    semgrep.dev:
      rule:
        rule_id: KxUby2
        version_id: pZTb3R
        url: https://semgrep.dev/playground/r/pZTb3R/python.lang.compatibility.python37.python37-compatibility-pdb
        origin: community
- id: python.lang.compatibility.python37.python37-compatibility-textiowrapper
  pattern: TextIOWrapper.reconfigure(...)
  message: Found usage of 'importlib.abc.ResourceReader'. This module is only available
    on Python 3.7+ and is therefore not backwards compatible. Instead, use another
    loader.
  languages:
  - python
  severity: ERROR
  metadata:
    category: compatibility
    technology:
    - python
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.compatibility.python37.python37-compatibility-textiowrapper
    shortlink: https://sg.run/ndL2
    semgrep.dev:
      rule:
        rule_id: 3qUPdy
        version_id: BjTKZr
        url: https://semgrep.dev/playground/r/BjTKZr/python.lang.compatibility.python37.python37-compatibility-textiowrapper
        origin: community
- id: python.sqlalchemy.performance.performance-improvements.batch-import
  pattern: |
    for $X in $Y:
      db.session.add($Z)
  message: Rather than adding one element at a time, consider batch loading to improve
    performance.
  languages:
  - python
  severity: WARNING
  metadata:
    category: performance
    technology:
    - sqlalchemy
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.sqlalchemy.performance.performance-improvements.batch-import
    shortlink: https://sg.run/PprN
    semgrep.dev:
      rule:
        rule_id: AbUWjy
        version_id: JdTodZ
        url: https://semgrep.dev/playground/r/JdTodZ/python.sqlalchemy.performance.performance-improvements.batch-import
        origin: community
- id: python.sqlalchemy.performance.performance-improvements.len-all-count
  pattern: len($X.all())
  message: Using QUERY.count() instead of len(QUERY.all()) sends less data to the
    client since the SQLAlchemy method is performed server-side.
  languages:
  - python
  severity: WARNING
  metadata:
    category: performance
    technology:
    - sqlalchemy
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.sqlalchemy.performance.performance-improvements.len-all-count
    shortlink: https://sg.run/4y8g
    semgrep.dev:
      rule:
        rule_id: ReUPOw
        version_id: PkTjgO
        url: https://semgrep.dev/playground/r/PkTjgO/python.sqlalchemy.performance.performance-improvements.len-all-count
        origin: community
- id: terraform.azure.security.keyvault.keyvault-content-type-for-secret.keyvault-content-type-for-secret
  message: Key vault Secret should have a content type set
  patterns:
  - pattern: resource
  - pattern-not-inside: |
      resource "azurerm_key_vault_secret" "..." {
      ...
      content_type = "..."
      ...
      }
  - pattern-inside: |
      resource "azurerm_key_vault_secret" "..." {
      ...
      }
  metadata:
    category: correctness
    technology:
    - terraform
    - azure
    references:
    - https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/key_vault_secret#content_type
    - https://docs.microsoft.com/en-us/azure/key-vault/secrets/about-secrets
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/terraform.azure.security.keyvault.keyvault-content-type-for-secret.keyvault-content-type-for-secret
    shortlink: https://sg.run/eoAb
    semgrep.dev:
      rule:
        rule_id: 8GUzld
        version_id: 2KT8gD
        url: https://semgrep.dev/playground/r/2KT8gD/terraform.azure.security.keyvault.keyvault-content-type-for-secret.keyvault-content-type-for-secret
        origin: community
  languages:
  - hcl
  severity: INFO
- id: trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules
  message: Usage of NumPy library inside PyTorch `$MODULE` module was found. Avoid
    mixing these libraries for efficiency and proper ONNX loading
  languages:
  - python
  severity: WARNING
  metadata:
    category: performance
    subcategory:
    - audit
    confidence: MEDIUM
    technology:
    - pytorch
    - numpy
    description: Uses of `NumPy` functions inside `PyTorch` modules
    references:
    - https://tanelp.github.io/posts/a-bug-that-plagues-thousands-of-open-source-ml-projects
    license: CC-BY-NC-SA-4.0
    source: https://semgrep.dev/r/trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules
    shortlink: https://sg.run/9vxr
    semgrep.dev:
      rule:
        rule_id: KxU507
        version_id: NdTKpl
        url: https://semgrep.dev/playground/r/NdTKpl/trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules
        origin: community
  patterns:
  - pattern: "$RESULT = numpy.$FUNCTION(...)"
  - pattern-inside: |
      class $MODULE(torch.nn.Module):
          ...
- id: trailofbits.python.pytorch-tensor.pytorch-tensor
  message: Avoid using `torch.Tensor()` to directly create a tensor for efficiency
    and proper parsing
  languages:
  - python
  severity: WARNING
  metadata:
    category: performance
    subcategory:
    - audit
    confidence: HIGH
    technology:
    - pytorch
    description: Possible parsing issues and inefficiency from improper tensor creation
    references:
    - https://pytorch.org/docs/stable/tensors.html
    license: CC-BY-NC-SA-4.0
    source: https://semgrep.dev/r/trailofbits.python.pytorch-tensor.pytorch-tensor
    shortlink: https://sg.run/72xG
    semgrep.dev:
      rule:
        rule_id: JDU4RQ
        version_id: nWTbb8
        url: https://semgrep.dev/playground/r/nWTbb8/trailofbits.python.pytorch-tensor.pytorch-tensor
        origin: community
  pattern: torch.Tensor(...)
- id: typescript.react.best-practice.define-styled-components-on-module-level.define-styled-components-on-module-level
  patterns:
  - pattern-inside: |
      import styled from 'styled-components';
      ...
  - pattern-either:
    - pattern-inside: |
        function $FUNC(...) {
          ...
        }
    - pattern-inside: |
        class $CLASS {
          ...
        }
  - pattern-either:
    - pattern: 'styled.$EL`...`;

        '
    - pattern: 'styled($EL)`...`;

        '
  message: By declaring a styled component inside the render method of a react component,
    you are dynamically creating a new component on every render. This means that
    React will have to discard and re-calculate that part of the DOM subtree on each
    subsequent render, instead of just calculating the difference of what changed
    between them. This leads to performance bottlenecks and unpredictable behavior.
  metadata:
    references:
    - https://styled-components.com/docs/faqs#why-should-i-avoid-declaring-styled-components-in-the-render-method
    category: best-practice
    technology:
    - react
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/typescript.react.best-practice.define-styled-components-on-module-level.define-styled-components-on-module-level
    shortlink: https://sg.run/okq7
    semgrep.dev:
      rule:
        rule_id: j2Uqg5
        version_id: jQTwZL
        url: https://semgrep.dev/playground/r/jQTwZL/typescript.react.best-practice.define-styled-components-on-module-level.define-styled-components-on-module-level
        origin: community
  languages:
  - typescript
  - javascript
  severity: WARNING
- id: typescript.react.best-practice.react-find-dom.react-find-dom
  pattern-either:
  - pattern: 'findDOMNode(...)

      '
  - pattern: "$DOM.findDOMNode(...)\n"
  message: findDOMNode is an escape hatch used to access the underlying DOM node.
    In most cases, use of this escape hatch is discouraged because it pierces the
    component abstraction.
  metadata:
    references:
    - https://react.dev/reference/react-dom/findDOMNode
    - https://github.com/yannickcr/eslint-plugin-react/issues/678#issue-165177220
    category: best-practice
    technology:
    - react
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/typescript.react.best-practice.react-find-dom.react-find-dom
    shortlink: https://sg.run/zkdz
    semgrep.dev:
      rule:
        rule_id: 10UZOv
        version_id: X0TQORq
        url: https://semgrep.dev/playground/r/X0TQORq/typescript.react.best-practice.react-find-dom.react-find-dom
        origin: community
  languages:
  - typescript
  - javascript
  severity: WARNING
- id: typescript.react.best-practice.react-legacy-component.react-legacy-component
  patterns:
  - pattern: |
      $METHOD(...) {
        ...
      }
  - metavariable-regex:
      metavariable: "$METHOD"
      regex: componentWillMount|componentWillReceiveProps|componentWillUpdate
  message: Legacy component lifecycle was detected - $METHOD.
  languages:
  - typescript
  - javascript
  severity: WARNING
  metadata:
    category: best-practice
    technology:
    - react
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/typescript.react.best-practice.react-legacy-component.react-legacy-component
    shortlink: https://sg.run/plK3
    semgrep.dev:
      rule:
        rule_id: 9AUOdB
        version_id: 9lTAK8
        url: https://semgrep.dev/playground/r/9lTAK8/typescript.react.best-practice.react-legacy-component.react-legacy-component
        origin: community
- id: typescript.react.best-practice.react-props-in-state.react-props-in-state
  pattern-either:
  - patterns:
    - pattern-inside: |
        class $CN extends React.Component {
          ...
        }
    - pattern-either:
      - pattern: 'state = {$NAME: <... this.props.$PROP ...>}

          '
      - pattern: 'this.state = {$NAME: <... this.props.$PROP ...>}

          '
    - metavariable-regex:
        metavariable: "$NAME"
        regex: "^(?!default|initial).*$"
  - patterns:
    - pattern-either:
      - pattern-inside: |
          function $FN({$PROP},...) {
            ...
          }
      - pattern-inside: |
          function $FN($PROP,...) {
            ...
          }
    - pattern-either:
      - pattern: useState(<... $PROP ...>)
      - pattern: useState(<... $PROP.$KEY ...>)
      - pattern: |
          useState(function $X(...) {
            ...
            <... $PROP ...>
            ...
          })
      - pattern: |
          useState(function $X(...) {
            ...
            <... $PROP.$KEY ...>
            ...
          })
    - metavariable-regex:
        metavariable: "$PROP"
        regex: "^(?!default|initial).*$"
  message: Copying a prop into state in React -- this is bad practice as all updates
    to it are ignored. Instead, read props directly in your component and avoid copying
    props into state.
  metadata:
    references:
    - https://overreacted.io/writing-resilient-components/#principle-1-dont-stop-the-data-flow
    category: best-practice
    technology:
    - react
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/typescript.react.best-practice.react-props-in-state.react-props-in-state
    shortlink: https://sg.run/2bZz
    semgrep.dev:
      rule:
        rule_id: yyUvRJ
        version_id: vdTJo3
        url: https://semgrep.dev/playground/r/vdTJo3/typescript.react.best-practice.react-props-in-state.react-props-in-state
        origin: community
  languages:
  - typescript
  - javascript
  severity: WARNING
- id: typescript.react.best-practice.react-props-spreading.react-props-spreading
  patterns:
  - pattern: "<$X {...$PROPS} />"
  - focus-metavariable: "$PROPS"
  message: It's best practice to explicitly pass props to an HTML component rather
    than use the spread operator. The spread operator risks passing invalid HTML props
    to an HTML element, which can cause console warnings or worse, give malicious
    actors a way to inject unexpected attributes.
  languages:
  - javascript
  severity: WARNING
  metadata:
    source-rule-url: https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-props-no-spreading.md
    references:
    - https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-props-no-spreading.md
    category: best-practice
    technology:
    - react
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/typescript.react.best-practice.react-props-spreading.react-props-spreading
    shortlink: https://sg.run/XL5l
    semgrep.dev:
      rule:
        rule_id: r6Uky5
        version_id: JdTRyj
        url: https://semgrep.dev/playground/r/JdTRyj/typescript.react.best-practice.react-props-spreading.react-props-spreading
        origin: community
- id: typescript.react.portability.i18next.i18next-key-format.i18next-key-format
  patterns:
  - pattern-either:
    - patterns:
      - pattern-either:
        - pattern: t('$KEY')
        - pattern: t('$KEY', $OPTIONS)
        - pattern: t([$DYNAMIC_KEY, '$KEY'])
        - pattern: t([$DYNAMIC_KEY, '$KEY'], $OPTIONS)
      - metavariable-regex:
          metavariable: "$KEY"
          regex: "(?!^[a-z0-9-]+\\.[a-z0-9-]+\\.[a-zA-Z0-9_.-]+$)"
    - patterns:
      - pattern-either:
        - pattern: t([$DYNAMIC_KEY, '$KEY'])
        - pattern: t([$DYNAMIC_KEY, '$KEY'], $OPTIONS)
      - metavariable-regex:
          metavariable: "$DYNAMIC_KEY"
          regex: "(?!^[`][a-z0-9-]+[.][a-z0-9-]+[.]\\S+$)"
    - patterns:
      - pattern-either:
        - pattern: "$I18NEXT.t('$KEY')"
        - pattern: "$I18NEXT.t('$KEY', $OPTIONS)"
        - pattern: "$I18NEXT.t([$DYNAMIC_KEY, '$KEY'])"
        - pattern: "$I18NEXT.t([$DYNAMIC_KEY, '$KEY'], $OPTIONS)"
      - metavariable-regex:
          metavariable: "$I18NEXT"
          regex: "(^i18n|i18next$)"
      - metavariable-regex:
          metavariable: "$KEY"
          regex: "(?!^[a-z0-9-]+\\.[a-z0-9-]+\\.[a-zA-Z0-9_.-]+$)"
    - patterns:
      - pattern-either:
        - pattern: "$I18NEXT.t([$DYNAMIC_KEY, '$KEY'])"
        - pattern: "$I18NEXT.t([$DYNAMIC_KEY, '$KEY'], $OPTIONS)"
      - metavariable-regex:
          metavariable: "$I18NEXT"
          regex: "(^(i18n|i18next)$)"
      - metavariable-regex:
          metavariable: "$DYNAMIC_KEY"
          regex: "(?!^[`][a-z0-9-]+[.][a-z0-9-]+[.]\\S+$)"
  message: Translation key '$KEY' should match format 'MODULE.FEATURE.*'
  languages:
  - typescript
  - javascript
  severity: WARNING
  metadata:
    category: portability
    technology:
    - react
    - mui
    - i18next
    references:
    - https://www.notion.so/hendyirawan/Internationalization-Localization-Policy-318c21674e5f44c48d6f136a6eb2e024
    - https://mui.com/
    - https://react.i18next.com/
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/typescript.react.portability.i18next.i18next-key-format.i18next-key-format
    shortlink: https://sg.run/Y4oX
    semgrep.dev:
      rule:
        rule_id: oqUKJr
        version_id: 5PTGOw
        url: https://semgrep.dev/playground/r/5PTGOw/typescript.react.portability.i18next.i18next-key-format.i18next-key-format
        origin: community
- id: typescript.react.portability.i18next.jsx-label-not-i18n.jsx-label-not-i18n
  patterns:
  - pattern-either:
    - pattern: <TextField ... label="$MESSAGE" ... />
    - pattern: <Tab ... label="$MESSAGE" ... />
  - metavariable-regex:
      metavariable: "$MESSAGE"
      regex: "(.*[a-zA-Z]+.*)"
  - pattern-not: <$ELEMENT ... label="" ... />
  - pattern-not: "<$ELEMENT ... label={t($KEY, ...)} ... />"
  message: 'JSX Component label not internationalized: ''$MESSAGE'''
  languages:
  - typescript
  - javascript
  severity: WARNING
  metadata:
    category: portability
    technology:
    - react
    - mui
    - i18next
    references:
    - https://www.notion.so/hendyirawan/Internationalization-Localization-Policy-318c21674e5f44c48d6f136a6eb2e024
    - https://mui.com/
    - https://react.i18next.com/
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/typescript.react.portability.i18next.jsx-label-not-i18n.jsx-label-not-i18n
    shortlink: https://sg.run/6kv6
    semgrep.dev:
      rule:
        rule_id: zdUGrY
        version_id: GxTX7Q
        url: https://semgrep.dev/playground/r/GxTX7Q/typescript.react.portability.i18next.jsx-label-not-i18n.jsx-label-not-i18n
        origin: community
- id: typescript.react.portability.i18next.jsx-not-internationalized.jsx-not-internationalized
  patterns:
  - pattern: "<$ELEMENT>$MESSAGE</$ELEMENT>"
  - metavariable-regex:
      metavariable: "$MESSAGE"
      regex: "([A-Za-z\\n ]+[A-Za-z]+[A-Za-z\\n ]+)"
  - pattern-not: "<$ELEMENT>t('$KEY', ...)</$ELEMENT>"
  message: 'JSX element not internationalized: ''$MESSAGE''.  You should support different
    languages in your website or app with internationalization. Instead, use packages
    such as `i18next` in order to internationalize your elements.'
  languages:
  - typescript
  - javascript
  severity: WARNING
  metadata:
    category: portability
    technology:
    - react
    - mui
    - i18next
    references:
    - https://www.notion.so/hendyirawan/Internationalization-Localization-Policy-318c21674e5f44c48d6f136a6eb2e024
    - https://mui.com/
    - https://react.i18next.com/
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/typescript.react.portability.i18next.jsx-not-internationalized.jsx-not-internationalized
    shortlink: https://sg.run/DeKW
    semgrep.dev:
      rule:
        rule_id: KxUwo1
        version_id: RGTxgX
        url: https://semgrep.dev/playground/r/RGTxgX/typescript.react.portability.i18next.jsx-not-internationalized.jsx-not-internationalized
        origin: community
- id: typescript.react.portability.i18next.mui-snackbar-message.mui-snackbar-message
  patterns:
  - pattern: enqueueSnackbar('$MESSAGE', $X2)
  - pattern-not: enqueueSnackbar(t($KEY), $X2)
  message: 'React MUI enqueueSnackbar() title is not internationalized: ''$MESSAGE'''
  languages:
  - typescript
  - javascript
  severity: WARNING
  metadata:
    category: portability
    technology:
    - react
    - mui
    - i18next
    references:
    - https://hendyirawan.notion.site/Internationalization-Localization-Policy-318c21674e5f44c48d6f136a6eb2e024
    - https://mui.com/
    - https://react.i18next.com/
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/typescript.react.portability.i18next.mui-snackbar-message.mui-snackbar-message
    shortlink: https://sg.run/WDvz
    semgrep.dev:
      rule:
        rule_id: qNUpO8
        version_id: A8TlzR
        url: https://semgrep.dev/playground/r/A8TlzR/typescript.react.portability.i18next.mui-snackbar-message.mui-snackbar-message
        origin: community
- id: typescript.react.portability.i18next.useselect-label-not-i18n.useselect-label-not-i18n
  patterns:
  - pattern: useSelect($X1, $X2, '$LABEL', $X4)
  - metavariable-regex:
      metavariable: "$LABEL"
      regex: "(.*[A-Za-z].*)"
  - pattern-not: useSelect($X1, $X2, t('...'), $X4)
  message: React useSelect() label is not internationalized - '$LABEL'. You should
    support different langauges in your website or app with internationalization.
    Instead, use packages such as `i18next` to internationalize your elements.
  languages:
  - typescript
  - javascript
  severity: WARNING
  metadata:
    category: portability
    technology:
    - react
    - mui
    - i18next
    references:
    - https://www.notion.so/hendyirawan/Internationalization-Localization-Policy-318c21674e5f44c48d6f136a6eb2e024
    - https://react.i18next.com/
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/typescript.react.portability.i18next.useselect-label-not-i18n.useselect-label-not-i18n
    shortlink: https://sg.run/oR37
    semgrep.dev:
      rule:
        rule_id: nJUPJL
        version_id: BjTLNY
        url: https://semgrep.dev/playground/r/BjTLNY/typescript.react.portability.i18next.useselect-label-not-i18n.useselect-label-not-i18n
        origin: community
- id: typescript.react.portability.i18next.useselect.react-useselect-label-not-internationalized
  patterns:
  - pattern: useSelect($X1, $X2, '$LABEL', $X4)
  - pattern-not: useSelect($X1, $X2, t('...'), $X4)
  message: React useSelect() label is not internationalized - '$LABEL'
  languages:
  - ts
  - js
  severity: WARNING
  metadata:
    category: portability
    technology:
    - react
    references:
    - https://hendyirawan.notion.site/Internationalization-Localization-Policy-318c21674e5f44c48d6f136a6eb2e024
    - https://react.i18next.com/
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/typescript.react.portability.i18next.useselect.react-useselect-label-not-internationalized
    shortlink: https://sg.run/0WAJ
    semgrep.dev:
      rule:
        rule_id: lBUXZO
        version_id: GxT8P7
        url: https://semgrep.dev/playground/r/GxT8P7/typescript.react.portability.i18next.useselect.react-useselect-label-not-internationalized
        origin: community
