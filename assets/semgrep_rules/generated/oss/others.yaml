---
rules:
- id: gitlab.bandit.B101
  patterns:
  - pattern: assert(...)
  - pattern-not-inside: |
      import pytest
      ...
  - pattern-not-inside: |
      import unittest
      ...
  message: |
    Use of assert detected. The enclosed code will be removed when
    compiling to optimised byte code.
  metadata:
    cwe: 'CWE-754: Improper Check for Unusual or Exceptional Conditions'
    primary_identifier: bandit.B101
    secondary_identifiers:
    - name: Bandit Test ID B101
      type: bandit_test_id
      value: B101
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B101
    shortlink: https://sg.run/yzWA
    semgrep.dev:
      rule:
        rule_id: KxU4lp
        version_id: rxTqOv
        url: https://semgrep.dev/playground/r/rxTqOv/gitlab.bandit.B101
        origin: custom
  severity: INFO
  languages:
  - python
- id: gitlab.bandit.B102
  pattern-either:
  - pattern: exec(...)
  - pattern: exec("...")
  message: 'The use of `exec` is risky.

    '
  metadata:
    cwe: 'CWE-78: Improper Neutralization of Special Elements used in an OS Command
      (''OS Command Injection'')'
    owasp: 'A1: Injection'
    primary_identifier: bandit.B102
    secondary_identifiers:
    - name: Bandit Test ID B102
      type: bandit_test_id
      value: B102
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B102
    shortlink: https://sg.run/rAJJ
    semgrep.dev:
      rule:
        rule_id: qNUoNN
        version_id: bZTrA3
        url: https://semgrep.dev/playground/r/bZTrA3/gitlab.bandit.B102
        origin: custom
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B103
  patterns:
  - pattern: os.chmod(...,$MASK)
  - metavariable-regex:
      metavariable: "$MASK"
      regex: "(0x..f|0o..[2,3,7]|stat.S_IXGRP|stat.S_IWOTH)"
  message: Chmod setting a permissive mask on file.
  metadata:
    cwe: 'CWE-732: Incorrect Permission Assignment for Critical Resource'
    owasp: 'A6: Security Misconfiguration'
    primary_identifier: bandit.B103
    secondary_identifiers:
    - name: Bandit Test ID B103
      type: bandit_test_id
      value: B103
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B103
    shortlink: https://sg.run/bDNv
    semgrep.dev:
      rule:
        rule_id: lBUd5P
        version_id: NdTLDj
        url: https://semgrep.dev/playground/r/NdTLDj/gitlab.bandit.B103
        origin: custom
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B104
  patterns:
  - pattern-either:
    - pattern: |
        $S = socket.socket(...)
        ...
        $S.bind(("0.0.0.0", ...))
    - pattern: |
        $S = socket.socket(...)
        ...
        $S.bind(("::", ...))
    - pattern: |
        $S = socket.socket(...)
        ...
        $S.bind(("", ...))
  message: |
    Running `socket.bind` to 0.0.0.0, ::, or empty string could unexpectedly
    expose the server publicly as it binds to all available interfaces. Consider
    instead getting correct address from an environment variable or
    configuration file.
  metadata:
    cwe: 'CWE-200: Exposure of Sensitive Information to an Unauthorized Actor'
    owasp: 'A6: Security Misconfiguration'
    primary_identifier: bandit.B104
    secondary_identifiers:
    - name: Bandit Test ID B104
      type: bandit_test_id
      value: B104
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B104
    shortlink: https://sg.run/NrBN
    semgrep.dev:
      rule:
        rule_id: YGUroX
        version_id: kbTpKX
        url: https://semgrep.dev/playground/r/kbTpKX/gitlab.bandit.B104
        origin: custom
  severity: INFO
  languages:
  - python
- id: gitlab.bandit.B105
  patterns:
  - pattern-either:
    - pattern: $MASK == "..."
    - pattern: $MASK = "..."
  - metavariable-regex:
      metavariable: "$MASK"
      regex: "[^\\[]*([Pp][Aa][Ss][Ss][Ww][Oo][Rr][Dd]|pass|passwd|pwd|secret|token|secrete)[^\\]]*"
  message: 'Possible hardcoded password

    '
  metadata:
    cwe: 'CWE-259: Use of Hard-coded Password'
    owasp: 'A3: Broken Authentication and Session Management'
    primary_identifier: bandit.B105
    secondary_identifiers:
    - name: Bandit Test ID B105
      type: bandit_test_id
      value: B105
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B105
    shortlink: https://sg.run/kL4A
    semgrep.dev:
      rule:
        rule_id: 6JUqKb
        version_id: w8Tr1Z
        url: https://semgrep.dev/playground/r/w8Tr1Z/gitlab.bandit.B105
        origin: custom
  severity: INFO
  languages:
  - python
- id: gitlab.bandit.B106
  patterns:
  - pattern: $FUNC(..., $PW="...", ...)
  - metavariable-regex:
      metavariable: "$PW"
      regex: ".*([Pp][Aa][Ss][Ss][Ww][Oo][Rr][Dd]|pass|passwd|pwd|secret|token|secrete).*"
  message: 'Possible hardcoded password

    '
  metadata:
    cwe: 'CWE-259: Use of Hard-coded Password'
    owasp: 'A3: Broken Authentication and Session Management'
    primary_identifier: bandit.B106
    secondary_identifiers:
    - name: Bandit Test ID B106
      type: bandit_test_id
      value: B106
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B106
    shortlink: https://sg.run/wxqd
    semgrep.dev:
      rule:
        rule_id: oqUzxg
        version_id: xyTOLY
        url: https://semgrep.dev/playground/r/xyTOLY/gitlab.bandit.B106
        origin: custom
  severity: INFO
  languages:
  - python
- id: gitlab.bandit.B107
  patterns:
  - pattern: |
      def $FUNC(..., password="...", ...):
        ...
  message: |
    Hardcoded password is used as a default argument to '$FUNC'. This could be dangerous if
    a real password is not supplied.
  metadata:
    cwe: 'CWE-259: Use of Hard-coded Password'
    owasp: 'A3: Broken Authentication and Session Management'
    primary_identifier: bandit.B107
    secondary_identifiers:
    - name: Bandit Test ID B107
      type: bandit_test_id
      value: B107
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B107
    shortlink: https://sg.run/xYly
    semgrep.dev:
      rule:
        rule_id: zdUyRj
        version_id: O9Tzjy
        url: https://semgrep.dev/playground/r/O9Tzjy/gitlab.bandit.B107
        origin: custom
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B108
  pattern: open("=~/^\/tmp.*/", ...)
  message: 'Detected hardcoded temp directory. Consider using ''tempfile.TemporaryFile''
    instead.

    '
  metadata:
    cwe: 'CWE-377: Insecure Temporary File'
    primary_identifier: bandit.B108
    secondary_identifiers:
    - name: Bandit Test ID B108
      type: bandit_test_id
      value: B108
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B108
    shortlink: https://sg.run/QRL4
    semgrep.dev:
      rule:
        rule_id: 0oU6oJ
        version_id: e1T5Rd
        url: https://semgrep.dev/playground/r/e1T5Rd/gitlab.bandit.B108
        origin: custom
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B108-1
  pattern: open("=~/^\/tmp.*/", ...)
  message: 'Detected hardcoded temp directory. Consider using ''tempfile.TemporaryFile''
    instead.

    '
  metadata:
    cwe: 'CWE-377: Insecure Temporary File'
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B108-1
    shortlink: https://sg.run/O81B
    semgrep.dev:
      rule:
        rule_id: 6JU6qd
        version_id: l4TzRP
        url: https://semgrep.dev/playground/r/l4TzRP/gitlab.bandit.B108-1
        origin: custom
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B108-2
  patterns:
  - pattern: open($DIR, ...)
  - metavariable-regex:
      metavariable: "$DIR"
      regex: '[''"](/tmp|/var/tmp|/dev/shm).*[''"]'
  message: 'Probable insecure usage of temp file/directory.

    '
  metadata:
    cwe: 'CWE-377: Insecure Temporary File'
    primary_identifier: bandit.B108-2
    secondary_identifiers:
    - name: Bandit Test ID B108
      type: bandit_test_id
      value: B108
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B108-2
    shortlink: https://sg.run/O1Yk
    semgrep.dev:
      rule:
        rule_id: pKUGl6
        version_id: vdTgrW
        url: https://semgrep.dev/playground/r/vdTgrW/gitlab.bandit.B108-2
        origin: custom
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B110
  pattern-either:
  - pattern: |
      try: ...
      except $EXCEPTION: pass
  - pattern: |
      try: ...
      except $EXCEPTION as $X: pass
  - pattern: |
      try: ...
      except ... : ...
      except $EXCEPTION: pass
  - pattern: |
      try: ...
      except $EXCEPTION: pass
      except ... : ...
  - pattern: |
      try: ...
      except ... : ...
      except $EXCEPTION as $X: pass
  - pattern: |
      try: ...
      except $EXCEPTION as $X: pass
      except ... : ...
  - pattern: |
      try: ...
      except ... : ...
      except ... : ...
      except $EXCEPTION: pass
  - pattern: |
      try: ...
      except $EXCEPTION: pass
      except ... : ...
      except ... : ...
  - pattern: |
      try: ...
      except ... : ...
      except $EXCEPTION: pass
      except ... : ...
  - pattern: |
      try: ...
      except ... : ...
      except ... : ...
      except $EXCEPTION as $X: pass
  - pattern: |
      try: ...
      except $EXCEPTION as $X: pass
      except ... : ...
      except ... : ...
  - pattern: |
      try: ...
      except ... : ...
      except $EXCEPTION as $X: pass
      except ... : ...
  - pattern: |
      try: ...
      except ... : ...
      except ... : ...
      except ... : ...
      except $EXCEPTION: pass
  - pattern: |
      try: ...
      except $EXCEPTION: pass
      except ... : ...
      except ... : ...
      except ... : ...
  - pattern: |
      try: ...
      except ... : ...
      except $EXCEPTION: pass
      except ... : ...
      except ... : ...
  - pattern: |
      try: ...
      except ... : ...
      except ... : ...
      except $EXCEPTION: pass
      except ... : ...
  - pattern: |
      try: ...
      except ... : ...
      except ... : ...
      except ... : ...
      except $EXCEPTION: pass
  - pattern: |
      try: ...
      except ... : ...
      except ... : ...
      except ... : ...
      except $EXCEPTION as $X: pass
  - pattern: |
      try: ...
      except $EXCEPTION as $X: pass
      except ... : ...
      except ... : ...
      except ... : ...
  - pattern: |
      try: ...
      except ... : ...
      except $EXCEPTION as $X: pass
      except ... : ...
      except ... : ...
  - pattern: |
      try: ...
      except ... : ...
      except ... : ...
      except $EXCEPTION as $X: pass
      except ... : ...
  - pattern: |
      try: ...
      except ... : ...
      except ... : ...
      except ... : ...
      except $EXCEPTION as $X: pass
  message: 'Try, Except, Pass

    '
  metadata:
    cwe: 'CWE-703: Improper Check or Handling of Exceptional Conditions'
    primary_identifier: bandit.B110
    secondary_identifiers:
    - name: Bandit Test ID B110
      type: bandit_test_id
      value: B110
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B110
    shortlink: https://sg.run/e4nL
    semgrep.dev:
      rule:
        rule_id: 2ZU40b
        version_id: nWTjxO
        url: https://semgrep.dev/playground/r/nWTjxO/gitlab.bandit.B110
        origin: custom
  severity: INFO
  languages:
  - python
- id: gitlab.bandit.B112
  pattern-either:
  - pattern: |
      try: ...
      except $EXCEPTION: continue
  - pattern: |
      try: ...
      except $EXCEPTION as $X: continue
  - pattern: |
      try: ...
      except ... : ...
      except $EXCEPTION: continue
  - pattern: |
      try: ...
      except $EXCEPTION: continue
      except ... : ...
  - pattern: |
      try: ...
      except ... : ...
      except $EXCEPTION as $X: continue
  - pattern: |
      try: ...
      except $EXCEPTION as $X: continue
      except ... : ...
  - pattern: |
      try: ...
      except ... : ...
      except ... : ...
      except $EXCEPTION: continue
  - pattern: |
      try: ...
      except $EXCEPTION: continue
      except ... : ...
      except ... : ...
  - pattern: |
      try: ...
      except ... : ...
      except $EXCEPTION: continue
      except ... : ...
  - pattern: |
      try: ...
      except ... : ...
      except ... : ...
      except $EXCEPTION as $X: continue
  - pattern: |
      try: ...
      except $EXCEPTION as $X: continue
      except ... : ...
      except ... : ...
  - pattern: |
      try: ...
      except ... : ...
      except $EXCEPTION as $X: continue
      except ... : ...
  - pattern: |
      try: ...
      except ... : ...
      except ... : ...
      except ... : ...
      except $EXCEPTION: continue
  - pattern: |
      try: ...
      except $EXCEPTION: continue
      except ... : ...
      except ... : ...
      except ... : ...
  - pattern: |
      try: ...
      except ... : ...
      except $EXCEPTION: continue
      except ... : ...
      except ... : ...
  - pattern: |
      try: ...
      except ... : ...
      except ... : ...
      except $EXCEPTION: continue
      except ... : ...
  - pattern: |
      try: ...
      except ... : ...
      except ... : ...
      except ... : ...
      except $EXCEPTION: continue
  - pattern: |
      try: ...
      except ... : ...
      except ... : ...
      except ... : ...
      except $EXCEPTION as $X: continue
  - pattern: |
      try: ...
      except $EXCEPTION as $X: continue
      except ... : ...
      except ... : ...
      except ... : ...
  - pattern: |
      try: ...
      except ... : ...
      except $EXCEPTION as $X: continue
      except ... : ...
      except ... : ...
  - pattern: |
      try: ...
      except ... : ...
      except ... : ...
      except $EXCEPTION as $X: continue
      except ... : ...
  - pattern: |
      try: ...
      except ... : ...
      except ... : ...
      except ... : ...
      except $EXCEPTION as $X: continue
  message: 'Try, Except, Continue

    '
  metadata:
    cwe: 'CWE-703: Improper Check or Handling of Exceptional Conditions'
    primary_identifier: bandit.B112
    secondary_identifiers:
    - name: Bandit Test ID B112
      type: bandit_test_id
      value: B112
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B112
    shortlink: https://sg.run/v0K0
    semgrep.dev:
      rule:
        rule_id: X5UZ3Z
        version_id: ZRTnQQ
        url: https://semgrep.dev/playground/r/ZRTnQQ/gitlab.bandit.B112
        origin: custom
  severity: INFO
  languages:
  - python
- id: gitlab.bandit.B113
  patterns:
  - pattern-either:
    - patterns:
      - pattern: requests.$METHOD('...', timeout=$VAL)
      - metavariable-comparison:
          metavariable: "$VAL"
          comparison: "$VAL <= 0"
    - patterns:
      - pattern: requests.$METHOD('...', timeout=$VAL)
      - metavariable-regex:
          metavariable: "$VAL"
          regex: "(^None)"
    - patterns:
      - pattern-not: requests.$METHOD('...', timeout=$VAL)
      - pattern-either:
        - pattern: requests.$METHOD('...', ...)
        - pattern: requests.$METHOD('...')
  - metavariable-regex:
      metavariable: "$METHOD"
      regex: "(get|put|delete|post|options|head|patch)"
  message: 'Requests call without timeout can cause your program to hang indefinitely.

    '
  metadata:
    cwe: 'CWE-400: Uncontrolled Resource Consumption'
    primary_identifier: bandit.B113
    secondary_identifiers:
    - name: Bandit Test ID B113
      type: bandit_test_id
      value: B113
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B113
    shortlink: https://sg.run/PoEq
    semgrep.dev:
      rule:
        rule_id: OrULKb
        version_id: bZTrdW
        url: https://semgrep.dev/playground/r/bZTrdW/gitlab.bandit.B113
        origin: custom
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B201
  patterns:
  - pattern-inside: |
      import flask
      ...
  - pattern: "$APP.run(..., debug=True, ...)"
  message: |
    Detected Flask app with debug=True. Do not deploy to production with this flag enabled
    as it will leak sensitive information. Instead, consider using Flask configuration
    variables or setting 'debug' using system environment variables.
  metadata:
    cwe: 'CWE-489: Active Debug Code'
    owasp: 'A6: Security Misconfiguration'
    primary_identifier: bandit.B201
    secondary_identifiers:
    - name: Bandit Test ID B201
      type: bandit_test_id
      value: B201
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B201
    shortlink: https://sg.run/eK4b
    semgrep.dev:
      rule:
        rule_id: oqUrz7
        version_id: d6T1rw
        url: https://semgrep.dev/playground/r/d6T1rw/gitlab.bandit.B201
        origin: custom
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B202
  patterns:
  - pattern-inside: |
      import tarfile
      ...
  - pattern-either:
    - patterns:
      - pattern-inside: |
          $TAR = tarfile.open(...)
          ...
      - pattern-either:
        - pattern: "$TAR.extractall(...)"
        - pattern: tarfile.extractall(..., members=$TAR)
        - pattern: "$TAR.extractall(..., members=[])"
    - patterns:
      - pattern: tarfile.extractall(...)
      - pattern: tarfile.extractall(..., members=[])
  message: |
    tarfile.extractall used without any validation. You should check members and discard dangerous
    ones.
  metadata:
    cwe: 'CWE-22: Improper Limitation of a Pathname to a Restricted Directory (''Path
      Traversal'')'
    primary_identifier: bandit.B202
    secondary_identifiers:
    - name: Bandit Test ID B202
      type: bandit_test_id
      value: B202
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B202
    shortlink: https://sg.run/J0EQ
    semgrep.dev:
      rule:
        rule_id: eqUPXn
        version_id: NdTLj0
        url: https://semgrep.dev/playground/r/NdTLj0/gitlab.bandit.B202
        origin: custom
  severity: ERROR
  languages:
  - python
- id: gitlab.bandit.B301-1
  pattern-either:
  - pattern: pickle.$FUNC(...)
  - pattern: _pickle.$FUNC(...)
  message: |
    Avoid using `pickle`, which is known to lead to code execution vulnerabilities.
    When unpickling, the serialized data could be manipulated to run arbitrary code.
    Instead, consider serializing the relevant data as JSON or a similar text-based
    serialization format.
  metadata:
    cwe: 'CWE-502: Deserialization of Untrusted Data'
    owasp: 'A8: Insecure Deserialization'
    primary_identifier: bandit.B301-1
    secondary_identifiers:
    - name: Bandit Test ID B301-1
      type: bandit_test_id
      value: B301-1
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B301-1
    shortlink: https://sg.run/v20A
    semgrep.dev:
      rule:
        rule_id: zdU1y5
        version_id: ExTOjp
        url: https://semgrep.dev/playground/r/ExTOjp/gitlab.bandit.B301-1
        origin: custom
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B301-2
  pattern: cPickle.$FUNC(...)
  message: |
    Avoid using `cPickle`, which is known to lead to code execution vulnerabilities.
    When unpickling, the serialized data could be manipulated to run arbitrary code.
    Instead, consider serializing the relevant data as JSON or a similar text-based
    serialization format.
  metadata:
    cwe: 'CWE-502: Deserialization of Untrusted Data'
    owasp: 'A8: Insecure Deserialization'
    primary_identifier: bandit.B301-2
    secondary_identifiers:
    - name: Bandit Test ID B301
      type: bandit_test_id
      value: B301
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B301-2
    shortlink: https://sg.run/d0gZ
    semgrep.dev:
      rule:
        rule_id: pKUwGl
        version_id: 2KTe6z
        url: https://semgrep.dev/playground/r/2KTe6z/gitlab.bandit.B301-2
        origin: custom
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B301-3
  pattern-either:
  - pattern: dill.$FUNC(...)
  message: |
    Avoid using `dill`, which uses `pickle`, which is known to lead to code execution vulnerabilities.
    When unpickling, the serialized data could be manipulated to run arbitrary code.
    Instead, consider serializing the relevant data as JSON or a similar text-based
    serialization format.
  metadata:
    cwe: 'CWE-502: Deserialization of Untrusted Data'
    owasp: 'A8: Insecure Deserialization'
    primary_identifier: bandit.B301-3
    secondary_identifiers:
    - name: Bandit Test ID B301
      type: bandit_test_id
      value: B301
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B301-3
    shortlink: https://sg.run/dgZ0
    semgrep.dev:
      rule:
        rule_id: j2UqZR
        version_id: X0TEJO
        url: https://semgrep.dev/playground/r/X0TEJO/gitlab.bandit.B301-3
        origin: custom
  languages:
  - python
  severity: WARNING
- id: gitlab.bandit.B301-4
  pattern-either:
  - pattern: shelve.$FUNC(...)
  message: |
    Avoid using `shelve`, which uses `pickle`, which is known to lead to code execution vulnerabilities.
    When unpickling, the serialized data could be manipulated to run arbitrary code.
    Instead, consider serializing the relevant data as JSON or a similar text-based
    serialization format.
  metadata:
    cwe: 'CWE-502: Deserialization of Untrusted Data'
    owasp: 'A8: Insecure Deserialization'
    primary_identifier: bandit.B301-4
    secondary_identifiers:
    - name: Bandit Test ID B301
      type: bandit_test_id
      value: B301
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B301-4
    shortlink: https://sg.run/Zer4
    semgrep.dev:
      rule:
        rule_id: 10UZxd
        version_id: jQTW96
        url: https://semgrep.dev/playground/r/jQTW96/gitlab.bandit.B301-4
        origin: custom
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B302
  pattern-either:
  - pattern: marshal.dump(...)
  - pattern: marshal.dumps(...)
  - pattern: marshal.load(...)
  - pattern: marshal.loads(...)
  message: |
    The marshal module is not intended to be secure against erroneous or maliciously constructed data.
    Never unmarshal data received from an untrusted or unauthenticated source.
    See more details: https://docs.python.org/3/library/marshal.html?highlight=security
  metadata:
    cwe: 'CWE-502: Deserialization of Untrusted Data'
    owasp: 'A8: Insecure Deserialization'
    primary_identifier: bandit.B302
    secondary_identifiers:
    - name: Bandit Test ID B302
      type: bandit_test_id
      value: B302
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B302
    shortlink: https://sg.run/ZkeD
    semgrep.dev:
      rule:
        rule_id: 2ZUK4W
        version_id: gETj3g
        url: https://semgrep.dev/playground/r/gETj3g/gitlab.bandit.B302
        origin: custom
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B303-1
  pattern: hashlib.md5(...)
  message: |
    Detected MD5 hash algorithm which is considered insecure. MD5 is not
    collision resistant and is therefore not suitable as a cryptographic
    signature. Use SHA256 or SHA3 instead.
  metadata:
    cwe: 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp: 'A3: Sensitive Data Exposure'
    primary_identifier: bandit.B303-1
    secondary_identifiers:
    - name: Bandit Test ID B303
      type: bandit_test_id
      value: B303
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B303-1
    shortlink: https://sg.run/nkkX
    semgrep.dev:
      rule:
        rule_id: X5U77W
        version_id: QkTDWn
        url: https://semgrep.dev/playground/r/QkTDWn/gitlab.bandit.B303-1
        origin: custom
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B303-2
  pattern: hashlib.sha1(...)
  message: |
    Detected SHA1 hash algorithm which is considered insecure. SHA1 is not
    collision resistant and is therefore not suitable as a cryptographic
    signature. Use SHA256 or SHA3 instead.
  metadata:
    cwe: 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp: 'A3: Sensitive Data Exposure'
    primary_identifier: bandit.B303-2
    secondary_identifiers:
    - name: Bandit Test ID B303
      type: bandit_test_id
      value: B303
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B303-2
    shortlink: https://sg.run/EOOw
    semgrep.dev:
      rule:
        rule_id: j2URRg
        version_id: 3ZTnk3
        url: https://semgrep.dev/playground/r/3ZTnk3/gitlab.bandit.B303-2
        origin: custom
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B303-3
  patterns:
  - pattern-either:
    - pattern: Crypto.Hash.MD2.new(...)
    - pattern: Cryptodome.Hash.MD2.new (...)
  message: |
    Detected MD2 hash algorithm which is considered insecure. This algorithm
    has many known vulnerabilities and has been deprecated. Use SHA256 or SHA3 instead.
  metadata:
    cwe: 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp: 'A3: Sensitive Data Exposure'
    primary_identifier: bandit.B303-3
    secondary_identifiers:
    - name: Bandit Test ID B303
      type: bandit_test_id
      value: B303
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B303-3
    shortlink: https://sg.run/nq5r
    semgrep.dev:
      rule:
        rule_id: 9AUOKZ
        version_id: 44TpRe
        url: https://semgrep.dev/playground/r/44TpRe/gitlab.bandit.B303-3
        origin: custom
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B303-4
  patterns:
  - pattern-either:
    - pattern: Crypto.Hash.MD4.new(...)
    - pattern: Cryptodome.Hash.MD4.new (...)
  message: |
    Detected MD4 hash algorithm which is considered insecure. This algorithm
    has many known vulnerabilities and has been deprecated. Use SHA256 or SHA3 instead.
  metadata:
    cwe: 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp: 'A3: Sensitive Data Exposure'
    primary_identifier: bandit.B303-4
    secondary_identifiers:
    - name: Bandit Test ID B303
      type: bandit_test_id
      value: B303
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B303-4
    shortlink: https://sg.run/E5GB
    semgrep.dev:
      rule:
        rule_id: yyUvLN
        version_id: PkTvJQ
        url: https://semgrep.dev/playground/r/PkTvJQ/gitlab.bandit.B303-4
        origin: custom
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B303-5
  patterns:
  - pattern-either:
    - pattern: Crypto.Hash.MD5.new(...)
    - pattern: Cryptodome.Hash.MD5.new (...)
  message: |
    Detected MD5 hash algorithm which is considered insecure. MD5 is not
    collision resistant and is therefore not suitable as a cryptographic
    signature. Use SHA256 or SHA3 instead.
  metadata:
    cwe: 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp: 'A3: Sensitive Data Exposure'
    primary_identifier: bandit.B303-5
    secondary_identifiers:
    - name: Bandit Test ID B303
      type: bandit_test_id
      value: B303
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B303-5
    shortlink: https://sg.run/70eQ
    semgrep.dev:
      rule:
        rule_id: r6UkYj
        version_id: JdTbNp
        url: https://semgrep.dev/playground/r/JdTbNp/gitlab.bandit.B303-5
        origin: custom
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B303-6
  patterns:
  - pattern-either:
    - pattern: Crypto.Hash.SHA.new(...)
    - pattern: Cryptodome.Hash.SHA.new (...)
  message: |
    Detected SHA1 hash algorithm which is considered insecure. SHA1 is not
    collision resistant and is therefore not suitable as a cryptographic
    signature. Use SHA256 or SHA3 instead.
  metadata:
    cwe: 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp: 'A3: Sensitive Data Exposure'
    primary_identifier: bandit.B303-6
    secondary_identifiers:
    - name: Bandit Test ID B303
      type: bandit_test_id
      value: B303
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B303-6
    shortlink: https://sg.run/L0KY
    semgrep.dev:
      rule:
        rule_id: bwUOkX
        version_id: 5PTjde
        url: https://semgrep.dev/playground/r/5PTjde/gitlab.bandit.B303-6
        origin: custom
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B303-7
  pattern: cryptography.hazmat.primitives.hashes.MD5(...)
  message: |
    Detected MD5 hash algorithm which is considered insecure. MD5 is not
    collision resistant and is therefore not suitable as a cryptographic
    signature. Use SHA256 or SHA3 instead.
  metadata:
    cwe: 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp: 'A3: Sensitive Data Exposure'
    primary_identifier: bandit.B303-7
    secondary_identifiers:
    - name: Bandit Test ID B303
      type: bandit_test_id
      value: B303
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B303-7
    shortlink: https://sg.run/7GGZ
    semgrep.dev:
      rule:
        rule_id: 10Ueez
        version_id: GxTyvk
        url: https://semgrep.dev/playground/r/GxTyvk/gitlab.bandit.B303-7
        origin: custom
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B303-8
  pattern: cryptography.hazmat.primitives.hashes.SHA1(...)
  message: |
    Detected SHA1 hash algorithm which is considered insecure. SHA1 is not
    collision resistant and is therefore not suitable as a cryptographic
    signature. Use SHA256 or SHA3 instead.
  metadata:
    cwe: 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp: 'A3: Sensitive Data Exposure'
    primary_identifier: bandit.B303-8
    secondary_identifiers:
    - name: Bandit Test ID B303
      type: bandit_test_id
      value: B303
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B303-8
    shortlink: https://sg.run/L88r
    semgrep.dev:
      rule:
        rule_id: 9AUkko
        version_id: RGT7Dp
        url: https://semgrep.dev/playground/r/RGT7Dp/gitlab.bandit.B303-8
        origin: custom
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B304-1
  patterns:
  - pattern-either:
    - pattern: Crypto.Hash.MD2.new(...)
    - pattern: Cryptodome.Hash.MD2.new (...)
  message: |
    Detected MD2 hash algorithm which is considered insecure. This algorithm
    has many known vulnerabilities and has been deprecated. Use SHA256 or SHA3 instead.
  metadata:
    cwe: 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp: 'A3: Sensitive Data Exposure'
    primary_identifier: bandit.B304-1
    secondary_identifiers:
    - name: Bandit Test ID B304-1
      type: bandit_test_id
      value: B304-1
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B304-1
    shortlink: https://sg.run/8RRy
    semgrep.dev:
      rule:
        rule_id: yyUyyn
        version_id: A8T89E
        url: https://semgrep.dev/playground/r/A8T89E/gitlab.bandit.B304-1
        origin: custom
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B304-10
  pattern: cryptography.hazmat.primitives.ciphers.algorithms.ARC4(...)
  message: |
    Detected RC4 cipher algorithm which is considered insecure. The algorithm has many
    known vulnerabilities. Use AES instead.
  metadata:
    cwe: 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp: 'A3: Sensitive Data Exposure'
    primary_identifier: bandit.B304-10
    secondary_identifiers:
    - name: Bandit Test ID B304
      type: bandit_test_id
      value: B304
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B304-10
    shortlink: https://sg.run/4PPl
    semgrep.dev:
      rule:
        rule_id: kxU886
        version_id: 6xT3vO
        url: https://semgrep.dev/playground/r/6xT3vO/gitlab.bandit.B304-10
        origin: custom
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B304-11
  pattern: cryptography.hazmat.primitives.ciphers.algorithms.Blowfish(...)
  message: |
    Detected Blowfish cipher algorithm which is considered insecure. The algorithm has many
    known vulnerabilities. Use AES instead.
  metadata:
    cwe: 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp: 'A3: Sensitive Data Exposure'
    primary_identifier: bandit.B304-11
    secondary_identifiers:
    - name: Bandit Test ID B304
      type: bandit_test_id
      value: B304
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B304-11
    shortlink: https://sg.run/P88Y
    semgrep.dev:
      rule:
        rule_id: wdUGGA
        version_id: o5Tvgp
        url: https://semgrep.dev/playground/r/o5Tvgp/gitlab.bandit.B304-11
        origin: custom
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B304-12
  pattern: cryptography.hazmat.primitives.ciphers.algorithms.IDEA(...)
  message: |
    Detected IDEA cipher algorithm which is considered insecure. The algorithm is
    considered weak and has been deprecated. Use AES instead.
  metadata:
    cwe: 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp: 'A3: Sensitive Data Exposure'
    primary_identifier: bandit.B304-12
    secondary_identifiers:
    - name: Bandit Test ID B304
      type: bandit_test_id
      value: B304
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B304-12
    shortlink: https://sg.run/Jjjw
    semgrep.dev:
      rule:
        rule_id: x8U22d
        version_id: zyTdKw
        url: https://semgrep.dev/playground/r/zyTdKw/gitlab.bandit.B304-12
        origin: custom
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B304-2
  patterns:
  - pattern-either:
    - pattern: Crypto.Hash.MD4.new(...)
    - pattern: Cryptodome.Hash.MD4.new (...)
  message: |
    Detected MD4 hash algorithm which is considered insecure. This algorithm
    has many known vulnerabilities and has been deprecated. Use SHA256 or SHA3 instead.
  metadata:
    cwe: 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp: 'A3: Sensitive Data Exposure'
    primary_identifier: bandit.B304-2
    secondary_identifiers:
    - name: Bandit Test ID B304
      type: bandit_test_id
      value: B304
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B304-2
    shortlink: https://sg.run/grrJ
    semgrep.dev:
      rule:
        rule_id: r6U99k
        version_id: BjT5XJ
        url: https://semgrep.dev/playground/r/BjT5XJ/gitlab.bandit.B304-2
        origin: custom
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B304-3
  patterns:
  - pattern-either:
    - pattern: Crypto.Hash.MD5.new(...)
    - pattern: Cryptodome.Hash.MD5.new (...)
  message: |
    Detected MD5 hash algorithm which is considered insecure. MD5 is not
    collision resistant and is therefore not suitable as a cryptographic
    signature. Use SHA256 or SHA3 instead.
  metadata:
    cwe: 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp: 'A3: Sensitive Data Exposure'
    primary_identifier: bandit.B304-3
    secondary_identifiers:
    - name: Bandit Test ID B304
      type: bandit_test_id
      value: B304
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B304-3
    shortlink: https://sg.run/Q444
    semgrep.dev:
      rule:
        rule_id: bwUNNN
        version_id: DkTJ67
        url: https://semgrep.dev/playground/r/DkTJ67/gitlab.bandit.B304-3
        origin: custom
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B304-4
  patterns:
  - pattern-either:
    - pattern: Crypto.Hash.SHA.new(...)
    - pattern: Cryptodome.Hash.SHA.new (...)
  message: |
    Detected SHA1 hash algorithm which is considered insecure. SHA1 is not
    collision resistant and is therefore not suitable as a cryptographic
    signature. Use SHA256 or SHA3 instead.
  metadata:
    cwe: 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp: 'A3: Sensitive Data Exposure'
    primary_identifier: bandit.B304-4
    secondary_identifiers:
    - name: Bandit Test ID B304
      type: bandit_test_id
      value: B304
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B304-4
    shortlink: https://sg.run/344r
    semgrep.dev:
      rule:
        rule_id: NbUYYN
        version_id: WrT9Wj
        url: https://semgrep.dev/playground/r/WrT9Wj/gitlab.bandit.B304-4
        origin: custom
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B304-5
  patterns:
  - pattern-either:
    - pattern: Cryptodome.Cipher.ARC2.new(...)
    - pattern: Crypto.Cipher.ARC2.new
  message: 'Detected RC2 cipher algorithm which is considered insecure. The algorithm
    has known vulnerabilities and is difficult to use securely. Use AES instead.

    '
  metadata:
    cwe: 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp: 'A3: Sensitive Data Exposure'
    primary_identifier: bandit.B304-5
    secondary_identifiers:
    - name: Bandit Test ID B304
      type: bandit_test_id
      value: B304
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B304-5
    shortlink: https://sg.run/8nvQ
    semgrep.dev:
      rule:
        rule_id: NbUAOd
        version_id: 0bTBL6
        url: https://semgrep.dev/playground/r/0bTBL6/gitlab.bandit.B304-5
        origin: custom
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B304-6
  patterns:
  - pattern-either:
    - pattern: Cryptodome.Cipher.ARC4.new(...)
    - pattern: Crypto.Cipher.ARC4.new(...)
  message: |
    Detected RC4 cipher algorithm which is considered insecure. The algorithm has many
    known vulnerabilities. Use AES instead.
  metadata:
    cwe: 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp: 'A3: Sensitive Data Exposure'
    primary_identifier: bandit.B304-6
    secondary_identifiers:
    - name: Bandit Test ID B304
      type: bandit_test_id
      value: B304
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B304-6
    shortlink: https://sg.run/gJ75
    semgrep.dev:
      rule:
        rule_id: kxURAL
        version_id: K3TevP
        url: https://semgrep.dev/playground/r/K3TevP/gitlab.bandit.B304-6
        origin: custom
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B304-7
  patterns:
  - pattern-either:
    - pattern: Cryptodome.Cipher.Blowfish.new(...)
    - pattern: Crypto.Cipher.Blowfish.new(...)
  message: |
    Detected Blowfish cipher algorithm which is considered insecure. The algorithm has many
    known vulnerabilities. Use AES instead.
  metadata:
    cwe: 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp: 'A3: Sensitive Data Exposure'
    primary_identifier: bandit.B304-7
    secondary_identifiers:
    - name: Bandit Test ID B304
      type: bandit_test_id
      value: B304
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B304-7
    shortlink: https://sg.run/Q8oq
    semgrep.dev:
      rule:
        rule_id: wdU82R
        version_id: qkTG2r
        url: https://semgrep.dev/playground/r/qkTG2r/gitlab.bandit.B304-7
        origin: custom
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B304-8
  patterns:
  - pattern-either:
    - pattern: Cryptodome.Cipher.DES.new(...)
    - pattern: Crypto.Cipher.DES.new(...)
  message: |
    Detected DES cipher algorithm which is considered insecure. The algorithm is
    considered weak and has been deprecated. Use AES instead.
  metadata:
    cwe: 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp: 'A3: Sensitive Data Exposure'
    primary_identifier: bandit.B304-8
    secondary_identifiers:
    - name: Bandit Test ID B304
      type: bandit_test_id
      value: B304
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B304-8
    shortlink: https://sg.run/3AkW
    semgrep.dev:
      rule:
        rule_id: x8UWB8
        version_id: l4Tb43
        url: https://semgrep.dev/playground/r/l4Tb43/gitlab.bandit.B304-8
        origin: custom
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B304-9
  patterns:
  - pattern-either:
    - pattern: Cryptodome.Cipher.XOR.new(...)
    - pattern: Crypto.Cipher.XOR.new(...)
  message: |
    Detected XOR cipher algorithm which is considered insecure. This algorithm
    is not cryptographically secure and can be reversed easily. Use AES instead.
  metadata:
    cwe: 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp: 'A3: Sensitive Data Exposure'
    primary_identifier: bandit.B304-9
    secondary_identifiers:
    - name: Bandit Test ID B304
      type: bandit_test_id
      value: B304
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B304-9
    shortlink: https://sg.run/4yw9
    semgrep.dev:
      rule:
        rule_id: OrUG0Q
        version_id: 1QTBXK
        url: https://semgrep.dev/playground/r/1QTBXK/gitlab.bandit.B304-9
        origin: custom
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B305
  pattern: cryptography.hazmat.primitives.ciphers.modes.ECB(...)
  message: |
    Detected ECB cipher mode which is considered insecure. The algorithm can
    potentially leak information about the plaintext. Use CBC mode instead.
  metadata:
    cwe: 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp: 'A3: Sensitive Data Exposure'
    primary_identifier: bandit.B305
    secondary_identifiers:
    - name: Bandit Test ID B305
      type: bandit_test_id
      value: B305
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B305
    shortlink: https://sg.run/5JJA
    semgrep.dev:
      rule:
        rule_id: OrUDDX
        version_id: pZTo18
        url: https://semgrep.dev/playground/r/pZTo18/gitlab.bandit.B305
        origin: custom
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B306
  pattern: tempfile.mktemp(...)
  message: |
    Use tempfile.NamedTemporaryFile instead. From the official Python documentation: THIS FUNCTION IS UNSAFE AND SHOULD
    NOT BE USED. The file name may refer to a file that did not exist at some point, but by the time you get around to creating
    it, someone else may have beaten you to the punch.
  metadata:
    cwe: 'CWE-377: Insecure Temporary File'
    owasp: 'A3: Sensitive Data Exposure'
    primary_identifier: bandit.B306
    secondary_identifiers:
    - name: Bandit Test ID B306
      type: bandit_test_id
      value: B306
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B306
    shortlink: https://sg.run/Pp6v
    semgrep.dev:
      rule:
        rule_id: eqUvdb
        version_id: 2KTeze
        url: https://semgrep.dev/playground/r/2KTeze/gitlab.bandit.B306
        origin: custom
  languages:
  - python
  severity: ERROR
- id: gitlab.bandit.B307
  patterns:
  - pattern: eval(...)
  message: |
    Detected the use of eval(). eval() can be dangerous if used to evaluate
    dynamic content. If this content can be input from outside the program, this
    may be a code injection vulnerability. Ensure evaluated content is not definable
    by external sources. Consider using safer ast.literal_eval.
  metadata:
    cwe: 'CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code
      (''Eval Injection'')'
    owasp: 'A1: Injection'
    primary_identifier: bandit.B307
    secondary_identifiers:
    - name: Bandit Test ID B307
      type: bandit_test_id
      value: B307
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B307
    shortlink: https://sg.run/J3WP
    semgrep.dev:
      rule:
        rule_id: v8U5kd
        version_id: X0TEQD
        url: https://semgrep.dev/playground/r/X0TEQD/gitlab.bandit.B307
        origin: custom
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B308.B703
  patterns:
  - pattern-not-inside: django.utils.html.format_html(...)
  - pattern: django.utils.safestring.mark_safe(...)
  message: |
    'mark_safe()' is used to mark a string as "safe" for HTML output.
    This disables escaping and could therefore subject the content to
    XSS attacks. Use 'django.utils.html.format_html()' to build HTML
    for rendering instead.
  metadata:
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp: 'A7: Cross-Site Scripting (XSS)'
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B308.B703
    shortlink: https://sg.run/58xj
    semgrep.dev:
      rule:
        rule_id: d8UzRp
        version_id: JdTQjX
        url: https://semgrep.dev/playground/r/JdTQjX/gitlab.bandit.B308.B703
        origin: custom
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B309
  patterns:
  - pattern-either:
    - pattern: httplib.HTTPSConnection(...)
    - pattern: http.client.HTTPSConnection(...)
    - pattern: six.moves.http_client.HTTPSConnection(...)
  message: |
    The HTTPSConnection API has changed frequently with minor releases of Python.
    Ensure you are using the API for your version of Python securely.
    For example, Python 3 versions prior to 3.4.3 will not verify SSL certificates by default.
    See https://docs.python.org/3/library/http.client.html#http.client.HTTPSConnection
    for more information.
  metadata:
    cwe: 'CWE-295: Improper Certificate Validation'
    owasp: 'A3: Sensitive Data Exposure'
    primary_identifier: bandit.B309
    secondary_identifiers:
    - name: Bandit Test ID B309
      type: bandit_test_id
      value: B309
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B309
    shortlink: https://sg.run/GWA6
    semgrep.dev:
      rule:
        rule_id: ZqUqEy
        version_id: 1QTBO1
        url: https://semgrep.dev/playground/r/1QTBO1/gitlab.bandit.B309
        origin: custom
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B310-1
  patterns:
  - pattern-not: urllib.$W("...")
  - pattern-not: urllib.request.$W("...")
  - pattern-not: $OPENER.$W("...")
  - pattern-either:
    - patterns:
      - pattern-either:
        - pattern: urllib.urlopen(...)
        - pattern: urllib.request.urlopen(...)
        - pattern: urllib.urlretrieve(...)
        - pattern: urllib.request.urlretrieve(...)
    - patterns:
      - pattern-either:
        - pattern-inside: |
            $OPENER = urllib.URLopener(...)
            ...
        - pattern-inside: |
            $OPENER = urllib.request.URLopener(...)
            ...
        - pattern-inside: |
            $OPENER = urllib.FancyURLopener(...)
            ...
        - pattern-inside: |
            $OPENER = urllib.request.FancyURLopener(...)
            ...
      - pattern-either:
        - pattern: "$OPENER.open(...)"
        - pattern: "$OPENER.retrieve(...)"
  message: Detected a dynamic value being used with urllib. urllib supports 'file://'
    schemes, so a dynamic value controlled by a malicious actor may allow them to
    read arbitrary files. Audit uses of urllib calls to ensure user data cannot control
    the URLs, or consider using the 'requests' library instead.
  metadata:
    cwe: 'CWE-939: Improper Authorization in Handler for Custom URL Scheme'
    owasp: 'A5: Broken Access Control'
    primary_identifier: bandit.B310-1
    secondary_identifiers:
    - name: Bandit Test ID B310-1
      type: bandit_test_id
      value: B310-1
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B310-1
    shortlink: https://sg.run/R8zN
    semgrep.dev:
      rule:
        rule_id: nJUYed
        version_id: 9lT2dP
        url: https://semgrep.dev/playground/r/9lT2dP/gitlab.bandit.B310-1
        origin: custom
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B310-2
  pattern-either:
  - pattern: urllib2.urlopen(...)
  - pattern: urllib2.Request(...)
  - pattern: urllib.URLopener(...)
  - pattern: urllib.FancyURLopener(...)
  - pattern: urllib.request.FancyURLopener(...)
  - pattern: urllib.request.urlopen(...)
  - pattern: urllib.request.URLopener(...)
  - pattern: six.moves.urllib.request.urlopen(...)
  - pattern: six.moves.urllib.request.urlretrieve(...)
  - pattern: six.moves.urllib.request.URLopener(...)
  - pattern: six.moves.urllib.request.FancyURLopener(...)
  message: Detected a dynamic value being used with urllib. urllib supports 'file://'
    schemes, so a dynamic value controlled by a malicious actor may allow them to
    read arbitrary files. Audit uses of urllib calls to ensure user data cannot control
    the URLs, or consider using the 'requests' library instead.
  metadata:
    cwe: 'CWE-939: Improper Authorization in Handler for Custom URL Scheme'
    owasp: 'A5: Broken Access Control'
    primary_identifier: bandit.B310-2
    secondary_identifiers:
    - name: Bandit Test ID B310
      type: bandit_test_id
      value: B310
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B310-2
    shortlink: https://sg.run/Al4B
    semgrep.dev:
      rule:
        rule_id: EwU4kb
        version_id: yeT8R1
        url: https://semgrep.dev/playground/r/yeT8R1/gitlab.bandit.B310-2
        origin: custom
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B311
  pattern-either:
  - pattern: random.random(...)
  - pattern: random.randrange(...)
  - pattern: random.randint(...)
  - pattern: random.choice(...)
  - pattern: random.uniform(...)
  - pattern: random.triangular(...)
  message: 'Standard pseudo-random generators are not suitable for security/cryptographic
    purposes.

    '
  metadata:
    cwe: 'CWE-330: Use of Insufficiently Random Values'
    owasp: 'A3: Sensitive Data Exposure'
    primary_identifier: bandit.B311
    secondary_identifiers:
    - name: Bandit Test ID B311
      type: bandit_test_id
      value: B311
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B311
    shortlink: https://sg.run/B4PR
    semgrep.dev:
      rule:
        rule_id: 7KUe7J
        version_id: rxTqyv
        url: https://semgrep.dev/playground/r/rxTqyv/gitlab.bandit.B311
        origin: custom
  severity: INFO
  languages:
  - python
- id: gitlab.bandit.B312
  pattern: telnetlib.$ANYTHING(...)
  message: 'Telnet does not encrypt communications. Use SSH instead.

    '
  metadata:
    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
    owasp: 'A3: Sensitive Data Exposure'
    primary_identifier: bandit.B312
    secondary_identifiers:
    - name: Bandit Test ID B312
      type: bandit_test_id
      value: B312
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B312
    shortlink: https://sg.run/Gwwp
    semgrep.dev:
      rule:
        rule_id: eqUpp1
        version_id: bZTrb3
        url: https://semgrep.dev/playground/r/bZTrb3/gitlab.bandit.B312
        origin: custom
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B313
  pattern-either:
  - patterns:
    - pattern: xml.etree.cElementTree.fromstring(...)
    - pattern-not: xml.etree.cElementTree.fromstring("...")
  - pattern: xml.etree.cElementTree.parse(...)
  - pattern: xml.etree.cElementTree.iterparse(...)
  - pattern: xml.etree.cElementTree.XMLParser(...)
  metadata:
    cwe: 'CWE-611: Improper Restriction of XML External Entity Reference'
    owasp: 'A4: XML External Entities (XXE)'
    primary_identifier: bandit.B313
    secondary_identifiers:
    - name: Bandit Test ID B313
      type: bandit_test_id
      value: B313
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B313
    shortlink: https://sg.run/31Wr
    semgrep.dev:
      rule:
        rule_id: KxUOo7
        version_id: NdTL3j
        url: https://semgrep.dev/playground/r/NdTL3j/gitlab.bandit.B313
        origin: custom
  message: |
    Found use of the native Python XML libraries, which is vulnerable to XML external entity (XXE)
    attacks. The Python documentation recommends the `defusedxml` library instead. Use
    'defusedxml'. See https://github.com/tiran/defusedxml for more information.
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B313.B314.B315.B316.B318.B319.B320.B405.B406.B407.B408.B409.B410
  pattern-either:
  - pattern: import xml
  - pattern: import lxml
  - pattern: xml.etree.cElementTree.fromstring(...)
  - pattern: xml.etree.cElementTree.parse(...)
  - pattern: xml.etree.cElementTree.iterparse(...)
  - pattern: xml.etree.cElementTree.XMLParser(...)
  - pattern: xml.etree.ElementTree.fromstring(...)
  - pattern: xml.etree.ElementTree.parse(...)
  - pattern: xml.etree.ElementTree.iterparse(...)
  - pattern: xml.etree.ElementTree.XMLParser(...)
  - pattern: xml.sax.expatreader.create_parser(...)
  - pattern: xml.dom.expatbuilder.parse(...)
  - pattern: xml.dom.expatbuilder.parseString(...)
  - pattern: xml.dom.minidom.parseString(...)
  - pattern: xml.dom.minidom.parse(...)
  - pattern: xml.dom.pulldom.parseString(...)
  - pattern: xml.dom.pulldom.parse(...)
  - pattern: lxml.etree.fromstring(...)
  - pattern: lxml.etree.RestrictedElement(...)
  - pattern: lxml.etree.GlobalParserTLS(...)
  - pattern: lxml.etree.getDefaultParser(...)
  - pattern: lxml.etree.check_docinfo(...)
  metadata:
    cwe: 'CWE-611: Improper Restriction of XML External Entity Reference'
    owasp: 'A4: XML External Entities (XXE)'
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B313.B314.B315.B316.B318.B319.B320.B405.B406.B407.B408.B409.B410
    shortlink: https://sg.run/DJ5G
    semgrep.dev:
      rule:
        rule_id: L1U4Yd
        version_id: DkTKjj
        url: https://semgrep.dev/playground/r/DkTKjj/gitlab.bandit.B313.B314.B315.B316.B318.B319.B320.B405.B406.B407.B408.B409.B410
        origin: custom
  message: |
    Found use of the native Python XML libraries, which is vulnerable to XML external entity (XXE)
    attacks. The Python documentation recommends the 'defusedxml' library instead. Use 'defusedxml'.
    See https://github.com/tiran/defusedxml for more information.
  severity: ERROR
  languages:
  - python
- id: gitlab.bandit.B314
  pattern-either:
  - patterns:
    - pattern: xml.etree.ElementTree.fromstring(...)
    - pattern-not: xml.etree.ElementTree.fromstring("...")
  - pattern: xml.etree.ElementTree.parse(...)
  - pattern: xml.etree.ElementTree.iterparse(...)
  - pattern: xml.etree.ElementTree.XMLParser(...)
  metadata:
    cwe: 'CWE-611: Improper Restriction of XML External Entity Reference'
    owasp: 'A4: XML External Entities (XXE)'
    primary_identifier: bandit.B314
    secondary_identifiers:
    - name: Bandit Test ID B314
      type: bandit_test_id
      value: B314
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B314
    shortlink: https://sg.run/4g0l
    semgrep.dev:
      rule:
        rule_id: qNUKOW
        version_id: kbTpdX
        url: https://semgrep.dev/playground/r/kbTpdX/gitlab.bandit.B314
        origin: custom
  message: |
    Found use of the native Python XML libraries, which is vulnerable to XML external entity (XXE)
    attacks. The Python documentation recommends the `defusedxml` library instead. Use
    'defusedxml'. See https://github.com/tiran/defusedxml for more information.
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B315
  pattern-either:
  - pattern: xml.dom.expatreader.parse(...)
  - patterns:
    - pattern: xml.dom.expatreader.parseString(...)
    - pattern-not: xml.dom.expatreader.parseString("...")
  - pattern: xml.dom.expatreader.parseString(...)
  - pattern: xml.dom.expatreader.create_parser(...)
  message: 'Insecure XML parsing functionality, prefer `defusedxml`

    '
  metadata:
    cwe: 'CWE-611: Improper Restriction of XML External Entity Reference'
    owasp: 'A4: XML External Entities (XXE)'
    primary_identifier: bandit.B315
    secondary_identifiers:
    - name: Bandit Test ID B315
      type: bandit_test_id
      value: B315
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B315
    shortlink: https://sg.run/5nKA
    semgrep.dev:
      rule:
        rule_id: JDUZkD
        version_id: O9TzNy
        url: https://semgrep.dev/playground/r/O9TzNy/gitlab.bandit.B315
        origin: custom
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B316
  pattern-either:
  - patterns:
    - pattern: xml.dom.expatbuilder.parse(...)
    - pattern-not: xml.dom.expatbuilder.parse("...")
  - pattern: xml.dom.expatbuilder.parseString(...)
  message: 'Insecure XML parsing functionality, prefer `defusedxml`

    '
  metadata:
    cwe: 'CWE-611: Improper Restriction of XML External Entity Reference'
    owasp: 'A4: XML External Entities (XXE)'
    primary_identifier: bandit.B316
    secondary_identifiers:
    - name: Bandit Test ID B316
      type: bandit_test_id
      value: B316
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B316
    shortlink: https://sg.run/Jp8w
    semgrep.dev:
      rule:
        rule_id: PeUnzj
        version_id: xyTOKY
        url: https://semgrep.dev/playground/r/xyTOKY/gitlab.bandit.B316
        origin: custom
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B317
  pattern-either:
  - pattern: xml.sax.parse(...)
  - patterns:
    - pattern: xml.sax.parseString(...)
    - pattern-not: xml.sax.parseString("...")
  - pattern: xml.sax.make_parser(...)
  message: 'Insecure XML parsing functionality, prefer `defusedxml`

    '
  metadata:
    cwe: 'CWE-611: Improper Restriction of XML External Entity Reference'
    owasp: 'A4: XML External Entities (XXE)'
    primary_identifier: bandit.B317
    secondary_identifiers:
    - name: Bandit Test ID B317
      type: bandit_test_id
      value: B317
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B317
    shortlink: https://sg.run/RPPO
    semgrep.dev:
      rule:
        rule_id: v8Ujj8
        version_id: 7ZTdDQ
        url: https://semgrep.dev/playground/r/7ZTdDQ/gitlab.bandit.B317
        origin: custom
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B318
  pattern-either:
  - patterns:
    - pattern: xml.dom.minidom.parseString(...)
    - pattern-not: xml.dom.minidom.parseString("...")
  - pattern: xml.dom.minidom.parse(...)
  message: |
    Found use of the native Python XML libraries, which is vulnerable to XML external entity (XXE)
    attacks. The Python documentation recommends the `defusedxml` library instead. Use
    'defusedxml'. See https://github.com/tiran/defusedxml for more information.
  metadata:
    cwe: 'CWE-611: Improper Restriction of XML External Entity Reference'
    owasp: 'A4: XML External Entities (XXE)'
    primary_identifier: bandit.B318
    secondary_identifiers:
    - name: Bandit Test ID B318
      type: bandit_test_id
      value: B318
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B318
    shortlink: https://sg.run/01Av
    semgrep.dev:
      rule:
        rule_id: WAU68J
        version_id: LjTO74
        url: https://semgrep.dev/playground/r/LjTO74/gitlab.bandit.B318
        origin: custom
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B319
  pattern-either:
  - patterns:
    - pattern: xml.dom.pulldom.parseString(...)
    - pattern-not: xml.dom.pulldom.parseString("...")
  - pattern: xml.dom.pulldom.parse(...)
  metadata:
    cwe: 'CWE-611: Improper Restriction of XML External Entity Reference'
    owasp: 'A4: XML External Entities (XXE)'
    primary_identifier: bandit.B319
    secondary_identifiers:
    - name: Bandit Test ID B319
      type: bandit_test_id
      value: B319
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B319
    shortlink: https://sg.run/K2L7
    semgrep.dev:
      rule:
        rule_id: 0oU6o9
        version_id: 8KTX4x
        url: https://semgrep.dev/playground/r/8KTX4x/gitlab.bandit.B319
        origin: custom
  message: |
    Found use of the native Python XML libraries, which is vulnerable to XML external entity (XXE)
    attacks. The Python documentation recommends the `defusedxml` library instead. Use
    'defusedxml'. See https://github.com/tiran/defusedxml for more information.
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B320
  pattern-either:
  - pattern: lxml.etree.parse(...)
  - patterns:
    - pattern: lxml.etree.fromstring(...)
    - pattern-not: lxml.etree.fromstring("...")
  - pattern: lxml.etree.RestrictedElement(...)
  - pattern: lxml.etree.GlobalParserTLS(...)
  - pattern: lxml.etree.getDefaultParser(...)
  - pattern: lxml.etree.check_docinfo(...)
  metadata:
    cwe: 'CWE-611: Improper Restriction of XML External Entity Reference'
    owasp: 'A4: XML External Entities (XXE)'
    primary_identifier: bandit.B320
    secondary_identifiers:
    - name: Bandit Test ID B320
      type: bandit_test_id
      value: B320
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B320
    shortlink: https://sg.run/PGLY
    semgrep.dev:
      rule:
        rule_id: lBUNZy
        version_id: w8Tr9Z
        url: https://semgrep.dev/playground/r/w8Tr9Z/gitlab.bandit.B320
        origin: custom
  message: |
    Found use of the native Python XML libraries, which is vulnerable to XML external entity (XXE)
    attacks. The Python documentation recommends the `defusedxml` library instead. Use
    'defusedxml'. See https://github.com/tiran/defusedxml for more information.
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B321
  pattern: ftplib.$ANYTHING(...)
  message: |
    FTP does not encrypt communications by default. This can lead to sensitive
    data being exposed. Ensure use of FTP here does not expose sensitive data.
  metadata:
    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
    owasp: 'A3: Sensitive Data Exposure'
    primary_identifier: bandit.B321
    secondary_identifiers:
    - name: Bandit Test ID B321
      type: bandit_test_id
      value: B321
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B321
    shortlink: https://sg.run/Awwp
    semgrep.dev:
      rule:
        rule_id: d8Ully
        version_id: gETj6g
        url: https://semgrep.dev/playground/r/gETj6g/gitlab.bandit.B321
        origin: custom
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B323
  pattern: ssl._create_unverified_context(...)
  message: |
    Unverified SSL context detected. This will permit insecure connections without verifying
    SSL certificates. Use 'ssl.create_default_context()' instead.
  metadata:
    cwe: 'CWE-295: Improper Certificate Validation'
    owasp: 'A3: Sensitive Data Exposure'
    primary_identifier: bandit.B323
    secondary_identifiers:
    - name: Bandit Test ID B323
      type: bandit_test_id
      value: B323
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B323
    shortlink: https://sg.run/BLLW
    semgrep.dev:
      rule:
        rule_id: ZqUgg2
        version_id: QkTD8n
        url: https://semgrep.dev/playground/r/QkTD8n/gitlab.bandit.B323
        origin: custom
  severity: ERROR
  languages:
  - python
- id: gitlab.bandit.B324
  patterns:
  - pattern-either:
    - pattern: hashlib.new("=~/[M|m][D|d][4|5]/", ...)
    - pattern: hashlib.new(..., name="=~/[M|m][D|d][4|5]/", ...)
    - pattern: hashlib.new('sha1')
    - pattern: hashlib.new(..., name='SHA1')
    - pattern: hashlib.new('sha', string='test')
    - pattern: hashlib.new(name='SHA', string='test')
  message: |
    Detected use of an insecure MD4 or MD5 hash function.
    These functions have known vulnerabilities and are considered deprecated.
    Consider using 'SHA256' or a similar function instead.
  metadata:
    cwe: 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp: 'A3: Sensitive Data Exposure'
    primary_identifier: bandit.B324
    secondary_identifiers:
    - name: Bandit Test ID B324
      type: bandit_test_id
      value: B324
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B324
    shortlink: https://sg.run/Wg1E
    semgrep.dev:
      rule:
        rule_id: 8GUE2O
        version_id: 3ZTnl3
        url: https://semgrep.dev/playground/r/3ZTnl3/gitlab.bandit.B324
        origin: custom
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B325
  pattern-either:
  - pattern: os.tempnam(...)
  - pattern: os.tmpnam(...)
  message: The Python 'os' tempnam|tmpnam functions are vulnerable to symlink attacks
  metadata:
    cwe: 'CWE-377: Insecure Temporary File'
    primary_identifier: bandit.B325
    secondary_identifiers:
    - name: Bandit Test ID B325
      type: bandit_test_id
      value: B325
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B325
    shortlink: https://sg.run/DwwY
    semgrep.dev:
      rule:
        rule_id: nJUrrQ
        version_id: 44Tp7e
        url: https://semgrep.dev/playground/r/44Tp7e/gitlab.bandit.B325
        origin: custom
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B401
  patterns:
  - pattern: import telnetlib
  message: 'Telnet-related functions are being called. Telnet is considered insecure.
    Use SSH or some other encrypted protocol.

    '
  metadata:
    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
    owasp: 'A3: Sensitive Data Exposure'
    primary_identifier: bandit.B401
    secondary_identifiers:
    - name: Bandit Test ID B401
      type: bandit_test_id
      value: B401
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B401
    shortlink: https://sg.run/0nrw
    semgrep.dev:
      rule:
        rule_id: gxUW4o
        version_id: PkTvDQ
        url: https://semgrep.dev/playground/r/PkTvDQ/gitlab.bandit.B401
        origin: custom
  severity: ERROR
  languages:
  - python
- id: gitlab.bandit.B402
  patterns:
  - pattern-either:
    - pattern: import ftplib
    - pattern: from ftplib import FTP
    - pattern: ftplib.FTP(...)
  message: 'functions are being called. FTP is considered insecure. Use SSH/SFTP/SCP
    or some other encrypted protocol

    '
  metadata:
    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
    owasp: 'A3: Sensitive Data Exposure'
    primary_identifier: bandit.B402
    secondary_identifiers:
    - name: Bandit Test ID B402
      type: bandit_test_id
      value: B402
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B402
    shortlink: https://sg.run/KW0n
    semgrep.dev:
      rule:
        rule_id: QrU6yY
        version_id: JdTb5p
        url: https://semgrep.dev/playground/r/JdTb5p/gitlab.bandit.B402
        origin: custom
  severity: ERROR
  languages:
  - python
- id: gitlab.bandit.B403
  patterns:
  - pattern-either:
    - pattern: import pickle
    - pattern: import cPickle
    - pattern: import dill
  message: 'Consider possible security implications associated with pickle module.

    '
  metadata:
    cwe: 'CWE-502: Deserialization of Untrusted Data'
    owasp: 'A8: Insecure Deserialization'
    primary_identifier: bandit.B403
    secondary_identifiers:
    - name: Bandit Test ID B403
      type: bandit_test_id
      value: B403
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B403
    shortlink: https://sg.run/qrAO
    semgrep.dev:
      rule:
        rule_id: 3qUBJZ
        version_id: 5PTjke
        url: https://semgrep.dev/playground/r/5PTjke/gitlab.bandit.B403
        origin: custom
  severity: INFO
  languages:
  - python
- id: gitlab.bandit.B404
  patterns:
  - pattern: import subprocess
  message: 'Consider possible security implications associated with subprocess module.

    '
  metadata:
    cwe: 'CWE-78: Improper Neutralization of Special Elements used in an OS Command
      (''OS Command Injection'')'
    owasp: 'A8: Insecure Deserialization'
    primary_identifier: bandit.B404
    secondary_identifiers:
    - name: Bandit Test ID B404
      type: bandit_test_id
      value: B404
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B404
    shortlink: https://sg.run/lj3o
    semgrep.dev:
      rule:
        rule_id: 4bUz3p
        version_id: GxTyjk
        url: https://semgrep.dev/playground/r/GxTyjk/gitlab.bandit.B404
        origin: custom
  languages:
  - python
  severity: WARNING
- id: gitlab.bandit.B405
  patterns:
  - pattern-either:
    - pattern: import xml.etree.cElementTree
    - pattern: import xml.etree.ElementTree
  message: 'Consider possible security implications associated with etree module.

    '
  metadata:
    cwe: 'CWE-502: Deserialization of Untrusted Data'
    owasp: 'A8: Insecure Deserialization'
    primary_identifier: bandit.B405
    secondary_identifiers:
    - name: Bandit Test ID B405
      type: bandit_test_id
      value: B405
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B405
    shortlink: https://sg.run/G6Yp
    semgrep.dev:
      rule:
        rule_id: 5rUYqA
        version_id: e1T50d
        url: https://semgrep.dev/playground/r/e1T50d/gitlab.bandit.B405
        origin: custom
  severity: INFO
  languages:
  - python
- id: gitlab.bandit.B406
  patterns:
  - pattern-either:
    - pattern: import xml.sax
  message: |
    Using various methods to parse untrusted XML data is known to be vulnerable to
    XML attacks. Replace vulnerable imports with the equivalent defusedxml package,
    or make sure defusedxml.defuse_stdlib() is called.
  metadata:
    cwe: 'CWE-502: Deserialization of Untrusted Data'
    owasp: 'A8: Insecure Deserialization'
    primary_identifier: bandit.B406
    secondary_identifiers:
    - name: Bandit Test ID B406
      type: bandit_test_id
      value: B406
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B406
    shortlink: https://sg.run/RALO
    semgrep.dev:
      rule:
        rule_id: GdUWq8
        version_id: vdTgYW
        url: https://semgrep.dev/playground/r/vdTgYW/gitlab.bandit.B406
        origin: custom
  severity: INFO
  languages:
  - python
- id: gitlab.bandit.B407
  patterns:
  - pattern-either:
    - pattern: import xml.dom.expatbuilder
  message: |
    Using various methods to parse untrusted XML data is known to be vulnerable to
    XML attacks. Replace vulnerable imports with the equivalent defusedxml package,
    or make sure defusedxml.defuse_stdlib() is called.
  metadata:
    cwe: 'CWE-502: Deserialization of Untrusted Data'
    owasp: 'A8: Insecure Deserialization'
    primary_identifier: bandit.B407
    secondary_identifiers:
    - name: Bandit Test ID B407
      type: bandit_test_id
      value: B407
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B407
    shortlink: https://sg.run/AWDp
    semgrep.dev:
      rule:
        rule_id: ReUwp0
        version_id: d6T1qw
        url: https://semgrep.dev/playground/r/d6T1qw/gitlab.bandit.B407
        origin: custom
  severity: INFO
  languages:
  - python
- id: gitlab.bandit.B408
  patterns:
  - pattern-either:
    - pattern: import xml.dom.minidom
  message: |
    Using various methods to parse untrusted XML data is known to be vulnerable
    to XML attacks. Replace vulnerable imports with the equivalent defusedxml
    package, or make sure defusedxml.defuse_stdlib() is called.
  metadata:
    cwe: 'CWE-502: Deserialization of Untrusted Data'
    owasp: 'A8: Insecure Deserialization'
    primary_identifier: bandit.B408
    secondary_identifiers:
    - name: Bandit Test ID B408
      type: bandit_test_id
      value: B408
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B408
    shortlink: https://sg.run/WKv4
    semgrep.dev:
      rule:
        rule_id: DbUekX
        version_id: ExTORp
        url: https://semgrep.dev/playground/r/ExTORp/gitlab.bandit.B408
        origin: custom
  severity: INFO
  languages:
  - python
- id: gitlab.bandit.B409
  patterns:
  - pattern-either:
    - pattern: import xml.dom.pulldom
  message: |
    Using various methods to parse untrusted XML data is known to be vulnerable to
    XML attacks. Replace vulnerable imports with the equivalent defusedxml package,
    or make sure defusedxml.defuse_stdlib() is called.
  metadata:
    cwe: 'CWE-502: Deserialization of Untrusted Data'
    owasp: 'A8: Insecure Deserialization'
    primary_identifier: bandit.B409
    secondary_identifiers:
    - name: Bandit Test ID B409
      type: bandit_test_id
      value: B409
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B409
    shortlink: https://sg.run/B0WW
    semgrep.dev:
      rule:
        rule_id: AbUnqq
        version_id: ZRTn6Q
        url: https://semgrep.dev/playground/r/ZRTn6Q/gitlab.bandit.B409
        origin: custom
  severity: INFO
  languages:
  - python
- id: gitlab.bandit.B410
  patterns:
  - pattern-either:
    - pattern: import lxml
  message: |
    Using various methods to parse untrusted XML data is known to be vulnerable to
    XML attacks. Replace vulnerable imports with the equivalent defusedxml package.
  metadata:
    cwe: 'CWE-502: Deserialization of Untrusted Data'
    owasp: 'A8: Insecure Deserialization'
    primary_identifier: bandit.B410
    secondary_identifiers:
    - name: Bandit Test ID B410
      type: bandit_test_id
      value: B410
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B410
    shortlink: https://sg.run/DqKY
    semgrep.dev:
      rule:
        rule_id: BYUGby
        version_id: nWTjOO
        url: https://semgrep.dev/playground/r/nWTjOO/gitlab.bandit.B410
        origin: custom
  severity: INFO
  languages:
  - python
- id: gitlab.bandit.B411
  pattern-either:
  - pattern: import xmlrpclib
  message: 'Consider possible security implications associated with xmlrpclib module.

    '
  metadata:
    cwe: 'CWE-502: Deserialization of Untrusted Data'
    owasp: 'A8: Insecure Deserialization'
    primary_identifier: bandit.B411
    secondary_identifiers:
    - name: Bandit Test ID B411
      type: bandit_test_id
      value: B411
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B411
    shortlink: https://sg.run/Ygyd
    semgrep.dev:
      rule:
        rule_id: PeUkL4
        version_id: RGT7ep
        url: https://semgrep.dev/playground/r/RGT7ep/gitlab.bandit.B411
        origin: custom
  severity: ERROR
  languages:
  - python
- id: gitlab.bandit.B412
  pattern-either:
  - pattern: wsgiref.handlers.CGIHandler(...)
  - pattern: twisted.web.twcgi.CGIDirectory(...)
  message: 'Consider possible security implications associated with httpoxy module.

    '
  metadata:
    cwe: 'CWE-284: Improper Access Control'
    owasp: 'A5: Broken Access Control'
    primary_identifier: bandit.B412
    secondary_identifiers:
    - name: Bandit Test ID B412
      type: bandit_test_id
      value: B412
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B412
    shortlink: https://sg.run/6rOK
    semgrep.dev:
      rule:
        rule_id: JDUPgX
        version_id: A8T8kE
        url: https://semgrep.dev/playground/r/A8T8kE/gitlab.bandit.B412
        origin: custom
  severity: ERROR
  languages:
  - python
- id: gitlab.bandit.B413
  pattern-either:
  - pattern: import pycryto
  - pattern: import Crypto.Cipher
  - pattern: import Crypto.Hash
  - pattern: import Crypto.IO
  - pattern: import Crypto.Protocol
  - pattern: import Crypto.PublicKey
  - pattern: import Crypto.Random
  - pattern: import Crypto.Signature
  - pattern: import Crypto.Util
  message: 'Consider possible security implications associated with pycrypto module.

    '
  metadata:
    cwe: 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp: 'A3: Sensitive Data Exposure'
    primary_identifier: bandit.B413
    secondary_identifiers:
    - name: Bandit Test ID B413
      type: bandit_test_id
      value: B413
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B413
    shortlink: https://sg.run/okGX
    semgrep.dev:
      rule:
        rule_id: 5rU45b
        version_id: BjT5xJ
        url: https://semgrep.dev/playground/r/BjT5xJ/gitlab.bandit.B413
        origin: custom
  severity: ERROR
  languages:
  - python
- id: gitlab.bandit.B415
  pattern-either:
  - pattern: import pyghmi
  message: |
    An IPMI-related module is being imported. IPMI is considered insecure. Use an encrypted
    protocol.
  metadata:
    cisa: https://www.cisa.gov/uscert/ncas/alerts/TA13-207A
    primary_identifier: bandit.B415
    secondary_identifiers:
    - name: Bandit Test ID B415
      type: bandit_test_id
      value: B415
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B415
    shortlink: https://sg.run/5NO3
    semgrep.dev:
      rule:
        rule_id: v8Ubxq
        version_id: kbTpby
        url: https://semgrep.dev/playground/r/kbTpby/gitlab.bandit.B415
        origin: custom
  severity: ERROR
  languages:
  - python
- id: gitlab.bandit.B501
  patterns:
  - pattern-either:
    - pattern: requests.put(..., verify=False, ...)
    - pattern: requests.patch(..., verify=False, ...)
    - pattern: requests.delete(..., verify=False, ...)
    - pattern: requests.head(..., verify=False, ...)
    - pattern: requests.options(..., verify=False, ...)
    - pattern: requests.request(..., verify=False, ...)
    - pattern: requests.get(..., verify=False, ...)
    - pattern: requests.post(..., verify=False, ...)
  message: |
    Certificate verification has been explicitly disabled. This
    permits insecure connections to insecure servers. Re-enable
    certification validation.
  metadata:
    cwe: 'CWE-295: Improper Certificate Validation'
    owasp: 'A3: Sensitive Data Exposure'
    primary_identifier: bandit.B501
    secondary_identifiers:
    - name: Bandit Test ID B501
      type: bandit_test_id
      value: B501
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B501
    shortlink: https://sg.run/zk6n
    semgrep.dev:
      rule:
        rule_id: GdU0wd
        version_id: DkTJq7
        url: https://semgrep.dev/playground/r/DkTJq7/gitlab.bandit.B501
        origin: custom
  severity: ERROR
  languages:
  - python
- id: gitlab.bandit.B502
  patterns:
  - pattern-either:
    - pattern: ssl.PROTOCOL_SSLv2
    - pattern: ssl.PROTOCOL_SSLv3
    - pattern: ssl.PROTOCOL_TLSv1
    - pattern: ssl.PROTOCOL_TLSv1_1
    - pattern: pyOpenSSL.SSL.SSLv2_METHOD
    - pattern: pyOpenSSL.SSL.SSLv23_METHOD
    - pattern: pyOpenSSL.SSL.SSLv3_METHOD
    - pattern: pyOpenSSL.SSL.TLSv1_METHOD
    - pattern: pyOpenSSL.SSL.TLSv1_1_METHOD
  message: |
    An insecure SSL version was detected. TLS versions 1.0, 1.1, and all SSL versions
    are considered weak encryption and are deprecated.
    Use 'ssl.PROTOCOL_TLSv1_2' or higher.
  metadata:
    cwe: 'CWE-326: Inadequate Encryption Strength'
    owasp: 'A3: Sensitive Data Exposure'
    primary_identifier: bandit.B502
    secondary_identifiers:
    - name: Bandit Test ID B502
      type: bandit_test_id
      value: B502
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B502
    shortlink: https://sg.run/4g0g
    semgrep.dev:
      rule:
        rule_id: KxUOoO
        version_id: WrT9Oj
        url: https://semgrep.dev/playground/r/WrT9Oj/gitlab.bandit.B502
        origin: custom
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B502.B503
  patterns:
  - pattern-either:
    - pattern: ssl.PROTOCOL_SSLv2
    - pattern: ssl.PROTOCOL_SSLv3
    - pattern: ssl.PROTOCOL_TLSv1
    - pattern: ssl.PROTOCOL_TLSv1_1
    - pattern: pyOpenSSL.SSL.SSLv2_METHOD
    - pattern: pyOpenSSL.SSL.SSLv23_METHOD
    - pattern: pyOpenSSL.SSL.SSLv3_METHOD
    - pattern: pyOpenSSL.SSL.TLSv1_METHOD
    - pattern: pyOpenSSL.SSL.TLSv1_1_METHOD
  message: |
    An insecure SSL version was detected. TLS versions 1.0, 1.1, and all SSL versions
    are considered weak encryption and are deprecated.
    Use 'ssl.PROTOCOL_TLSv1_2' or higher.
  metadata:
    cwe: 'CWE-326: Inadequate Encryption Strength'
    owasp: 'A3: Sensitive Data Exposure'
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B502.B503
    shortlink: https://sg.run/plRe
    semgrep.dev:
      rule:
        rule_id: ReUPvG
        version_id: 1QTeld
        url: https://semgrep.dev/playground/r/1QTeld/gitlab.bandit.B502.B503
        origin: custom
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B504
  patterns:
  - pattern: ssl.wrap_socket()
  message: 'ssl.wrap_socket call with no SSL/TLS protocol version specified, the default
    SSLv23 could be insecure, possible security issue.

    '
  metadata:
    cwe: 'CWE-326: Inadequate Encryption Strength'
    owasp: 'A3: Sensitive Data Exposure'
    primary_identifier: bandit.B504
    secondary_identifiers:
    - name: Bandit Test ID B504
      type: bandit_test_id
      value: B504
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B504
    shortlink: https://sg.run/2bNr
    semgrep.dev:
      rule:
        rule_id: AbUWYl
        version_id: 0bTBy6
        url: https://semgrep.dev/playground/r/0bTBy6/gitlab.bandit.B504
        origin: custom
  severity: INFO
  languages:
  - python
- id: gitlab.bandit.B505-1
  patterns:
  - pattern-either:
    - pattern: cryptography.hazmat.primitives.asymmetric.rsa.generate_private_key(...,
        key_size=$SIZE, ...)
    - pattern: cryptography.hazmat.primitives.asymmetric.rsa.generate_private_key($EXP,
        $SIZE, ...)
    - pattern: cryptography.hazmat.primitives.asymmetric.rsa.generate_private_key($SIZE,
        ...)
    - pattern: cryptography.hazmat.primitives.asymmetric.dsa.generate_private_key(...,
        key_size=$SIZE, ...)
    - pattern: cryptography.hazmat.primitives.asymmetric.dsa.generate_private_key($EXP,
        $SIZE, ...)
    - pattern: cryptography.hazmat.primitives.asymmetric.dsa.generate_private_key($SIZE,
        ...)
    - pattern: Crypto.PublicKey.RSA.generate($SIZE, ...)
    - pattern: Crypto.PublicKey.DSA.generate($SIZE, ...)
    - pattern: Cryptodome.PublicKey.DSA.generate($SIZE, ...)
    - pattern: Cryptodome.PublicKey.RSA.generate($SIZE, ...)
    - pattern: Crypto.PublicKey.DSA.generate(bits=$SIZE, ...)
    - pattern: Cryptodome.PublicKey.DSA.generate(bits=$SIZE, ...)
    - pattern: pycrypto_rsa.generate(bits=$SIZE, ...)
    - pattern: pycrypto_dsa.generate(bits=$SIZE, ...)
    - pattern: pycryptodomex_rsa.generate(bits=$SIZE, ...)
    - pattern: pycryptodomex_rsa.generate($SIZE, ...)
    - pattern: pycryptodomex_dsa.generate(bits=$SIZE, ...)
    - pattern: pycryptodomex_dsa.generate($SIZE, ...)
  - metavariable-comparison:
      metavariable: "$SIZE"
      comparison: "$SIZE < 2048"
  message: |
    Detected an insufficient key size for DSA. NIST recommends
    a key size of 2048 or higher.
  metadata:
    cwe: 'CWE-326: Inadequate Encryption Strength'
    owasp: 'A3: Sensitive Data Exposure'
    primary_identifier: bandit.B505-1
    secondary_identifiers:
    - name: Bandit Test ID B505-1
      type: bandit_test_id
      value: B505-1
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B505-1
    shortlink: https://sg.run/XL9j
    semgrep.dev:
      rule:
        rule_id: BYUBYZ
        version_id: K3TenP
        url: https://semgrep.dev/playground/r/K3TenP/gitlab.bandit.B505-1
        origin: custom
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B505-2
  patterns:
  - pattern-inside: cryptography.hazmat.primitives.asymmetric.ec.generate_private_key(...)
  message: |
    Detected an insufficient curve size for EC. NIST recommends
    a key size of 224 or higher. For example, use 'ec.SECP256R1'.
  metadata:
    cwe: 'CWE-326: Inadequate Encryption Strength'
    owasp: 'A3: Sensitive Data Exposure'
    primary_identifier: bandit.B505-2
    secondary_identifiers:
    - name: Bandit Test ID B505
      type: bandit_test_id
      value: B505
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B505-2
    shortlink: https://sg.run/jNgP
    semgrep.dev:
      rule:
        rule_id: DbUW8j
        version_id: qkTG5r
        url: https://semgrep.dev/playground/r/qkTG5r/gitlab.bandit.B505-2
        origin: custom
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B506
  patterns:
  - pattern-inside: |
      import yaml
      ...
      yaml.load($FOO)
  - pattern: yaml.load($FOO)
  message: |
    Avoid using `load()`. `PyYAML.load` can create arbitrary Python
    objects. A malicious actor could exploit this to run arbitrary
    code. Use `safe_load()` instead.
  metadata:
    cwe: 'CWE-502: Deserialization of Untrusted Data'
    owasp: 'A8: Insecure Deserialization'
    primary_identifier: bandit.B506
    secondary_identifiers:
    - name: Bandit Test ID B506
      type: bandit_test_id
      value: B506
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B506
    shortlink: https://sg.run/1nb1
    semgrep.dev:
      rule:
        rule_id: WAUZx1
        version_id: l4Tbl3
        url: https://semgrep.dev/playground/r/l4Tbl3/gitlab.bandit.B506
        origin: custom
  severity: ERROR
  languages:
  - python
- id: gitlab.bandit.B507
  patterns:
  - pattern-inside: |
      $CLIENT = paramiko.client.SSHClient(...)
      ...
      $CLIENT.set_missing_host_key_policy(...)
  - pattern-either:
    - pattern: paramiko.client.AutoAddPolicy
    - pattern: paramiko.client.WarningPolicy
  message: |
    Detected a paramiko host key policy that implicitly trusts a server's
    host key. Host keys should be verified to ensure the connection
    is not to a malicious server. Use RejectPolicy or a custom subclass
    instead.
  metadata:
    cwe: 'CWE-322: Key Exchange without Entity Authentication'
    owasp: 'A5: Broken Access Control'
    primary_identifier: bandit.B507
    secondary_identifiers:
    - name: Bandit Test ID B507
      type: bandit_test_id
      value: B507
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B507
    shortlink: https://sg.run/WOO4
    semgrep.dev:
      rule:
        rule_id: EwUQQv
        version_id: YDT5NG
        url: https://semgrep.dev/playground/r/YDT5NG/gitlab.bandit.B507
        origin: custom
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B508
  pattern-either:
  - pattern: pysnmp.hlapi.CommunityData(..., mpModel=0, ...)
  - pattern: pysnmp.hlapi.CommunityData(..., mpModel=1, ...)
  message: 'The use of SNMPv1 and SNMPv2 is insecure. You should use SNMPv3 if able.

    '
  metadata:
    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
    primary_identifier: bandit.B508
    secondary_identifiers:
    - name: Bandit Test ID B508
      type: bandit_test_id
      value: B508
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B508
    shortlink: https://sg.run/RpEK
    semgrep.dev:
      rule:
        rule_id: ZqUR1w
        version_id: xyTO5E
        url: https://semgrep.dev/playground/r/xyTO5E/gitlab.bandit.B508
        origin: custom
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B509
  pattern-either:
  - pattern: pysnmp.hlapi.UsmUserData($ARG1, $ARG2)
  - pattern: pysnmp.hlapi.UsmUserData($ARG1)
  - pattern: pysnmp.hlapi.UsmUserData(...,'noAuthNoPriv',...)
  - pattern: pysnmp.hlapi.UsmUserData(...,'authNoPriv',...)
  message: 'You should not use SNMPv3 without encryption. noAuthNoPriv & authNoPriv
    is insecure

    '
  metadata:
    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
    primary_identifier: bandit.B509
    secondary_identifiers:
    - name: Bandit Test ID B509
      type: bandit_test_id
      value: B509
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B509
    shortlink: https://sg.run/A3O4
    semgrep.dev:
      rule:
        rule_id: nJUDAe
        version_id: O9Tzbz
        url: https://semgrep.dev/playground/r/O9Tzbz/gitlab.bandit.B509
        origin: custom
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B601
  patterns:
  - pattern-inside: |
      import paramiko
      ...
  - pattern: "$CLIENT.exec_command(...)"
  message: |
    Unverified SSL context detected. This will permit insecure connections without verifying
    SSL certificates. Use 'ssl.create_default_context()' instead.
  metadata:
    cwe: 'CWE-78: Improper Neutralization of Special Elements used in an OS Command
      (''OS Command Injection'')'
    owasp: 'A1: Injection'
    primary_identifier: bandit.B601
    secondary_identifiers:
    - name: Bandit Test ID B601
      type: bandit_test_id
      value: B601
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B601
    shortlink: https://sg.run/9qdy
    semgrep.dev:
      rule:
        rule_id: 0oUEOA
        version_id: JdTb5A
        url: https://semgrep.dev/playground/r/JdTb5A/gitlab.bandit.B601
        origin: custom
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B602
  patterns:
  - pattern-not: subprocess.$FUNC(..., shell=False, ...)
  - pattern-not: subprocess.$FUNC(..., shell=False)
  - pattern-not: subprocess.$FUNC(..., shell=0)
  - pattern-not: subprocess.$FUNC(..., shell=[])
  - pattern-not: subprocess.$FUNC(..., shell={})
  - pattern-not: subprocess.$FUNC(..., shell=None)
  - pattern-either:
    - pattern: subprocess.$FUNC(..., shell=True, ...)
    - pattern: subprocess.$FUNC(..., shell='True', ...)
    - pattern: subprocess.$FUNC(..., shell='False', ...)
    - pattern: subprocess.$FUNC(..., shell='None', ...)
    - pattern: subprocess.$FUNC(..., shell=$X, ...)
  message: |
    Found 'subprocess' function '$FUNC' with 'shell=True'. This is dangerous because this call will spawn
    the command using a shell process. Doing so propagates current shell settings and variables, which
    makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead.
  metadata:
    cwe: 'CWE-78: Improper Neutralization of Special Elements used in an OS Command
      (''OS Command Injection'')'
    owasp: 'A1: Injection'
    primary_identifier: bandit.B602
    secondary_identifiers:
    - name: Bandit Test ID B602
      type: bandit_test_id
      value: B602
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B602
    shortlink: https://sg.run/yzYA
    semgrep.dev:
      rule:
        rule_id: KxU4yp
        version_id: 5PTjk2
        url: https://semgrep.dev/playground/r/5PTjk2/gitlab.bandit.B602
        origin: custom
  severity: ERROR
  languages:
  - python
- id: gitlab.bandit.B603
  patterns:
  - pattern-not: subprocess.$FUNC($ARG, shell=<... True ...>)
  - pattern-not: subprocess.$FUNC($ARG, shell=<... 'True' ...>)
  - pattern-not: subprocess.$FUNC($ARG, shell=<... "True" ...>)
  - pattern-either:
    - pattern: 'subprocess.$FUNC($ARG, shell=False)

        '
    - pattern: 'subprocess.$FUNC($ARG, shell=0)

        '
    - pattern: 'subprocess.$FUNC($ARG, shell={...})

        '
    - pattern: 'subprocess.$FUNC($ARG, shell=[...])

        '
    - pattern: 'subprocess.$FUNC($ARG)

        '
  message: |
    Python possesses many mechanisms to invoke an external executable. However,
    doing so may present a security issue if appropriate care is not taken to
    sanitize any user provided or variable input. This plugin test is part of a
    family of tests built to check for process spawning and warn appropriately.
    Specifically, this test looks for the spawning of a subprocess without the
    use of a command shell. This type of subprocess invocation is not
    vulnerable to shell injection attacks, but care should still be taken to
    ensure validity of input.
  metadata:
    cwe: 'CWE-78: Improper Neutralization of Special Elements used in an OS Command
      (''OS Command Injection'')'
    owasp: 'A1: Injection'
    primary_identifier: bandit.B603
    secondary_identifiers:
    - name: Bandit Test ID B603
      type: bandit_test_id
      value: B603
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B603
    shortlink: https://sg.run/rABJ
    semgrep.dev:
      rule:
        rule_id: qNUoqN
        version_id: GxTyjn
        url: https://semgrep.dev/playground/r/GxTyjn/gitlab.bandit.B603
        origin: custom
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B604
  patterns:
  - pattern-not: subprocess.$FUNC(..., shell=True, ...)
  - pattern: "$FOO(..., shell=True, ...)"
  message: 'subprocess call - check for execution of untrusted input

    '
  metadata:
    cwe: 'CWE-78: Improper Neutralization of Special Elements used in an OS Command
      (''OS Command Injection'')'
    owasp: 'A1: Injection'
    primary_identifier: bandit.B604
    secondary_identifiers:
    - name: Bandit Test ID B604
      type: bandit_test_id
      value: B604
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B604
    shortlink: https://sg.run/bDvv
    semgrep.dev:
      rule:
        rule_id: lBUdPP
        version_id: RGT7e8
        url: https://semgrep.dev/playground/r/RGT7e8/gitlab.bandit.B604
        origin: custom
  severity: INFO
  languages:
  - python
- id: gitlab.bandit.B605
  patterns:
  - pattern-either:
    - pattern: os.system(...)
    - pattern: os.popen(...)
    - pattern: os.popen2(...)
    - pattern: os.popen3(...)
    - pattern: os.popen4(...)
    - pattern: popen2.popen2(...)
    - pattern: popen2.popen3(...)
    - pattern: popen2.popen4(...)
    - pattern: popen2.Popen3(...)
    - pattern: popen2.Popen4(...)
    - pattern: commands.getoutput(...)
    - pattern: commands.getstatusoutput("")
  message: |
    Starting a process with a shell: Seems safe, but may be changed in the
    future, consider rewriting without shell
  metadata:
    cwe: 'CWE-78: Improper Neutralization of Special Elements used in an OS Command
      (''OS Command Injection'')'
    owasp: 'A1: Injection'
    primary_identifier: bandit.B605
    secondary_identifiers:
    - name: Bandit Test ID B605
      type: bandit_test_id
      value: B605
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B605
    shortlink: https://sg.run/NrlN
    semgrep.dev:
      rule:
        rule_id: YGUrPX
        version_id: A8T8k8
        url: https://semgrep.dev/playground/r/A8T8k8/gitlab.bandit.B605
        origin: custom
  severity: INFO
  languages:
  - python
- id: gitlab.bandit.B606
  patterns:
  - pattern-either:
    - patterns:
      - pattern-not: os.$W("...", ...)
      - pattern-either:
        - pattern: os.execl(...)
        - pattern: os.execle(...)
        - pattern: os.execlp(...)
        - pattern: os.execlpe(...)
        - pattern: os.execv(...)
        - pattern: os.execve(...)
        - pattern: os.execvp(...)
        - pattern: os.execvpe(...)
        - pattern: os.startfile(...)
    - patterns:
      - pattern-not: os.$W($MODE, "...", ...)
      - pattern-either:
        - pattern: os.spawnl(...)
        - pattern: os.spawnle(...)
        - pattern: os.spawnlp(...)
        - pattern: os.spawnlpe(...)
        - pattern: os.spawnv(...)
        - pattern: os.spawnve(...)
        - pattern: os.spawnvp(...)
        - pattern: os.spawnvpe(...)
  message: |
    Found dynamic content when spawning a process. This is dangerous if external
    data can reach this function call because it allows a malicious actor to
    execute commands. Ensure no external data reaches here.
  metadata:
    cwe: 'CWE-78: Improper Neutralization of Special Elements used in an OS Command
      (''OS Command Injection'')'
    owasp: 'A1: Injection'
    primary_identifier: bandit.B606
    secondary_identifiers:
    - name: Bandit Test ID B606
      type: bandit_test_id
      value: B606
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B606
    shortlink: https://sg.run/kLQA
    semgrep.dev:
      rule:
        rule_id: 6JUqpb
        version_id: BjT5xq
        url: https://semgrep.dev/playground/r/BjT5xq/gitlab.bandit.B606
        origin: custom
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B607
  pattern-either:
  - pattern: os.system("...", ...)
  - pattern: $OS.popen("...", ...)
  - pattern: $OS.popen2("...", ...)
  - pattern: $OS.popen3("...", ...)
  - pattern: $OS.popen4("...", ...)
  - pattern: commands.getoutput("...", ...)
  - pattern: commands.getstatusoutput("...", ...)
  message: |
    Starting a process with a shell; seems safe, but may be changed in the future, consider
    rewriting without shell
  metadata:
    cwe: 'CWE-78: Improper Neutralization of Special Elements used in an OS Command
      (''OS Command Injection'')'
    owasp: 'A1: Injection'
    primary_identifier: bandit.B607
    secondary_identifiers:
    - name: Bandit Test ID B607
      type: bandit_test_id
      value: B607
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B607
    shortlink: https://sg.run/wx9d
    semgrep.dev:
      rule:
        rule_id: oqUzYg
        version_id: DkTJqE
        url: https://semgrep.dev/playground/r/DkTJqE/gitlab.bandit.B607
        origin: custom
  severity: INFO
  languages:
  - python
- id: gitlab.bandit.B608
  patterns:
  - pattern-either:
    - pattern: $DB.execute("..." % ...)
    - pattern: $DB.execute("...".format(...))
    - pattern: $DB.execute(f"...")
    - pattern: $DB.execute("..." + $V + "...")
    - patterns:
      - pattern-either:
        - pattern-inside: |
            $SQL = "..." % ...
            ...
        - pattern-inside: |
            $SQL = "...".format(...)
            ...
        - pattern-inside: |
            $SQL = f"...{$X}..."
            ...
      - pattern: "$DB.execute($SQL)"
  message: 'Detected possible formatted SQL query. Use parameterized queries instead.

    '
  metadata:
    cwe: 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    owasp: 'A1: Injection'
    primary_identifier: bandit.B608
    secondary_identifiers:
    - name: Bandit Test ID B608
      type: bandit_test_id
      value: B608
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B608
    shortlink: https://sg.run/xYry
    semgrep.dev:
      rule:
        rule_id: zdUyPj
        version_id: WrT9O0
        url: https://semgrep.dev/playground/r/WrT9O0/gitlab.bandit.B608
        origin: custom
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B609
  patterns:
  - pattern-either:
    - pattern-inside: os.system("...")
    - pattern-inside: os.popen("...")
    - pattern-inside: os.popen2("...")
    - pattern-inside: os.popen3("...")
    - pattern-inside: os.popen4("...")
    - pattern-inside: subprocess.$W(..., shell=True, ...)
  - pattern-regex: "(tar|chmod|chown|rsync)(.*?)\\*"
  message: |
    Detected use of the wildcard character in a system call that spawns a shell.
    This subjects the wildcard to normal shell expansion, which can have unintended consequences
    if there exist any non-standard file names. Consider a file named '-e sh script.sh' -- this
    will execute a script when 'rsync' is called. See
    https://www.defensecode.com/public/DefenseCode_Unix_WildCards_Gone_Wild.txt
    for more information.
  metadata:
    cwe: 'CWE-155: Improper Neutralization of Wildcards or Matching Symbols'
    owasp: 'A1: Injection'
    primary_identifier: bandit.B609
    secondary_identifiers:
    - name: Bandit Test ID B609
      type: bandit_test_id
      value: B609
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B609
    shortlink: https://sg.run/055v
    semgrep.dev:
      rule:
        rule_id: 7KUppP
        version_id: 0bTByP
        url: https://semgrep.dev/playground/r/0bTByP/gitlab.bandit.B609
        origin: custom
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B610
  patterns:
  - pattern: "$X.objects. ... .extra(..., $K = $V, ...)"
  - pattern-not-inside: |
      $V = ['...']
      ...
  - metavariable-pattern:
      metavariable: "$V"
      patterns:
      - pattern: "$V"
      - pattern-not: "[..., '...', ...]"
      - pattern-not: "{..., '...': '...', ...}"
      - pattern-not: '"..."'
      - pattern-not: '[..., "..." % "...", ...]'
      - pattern-not: '{..., $L: "..." % "...", ...}'
      - pattern-not: '{..., $L: "...".format("..."), ...}'
      - pattern-not: '[..., "...".format("..."), ...]'
  message: |
    This is a last resort. You should be careful when using `QuerySet.extra` due
    to SQLi.
  metadata:
    cwe: 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    owasp: 'A1: Injection'
    primary_identifier: bandit.B610
    secondary_identifiers:
    - name: Bandit Test ID B610
      type: bandit_test_id
      value: B610
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B610
    shortlink: https://sg.run/O1wk
    semgrep.dev:
      rule:
        rule_id: pKUG96
        version_id: K3Tenq
        url: https://semgrep.dev/playground/r/K3Tenq/gitlab.bandit.B610
        origin: custom
  severity: ERROR
  languages:
  - python
- id: gitlab.bandit.B611
  patterns:
  - pattern-either:
    - pattern: "$MODEL.objects.raw($QUERY, ...)"
    - pattern: django.db.models.expressions.RawSQL(...)
  message: You should be very careful whenever you write raw SQL. Consider using Django
    ORM before raw SQL. See https://docs.djangoproject.com/en/3.0/topics/db/sql/#passing-parameters-into-raw
  metadata:
    cwe: 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    owasp: 'A1: Injection'
    primary_identifier: bandit.B611
    secondary_identifiers:
    - name: Bandit Test ID B611
      type: bandit_test_id
      value: B611
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B611
    shortlink: https://sg.run/e4xL
    semgrep.dev:
      rule:
        rule_id: 2ZU4Wb
        version_id: qkTG5w
        url: https://semgrep.dev/playground/r/qkTG5w/gitlab.bandit.B611
        origin: custom
  severity: ERROR
  languages:
  - python
- id: gitlab.bandit.B612
  patterns:
  - pattern: logging.config.listen(...)
  message: |
    The logging.config.listen function provides the ability to listen for external configuration
    files on a socket server. Because portions of the configuration are passed through eval(), use
    of this function may open its users to a security risk. While the function only binds to a
    socket on localhost, and so does not accept connections from remote machines, there are
    scenarios where untrusted code could be run under the account of the process which calls
    listen(). logging.config.listen provides the ability to verify bytes received across the socket
    with signature verification or encryption/decryption.
  metadata:
    cwe: 'CWE-94: Improper Control of Generation of Code (''Code Injection'')'
    primary_identifier: bandit.B612
    secondary_identifiers:
    - name: Bandit Test ID B612
      type: bandit_test_id
      value: B612
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B612
    shortlink: https://sg.run/GBEn
    semgrep.dev:
      rule:
        rule_id: d8UN2B
        version_id: w8TrLP
        url: https://semgrep.dev/playground/r/w8TrLP/gitlab.bandit.B612
        origin: custom
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B701
  patterns:
  - pattern-not: jinja2.Environment(..., autoescape=True, ...)
  - pattern-not: jinja2.Environment(..., autoescape=jinja2.select_autoescape(...),
      ...)
  - pattern: jinja2.Environment(...)
  message: Detected a Jinja2 environment without autoescaping. Jinja2 does not autoescape
    by default. This is dangerous if you are rendering to a browser because this allows
    for cross-site scripting (XSS) attacks. If you are in a web context, enable autoescaping
    by setting 'autoescape=True.' You may also consider using 'jinja2.select_autoescape()'
    to only enable automatic escaping for certain file extensions.
  metadata:
    cwe: 'CWE-116: Improper Encoding or Escaping of Output'
    owasp: 'A7: Cross-Site Scripting (XSS)'
    primary_identifier: bandit.B701
    secondary_identifiers:
    - name: Bandit Test ID B701
      type: bandit_test_id
      value: B701
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B701
    shortlink: https://sg.run/v0j0
    semgrep.dev:
      rule:
        rule_id: X5UZBZ
        version_id: l4TblR
        url: https://semgrep.dev/playground/r/l4TblR/gitlab.bandit.B701
        origin: custom
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B702
  pattern: mako.template.Template(...)
  message: |
    Mako templates do not provide a global HTML escaping mechanism.
    This means you must escape all sensitive data in your templates
    using '| u' for URL escaping or '| h' for HTML escaping.
    If you are using Mako to serve web content, consider using
    a system such as Jinja2 which enables global escaping.
  metadata:
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp: 'A7: Cross-Site Scripting (XSS)'
    primary_identifier: bandit.B702
    secondary_identifiers:
    - name: Bandit Test ID B702
      type: bandit_test_id
      value: B702
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B702
    shortlink: https://sg.run/K887
    semgrep.dev:
      rule:
        rule_id: L1Urrl
        version_id: YDT5N7
        url: https://semgrep.dev/playground/r/YDT5N7/gitlab.bandit.B702
        origin: custom
  severity: INFO
  languages:
  - python
- id: gitlab.bandit.B703
  patterns:
  - pattern-not-inside: django.utils.html.format_html(...)
  - pattern-either:
    - patterns:
      - pattern: django.utils.safestring.mark_safe(...)
      - pattern-not: django.utils.safestring.mark_safe("...")
  message: |
    'mark_safe()' is used to mark a string as "safe" for HTML output.
    This disables escaping and could therefore subject the content to
    XSS attacks. Use 'django.utils.html.format_html()' to build HTML
    for rendering instead.
  metadata:
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp: 'A7: Cross-Site Scripting (XSS)'
    primary_identifier: bandit.B703
    secondary_identifiers:
    - name: Bandit Test ID B703
      type: bandit_test_id
      value: B703
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B703
    shortlink: https://sg.run/dgk0
    semgrep.dev:
      rule:
        rule_id: j2UqOR
        version_id: jQTWgP
        url: https://semgrep.dev/playground/r/jQTWgP/gitlab.bandit.B703
        origin: custom
  severity: WARNING
  languages:
  - python
- id: gitlab.eslint.detect-buffer-noassert
  metadata:
    cwe: 'CWE-119: Improper Restriction of Operations within the Bounds of a Memory
      Buffer'
    source-rule-url: https://github.com/nodesecurity/eslint-plugin-security/blob/master/rules/detect-buffer-noassert.js
    primary_identifier: eslint.detect-buffer-noassert
    secondary_identifiers:
    - name: ESLint rule ID security/detect-buffer-noassert
      type: eslint_rule_id
      value: security/detect-buffer-noassert
    license: MIT
    source: https://semgrep.dev/r/gitlab.eslint.detect-buffer-noassert
    shortlink: https://sg.run/E5WB
    semgrep.dev:
      rule:
        rule_id: yyUvwN
        version_id: jQTW6k
        url: https://semgrep.dev/playground/r/jQTW6k/gitlab.eslint.detect-buffer-noassert
        origin: custom
  message: |
    Detected usage of noassert in Buffer API, which allows the offset the be beyond the
    end of the buffer. This could result in writing or reading beyond the end of the buffer.
  pattern-either:
  - pattern: "$OBJ.readUInt8(..., true)"
  - pattern: "$OBJ.readUInt16LE(..., true)"
  - pattern: "$OBJ.readUInt16BE(..., true)"
  - pattern: "$OBJ.readUInt32LE(..., true)"
  - pattern: "$OBJ.readUInt32BE(..., true)"
  - pattern: "$OBJ.readInt8(..., true)"
  - pattern: "$OBJ.readInt16LE(..., true)"
  - pattern: "$OBJ.readInt16BE(..., true)"
  - pattern: "$OBJ.readInt32LE(..., true)"
  - pattern: "$OBJ.readInt32BE(..., true)"
  - pattern: "$OBJ.readFloatLE(..., true)"
  - pattern: "$OBJ.readFloatBE(..., true)"
  - pattern: "$OBJ.readDoubleLE(..., true)"
  - pattern: "$OBJ.readDoubleBE(..., true)"
  - pattern: "$OBJ.writeUInt8(..., true)"
  - pattern: "$OBJ.writeUInt16LE(..., true)"
  - pattern: "$OBJ.writeUInt16BE(..., true)"
  - pattern: "$OBJ.writeUInt32LE(..., true)"
  - pattern: "$OBJ.writeUInt32BE(..., true)"
  - pattern: "$OBJ.writeInt8(..., true)"
  - pattern: "$OBJ.writeInt16LE(..., true)"
  - pattern: "$OBJ.writeInt16BE(..., true)"
  - pattern: "$OBJ.writeInt32LE(..., true)"
  - pattern: "$OBJ.writeInt32BE(..., true)"
  - pattern: "$OBJ.writeFloatLE(..., true)"
  - pattern: "$OBJ.writeFloatBE(..., true)"
  - pattern: "$OBJ.writeDoubleLE(..., true)"
  - pattern: "$OBJ.writeDoubleBE(..., true)"
  severity: WARNING
  languages:
  - javascript
  - typescript
- id: gitlab.eslint.detect-child-process
  metadata:
    cwe: 'CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code
      (''Eval Injection'')'
    owasp: 'A1: Injection'
    source-rule-url: https://github.com/nodesecurity/eslint-plugin-security/blob/master/rules/detect-child-process.js
    primary_identifier: eslint.detect-child-process
    secondary_identifiers:
    - name: ESLint rule ID security/detect-child-process
      type: eslint_rule_id
      value: security/detect-child-process
    license: MIT
    source: https://semgrep.dev/r/gitlab.eslint.detect-child-process
    shortlink: https://sg.run/nqRr
    semgrep.dev:
      rule:
        rule_id: 9AUODZ
        version_id: zyTdjx
        url: https://semgrep.dev/playground/r/zyTdjx/gitlab.eslint.detect-child-process
        origin: custom
  message: |
    Detected non-literal calls to child_process.exec(). This could lead to a command
    injection vulnerability.
  patterns:
  - pattern: child_process.exec(...)
  - pattern-not: child_process.exec('...')
  severity: WARNING
  languages:
  - javascript
  - typescript
- id: gitlab.eslint.detect-disable-mustache-escape
  metadata:
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (XSS)'
    owasp: 'A7: Cross-Site Scripting XSS'
    source-rule-url: https://github.com/nodesecurity/eslint-plugin-security/blob/master/rules/detect-disable-mustache-escape.js
    primary_identifier: eslint.detect-disable-mustache-escape
    secondary_identifiers:
    - name: ESLint rule ID security/detect-disable-mustache-escape
      type: eslint_rule_id
      value: security/detect-disable-mustache-escape
    license: MIT
    source: https://semgrep.dev/r/gitlab.eslint.detect-disable-mustache-escape
    shortlink: https://sg.run/Jjjo
    semgrep.dev:
      rule:
        rule_id: QrUppL
        version_id: 2KTeG0
        url: https://semgrep.dev/playground/r/2KTeG0/gitlab.eslint.detect-disable-mustache-escape
        origin: custom
  message: |
    Markup escaping disabled. This can be used with some template engines to escape
    disabling of HTML entities, which can lead to XSS attacks.
  pattern: "$OBJ.escapeMarkup = false"
  severity: WARNING
  languages:
  - javascript
  - typescript
- id: gitlab.eslint.detect-eval-with-expression
  metadata:
    cwe: 'CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code
      (''Eval Injection'')'
    owasp: 'A1: Injection'
    source-rule-url: https://github.com/nodesecurity/eslint-plugin-security/blob/master/rules/detect-eval-with-expression.js
    primary_identifier: eslint.detect-eval-with-expression
    secondary_identifiers:
    - name: ESLint rule ID security/detect-eval-with-expression
      type: eslint_rule_id
      value: security/detect-eval-with-expression
    license: MIT
    source: https://semgrep.dev/r/gitlab.eslint.detect-eval-with-expression
    shortlink: https://sg.run/ZeD4
    semgrep.dev:
      rule:
        rule_id: 10UZgd
        version_id: o5Tvk0
        url: https://semgrep.dev/playground/r/o5Tvk0/gitlab.eslint.detect-eval-with-expression
        origin: custom
  message: 'Detected eval(variable), which could allow a malicious actor to run arbitrary
    code.

    '
  patterns:
  - pattern: eval($OBJ)
  - pattern-not: eval("...")
  severity: WARNING
  languages:
  - javascript
  - typescript
- id: gitlab.eslint.detect-new-buffer
  metadata:
    source-rule-url: https://github.com/eslint-community/eslint-plugin-security/blob/main/rules/detect-new-buffer.js
    primary_identifier: eslint.detect-new-buffer
    secondary_identifiers:
    - name: ESLint rule ID/detect-new-buffer
      type: eslint_rule_id
      value: detect-new-buffer
    license: MIT
    source: https://semgrep.dev/r/gitlab.eslint.detect-new-buffer
    shortlink: https://sg.run/BJ85
    semgrep.dev:
      rule:
        rule_id: EwU5PB
        version_id: e1T5OQ
        url: https://semgrep.dev/playground/r/e1T5OQ/gitlab.eslint.detect-new-buffer
        origin: custom
  patterns:
  - patterns:
    - pattern-not-inside: |-
        require("safe-buffer")
        ...
    - pattern-not-inside: |-
        import { Buffer } from "safe-buffer"
        ...
    - pattern-inside: function $FUNC(..., $X, ...) { ... }
    - pattern: new Buffer($X,...)
  - pattern-not: 'new Buffer("...",...)

      '
  - pattern-not: 'new Buffer([...] , ...)

      '
  message: |
    Detects instances of new Buffer(argument) where argument is any non-literal value which could
    cause memory leak. Recommended usage is `Buffer.from()` or `Buffer.alloc()`.
  languages:
  - javascript
  - typescript
  severity: ERROR
- id: gitlab.eslint.detect-no-csrf-before-method-override
  metadata:
    cwe: 'CWE-352: Cross-Site Request Forgery (CSRF)'
    source-rule-url: https://github.com/nodesecurity/eslint-plugin-security/blob/master/rules/detect-no-csrf-before-method-override.js
    references:
    - https://github.com/nodesecurity/eslint-plugin-security/blob/master/docs/bypass-connect-csrf-protection-by-abusing.md
    primary_identifier: eslint.detect-no-csrf-before-method-override
    secondary_identifiers:
    - name: ESLint rule ID security/detect-no-csrf-before-method-override
      type: eslint_rule_id
      value: security/detect-no-csrf-before-method-override
    license: MIT
    source: https://semgrep.dev/r/gitlab.eslint.detect-no-csrf-before-method-override
    shortlink: https://sg.run/4PPg
    semgrep.dev:
      rule:
        rule_id: 8GUxxL
        version_id: 6xT3ZY
        url: https://semgrep.dev/playground/r/6xT3ZY/gitlab.eslint.detect-no-csrf-before-method-override
        origin: custom
  message: |
    Detected use of express.csrf() middleware before express.methodOverride(). This can
    allow GET requests (which are not checked by csrf) to turn into POST requests later.
  pattern: |
    express.csrf();
    ...
    express.methodOverride();
  severity: WARNING
  languages:
  - javascript
  - typescript
- id: gitlab.eslint.detect-non-literal-fs-filename
  patterns:
  - pattern-not: $MOD.appendFile("...", ...)
  - pattern-not: $MOD.appendFileSync("...", ...)
  - pattern-not: $MOD.chmod("...", ...)
  - pattern-not: $MOD.chmodSync("...", ...)
  - pattern-not: $MOD.chown("...", ...)
  - pattern-not: $MOD.chownSync("...", ...)
  - pattern-not: $MOD.createReadStream("...", ...)
  - pattern-not: $MOD.createWriteStream("...", ...)
  - pattern-not: $MOD.exists("...", ...)
  - pattern-not: $MOD.existsSync("...", ...)
  - pattern-not: $MOD.lchmod("...", ...)
  - pattern-not: $MOD.lchmodSync("...", ...)
  - pattern-not: $MOD.lchown("...", ...)
  - pattern-not: $MOD.lchownSync("...", ...)
  - pattern-not: $MOD.link("...", "...", ...)
  - pattern-not: $MOD.linkSync("...", "...", ...)
  - pattern-not: $MOD.lstat("...", ...)
  - pattern-not: $MOD.lstatSync("...", ...)
  - pattern-not: $MOD.mkdir("...", ...)
  - pattern-not: $MOD.mkdirSync("...", ...)
  - pattern-not: $MOD.open("...", ...)
  - pattern-not: $MOD.openSync("...", ...)
  - pattern-not: $MOD.readdir("...", ...)
  - pattern-not: $MOD.readdirSync("...", ...)
  - pattern-not: $MOD.readFile("...", ...)
  - pattern-not: $MOD.readFileSync("...", ...)
  - pattern-not: $MOD.readlink("...", ...)
  - pattern-not: $MOD.readlinkSync("...", ...)
  - pattern-not: $MOD.realpath("...", ...)
  - pattern-not: $MOD.realpathSync("...", ...)
  - pattern-not: $MOD.rename("...", "...", ...)
  - pattern-not: $MOD.renameSync("...", "...", ...)
  - pattern-not: $MOD.rmdir("...", ...)
  - pattern-not: $MOD.rmdirSync("...", ...)
  - pattern-not: $MOD.stat("...", ...)
  - pattern-not: $MOD.statSync("...", ...)
  - pattern-not: $MOD.symlink("...", "...", ...)
  - pattern-not: $MOD.symlinkSync("...", "...", ...)
  - pattern-not: $MOD.truncate("...", ...)
  - pattern-not: $MOD.truncateSync("...", ...)
  - pattern-not: $MOD.unlink("...", ...)
  - pattern-not: $MOD.unlinkSync("...", ...)
  - pattern-not: $MOD.unwatchFile("...", ...)
  - pattern-not: $MOD.utimes("...", ...)
  - pattern-not: $MOD.utimesSync("...", ...)
  - pattern-not: $MOD.watch("...", ...)
  - pattern-not: $MOD.watchFile("...", ...)
  - pattern-not: $MOD.writeFile("...", ...)
  - pattern-not: $MOD.writeFileSync("...", ...)
  - pattern-either:
    - pattern: "$MOD.appendFile(...)"
    - pattern: "$MOD.appendFileSync(...)"
    - pattern: "$MOD.chmod(...)"
    - pattern: "$MOD.chmodSync(...)"
    - pattern: "$MOD.chown(...)"
    - pattern: "$MOD.chownSync(...)"
    - pattern: "$MOD.createReadStream(...)"
    - pattern: "$MOD.createWriteStream(...)"
    - pattern: "$MOD.exists(...)"
    - pattern: "$MOD.existsSync(...)"
    - pattern: "$MOD.lchmod(...)"
    - pattern: "$MOD.lchmodSync(...)"
    - pattern: "$MOD.lchown(...)"
    - pattern: "$MOD.lchownSync(...)"
    - pattern: "$MOD.link(...)"
    - pattern: "$MOD.linkSync(...)"
    - pattern: "$MOD.lstat(...)"
    - pattern: "$MOD.lstatSync(...)"
    - pattern: "$MOD.mkdir(...)"
    - pattern: "$MOD.mkdirSync(...)"
    - pattern: "$MOD.open(...)"
    - pattern: "$MOD.openSync(...)"
    - pattern: "$MOD.readdir(...)"
    - pattern: "$MOD.readdirSync(...)"
    - pattern: "$MOD.readFile(...)"
    - pattern: "$MOD.readFileSync(...)"
    - pattern: "$MOD.readlink(...)"
    - pattern: "$MOD.readlinkSync(...)"
    - pattern: "$MOD.realpath(...)"
    - pattern: "$MOD.realpathSync(...)"
    - pattern: "$MOD.rename(...)"
    - pattern: "$MOD.renameSync(...)"
    - pattern: "$MOD.rmdir(...)"
    - pattern: "$MOD.rmdirSync(...)"
    - pattern: "$MOD.stat(...)"
    - pattern: "$MOD.statSync(...)"
    - pattern: "$MOD.symlink(...)"
    - pattern: "$MOD.symlinkSync(...)"
    - pattern: "$MOD.truncate(...)"
    - pattern: "$MOD.truncateSync(...)"
    - pattern: "$MOD.unlink(...)"
    - pattern: "$MOD.unlinkSync(...)"
    - pattern: "$MOD.unwatchFile(...)"
    - pattern: "$MOD.utimes(...)"
    - pattern: "$MOD.utimesSync(...)"
    - pattern: "$MOD.watch(...)"
    - pattern: "$MOD.watchFile(...)"
    - pattern: "$MOD.writeFile(...)"
    - pattern: "$MOD.writeFileSync(...)"
  message: 'A variable is present in the filename argument of fs calls, this might
    allow an attacker to access anything on your system.

    '
  languages:
  - typescript
  - javascript
  severity: WARNING
  metadata:
    cwe: 'CWE-22: Improper Limitation of a Pathname to a Restricted Directory (''Path
      Traversal'')'
    primary_identifier: eslint.detect-non-literal-fs-filename
    secondary_identifiers:
    - name: ESLint rule ID security/detect-non-literal-fs-filename
      type: eslint_rule_id
      value: security/detect-non-literal-fs-filename
    license: MIT
    source: https://semgrep.dev/r/gitlab.eslint.detect-non-literal-fs-filename
    shortlink: https://sg.run/L09Y
    semgrep.dev:
      rule:
        rule_id: bwUO0X
        version_id: yeT8BB
        url: https://semgrep.dev/playground/r/yeT8BB/gitlab.eslint.detect-non-literal-fs-filename
        origin: custom
- id: gitlab.eslint.detect-non-literal-regexp
  patterns:
  - pattern: 'new RegExp($ARG, ...)

      '
  - pattern-not: 'new RegExp("...", ...)

      '
  message: 'RegExp() called with a variable, this might allow an attacker to DOS your
    application with a long-running regular expression.

    '
  languages:
  - javascript
  - typescript
  severity: WARNING
  metadata:
    cwe: 'CWE-185: Incorrect Regular Expression'
    primary_identifier: eslint.detect-non-literal-regexp
    secondary_identifiers:
    - name: ESLint rule ID security/detect-non-literal-regexp
      type: eslint_rule_id
      value: security/detect-non-literal-regexp
    license: MIT
    source: https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp
    shortlink: https://sg.run/70yQ
    semgrep.dev:
      rule:
        rule_id: r6UkPj
        version_id: 9lT2oe
        url: https://semgrep.dev/playground/r/9lT2oe/gitlab.eslint.detect-non-literal-regexp
        origin: custom
- id: gitlab.eslint.detect-non-literal-require
  metadata:
    cwe: 'CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code
      (''Eval Injection'')'
    owasp: 'A1: Injection'
    source-rule-url: https://github.com/nodesecurity/eslint-plugin-security/blob/master/rules/detect-non-literal-require.js
    primary_identifier: eslint.detect-non-literal-require
    secondary_identifiers:
    - name: ESLint rule ID security/detect-non-literal-require
      type: eslint_rule_id
      value: security/detect-non-literal-require
    license: MIT
    source: https://semgrep.dev/r/gitlab.eslint.detect-non-literal-require
    shortlink: https://sg.run/5JJ6
    semgrep.dev:
      rule:
        rule_id: 3qUEE5
        version_id: X0TEOB
        url: https://semgrep.dev/playground/r/X0TEOB/gitlab.eslint.detect-non-literal-require
        origin: custom
  message: |
    Detected the use of require(variable). Calling require with a non-literal argument might
    allow an attacker to load an run arbitrary code, or access arbitrary files.
  patterns:
  - pattern: require($OBJ)
  - pattern-not: require('...')
  severity: WARNING
  languages:
  - javascript
  - typescript
- id: gitlab.eslint.detect-object-injection
  patterns:
  - pattern: "$O[$ARG]"
  - pattern-not: $O["..."]
  - pattern-not: "$O[($ARG : float)]"
  - pattern-not-inside: |
      $ARG = [$V];
      ...
      <... $O[$ARG] ...>;
  - pattern-not-inside: |
      $ARG = $V;
      ...
      <... $O[$ARG] ...>;
  - metavariable-regex:
      metavariable: "$ARG"
      regex: "(?![0-9]+)"
  message: Bracket object notation with user input is present, this might allow an
    attacker to access all properties of the object and even it's prototype, leading
    to possible code execution.
  languages:
  - javascript
  - typescript
  severity: WARNING
  metadata:
    cwe: 'CWE-94: Improper Control of Generation of Code (''Code Injection'')'
    primary_identifier: eslint.detect-object-injection
    secondary_identifiers:
    - name: ESLint rule ID security/detect-object-injection
      type: eslint_rule_id
      value: security/detect-object-injection
    license: MIT
    source: https://semgrep.dev/r/gitlab.eslint.detect-object-injection
    shortlink: https://sg.run/8nbQ
    semgrep.dev:
      rule:
        rule_id: NbUAnd
        version_id: rxTqor
        url: https://semgrep.dev/playground/r/rxTqor/gitlab.eslint.detect-object-injection
        origin: custom
- id: gitlab.eslint.detect-possible-timing-attacks
  patterns:
  - pattern-not: if ($Z == null) { ... };
  - pattern-not: if ($Z === null) { ... };
  - pattern-not: if ($Z != null) { ... };
  - pattern-not: if ($Z !== null) { ... };
  - pattern-not: if ($Q != undefined) { ... };
  - pattern-not: if ($Q !== undefined) { ... };
  - pattern-not: if ($Q == undefined) { ... };
  - pattern-not: if ($Q === undefined) { ... };
  - pattern-not: return $Y == null;
  - pattern-not: return $Y === null;
  - pattern-not: return $Y != null;
  - pattern-not: return $Y !== null;
  - pattern-not: return $Y == undefined;
  - pattern-not: return $Y === undefined;
  - pattern-not: return $Y != undefined;
  - pattern-not: return $Y !== undefined;
  - pattern-either:
    - pattern: |
        if (password == $X) {
            ...
        }
    - pattern: |
        if ($X == password) {
            ...
        }
    - pattern: |
        if (password === $X) {
            ...
        }
    - pattern: |
        if ($X === password) {
            ...
        }
    - pattern: |
        if (pass == $X) {
            ...
        }
    - pattern: |
        if ($X == pass) {
            ...
        }
    - pattern: |
        if (pass === $X) {
            ...
        }
    - pattern: |
        if ($X === pass) {
            ...
        }
    - pattern: |
        if (secret == $X) {
            ...
        }
    - pattern: |
        if ($X == secret) {
            ...
        }
    - pattern: |
        if (secret === $X) {
            ...
        }
    - pattern: |
        if ($X === secret) {
            ...
        }
    - pattern: |
        if (api == $X) {
            ...
        }
    - pattern: |
        if ($X == api) {
            ...
        }
    - pattern: |
        if (api === $X) {
            ...
        }
    - pattern: |
        if ($X === api) {
            ...
        }
    - pattern: |
        if (apiKey == $X) {
            ...
        }
    - pattern: |
        if ($X == apiKey) {
            ...
        }
    - pattern: |
        if (apiKey === $X) {
            ...
        }
    - pattern: |
        if ($X === apiKey) {
            ...
        }
    - pattern: |
        if (apiSecret == $X) {
            ...
        }
    - pattern: |
        if ($X == apiSecret) {
            ...
        }
    - pattern: |
        if (apiSecret === $X) {
            ...
        }
    - pattern: |
        if ($X === apiSecret) {
            ...
        }
    - pattern: |
        if (token == $X) {
            ...
        }
    - pattern: |
        if ($X == token) {
            ...
        }
    - pattern: |
        if (token === $X) {
            ...
        }
    - pattern: |
        if ($X === token) {
            ...
        }
    - pattern: |
        if (hash == $X) {
            ...
        }
    - pattern: |
        if ($X == hash) {
            ...
        }
    - pattern: |
        if (hash === $X) {
            ...
        }
    - pattern: |
        if ($X === hash) {
            ...
        }
    - pattern: |
        if (auth_token == $X) {
            ...
        }
    - pattern: |
        if ($X == auth_token) {
            ...
        }
    - pattern: |
        if (auth_token === $X) {
            ...
        }
    - pattern: |
        if ($X === auth_token) {
            ...
        }
    - pattern: |
        if (password != $X) {
            ...
        }
    - pattern: |
        if ($X != password) {
            ...
        }
    - pattern: |
        if (password !== $X) {
            ...
        }
    - pattern: |
        if ($X !== password) {
            ...
        }
    - pattern: |
        if (pass != $X) {
            ...
        }
    - pattern: |
        if ($X != pass) {
            ...
        }
    - pattern: |
        if (pass !== $X) {
            ...
        }
    - pattern: |
        if ($X !== pass) {
            ...
        }
    - pattern: |
        if (secret != $X) {
            ...
        }
    - pattern: |
        if ($X != secret) {
            ...
        }
    - pattern: |
        if (secret !== $X) {
            ...
        }
    - pattern: |
        if ($X !== secret) {
            ...
        }
    - pattern: |
        if (api != $X) {
            ...
        }
    - pattern: |
        if ($X != api) {
            ...
        }
    - pattern: |
        if (api !== $X) {
            ...
        }
    - pattern: |
        if ($X !== api) {
            ...
        }
    - pattern: |
        if (apiKey != $X) {
            ...
        }
    - pattern: |
        if ($X != apiKey) {
            ...
        }
    - pattern: |
        if (apiKey !== $X) {
            ...
        }
    - pattern: |
        if ($X !== apiKey) {
            ...
        }
    - pattern: |
        if (apiSecret != $X) {
            ...
        }
    - pattern: |
        if ($X != apiSecret) {
            ...
        }
    - pattern: |
        if (apiSecret !== $X) {
            ...
        }
    - pattern: |
        if ($X !== apiSecret) {
            ...
        }
    - pattern: |
        if (token != $X) {
            ...
        }
    - pattern: |
        if ($X != token) {
            ...
        }
    - pattern: |
        if (token !== $X) {
            ...
        }
    - pattern: |
        if ($X !== token) {
            ...
        }
    - pattern: |
        if (hash != $X) {
            ...
        }
    - pattern: |
        if ($X != hash) {
            ...
        }
    - pattern: |
        if (hash !== $X) {
            ...
        }
    - pattern: |
        if ($X !== hash) {
            ...
        }
    - pattern: |
        if (auth_token != $X) {
            ...
        }
    - pattern: |
        if ($X != auth_token) {
            ...
        }
    - pattern: |
        if (auth_token !== $X) {
            ...
        }
    - pattern: |
        if ($X !== auth_token) {
            ...
        }
    - pattern: 'return $X === auth_token;

        '
    - pattern: 'return auth_token === $X;

        '
    - pattern: 'return $X === token;

        '
    - pattern: 'return token === $X;

        '
    - pattern: 'return $X === hash;

        '
    - pattern: 'return hash === $X;

        '
    - pattern: 'return $X === password;

        '
    - pattern: 'return password === $X;

        '
    - pattern: 'return $X === pass;

        '
    - pattern: 'return pass === $X;

        '
    - pattern: 'return $X === apiKey;

        '
    - pattern: 'return apiKey === $X;

        '
    - pattern: 'return $X === apiSecret;

        '
    - pattern: 'return apiSecret === $X;

        '
    - pattern: 'return $X === api_key;

        '
    - pattern: 'return api_key === $X;

        '
    - pattern: 'return $X === api_secret;

        '
    - pattern: 'return api_secret === $X;

        '
    - pattern: 'return $X === secret;

        '
    - pattern: 'return secret === $X;

        '
    - pattern: 'return $X === api;

        '
    - pattern: 'return api === $X;

        '
    - pattern: 'return $X == auth_token;

        '
    - pattern: 'return auth_token == $X;

        '
    - pattern: 'return $X == token;

        '
    - pattern: 'return token == $X;

        '
    - pattern: 'return $X == hash;

        '
    - pattern: 'return hash == $X;

        '
    - pattern: 'return $X == password;

        '
    - pattern: 'return password == $X;

        '
    - pattern: 'return $X == pass;

        '
    - pattern: 'return pass == $X;

        '
    - pattern: 'return $X == apiKey;

        '
    - pattern: 'return apiKey == $X;

        '
    - pattern: 'return $X == apiSecret;

        '
    - pattern: 'return apiSecret == $X;

        '
    - pattern: 'return $X == api_key;

        '
    - pattern: 'return api_key == $X;

        '
    - pattern: 'return $X == api_secret;

        '
    - pattern: 'return api_secret == $X;

        '
    - pattern: 'return $X == secret;

        '
    - pattern: 'return secret == $X;

        '
    - pattern: 'return $X == api;

        '
    - pattern: 'return api == $X;

        '
    - pattern: 'return $X !== auth_token;

        '
    - pattern: 'return auth_token !== $X;

        '
    - pattern: 'return $X !== token;

        '
    - pattern: 'return token !== $X;

        '
    - pattern: 'return $X !== hash;

        '
    - pattern: 'return hash !== $X;

        '
    - pattern: 'return $X !== password;

        '
    - pattern: 'return password !== $X;

        '
    - pattern: 'return $X !== pass;

        '
    - pattern: 'return pass !== $X;

        '
    - pattern: 'return $X !== apiKey;

        '
    - pattern: 'return apiKey !== $X;

        '
    - pattern: 'return $X !== apiSecret;

        '
    - pattern: 'return apiSecret !== $X;

        '
    - pattern: 'return $X !== api_key;

        '
    - pattern: 'return api_key !== $X;

        '
    - pattern: 'return $X !== api_secret;

        '
    - pattern: 'return api_secret !== $X;

        '
    - pattern: 'return $X !== secret;

        '
    - pattern: 'return secret !== $X;

        '
    - pattern: 'return $X !== api;

        '
    - pattern: 'return api !== $X;

        '
    - pattern: 'return $X != auth_token;

        '
    - pattern: 'return auth_token != $X;

        '
    - pattern: 'return $X != token;

        '
    - pattern: 'return token != $X;

        '
    - pattern: 'return $X != hash;

        '
    - pattern: 'return hash != $X;

        '
    - pattern: 'return $X != password;

        '
    - pattern: 'return password != $X;

        '
    - pattern: 'return $X != pass;

        '
    - pattern: 'return pass != $X;

        '
    - pattern: 'return $X != apiKey;

        '
    - pattern: 'return apiKey != $X;

        '
    - pattern: 'return $X != apiSecret;

        '
    - pattern: 'return apiSecret != $X;

        '
    - pattern: 'return $X != api_key;

        '
    - pattern: 'return api_key != $X;

        '
    - pattern: 'return $X != api_secret;

        '
    - pattern: 'return api_secret != $X;

        '
    - pattern: 'return $X != secret;

        '
    - pattern: 'return secret != $X;

        '
    - pattern: 'return $X != api;

        '
    - pattern: 'return api != $X;

        '
  message: 'String comparisons using ''==='', ''!=='', ''!='' and ''=='' is vulnerable
    to timing attacks. More info: https://snyk.io/blog/node-js-timing-attack-ccc-ctf/'
  languages:
  - javascript
  severity: WARNING
  metadata:
    cwe: 'CWE-208: Observable Timing Discrepancy'
    primary_identifier: eslint.detect-possible-timing-attacks
    secondary_identifiers:
    - name: ESLint rule ID security/detect-possible-timing-attacks
      type: eslint_rule_id
      value: security/detect-possible-timing-attacks
    license: MIT
    source: https://semgrep.dev/r/gitlab.eslint.detect-possible-timing-attacks
    shortlink: https://sg.run/GwwB
    semgrep.dev:
      rule:
        rule_id: 4bU22N
        version_id: 1QTBbO
        url: https://semgrep.dev/playground/r/1QTBbO/gitlab.eslint.detect-possible-timing-attacks
        origin: custom
- id: gitlab.eslint.detect-pseudoRandomBytes
  metadata:
    cwe: 'CWE-338: Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)'
    source-rule-url: https://github.com/nodesecurity/eslint-plugin-security/blob/master/rules/detect-pseudoRandomBytes.js
    primary_identifier: eslint.detect-pseudoRandomBytes
    secondary_identifiers:
    - name: ESLint rule ID security/detect-pseudoRandomBytes
      type: eslint_rule_id
      value: security/detect-pseudoRandomBytes
    license: MIT
    source: https://semgrep.dev/r/gitlab.eslint.detect-pseudoRandomBytes
    shortlink: https://sg.run/P88N
    semgrep.dev:
      rule:
        rule_id: gxUYYL
        version_id: pZTokr
        url: https://semgrep.dev/playground/r/pZTokr/gitlab.eslint.detect-pseudoRandomBytes
        origin: custom
  message: 'Detected usage of crypto.pseudoRandomBytes, which does not produce secure
    random numbers.

    '
  pattern: crypto.pseudoRandomBytes
  severity: WARNING
  languages:
  - javascript
  - typescript
- id: gitlab.eslint.react-dangerouslysetinnerhtml
  pattern-either:
  - pattern: "<$X dangerouslySetInnerHTML=... />\n"
  - pattern: "{dangerouslySetInnerHTML: ...}\n"
  message: |
    Setting HTML from code is risky because it’s easy to inadvertently expose your users to a
    cross-site scripting (XSS) attack.
  metadata:
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp: 'A7: Cross-site Scripting (XSS)'
    references:
    - https://reactjs.org/docs/dom-elements.html#dangerouslysetinnerhtml
    primary_identifier: eslint.react-dangerouslysetinnerhtml
    secondary_identifiers:
    - name: ESLint rule ID security/react-dangerouslysetinnerhtml
      type: eslint_rule_id
      value: security/react-dangerouslysetinnerhtml
    license: MIT
    source: https://semgrep.dev/r/gitlab.eslint.react-dangerouslysetinnerhtml
    shortlink: https://sg.run/Awwg
    semgrep.dev:
      rule:
        rule_id: JDUQQY
        version_id: NdTL9Y
        url: https://semgrep.dev/playground/r/NdTL9Y/gitlab.eslint.react-dangerouslysetinnerhtml
        origin: custom
  languages:
  - typescript
  - javascript
  severity: WARNING
- id: gitlab.eslint.react-missing-noopener
  pattern-either:
  - patterns:
    - pattern: '<$X target="_blank" />

        '
    - pattern-not: '<$X target="_blank" rel="..." />

        '
  - patterns:
    - pattern-inside: '<$X target="_blank" rel=... />

        '
    - pattern-regex: rel=["']((?!noopener).)*?["']
  - patterns:
    - pattern: 'React.createElement($A, {target: ''_blank''},...)

        '
    - pattern-not: 'React.createElement($A, {rel: ''...''},...)

        '
  - patterns:
    - pattern: 'React.createElement($A, {target: ''_blank'', rel: $REL},...)

        '
    - metavariable-regex:
        metavariable: "$REL"
        regex: '["'']((?!noopener).)*?[''"]'
  - patterns:
    - pattern: |
        $P = {target: '_blank'};
        ...
        React.createElement($A, $P,...);
    - pattern-not: |
        $P = {rel: '...'};
        ...
        React.createElement($A, $P,...);
  - patterns:
    - pattern: |
        $P = {target: '_blank', rel: $REL};
        ...
        React.createElement($A, $P,...);
    - metavariable-regex:
        metavariable: "$REL"
        regex: '["'']((?!noopener).)*?[''"]'
  message: |
    Missing 'noopener' on an anchor tag where target='_blank'. This could introduce
    a reverse tabnabbing vulnerability. Include 'noopener' when using target='_blank'.
  metadata:
    cwe: 'CWE-200: Exposure of Sensitive Information to an Unauthorized Actor'
    owasp: 'A3: Sensitive Data Exposure'
    references:
    - https://html.spec.whatwg.org/multipage/links.html#link-type-noreferrer
    - https://web.dev/external-anchors-use-rel-noopener/
    - https://owasp.org/www-community/attacks/Reverse_Tabnabbing
    primary_identifier: eslint.react-missing-noopener
    secondary_identifiers:
    - name: ESLint rule ID security/react-missing-noopener
      type: eslint_rule_id
      value: security/react-missing-noopener
    license: MIT
    source: https://semgrep.dev/r/gitlab.eslint.react-missing-noopener
    shortlink: https://sg.run/RPPE
    semgrep.dev:
      rule:
        rule_id: PeUBBq
        version_id: bZTrKO
        url: https://semgrep.dev/playground/r/bZTrKO/gitlab.eslint.react-missing-noopener
        origin: custom
  languages:
  - typescript
  - javascript
  severity: WARNING
- id: gitlab.find_sec_bugs.INSECURE_SMTP_SSL-1
  patterns:
  - pattern-either:
    - pattern-inside: |
        $E = new org.apache.commons.mail.SimpleEmail(...);
        ...
    - pattern-inside: |
        $E = new org.apache.commons.mail.Email(...);
        ...
    - pattern-inside: |
        $E = new org.apache.commons.mail.MultiPartEmail(...);
        ...
    - pattern-inside: |
        $E = new org.apache.commons.mail.HtmlEmail(...);
        ...
    - pattern-inside: |
        $E = new org.apache.commons.mail.ImageHtmlEmail(...);
        ...
  - pattern-not: |
      $E.setSSLOnConnect(true);
      ...
      $E.setSSLCheckServerIdentity(true);
  message: 'Server identity verification is disabled when making SSL connections.

    '
  metadata:
    cwe: 'CWE-297: Improper Validation of Certificate with Host Mismatch'
    primary_identifier: find_sec_bugs.INSECURE_SMTP_SSL-1
    secondary_identifiers:
    - name: Find Security Bugs-INSECURE_SMTP_SSL
      type: find_sec_bugs_type
      value: INSECURE_SMTP_SSL
    license: MIT
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.INSECURE_SMTP_SSL-1
    shortlink: https://sg.run/rNB0
    semgrep.dev:
      rule:
        rule_id: oqUKxo
        version_id: bZTrxx
        url: https://semgrep.dev/playground/r/bZTrxx/gitlab.find_sec_bugs.INSECURE_SMTP_SSL-1
        origin: custom
  severity: ERROR
  languages:
  - java
- id: gitlab.find_sec_bugs.RSA_NO_PADDING-1
  patterns:
  - pattern: javax.crypto.Cipher.getInstance($ALG,...);
  - metavariable-regex:
      metavariable: "$ALG"
      regex: ".*NoPadding.*"
  message: |
    The software uses the RSA algorithm but does not incorporate Optimal Asymmetric
    Encryption Padding (OAEP), which might weaken the encryption.
  metadata:
    cwe: 'CWE-780: Use of RSA Algorithm without OAEP'
    primary_identifier: find_sec_bugs.RSA_NO_PADDING-1
    secondary_identifiers:
    - name: Find Security Bugs-RSA_NO_PADDING
      type: find_sec_bugs_type
      value: RSA_NO_PADDING
    license: MIT
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.RSA_NO_PADDING-1
    shortlink: https://sg.run/7Qr4
    semgrep.dev:
      rule:
        rule_id: x8Ud4w
        version_id: 44TpYw
        url: https://semgrep.dev/playground/r/44TpYw/gitlab.find_sec_bugs.RSA_NO_PADDING-1
        origin: custom
  severity: WARNING
  languages:
  - java
- id: gitlab.find_sec_bugs.SCRIPT_ENGINE_INJECTION-1.SPEL_INJECTION-1.EL_INJECTION-2.SEAM_LOG_INJECTION-1
  patterns:
  - pattern: "(javax.script.ScriptEngine $ENGINE).eval($ARG);"
  - pattern-not: (javax.script.ScriptEngine $ENGINE).eval("...");
  message: |
    The software constructs all or part of a code segment using externally-influenced
    input from an upstream component, but it does not neutralize or incorrectly
    neutralizes special elements that could modify the syntax or behavior of the
    intended code segment.
  languages:
  - java
  severity: ERROR
  metadata:
    cwe: 'CWE-94: Improper Control of Generation of Code (''Code Injection'')'
    primary_identifier: find_sec_bugs.SCRIPT_ENGINE_INJECTION-1.SPEL_INJECTION-1.EL_INJECTION-2.SEAM_LOG_INJECTION-1
    secondary_identifiers:
    - name: Find Security Bugs-SCRIPT_ENGINE_INJECTION
      type: find_sec_bugs_type
      value: SCRIPT_ENGINE_INJECTION
    - name: Find Security Bugs-SPEL_INJECTION
      type: find_sec_bugs_type
      value: SPEL_INJECTION
    - name: Find Security Bugs-EL_INJECTION
      type: find_sec_bugs_type
      value: EL_INJECTION
    - name: Find Security Bugs-SEAM_LOG_INJECTION
      type: find_sec_bugs_type
      value: SEAM_LOG_INJECTION
    license: MIT
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.SCRIPT_ENGINE_INJECTION-1.SPEL_INJECTION-1.EL_INJECTION-2.SEAM_LOG_INJECTION-1
    shortlink: https://sg.run/93d4
    semgrep.dev:
      rule:
        rule_id: YGUYPE
        version_id: yeT8Q5
        url: https://semgrep.dev/playground/r/yeT8Q5/gitlab.find_sec_bugs.SCRIPT_ENGINE_INJECTION-1.SPEL_INJECTION-1.EL_INJECTION-2.SEAM_LOG_INJECTION-1
        origin: custom
- id: gitlab.find_sec_bugs.SCRIPT_ENGINE_INJECTION-2
  patterns:
  - pattern: "(org.springframework.expression.spel.standard.SpelExpressionParser $P).parseExpression($ARG);"
  - pattern-not: (org.springframework.expression.spel.standard.SpelExpressionParser
      $P).parseExpression("...");
  message: |
    The software constructs all or part of a code segment using externally-influenced
    input from an upstream component, but it does not neutralize or incorrectly
    neutralizes special elements that could modify the syntax or behavior of the
    intended code segment.
  languages:
  - java
  severity: ERROR
  metadata:
    cwe: 'CWE-94: Improper Control of Generation of Code (''Code Injection'')'
    primary_identifier: find_sec_bugs.SCRIPT_ENGINE_INJECTION-2
    secondary_identifiers:
    - name: Find Security Bugs-SCRIPT_ENGINE_INJECTION
      type: find_sec_bugs_type
      value: SCRIPT_ENGINE_INJECTION
    license: MIT
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.SCRIPT_ENGINE_INJECTION-2
    shortlink: https://sg.run/yJYr
    semgrep.dev:
      rule:
        rule_id: 6JUyKR
        version_id: rxTqb8
        url: https://semgrep.dev/playground/r/rxTqb8/gitlab.find_sec_bugs.SCRIPT_ENGINE_INJECTION-2
        origin: custom
- id: gitlab.find_sec_bugs.UNENCRYPTED_SOCKET-1.UNENCRYPTED_SERVER_SOCKET-1
  patterns:
  - pattern: new java.net.Socket(...)
  languages:
  - java
  message: |
    Beyond using an SSL socket, you need to make sure your use of SSLSocketFactory
    does all the appropriate certificate validation checks to make sure you are not
    subject to man-in-the-middle attacks. Please read the OWASP Transport Layer
    Protection Cheat Sheet for details on how to do this correctly.
  metadata:
    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
    primary_identifier: find_sec_bugs.UNENCRYPTED_SOCKET-1.UNENCRYPTED_SERVER_SOCKET-1
    secondary_identifiers:
    - name: Find Security Bugs-UNENCRYPTED_SOCKET
      type: find_sec_bugs_type
      value: UNENCRYPTED_SOCKET
    - name: Find Security Bugs-UNENCRYPTED_SERVER_SOCKET
      type: find_sec_bugs_type
      value: UNENCRYPTED_SERVER_SOCKET
    license: MIT
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.UNENCRYPTED_SOCKET-1.UNENCRYPTED_SERVER_SOCKET-1
    shortlink: https://sg.run/4k1Z
    semgrep.dev:
      rule:
        rule_id: nJUn7D
        version_id: A8T8nw
        url: https://semgrep.dev/playground/r/A8T8nw/gitlab.find_sec_bugs.UNENCRYPTED_SOCKET-1.UNENCRYPTED_SERVER_SOCKET-1
        origin: custom
  severity: WARNING
- id: gitlab.flawfinder.AddAccessAllowedAce-1
  languages:
  - c
  message: 'Make sure that you set inheritance by hand if you wish it to inherit.

    '
  metadata:
    cwe: 'CWE-732: This doesn''t set the inheritance bits in the access control entry
      (ACE) header (CWE-732)'
    primary_identifier: flawfinder.AddAccessAllowedAce-1
    secondary_identifiers:
    - name: Flawfinder - AddAccessAllowedAce
      type: flawfinder_func_name
      value: AddAccessAllowedAce
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.AddAccessAllowedAce-1
    shortlink: https://sg.run/1G7b
    semgrep.dev:
      rule:
        rule_id: 7KUpk7
        version_id: RGT7NO
        url: https://semgrep.dev/playground/r/RGT7NO/gitlab.flawfinder.AddAccessAllowedAce-1
        origin: custom
  pattern: AddAccessAllowedAce(...)
  severity: WARNING
- id: gitlab.flawfinder.CreateProcess-1
  languages:
  - c
  message: |
    Specify the application path in the first argument, NOT as part of the second, or embedded
    spaces could allow an attacker to force a different program to run.
  metadata:
    cwe: 'CWE-78: This causes a new process to execute and is difficult to use safely
      (CWE-78)'
    primary_identifier: flawfinder.CreateProcess-1
    secondary_identifiers:
    - name: Flawfinder - CreateProcess
      type: flawfinder_func_name
      value: CreateProcess
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.CreateProcess-1
    shortlink: https://sg.run/Q4KD
    semgrep.dev:
      rule:
        rule_id: YGUQ94
        version_id: qkTGAK
        url: https://semgrep.dev/playground/r/qkTGAK/gitlab.flawfinder.CreateProcess-1
        origin: custom
  pattern: CreateProcess(...)
  severity: WARNING
- id: gitlab.flawfinder.CreateProcessAsUser-1.CreateProcessWithLogon-1
  languages:
  - c
  message: 'Especially watch out for embedded spaces.

    '
  metadata:
    cwe: 'CWE-78: This causes a new process to execute and is difficult to use safely
      (CWE-78)'
    primary_identifier: flawfinder.CreateProcessAsUser-1.CreateProcessWithLogon-1
    secondary_identifiers:
    - name: Flawfinder - CreateProcessAsUser
      type: flawfinder_func_name
      value: CreateProcessAsUser
    - name: Flawfinder - CreateProcessWithLogon
      type: flawfinder_func_name
      value: CreateProcessWithLogon
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.CreateProcessAsUser-1.CreateProcessWithLogon-1
    shortlink: https://sg.run/34Yg
    semgrep.dev:
      rule:
        rule_id: 6JU6Pz
        version_id: l4Tb3e
        url: https://semgrep.dev/playground/r/l4Tb3e/gitlab.flawfinder.CreateProcessAsUser-1.CreateProcessWithLogon-1
        origin: custom
  pattern-either:
  - pattern: CreateProcessAsUser(...)
  - pattern: CreateProcessWithLogon(...)
  severity: WARNING
- id: gitlab.flawfinder.EVP_des_ecb-1.EVP_des_cbc-1.EVP_des_cfb-1.EVP_des_ofb-1.EVP_desx_cbc-1
  languages:
  - c
  message: 'Use a different patent-free encryption algorithm with a larger keysize,
    such as 3DES or AES.

    '
  metadata:
    cwe: 'CWE-327: DES only supports a 56-bit keysize, which is too small given today''s
      computers (CWE-327)'
    primary_identifier: flawfinder.EVP_des_ecb-1.EVP_des_cbc-1.EVP_des_cfb-1.EVP_des_ofb-1.EVP_desx_cbc-1
    secondary_identifiers:
    - name: Flawfinder - EVP_des_ecb
      type: flawfinder_func_name
      value: EVP_des_ecb
    - name: Flawfinder - EVP_des_cbc
      type: flawfinder_func_name
      value: EVP_des_cbc
    - name: Flawfinder - EVP_des_cfb
      type: flawfinder_func_name
      value: EVP_des_cfb
    - name: Flawfinder - EVP_des_ofb
      type: flawfinder_func_name
      value: EVP_des_ofb
    - name: Flawfinder - EVP_desx_cbc
      type: flawfinder_func_name
      value: EVP_desx_cbc
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.EVP_des_ecb-1.EVP_des_cbc-1.EVP_des_cfb-1.EVP_des_ofb-1.EVP_desx_cbc-1
    shortlink: https://sg.run/lxzL
    semgrep.dev:
      rule:
        rule_id: wdUGO7
        version_id: 8KTX0l
        url: https://semgrep.dev/playground/r/8KTX0l/gitlab.flawfinder.EVP_des_ecb-1.EVP_des_cbc-1.EVP_des_cfb-1.EVP_des_ofb-1.EVP_desx_cbc-1
        origin: custom
  pattern-either:
  - pattern: EVP_des_ecb(...)
  - pattern: EVP_des_cbc(...)
  - pattern: EVP_des_cfb(...)
  - pattern: EVP_des_ofb(...)
  - pattern: EVP_desx_cbc(...)
  severity: ERROR
- id: gitlab.flawfinder.EVP_rc4_40-1.EVP_rc2_40_cbc-1.EVP_rc2_64_cbc-1
  languages:
  - c
  message: 'Use a different patent-free encryption algorithm with a larger keysize,
    such as 3DES or AES.

    '
  metadata:
    cwe: 'CWE-327: These keysizes are too small given today''s computers (CWE-327)'
    primary_identifier: flawfinder.EVP_rc4_40-1.EVP_rc2_40_cbc-1.EVP_rc2_64_cbc-1
    secondary_identifiers:
    - name: Flawfinder - EVP_rc4_40
      type: flawfinder_func_name
      value: EVP_rc4_40
    - name: Flawfinder - EVP_rc2_40_cbc
      type: flawfinder_func_name
      value: EVP_rc2_40_cbc
    - name: Flawfinder - EVP_rc2_64_cbc
      type: flawfinder_func_name
      value: EVP_rc2_64_cbc
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.EVP_rc4_40-1.EVP_rc2_40_cbc-1.EVP_rc2_64_cbc-1
    shortlink: https://sg.run/YXxW
    semgrep.dev:
      rule:
        rule_id: x8U2ke
        version_id: gETjp7
        url: https://semgrep.dev/playground/r/gETjp7/gitlab.flawfinder.EVP_rc4_40-1.EVP_rc2_40_cbc-1.EVP_rc2_64_cbc-1
        origin: custom
  pattern-either:
  - pattern: EVP_rc4_40(...)
  - pattern: EVP_rc2_40_cbc(...)
  - pattern: EVP_rc2_64_cbc(...)
  severity: ERROR
- id: gitlab.flawfinder.GetTempFileName-1
  languages:
  - c
  message: 'Temporary file race condition in certain cases.

    '
  metadata:
    cwe: 'CWE-377: Temporary file race condition in certain cases (e.g., if run as
      SYSTEM in many versions of Windows) (CWE-377)'
    primary_identifier: flawfinder.GetTempFileName-1
    secondary_identifiers:
    - name: Flawfinder - GetTempFileName
      type: flawfinder_func_name
      value: GetTempFileName
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.GetTempFileName-1
    shortlink: https://sg.run/JjGo
    semgrep.dev:
      rule:
        rule_id: pKUw7J
        version_id: o5TvGQ
        url: https://semgrep.dev/playground/r/o5TvGQ/gitlab.flawfinder.GetTempFileName-1
        origin: custom
  pattern: GetTempFileName(...)
  severity: WARNING
- id: gitlab.flawfinder.InitializeCriticalSection-1
  languages:
  - c
  message: 'Use InitializeCriticalSectionAndSpinCount instead.

    '
  metadata:
    cwe: 'CWE-754: Exceptions can be thrown in low-memory situations'
    primary_identifier: flawfinder.InitializeCriticalSection-1
    secondary_identifiers:
    - name: Flawfinder - InitializeCriticalSection
      type: flawfinder_func_name
      value: InitializeCriticalSection
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.InitializeCriticalSection-1
    shortlink: https://sg.run/967k
    semgrep.dev:
      rule:
        rule_id: L1Urv6
        version_id: A8T8v9
        url: https://semgrep.dev/playground/r/A8T8v9/gitlab.flawfinder.InitializeCriticalSection-1
        origin: custom
  pattern: InitializeCriticalSection(...)
  severity: WARNING
- id: gitlab.flawfinder.LoadLibrary-1
  languages:
  - c
  message: |
    Use LoadLibraryEx with one of the search flags, or call SetSearchPathMode to use a safe search
    path, or pass a full path to the library.
  metadata:
    cwe: 'CWE-20: Ensure that the full path to the library is specified, or current
      directory may be used (CWE-829, CWE-20)'
    primary_identifier: flawfinder.LoadLibrary-1
    secondary_identifiers:
    - name: Flawfinder - LoadLibrary
      type: flawfinder_func_name
      value: LoadLibrary
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.LoadLibrary-1
    shortlink: https://sg.run/y6n8
    semgrep.dev:
      rule:
        rule_id: 8GUx8Y
        version_id: BjT54x
        url: https://semgrep.dev/playground/r/BjT54x/gitlab.flawfinder.LoadLibrary-1
        origin: custom
  pattern: LoadLibrary(...)
  severity: WARNING
- id: gitlab.flawfinder.LoadLibraryEx-1
  languages:
  - c
  message: |
    Use a flag like LOAD_LIBRARY_SEARCH_SYSTEM32 or LOAD_LIBRARY_SEARCH_APPLICATION_DIR to search
    only desired folders.
  metadata:
    cwe: 'CWE-20: Ensure that the full path to the library is specified, or current
      directory may be used (CWE-829, CWE-20)'
    primary_identifier: flawfinder.LoadLibraryEx-1
    secondary_identifiers:
    - name: Flawfinder - LoadLibraryEx
      type: flawfinder_func_name
      value: LoadLibraryEx
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.LoadLibraryEx-1
    shortlink: https://sg.run/rkn6
    semgrep.dev:
      rule:
        rule_id: gxUYQ3
        version_id: DkTJB9
        url: https://semgrep.dev/playground/r/DkTJB9/gitlab.flawfinder.LoadLibraryEx-1
        origin: custom
  pattern: LoadLibraryEx(...)
  severity: WARNING
- id: gitlab.flawfinder.MultiByteToWideChar-1
  languages:
  - c
  message: 'The software does not properly handle when an input contains Unicode encoding.

    '
  metadata:
    cwe: 'CWE-120: Requires maximum length in CHARACTERS, not bytes (CWE-120)'
    primary_identifier: flawfinder.MultiByteToWideChar-1
    secondary_identifiers:
    - name: Flawfinder - MultiByteToWideChar
      type: flawfinder_func_name
      value: MultiByteToWideChar
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.MultiByteToWideChar-1
    shortlink: https://sg.run/N82x
    semgrep.dev:
      rule:
        rule_id: qNUb31
        version_id: 0bTBZE
        url: https://semgrep.dev/playground/r/0bTBZE/gitlab.flawfinder.MultiByteToWideChar-1
        origin: custom
  pattern: MultiByteToWideChar(...)
  severity: INFO
- id: gitlab.flawfinder.RpcImpersonateClient-1.ImpersonateLoggedOnUser-1.CoImpersonateClient-1.ImpersonateNamedPipeClient-1.ImpersonateDdeClientWindow-1.ImpersonateSecurityContext-1.SetThreadToken-1
  languages:
  - c
  message: 'Make sure the return value is checked, and do not continue if a failure
    is reported.

    '
  metadata:
    cwe: 'CWE-250: If this call fails, the program could fail to drop heightened privileges
      (CWE-250)'
    primary_identifier: flawfinder.RpcImpersonateClient-1.ImpersonateLoggedOnUser-1.CoImpersonateClient-1.ImpersonateNamedPipeClient-1.ImpersonateDdeClientWindow-1.ImpersonateSecurityContext-1.SetThreadToken-1
    secondary_identifiers:
    - name: Flawfinder - RpcImpersonateClient
      type: flawfinder_func_name
      value: RpcImpersonateClient
    - name: Flawfinder - ImpersonateLoggedOnUser
      type: flawfinder_func_name
      value: ImpersonateLoggedOnUser
    - name: Flawfinder - CoImpersonateClient
      type: flawfinder_func_name
      value: CoImpersonateClient
    - name: Flawfinder - ImpersonateNamedPipeClient
      type: flawfinder_func_name
      value: ImpersonateNamedPipeClient
    - name: Flawfinder - ImpersonateDdeClientWindow
      type: flawfinder_func_name
      value: ImpersonateDdeClientWindow
    - name: Flawfinder - ImpersonateSecurityContext
      type: flawfinder_func_name
      value: ImpersonateSecurityContext
    - name: Flawfinder - SetThreadToken
      type: flawfinder_func_name
      value: SetThreadToken
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.RpcImpersonateClient-1.ImpersonateLoggedOnUser-1.CoImpersonateClient-1.ImpersonateNamedPipeClient-1.ImpersonateDdeClientWindow-1.ImpersonateSecurityContext-1.SetThreadToken-1
    shortlink: https://sg.run/rk96
    semgrep.dev:
      rule:
        rule_id: 0oUJjL
        version_id: DkTJL9
        url: https://semgrep.dev/playground/r/DkTJL9/gitlab.flawfinder.RpcImpersonateClient-1.ImpersonateLoggedOnUser-1.CoImpersonateClient-1.ImpersonateNamedPipeClient-1.ImpersonateDdeClientWindow-1.ImpersonateSecurityContext-1.SetThreadToken-1
        origin: custom
  pattern-either:
  - pattern: RpcImpersonateClient(...)
  - pattern: ImpersonateLoggedOnUser(...)
  - pattern: CoImpersonateClient(...)
  - pattern: ImpersonateNamedPipeClient(...)
  - pattern: ImpersonateDdeClientWindow(...)
  - pattern: ImpersonateSecurityContext(...)
  - pattern: SetThreadToken(...)
  severity: ERROR
- id: gitlab.flawfinder.SetSecurityDescriptorDacl-1
  languages:
  - c
  message: |
    Never create NULL ACLs; an attacker can set it to Everyone (Deny
    All Access)
  metadata:
    cwe: 'CWE-732: Never create NULL ACLs; an attacker can set it to Everyone (Deny
      All Access), which would even forbid administrator access (CWE-732)'
    primary_identifier: flawfinder.SetSecurityDescriptorDacl-1
    secondary_identifiers:
    - name: Flawfinder - SetSecurityDescriptorDacl
      type: flawfinder_func_name
      value: SetSecurityDescriptorDacl
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.SetSecurityDescriptorDacl-1
    shortlink: https://sg.run/brkZ
    semgrep.dev:
      rule:
        rule_id: QrUpe8
        version_id: WrT9eo
        url: https://semgrep.dev/playground/r/WrT9eo/gitlab.flawfinder.SetSecurityDescriptorDacl-1
        origin: custom
  pattern: SetSecurityDescriptorDacl(...)
  severity: ERROR
- id: gitlab.flawfinder.StrCat-1.StrCatA-1.StrcatW-1.lstrcatA-1.lstrcatW-1.strCatBuff-1.StrCatBuffA-1.StrCatBuffW-1.StrCatChainW-1._tccat-1._mbccat-1._ftcscat-1.StrCatN-1.StrCatNA-1.StrCatNW-1.StrNCat-1.StrNCatA-1.StrNCatW-1.lstrncat-1.lstrcatnA-1.lstrcatnW-1
  languages:
  - c
  message: 'Buffer overflow is not checked.

    '
  metadata:
    cwe: 'CWE-120: Does not check for buffer overflows when concatenating to destination
      [MS-banned] (CWE-120)'
    primary_identifier: flawfinder.StrCat-1.StrCatA-1.StrcatW-1.lstrcatA-1.lstrcatW-1.strCatBuff-1.StrCatBuffA-1.StrCatBuffW-1.StrCatChainW-1._tccat-1._mbccat-1._ftcscat-1.StrCatN-1.StrCatNA-1.StrCatNW-1.StrNCat-1.StrNCatA-1.StrNCatW-1.lstrncat-1.lstrcatnA-1.lstrcatnW-1
    secondary_identifiers:
    - name: Flawfinder - StrCat
      type: flawfinder_func_name
      value: StrCat
    - name: Flawfinder - StrCatA
      type: flawfinder_func_name
      value: StrCatA
    - name: Flawfinder - StrcatW
      type: flawfinder_func_name
      value: StrcatW
    - name: Flawfinder - lstrcatA
      type: flawfinder_func_name
      value: lstrcatA
    - name: Flawfinder - lstrcatW
      type: flawfinder_func_name
      value: lstrcatW
    - name: Flawfinder - strCatBuff
      type: flawfinder_func_name
      value: strCatBuff
    - name: Flawfinder - StrCatBuffA
      type: flawfinder_func_name
      value: StrCatBuffA
    - name: Flawfinder - StrCatBuffW
      type: flawfinder_func_name
      value: StrCatBuffW
    - name: Flawfinder - StrCatChainW
      type: flawfinder_func_name
      value: StrCatChainW
    - name: Flawfinder - _tccat
      type: flawfinder_func_name
      value: _tccat
    - name: Flawfinder - _mbccat
      type: flawfinder_func_name
      value: _mbccat
    - name: Flawfinder - _ftcscat
      type: flawfinder_func_name
      value: _ftcscat
    - name: Flawfinder - StrCatN
      type: flawfinder_func_name
      value: StrCatN
    - name: Flawfinder - StrCatNA
      type: flawfinder_func_name
      value: StrCatNA
    - name: Flawfinder - StrCatNW
      type: flawfinder_func_name
      value: StrCatNW
    - name: Flawfinder - StrNCat
      type: flawfinder_func_name
      value: StrNCat
    - name: Flawfinder - StrNCatA
      type: flawfinder_func_name
      value: StrNCatA
    - name: Flawfinder - StrNCatW
      type: flawfinder_func_name
      value: StrNCatW
    - name: Flawfinder - lstrncat
      type: flawfinder_func_name
      value: lstrncat
    - name: Flawfinder - lstrcatnA
      type: flawfinder_func_name
      value: lstrcatnA
    - name: Flawfinder - lstrcatnW
      type: flawfinder_func_name
      value: lstrcatnW
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.StrCat-1.StrCatA-1.StrcatW-1.lstrcatA-1.lstrcatW-1.strCatBuff-1.StrCatBuffA-1.StrCatBuffW-1.StrCatChainW-1._tccat-1._mbccat-1._ftcscat-1.StrCatN-1.StrCatNA-1.StrCatNW-1.StrNCat-1.StrNCatA-1.StrNCatW-1.lstrncat-1.lstrcatnA-1.lstrcatnW-1
    shortlink: https://sg.run/kkoX
    semgrep.dev:
      rule:
        rule_id: lBUzG9
        version_id: K3TeRY
        url: https://semgrep.dev/playground/r/K3TeRY/gitlab.flawfinder.StrCat-1.StrCatA-1.StrcatW-1.lstrcatA-1.lstrcatW-1.strCatBuff-1.StrCatBuffA-1.StrCatBuffW-1.StrCatChainW-1._tccat-1._mbccat-1._ftcscat-1.StrCatN-1.StrCatNA-1.StrCatNW-1.StrNCat-1.StrNCatA-1.StrNCatW-1.lstrncat-1.lstrcatnA-1.lstrcatnW-1
        origin: custom
  pattern-either:
  - pattern: StrCat(...)
  - pattern: StrCatA(...)
  - pattern: StrcatW(...)
  - pattern: lstrcatA(...)
  - pattern: lstrcatW(...)
  - pattern: strCatBuff(...)
  - pattern: StrCatBuffA(...)
  - pattern: StrCatBuffW(...)
  - pattern: StrCatChainW(...)
  - pattern: _tccat(...)
  - pattern: _mbccat(...)
  - pattern: _ftcscat(...)
  - pattern: StrCatN(...)
  - pattern: StrCatNA(...)
  - pattern: StrCatNW(...)
  - pattern: StrNCat(...)
  - pattern: StrNCatA(...)
  - pattern: StrNCatW(...)
  - pattern: lstrncat(...)
  - pattern: lstrcatnA(...)
  - pattern: lstrcatnW(...)
  severity: ERROR
- id: gitlab.flawfinder.access-1
  languages:
  - c
  message: 'Set up the correct permissions (e.g., using setuid()) and try to open
    the file directly.

    '
  metadata:
    cwe: 'CWE-362: This usually indicates a security flaw.  If an attacker can change
      anything along the path between the call to access() and the file''s actual
      use (e.g., by moving files), the attacker can exploit the race condition (CWE-362/CWE-367!)'
    primary_identifier: flawfinder.access-1
    secondary_identifiers:
    - name: Flawfinder - access
      type: flawfinder_func_name
      value: access
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.access-1
    shortlink: https://sg.run/ZkX7
    semgrep.dev:
      rule:
        rule_id: BYU731
        version_id: RGT7NR
        url: https://semgrep.dev/playground/r/RGT7NR/gitlab.flawfinder.access-1
        origin: custom
  pattern: access(...)
  severity: ERROR
- id: gitlab.flawfinder.atoi-1.atol-1._wtoi-1._wtoi64-1
  languages:
  - c
  message: |
    If source untrusted, check both minimum and maximum, even if the input had no minus sign (large
    numbers can roll over into negative number; consider saving to an unsigned value if that is
    intended).
  metadata:
    cwe: 'CWE-190: Unless checked, the resulting number can exceed the expected range
      (CWE-190)'
    primary_identifier: flawfinder.atoi-1.atol-1._wtoi-1._wtoi64-1
    secondary_identifiers:
    - name: Flawfinder - atoi
      type: flawfinder_func_name
      value: atoi
    - name: Flawfinder - atol
      type: flawfinder_func_name
      value: atol
    - name: Flawfinder - _wtoi
      type: flawfinder_func_name
      value: _wtoi
    - name: Flawfinder - _wtoi64
      type: flawfinder_func_name
      value: _wtoi64
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.atoi-1.atol-1._wtoi-1._wtoi64-1
    shortlink: https://sg.run/jk6Z
    semgrep.dev:
      rule:
        rule_id: EwUQzn
        version_id: GxTyg9
        url: https://semgrep.dev/playground/r/GxTyg9/gitlab.flawfinder.atoi-1.atol-1._wtoi-1._wtoi64-1
        origin: custom
  pattern-either:
  - pattern: atoi(...)
  - pattern: atol(...)
  - pattern: _wtoi(...)
  - pattern: _wtoi64(...)
  severity: INFO
- id: gitlab.flawfinder.char-1.TCHAR-1.wchar_t-1
  languages:
  - c
  message: |
    Perform bounds checking, use functions that limit length, or ensure that the size is larger
    than the maximum possible length.
  metadata:
    cwe: 'CWE-120: Statically-sized arrays can be improperly restricted, leading to
      potential overflows or other issues (CWE-119!/CWE-120)'
    primary_identifier: flawfinder.char-1.TCHAR-1.wchar_t-1
    secondary_identifiers:
    - name: Flawfinder - char
      type: flawfinder_func_name
      value: char
    - name: Flawfinder - TCHAR
      type: flawfinder_func_name
      value: TCHAR
    - name: Flawfinder - wchar_t
      type: flawfinder_func_name
      value: wchar_t
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.char-1.TCHAR-1.wchar_t-1
    shortlink: https://sg.run/w1kx
    semgrep.dev:
      rule:
        rule_id: PeUBNk
        version_id: qkTGrX
        url: https://semgrep.dev/playground/r/qkTGrX/gitlab.flawfinder.char-1.TCHAR-1.wchar_t-1
        origin: custom
  pattern-either:
  - patterns:
    - pattern-regex: "(wchar_t) *[a-zA-Z0-9_]+\\[.*\\]"
    - pattern-not-regex: (wchar_t) *[a-zA-Z0-9_]+\[\](\s|)\= *([a-zA-Z]|)(\s|)("|{)(.*)
  - patterns:
    - pattern-regex: "(char) *[a-zA-Z0-9_]+\\[.*\\]"
    - pattern-not-regex: (char) *[a-zA-Z0-9_]+\[\](\s|)\= *([a-zA-Z]|)(\s|)("|{)(.*)
  - patterns:
    - pattern-regex: "(TCHAR) *[a-zA-Z0-9_]+\\[.*\\]"
    - pattern-not-regex: (TCHAR) *[a-zA-Z0-9_]+\[\](\s|)\= *([a-zA-Z]|)(\s|)("|{)(.*)
  - patterns:
    - pattern-regex: static *(const)? *(wchar_t|char|TCHAR) *[a-zA-Z0-9_]+ *\[.*\]\*(={.*})?
  - patterns:
    - pattern-regex: "(.*|)(\\s|)\\=(\\s|)\\((char.*) (malloc)\\(.*\\[[0-9]+\\].*\\)"
  severity: INFO
- id: gitlab.flawfinder.chgrp-1
  languages:
  - c
  message: 'Use fchgrp( ) instead.

    '
  metadata:
    cwe: 'CWE-362: This accepts filename arguments; if an attacker can move those
      files, a race condition results. (CWE-362)'
    primary_identifier: flawfinder.chgrp-1
    secondary_identifiers:
    - name: Flawfinder - chgrp
      type: flawfinder_func_name
      value: chgrp
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.chgrp-1
    shortlink: https://sg.run/nknG
    semgrep.dev:
      rule:
        rule_id: DbUKrn
        version_id: A8T8vg
        url: https://semgrep.dev/playground/r/A8T8vg/gitlab.flawfinder.chgrp-1
        origin: custom
  pattern: chgrp(...)
  severity: ERROR
- id: gitlab.flawfinder.chmod-1
  languages:
  - c
  message: 'Use fchmod( ) instead.

    '
  metadata:
    cwe: 'CWE-362: This accepts filename arguments; if an attacker can move those
      files, a race condition results. (CWE-362)'
    primary_identifier: flawfinder.chmod-1
    secondary_identifiers:
    - name: Flawfinder - chmod
      type: flawfinder_func_name
      value: chmod
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.chmod-1
    shortlink: https://sg.run/EOe8
    semgrep.dev:
      rule:
        rule_id: WAUP43
        version_id: BjT54b
        url: https://semgrep.dev/playground/r/BjT54b/gitlab.flawfinder.chmod-1
        origin: custom
  pattern: chmod(...)
  severity: ERROR
- id: gitlab.flawfinder.chown-1
  languages:
  - c
  message: 'Use fchown( ) instead.

    '
  metadata:
    cwe: 'CWE-362: This accepts filename arguments; if an attacker can move those
      files, a race condition results. (CWE-362)'
    primary_identifier: flawfinder.chown-1
    secondary_identifiers:
    - name: Flawfinder - chown
      type: flawfinder_func_name
      value: chown
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.chown-1
    shortlink: https://sg.run/7Gpv
    semgrep.dev:
      rule:
        rule_id: 0oUJPK
        version_id: DkTJBw
        url: https://semgrep.dev/playground/r/DkTJBw/gitlab.flawfinder.chown-1
        origin: custom
  pattern: chown(...)
  severity: ERROR
- id: gitlab.flawfinder.chroot-1
  languages:
  - c
  message: |
    Make sure the program immediately chdir("/"), closes file descriptors, and drops root
    privileges, and that all necessary files (and no more!) are in the new root.
  metadata:
    cwe: 'CWE-22: chroot can be very helpful, but is hard to use correctly (CWE-250,
      CWE-22)'
    primary_identifier: flawfinder.chroot-1
    secondary_identifiers:
    - name: Flawfinder - chroot
      type: flawfinder_func_name
      value: chroot
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.chroot-1
    shortlink: https://sg.run/N8Dx
    semgrep.dev:
      rule:
        rule_id: 3qUE0p
        version_id: 0bTB0E
        url: https://semgrep.dev/playground/r/0bTB0E/gitlab.flawfinder.chroot-1
        origin: custom
  pattern: chroot(...)
  severity: WARNING
- id: gitlab.flawfinder.crypt-1.crypt_r-1
  languages:
  - c
  message: 'Use a different algorithm, such as SHA-256, with a larger, non-repeating
    salt.

    '
  metadata:
    cwe: 'CWE-327: The crypt functions use a poor one-way hashing algorithm; since
      they only accept passwords of 8 characters or fewer and only a two-byte salt,
      they are excessively vulnerable to dictionary attacks given today''s faster
      computing equipment (CWE-327)'
    primary_identifier: flawfinder.crypt-1.crypt_r-1
    secondary_identifiers:
    - name: Flawfinder - crypt
      type: flawfinder_func_name
      value: crypt
    - name: Flawfinder - crypt_r
      type: flawfinder_func_name
      value: crypt_r
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.crypt-1.crypt_r-1
    shortlink: https://sg.run/657w
    semgrep.dev:
      rule:
        rule_id: OrUD57
        version_id: QkTDLO
        url: https://semgrep.dev/playground/r/QkTDLO/gitlab.flawfinder.crypt-1.crypt_r-1
        origin: custom
  pattern-either:
  - pattern: crypt(...)
  - pattern: crypt_r(...)
  severity: ERROR
- id: gitlab.flawfinder.cuserid-1
  languages:
  - c
  message: 'Use getpwuid(geteuid()) and extract the desired information instead.

    '
  metadata:
    cwe: 'CWE-120: Exactly what cuserid() does is poorly defined (e.g., some systems
      use the effective uid, like Linux, while others like System V use the real uid).
      Thus, you can''t trust what it does. It''s certainly not portable (The cuserid
      function was included in the 1988 version of POSIX, but removed from the 1990
      version).  Also, if passed a non-null parameter, there''s a risk of a buffer
      overflow if the passed-in buffer is not at least L_cuserid characters long (CWE-120)'
    primary_identifier: flawfinder.cuserid-1
    secondary_identifiers:
    - name: Flawfinder - cuserid
      type: flawfinder_func_name
      value: cuserid
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.cuserid-1
    shortlink: https://sg.run/kkgX
    semgrep.dev:
      rule:
        rule_id: 4bU20k
        version_id: K3TeAY
        url: https://semgrep.dev/playground/r/K3TeAY/gitlab.flawfinder.cuserid-1
        origin: custom
  pattern: cuserid(...)
  severity: ERROR
- id: gitlab.flawfinder.drand48-1.erand48-1.jrand48-1.lcong48-1.lrand48-1.mrand48-1.nrand48-1.random-1.seed48-1.setstate-1.srand-1.strfry-1.srandom-1.g_rand_boolean-1.g_rand_int-1.g_rand_int_range-1.g_rand_double-1.g_rand_double_range-1.g_random_boolean-1.g_random_int-1.g_random_int_range-1.g_random_double-1.g_random_double_range-1
  languages:
  - c
  message: 'Use a more secure technique for acquiring random values.

    '
  metadata:
    cwe: 'CWE-327: This function is not sufficiently random for security-related functions
      such as key and nonce creation (CWE-327)'
    primary_identifier: flawfinder.drand48-1.erand48-1.jrand48-1.lcong48-1.lrand48-1.mrand48-1.nrand48-1.random-1.seed48-1.setstate-1.srand-1.strfry-1.srandom-1.g_rand_boolean-1.g_rand_int-1.g_rand_int_range-1.g_rand_double-1.g_rand_double_range-1.g_random_boolean-1.g_random_int-1.g_random_int_range-1.g_random_double-1.g_random_double_range-1
    secondary_identifiers:
    - name: Flawfinder - drand48
      type: flawfinder_func_name
      value: drand48
    - name: Flawfinder - erand48
      type: flawfinder_func_name
      value: erand48
    - name: Flawfinder - jrand48
      type: flawfinder_func_name
      value: jrand48
    - name: Flawfinder - lcong48
      type: flawfinder_func_name
      value: lcong48
    - name: Flawfinder - lrand48
      type: flawfinder_func_name
      value: lrand48
    - name: Flawfinder - mrand48
      type: flawfinder_func_name
      value: mrand48
    - name: Flawfinder - nrand48
      type: flawfinder_func_name
      value: nrand48
    - name: Flawfinder - random
      type: flawfinder_func_name
      value: random
    - name: Flawfinder - seed48
      type: flawfinder_func_name
      value: seed48
    - name: Flawfinder - setstate
      type: flawfinder_func_name
      value: setstate
    - name: Flawfinder - srand
      type: flawfinder_func_name
      value: srand
    - name: Flawfinder - strfry
      type: flawfinder_func_name
      value: strfry
    - name: Flawfinder - srandom
      type: flawfinder_func_name
      value: srandom
    - name: Flawfinder - g_rand_boolean
      type: flawfinder_func_name
      value: g_rand_boolean
    - name: Flawfinder - g_rand_int
      type: flawfinder_func_name
      value: g_rand_int
    - name: Flawfinder - g_rand_int_range
      type: flawfinder_func_name
      value: g_rand_int_range
    - name: Flawfinder - g_rand_double
      type: flawfinder_func_name
      value: g_rand_double
    - name: Flawfinder - g_rand_double_range
      type: flawfinder_func_name
      value: g_rand_double_range
    - name: Flawfinder - g_random_boolean
      type: flawfinder_func_name
      value: g_random_boolean
    - name: Flawfinder - g_random_int
      type: flawfinder_func_name
      value: g_random_int
    - name: Flawfinder - g_random_int_range
      type: flawfinder_func_name
      value: g_random_int_range
    - name: Flawfinder - g_random_double
      type: flawfinder_func_name
      value: g_random_double
    - name: Flawfinder - g_random_double_range
      type: flawfinder_func_name
      value: g_random_double_range
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.drand48-1.erand48-1.jrand48-1.lcong48-1.lrand48-1.mrand48-1.nrand48-1.random-1.seed48-1.setstate-1.srand-1.strfry-1.srandom-1.g_rand_boolean-1.g_rand_int-1.g_rand_int_range-1.g_rand_double-1.g_rand_double_range-1.g_random_boolean-1.g_random_int-1.g_random_int_range-1.g_random_double-1.g_random_double_range-1
    shortlink: https://sg.run/grno
    semgrep.dev:
      rule:
        rule_id: lBUzno
        version_id: K3TeAQ
        url: https://semgrep.dev/playground/r/K3TeAQ/gitlab.flawfinder.drand48-1.erand48-1.jrand48-1.lcong48-1.lrand48-1.mrand48-1.nrand48-1.random-1.seed48-1.setstate-1.srand-1.strfry-1.srandom-1.g_rand_boolean-1.g_rand_int-1.g_rand_int_range-1.g_rand_double-1.g_rand_double_range-1.g_random_boolean-1.g_random_int-1.g_random_int_range-1.g_random_double-1.g_random_double_range-1
        origin: custom
  pattern-either:
  - pattern: drand48(...)
  - pattern: erand48(...)
  - pattern: jrand48(...)
  - pattern: lcong48(...)
  - pattern: lrand48(...)
  - pattern: mrand48(...)
  - pattern: nrand48(...)
  - pattern: random(...)
  - pattern: seed48(...)
  - pattern: setstate(...)
  - pattern: srand(...)
  - pattern: strfry(...)
  - pattern: srandom(...)
  - pattern: g_rand_boolean(...)
  - pattern: g_rand_int(...)
  - pattern: g_rand_int_range(...)
  - pattern: g_rand_double(...)
  - pattern: g_rand_double_range(...)
  - pattern: g_random_boolean(...)
  - pattern: g_random_int(...)
  - pattern: g_random_int_range(...)
  - pattern: g_random_double(...)
  - pattern: g_random_double_range(...)
  - pattern-regex: "(long|short|double|int|float|void)\\s(\\*|)(\\s|)(seed48|lcong48)(\\(.*\\))\\;"
  severity: WARNING
- id: gitlab.flawfinder.equal-1.mismatch-1.is_permutation-1
  languages:
  - c
  message: |
    This function is often discouraged by most C++ coding standards in favor of its safer
    alternatives provided since C++14. Consider using a form of this function that checks the
    second iterator before potentially overflowing it.
  metadata:
    cwe: 'CWE-126: Function does not check the second iterator for over-read conditions
      (CWE-126)'
    primary_identifier: flawfinder.equal-1.mismatch-1.is_permutation-1
    secondary_identifiers:
    - name: Flawfinder - equal
      type: flawfinder_func_name
      value: equal
    - name: Flawfinder - mismatch
      type: flawfinder_func_name
      value: mismatch
    - name: Flawfinder - is_permutation
      type: flawfinder_func_name
      value: is_permutation
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.equal-1.mismatch-1.is_permutation-1
    shortlink: https://sg.run/xewe
    semgrep.dev:
      rule:
        rule_id: JDUQ8Q
        version_id: l4TbYW
        url: https://semgrep.dev/playground/r/l4TbYW/gitlab.flawfinder.equal-1.mismatch-1.is_permutation-1
        origin: custom
  pattern-either:
  - pattern: equal(...)
  - pattern: mismatch(...)
  - pattern: is_permutation(...)
  severity: INFO
- id: gitlab.flawfinder.execl-1.execlp-1.execle-1.execv-1.execvp-1.popen-1.WinExec-1.ShellExecute-1
  languages:
  - c
  message: 'try using a library call that implements the same functionality if available.

    '
  metadata:
    cwe: 'CWE-78: This causes a new program to execute and is difficult to use safely
      (CWE-78)'
    primary_identifier: flawfinder.execl-1.execlp-1.execle-1.execv-1.execvp-1.popen-1.WinExec-1.ShellExecute-1
    secondary_identifiers:
    - name: Flawfinder - execl
      type: flawfinder_func_name
      value: execl
    - name: Flawfinder - execlp
      type: flawfinder_func_name
      value: execlp
    - name: Flawfinder - execle
      type: flawfinder_func_name
      value: execle
    - name: Flawfinder - execv
      type: flawfinder_func_name
      value: execv
    - name: Flawfinder - execvp
      type: flawfinder_func_name
      value: execvp
    - name: Flawfinder - popen
      type: flawfinder_func_name
      value: popen
    - name: Flawfinder - WinExec
      type: flawfinder_func_name
      value: WinExec
    - name: Flawfinder - ShellExecute
      type: flawfinder_func_name
      value: ShellExecute
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.execl-1.execlp-1.execle-1.execv-1.execvp-1.popen-1.WinExec-1.ShellExecute-1
    shortlink: https://sg.run/4P6g
    semgrep.dev:
      rule:
        rule_id: oqUr85
        version_id: YDT5gx
        url: https://semgrep.dev/playground/r/YDT5gx/gitlab.flawfinder.execl-1.execlp-1.execle-1.execv-1.execvp-1.popen-1.WinExec-1.ShellExecute-1
        origin: custom
  pattern-either:
  - pattern: execl(...)
  - pattern: execlp(...)
  - pattern: execle(...)
  - pattern: execv(...)
  - pattern: execvp(...)
  - pattern: popen(...)
  - pattern: WinExec(...)
  - pattern: ShellExecute(...)
  severity: ERROR
- id: gitlab.flawfinder.fopen-1.open-1
  languages:
  - c
  message: 'Check when opening files - can an attacker redirect it (via symlinks).

    '
  metadata:
    cwe: 'CWE-362: Check when opening files - can an attacker redirect it (via symlinks),
      force the opening of special file type (e.g., device files), move things around
      to create a race condition, control its ancestors, or change its contents? (CWE-362)'
    primary_identifier: flawfinder.fopen-1.open-1
    secondary_identifiers:
    - name: Flawfinder - fopen
      type: flawfinder_func_name
      value: fopen
    - name: Flawfinder - open
      type: flawfinder_func_name
      value: open
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.fopen-1.open-1
    shortlink: https://sg.run/w1nx
    semgrep.dev:
      rule:
        rule_id: PeUBPk
        version_id: qkTGAX
        url: https://semgrep.dev/playground/r/qkTGAX/gitlab.flawfinder.fopen-1.open-1
        origin: custom
  pattern-either:
  - pattern: fopen(...)
  - pattern: open(...)
  severity: INFO
- id: gitlab.flawfinder.fprintf-1.vfprintf-1._ftprintf-1._vftprintf-1.fwprintf-1.fvwprintf-1
  languages:
  - c
  message: 'Use a constant for the format specification.

    '
  metadata:
    cwe: 'CWE-134: If format strings can be influenced by an attacker, they can be
      exploited (CWE-134)'
    primary_identifier: flawfinder.fprintf-1.vfprintf-1._ftprintf-1._vftprintf-1.fwprintf-1.fvwprintf-1
    secondary_identifiers:
    - name: Flawfinder - fprintf
      type: flawfinder_func_name
      value: fprintf
    - name: Flawfinder - vfprintf
      type: flawfinder_func_name
      value: vfprintf
    - name: Flawfinder - _ftprintf
      type: flawfinder_func_name
      value: _ftprintf
    - name: Flawfinder - _vftprintf
      type: flawfinder_func_name
      value: _vftprintf
    - name: Flawfinder - fwprintf
      type: flawfinder_func_name
      value: fwprintf
    - name: Flawfinder - fvwprintf
      type: flawfinder_func_name
      value: fvwprintf
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.fprintf-1.vfprintf-1._ftprintf-1._vftprintf-1.fwprintf-1.fvwprintf-1
    shortlink: https://sg.run/owX7
    semgrep.dev:
      rule:
        rule_id: eqUpJj
        version_id: 3ZTngN
        url: https://semgrep.dev/playground/r/3ZTngN/gitlab.flawfinder.fprintf-1.vfprintf-1._ftprintf-1._vftprintf-1.fwprintf-1.fvwprintf-1
        origin: custom
  pattern-either:
  - patterns:
    - pattern: fprintf($FD, $FMT, ...)
    - pattern-not: fprintf($FD, "...", ...)
  - patterns:
    - pattern: vfprintf($FMT, $ARGS, ...)
    - pattern-not: vfprintf("...", $ARGS, ...)
  - patterns:
    - pattern: _ftprintf($FD, $FMT, ...)
    - pattern-not: _ftprintf($FD, "...", ...)
  - patterns:
    - pattern: fwprintf($FD, $FMT, ...)
    - pattern-not: fwprintf($FD, "...", ...)
  - patterns:
    - pattern: fvwprintf($FD, $FMT, ...)
    - pattern-not: fvwprintf($FD, "...", ...)
  severity: ERROR
- id: gitlab.flawfinder.fscanf-1.sscanf-1.vsscanf-1.vfscanf-1._ftscanf-1.fwscanf-1.vfwscanf-1.vswscanf-1
  languages:
  - c
  message: 'Specify a limit to %s, or use a different input function.

    '
  metadata:
    cwe: 'CWE-120: The scanf() family''s %s operation, without a limit specification,
      permits buffer overflows (CWE-120, CWE-20)'
    primary_identifier: flawfinder.fscanf-1.sscanf-1.vsscanf-1.vfscanf-1._ftscanf-1.fwscanf-1.vfwscanf-1.vswscanf-1
    secondary_identifiers:
    - name: Flawfinder - fscanf
      type: flawfinder_func_name
      value: fscanf
    - name: Flawfinder - sscanf
      type: flawfinder_func_name
      value: sscanf
    - name: Flawfinder - vsscanf
      type: flawfinder_func_name
      value: vsscanf
    - name: Flawfinder - vfscanf
      type: flawfinder_func_name
      value: vfscanf
    - name: Flawfinder - _ftscanf
      type: flawfinder_func_name
      value: _ftscanf
    - name: Flawfinder - fwscanf
      type: flawfinder_func_name
      value: fwscanf
    - name: Flawfinder - vfwscanf
      type: flawfinder_func_name
      value: vfwscanf
    - name: Flawfinder - vswscanf
      type: flawfinder_func_name
      value: vswscanf
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.fscanf-1.sscanf-1.vsscanf-1.vfscanf-1._ftscanf-1.fwscanf-1.vfwscanf-1.vswscanf-1
    shortlink: https://sg.run/O8Xe
    semgrep.dev:
      rule:
        rule_id: 5rU8bL
        version_id: YDT5xl
        url: https://semgrep.dev/playground/r/YDT5xl/gitlab.flawfinder.fscanf-1.sscanf-1.vsscanf-1.vfscanf-1._ftscanf-1.fwscanf-1.vfwscanf-1.vswscanf-1
        origin: custom
  pattern-either:
  - pattern: fscanf(...)
  - pattern: sscanf(...)
  - pattern: vsscanf(...)
  - pattern: vfscanf(...)
  - pattern: _ftscanf(...)
  - pattern: fwscanf(...)
  - pattern: vfwscanf(...)
  - pattern: vswscanf(...)
  severity: ERROR
- id: gitlab.flawfinder.g_get_home_dir-1
  languages:
  - c
  message: 'Check environment variables carefully before using them.

    '
  metadata:
    cwe: 'CWE-20: This function is synonymous with ''getenv("HOME")'';it returns untrustable
      input if the environment can beset by an attacker.  It can have any content
      and length, and the same variable can be set more than once (CWE-807, CWE-20)'
    primary_identifier: flawfinder.g_get_home_dir-1
    secondary_identifiers:
    - name: Flawfinder - g_get_home_dir
      type: flawfinder_func_name
      value: g_get_home_dir
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.g_get_home_dir-1
    shortlink: https://sg.run/eK0X
    semgrep.dev:
      rule:
        rule_id: GdUZpz
        version_id: 6xT3ky
        url: https://semgrep.dev/playground/r/6xT3ky/gitlab.flawfinder.g_get_home_dir-1
        origin: custom
  pattern: g_get_home_dir(...)
  severity: WARNING
- id: gitlab.flawfinder.g_get_tmp_dir-1
  languages:
  - c
  message: 'Check environment variables carefully before using them.

    '
  metadata:
    cwe: 'CWE-20: This function is synonymous with ''getenv("TMP")'';it returns untrustable
      input if the environment can beset by an attacker.  It can have any content
      and length, and the same variable can be set more than once (CWE-807, CWE-20)'
    primary_identifier: flawfinder.g_get_tmp_dir-1
    secondary_identifiers:
    - name: Flawfinder - g_get_tmp_dir
      type: flawfinder_func_name
      value: g_get_tmp_dir
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.g_get_tmp_dir-1
    shortlink: https://sg.run/v2NX
    semgrep.dev:
      rule:
        rule_id: ReUojK
        version_id: o5TvPZ
        url: https://semgrep.dev/playground/r/o5TvPZ/gitlab.flawfinder.g_get_tmp_dir-1
        origin: custom
  pattern: g_get_tmp_dir(...)
  severity: WARNING
- id: gitlab.flawfinder.getchar-1.fgetc-1.getc-1.read-1._gettc-1
  languages:
  - c
  message: 'CWE-20: Check buffer boundaries if used in a loop including recursive
    loops

    '
  metadata:
    cwe: 'CWE-20: Check buffer boundaries if used in a loop including recursive loops
      (CWE-120, CWE-20)'
    primary_identifier: flawfinder.getchar-1.fgetc-1.getc-1.read-1._gettc-1
    secondary_identifiers:
    - name: Flawfinder - getchar
      type: flawfinder_func_name
      value: getchar
    - name: Flawfinder - fgetc
      type: flawfinder_func_name
      value: fgetc
    - name: Flawfinder - getc
      type: flawfinder_func_name
      value: getc
    - name: Flawfinder - read
      type: flawfinder_func_name
      value: read
    - name: Flawfinder - _gettc
      type: flawfinder_func_name
      value: _gettc
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.getchar-1.fgetc-1.getc-1.read-1._gettc-1
    shortlink: https://sg.run/d0WP
    semgrep.dev:
      rule:
        rule_id: AbUGwN
        version_id: zyTd98
        url: https://semgrep.dev/playground/r/zyTd98/gitlab.flawfinder.getchar-1.fgetc-1.getc-1.read-1._gettc-1
        origin: custom
  pattern-either:
  - pattern: getchar(...)
  - pattern: fgetc(...)
  - pattern: getc(...)
  - pattern: read(...)
  - pattern: _gettc(...)
  severity: INFO
- id: gitlab.flawfinder.getenv-1.curl_getenv-1
  languages:
  - c
  message: 'Check environment variables carefully before using them.

    '
  metadata:
    cwe: 'CWE-20: Environment variables are untrustable input if they can be set by
      an attacker.  They can have any content and length, and the same variable can
      be set more than once (CWE-807, CWE-20)'
    primary_identifier: flawfinder.getenv-1.curl_getenv-1
    secondary_identifiers:
    - name: Flawfinder - getenv
      type: flawfinder_func_name
      value: getenv
    - name: Flawfinder - curl_getenv
      type: flawfinder_func_name
      value: curl_getenv
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.getenv-1.curl_getenv-1
    shortlink: https://sg.run/ZkO7
    semgrep.dev:
      rule:
        rule_id: BYU761
        version_id: pZToJL
        url: https://semgrep.dev/playground/r/pZToJL/gitlab.flawfinder.getenv-1.curl_getenv-1
        origin: custom
  pattern-either:
  - pattern: getenv(...)
  - pattern: curl_getenv(...)
  severity: WARNING
- id: gitlab.flawfinder.getlogin-1
  languages:
  - c
  message: 'Use getpwuid(geteuid()) and extract the desired information instead.

    '
  metadata:
    cwe: 'CWE-807: It''s often easy to fool getlogin.  Sometimes it does not work
      at all, because some program messed up the utmp file.  Often, it gives only
      the first 8 characters of the login name. The user currently logged in on the
      controlling tty of our program need not be the user who started it.  Avoid getlogin()
      for security-related purposes (CWE-807)'
    primary_identifier: flawfinder.getlogin-1
    secondary_identifiers:
    - name: Flawfinder - getlogin
      type: flawfinder_func_name
      value: getlogin
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.getlogin-1
    shortlink: https://sg.run/xene
    semgrep.dev:
      rule:
        rule_id: JDUQ9Q
        version_id: l4Tb3W
        url: https://semgrep.dev/playground/r/l4Tb3W/gitlab.flawfinder.getlogin-1
        origin: custom
  pattern: getlogin(...)
  severity: ERROR
- id: gitlab.flawfinder.getopt-1.getopt_long-1
  languages:
  - c
  message: 'Check implementation on installation, or limit the size of all string
    inputs.

    '
  metadata:
    cwe: 'CWE-120: Some older implementations do not protect against internal buffer
      overflows (CWE-120, CWE-20)'
    primary_identifier: flawfinder.getopt-1.getopt_long-1
    secondary_identifiers:
    - name: Flawfinder - getopt
      type: flawfinder_func_name
      value: getopt
    - name: Flawfinder - getopt_long
      type: flawfinder_func_name
      value: getopt_long
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.getopt-1.getopt_long-1
    shortlink: https://sg.run/nk2G
    semgrep.dev:
      rule:
        rule_id: DbUKAn
        version_id: 2KTeXv
        url: https://semgrep.dev/playground/r/2KTeXv/gitlab.flawfinder.getopt-1.getopt_long-1
        origin: custom
  pattern-either:
  - pattern: getopt(...)
  - pattern: getopt_long(...)
  severity: WARNING
- id: gitlab.flawfinder.getpass-1
  languages:
  - c
  message: |
    Make the specific calls to do exactly what you want.  If you continue to use it, or write your
    own, be sure to zero the password as soon as possible to avoid leaving the cleartext password
    visible in the process' address space.
  metadata:
    cwe: 'CWE-20: This function is obsolete and not portable. It was in SUSv2 but
      removed by POSIX.2.  What it does exactly varies considerably between systems,
      particularly in where its prompt is displayed and where it gets its data (e.g.,
      /dev/tty, stdin, stderr, etc.). In addition, some implementations overflow buffers.
      (CWE-676, CWE-120, CWE-20)'
    primary_identifier: flawfinder.getpass-1
    secondary_identifiers:
    - name: Flawfinder - getpass
      type: flawfinder_func_name
      value: getpass
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.getpass-1
    shortlink: https://sg.run/O8We
    semgrep.dev:
      rule:
        rule_id: 5rU8gL
        version_id: YDT5gl
        url: https://semgrep.dev/playground/r/YDT5gl/gitlab.flawfinder.getpass-1
        origin: custom
  pattern: getpass(...)
  severity: ERROR
- id: gitlab.flawfinder.getpw-1
  languages:
  - c
  message: 'Use getpwuid() instead.

    '
  metadata:
    cwe: 'CWE-120: This function is dangerous; it may overflow the provided buffer.
      It extracts data from a ''protected'' area, but most systems have many commands
      to let users modify the protected area, and it''s not always clear what their
      limits are.  Best to avoid using this function altogether (CWE-676, CWE-120)'
    primary_identifier: flawfinder.getpw-1
    secondary_identifiers:
    - name: Flawfinder - getpw
      type: flawfinder_func_name
      value: getpw
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.getpw-1
    shortlink: https://sg.run/EO08
    semgrep.dev:
      rule:
        rule_id: WAUP03
        version_id: X0TEp4
        url: https://semgrep.dev/playground/r/X0TEp4/gitlab.flawfinder.getpw-1
        origin: custom
  pattern: getpw(...)
  severity: ERROR
- id: gitlab.flawfinder.gets-1._getts-1
  languages:
  - c
  message: 'Use fgets() instead.

    '
  metadata:
    cwe: 'CWE-120: Does not check for buffer overflows (CWE-120, CWE-20)'
    primary_identifier: flawfinder.gets-1._getts-1
    secondary_identifiers:
    - name: Flawfinder - gets
      type: flawfinder_func_name
      value: gets
    - name: Flawfinder - _getts
      type: flawfinder_func_name
      value: _getts
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.gets-1._getts-1
    shortlink: https://sg.run/7G7v
    semgrep.dev:
      rule:
        rule_id: 0oUJjK
        version_id: jQTWp1
        url: https://semgrep.dev/playground/r/jQTWp1/gitlab.flawfinder.gets-1._getts-1
        origin: custom
  pattern-either:
  - pattern: gets(...)
  - pattern: _getts(...)
  severity: ERROR
- id: gitlab.flawfinder.getwd-1
  languages:
  - c
  message: 'Use getcwd instead.

    '
  metadata:
    cwe: 'CWE-120: This does not protect against buffer overflows by itself, so use
      with caution (CWE-120, CWE-20)'
    primary_identifier: flawfinder.getwd-1
    secondary_identifiers:
    - name: Flawfinder - getwd
      type: flawfinder_func_name
      value: getwd
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.getwd-1
    shortlink: https://sg.run/L8zL
    semgrep.dev:
      rule:
        rule_id: KxUY1o
        version_id: 1QTBn3
        url: https://semgrep.dev/playground/r/1QTBn3/gitlab.flawfinder.getwd-1
        origin: custom
  pattern: getwd(...)
  severity: WARNING
- id: gitlab.flawfinder.gsignal-1.ssignal-1
  languages:
  - c
  message: 'Switch to raise/signal, or some other signalling approach.

    '
  metadata:
    cwe: 'CWE-676: These functions are considered obsolete on most systems, and very
      non-portable (Linux-based systems handle them radically different, basically
      if gsignal/ssignal were the same as raise/signal respectively, while System
      V considers them a separate set and obsolete) (CWE-676)'
    primary_identifier: flawfinder.gsignal-1.ssignal-1
    secondary_identifiers:
    - name: Flawfinder - gsignal
      type: flawfinder_func_name
      value: gsignal
    - name: Flawfinder - ssignal
      type: flawfinder_func_name
      value: ssignal
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.gsignal-1.ssignal-1
    shortlink: https://sg.run/eKOX
    semgrep.dev:
      rule:
        rule_id: GdUZdz
        version_id: JdTbOo
        url: https://semgrep.dev/playground/r/JdTbOo/gitlab.flawfinder.gsignal-1.ssignal-1
        origin: custom
  pattern-either:
  - pattern: gsignal(...)
  - pattern: ssignal(...)
  severity: INFO
- id: gitlab.flawfinder.lstrcat-1.wcscat-1._tcscat-1._mbscat-1
  languages:
  - c
  message: 'Buffer overflows is not checked

    '
  metadata:
    cwe: 'CWE-120: Does not check for buffer overflows when concatenating to destination
      [MS-banned] (CWE-120)'
    primary_identifier: flawfinder.lstrcat-1.wcscat-1._tcscat-1._mbscat-1
    secondary_identifiers:
    - name: Flawfinder - lstrcat
      type: flawfinder_func_name
      value: lstrcat
    - name: Flawfinder - wcscat
      type: flawfinder_func_name
      value: wcscat
    - name: Flawfinder - _tcscat
      type: flawfinder_func_name
      value: _tcscat
    - name: Flawfinder - _mbscat
      type: flawfinder_func_name
      value: _mbscat
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.lstrcat-1.wcscat-1._tcscat-1._mbscat-1
    shortlink: https://sg.run/8R7J
    semgrep.dev:
      rule:
        rule_id: qNUb3v
        version_id: 9lT2L6
        url: https://semgrep.dev/playground/r/9lT2L6/gitlab.flawfinder.lstrcat-1.wcscat-1._tcscat-1._mbscat-1
        origin: custom
  pattern-either:
  - pattern: lstrcat(...)
  - pattern: wcscat(...)
  - pattern: _tcscat(...)
  - pattern: _mbscat(...)
  severity: ERROR
- id: gitlab.flawfinder.lstrcatn-1.wcsncat-1._tcsncat-1._mbsnbcat-1
  languages:
  - c
  message: 'Consider strcat_s, strlcat, or automatically resizing strings.

    '
  metadata:
    cwe: 'CWE-120: Easily used incorrectly (e.g., incorrectly computing the correct
      maximum size to add) [MS-banned] (CWE-120)'
    primary_identifier: flawfinder.lstrcatn-1.wcsncat-1._tcsncat-1._mbsnbcat-1
    secondary_identifiers:
    - name: Flawfinder - lstrcatn
      type: flawfinder_func_name
      value: lstrcatn
    - name: Flawfinder - wcsncat
      type: flawfinder_func_name
      value: wcsncat
    - name: Flawfinder - _tcsncat
      type: flawfinder_func_name
      value: _tcsncat
    - name: Flawfinder - _mbsnbcat
      type: flawfinder_func_name
      value: _mbsnbcat
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.lstrcatn-1.wcsncat-1._tcsncat-1._mbsnbcat-1
    shortlink: https://sg.run/grqo
    semgrep.dev:
      rule:
        rule_id: lBUzGo
        version_id: yeT8z5
        url: https://semgrep.dev/playground/r/yeT8z5/gitlab.flawfinder.lstrcatn-1.wcsncat-1._tcsncat-1._mbsnbcat-1
        origin: custom
  pattern-either:
  - pattern: lstrcatn(...)
  - pattern: wcsncat(...)
  - pattern: _tcsncat(...)
  - pattern: _mbsnbcat(...)
  severity: INFO
- id: gitlab.flawfinder.lstrcpy-1.wcscpy-1._tcscpy-1._mbscpy-1
  languages:
  - c
  message: 'Consider using a function version that stops copying at the end of the
    buffer.

    '
  metadata:
    cwe: 'CWE-120: Does not check for buffer overflows when copying to destination
      [MS-banned] (CWE-120)'
    primary_identifier: flawfinder.lstrcpy-1.wcscpy-1._tcscpy-1._mbscpy-1
    secondary_identifiers:
    - name: Flawfinder - lstrcpy
      type: flawfinder_func_name
      value: lstrcpy
    - name: Flawfinder - wcscpy
      type: flawfinder_func_name
      value: wcscpy
    - name: Flawfinder - _tcscpy
      type: flawfinder_func_name
      value: _tcscpy
    - name: Flawfinder - _mbscpy
      type: flawfinder_func_name
      value: _mbscpy
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.lstrcpy-1.wcscpy-1._tcscpy-1._mbscpy-1
    shortlink: https://sg.run/Q41D
    semgrep.dev:
      rule:
        rule_id: YGUQd4
        version_id: rxTqX8
        url: https://semgrep.dev/playground/r/rxTqX8/gitlab.flawfinder.lstrcpy-1.wcscpy-1._tcscpy-1._mbscpy-1
        origin: custom
  pattern-either:
  - pattern: lstrcpy(...)
  - pattern: wcscpy(...)
  - pattern: _tcscpy(...)
  - pattern: _mbscpy(...)
  severity: ERROR
- id: gitlab.flawfinder.lstrcpyn-1.wcsncpy-1._tcsncpy-1._mbsnbcpy-1
  languages:
  - c
  message: 'Easily used incorrectly

    '
  metadata:
    cwe: 'CWE-120: Doesn''t always \0-terminate or check for invalid pointers [MS-banned]
      (CWE-120)'
    primary_identifier: flawfinder.lstrcpyn-1.wcsncpy-1._tcsncpy-1._mbsnbcpy-1
    secondary_identifiers:
    - name: Flawfinder - lstrcpyn
      type: flawfinder_func_name
      value: lstrcpyn
    - name: Flawfinder - wcsncpy
      type: flawfinder_func_name
      value: wcsncpy
    - name: Flawfinder - _tcsncpy
      type: flawfinder_func_name
      value: _tcsncpy
    - name: Flawfinder - _mbsnbcpy
      type: flawfinder_func_name
      value: _mbsnbcpy
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.lstrcpyn-1.wcsncpy-1._tcsncpy-1._mbsnbcpy-1
    shortlink: https://sg.run/347g
    semgrep.dev:
      rule:
        rule_id: 6JU6Nz
        version_id: bZTrJx
        url: https://semgrep.dev/playground/r/bZTrJx/gitlab.flawfinder.lstrcpyn-1.wcsncpy-1._tcsncpy-1._mbsnbcpy-1
        origin: custom
  pattern-either:
  - pattern: lstrcpyn(...)
  - pattern: wcsncpy(...)
  - pattern: _tcsncpy(...)
  - pattern: _mbsnbcpy(...)
  severity: INFO
- id: gitlab.flawfinder.memalign-1
  languages:
  - c
  message: |
    Use posix_memalign instead (defined in POSIX's 1003.1d).  Don't switch to valloc(); it is
    marked as obsolete in BSD 4.3, as legacy in SUSv2, and is no longer defined in SUSv3.  In some
    cases, malloc()'s alignment may be sufficient.
  metadata:
    cwe: 'CWE-676: On some systems (though not Linux-based systems) an attempt to
      free() results from memalign() may fail. This may, on a few systems, be exploitable.  Also
      note that memalign() may not check that the boundary parameter is correct (CWE-676)'
    primary_identifier: flawfinder.memalign-1
    secondary_identifiers:
    - name: Flawfinder - memalign
      type: flawfinder_func_name
      value: memalign
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.memalign-1
    shortlink: https://sg.run/X8wl
    semgrep.dev:
      rule:
        rule_id: nJUrv6
        version_id: 5PTjx5
        url: https://semgrep.dev/playground/r/5PTjx5/gitlab.flawfinder.memalign-1
        origin: custom
  pattern-either:
  - pattern: memalign(...)
  - pattern-regex: "(void)\\s\\*(\\s|)(memalign)\\;"
  severity: INFO
- id: gitlab.flawfinder.memcpy-1.CopyMemory-1.bcopy-1
  languages:
  - c
  message: 'Make sure destination can always hold the source data.

    '
  metadata:
    cwe: 'CWE-120: Does not check for buffer overflows when copying to destination
      (CWE-120)'
    primary_identifier: flawfinder.memcpy-1.CopyMemory-1.bcopy-1
    secondary_identifiers:
    - name: Flawfinder - memcpy
      type: flawfinder_func_name
      value: memcpy
    - name: Flawfinder - CopyMemory
      type: flawfinder_func_name
      value: CopyMemory
    - name: Flawfinder - bcopy
      type: flawfinder_func_name
      value: bcopy
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.memcpy-1.CopyMemory-1.bcopy-1
    shortlink: https://sg.run/4P7g
    semgrep.dev:
      rule:
        rule_id: oqUr65
        version_id: NdTLEE
        url: https://semgrep.dev/playground/r/NdTLEE/gitlab.flawfinder.memcpy-1.CopyMemory-1.bcopy-1
        origin: custom
  pattern-either:
  - pattern: memcpy(...)
  - pattern: CopyMemory(...)
  - pattern: bcopy(...)
  severity: INFO
- id: gitlab.flawfinder.mkstemp-1
  languages:
  - c
  message: |
    Some older Unix-like systems create temp files with permission to write by
    all by default, so be sure to set the umask to override this. Also, some older
    Unix systems might fail to use O_EXCL when opening the file, so make sure that
    O_EXCL is used by the library.
  metadata:
    cwe: 'CWE-377: Potential for temporary file vulnerability in some circumstances.'
    primary_identifier: flawfinder.mkstemp-1
    secondary_identifiers:
    - name: Flawfinder - mkstemp
      type: flawfinder_func_name
      value: mkstemp
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.mkstemp-1
    shortlink: https://sg.run/5Jo6
    semgrep.dev:
      rule:
        rule_id: 2ZUKJn
        version_id: zyTd6v
        url: https://semgrep.dev/playground/r/zyTd6v/gitlab.flawfinder.mkstemp-1
        origin: custom
  pattern: mkstemp(...)
  severity: INFO
- id: gitlab.flawfinder.mktemp-1
  languages:
  - c
  message: |
    Creating and using insecure temporary files can leave application and system data vulnerable to
    attack (CWE-377).
  metadata:
    cwe: 'CWE-377: Temporary file race condition (CWE-377)'
    primary_identifier: flawfinder.mktemp-1
    secondary_identifiers:
    - name: Flawfinder - mktemp
      type: flawfinder_func_name
      value: mktemp
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.mktemp-1
    shortlink: https://sg.run/GwPB
    semgrep.dev:
      rule:
        rule_id: X5U76e
        version_id: pZToR4
        url: https://semgrep.dev/playground/r/pZToR4/gitlab.flawfinder.mktemp-1
        origin: custom
  pattern: mktemp(...)
  severity: ERROR
- id: gitlab.flawfinder.printf-1.vprintf-1.vwprintf-1.vfwprintf-1._vtprintf-1.wprintf-1
  languages:
  - c
  message: 'Use a constant for the format specification.

    '
  metadata:
    cwe: 'CWE-134: If format strings can be influenced by an attacker, they can be
      exploited (CWE-134)'
    primary_identifier: flawfinder.printf-1.vprintf-1.vwprintf-1.vfwprintf-1._vtprintf-1.wprintf-1
    secondary_identifiers:
    - name: Flawfinder - printf
      type: flawfinder_func_name
      value: printf
    - name: Flawfinder - vprintf
      type: flawfinder_func_name
      value: vprintf
    - name: Flawfinder - vwprintf
      type: flawfinder_func_name
      value: vwprintf
    - name: Flawfinder - vfwprintf
      type: flawfinder_func_name
      value: vfwprintf
    - name: Flawfinder - _vtprintf
      type: flawfinder_func_name
      value: _vtprintf
    - name: Flawfinder - wprintf
      type: flawfinder_func_name
      value: wprintf
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.printf-1.vprintf-1.vwprintf-1.vfwprintf-1._vtprintf-1.wprintf-1
    shortlink: https://sg.run/z9Oz
    semgrep.dev:
      rule:
        rule_id: v8UjyR
        version_id: 44TpJn
        url: https://semgrep.dev/playground/r/44TpJn/gitlab.flawfinder.printf-1.vprintf-1.vwprintf-1.vfwprintf-1._vtprintf-1.wprintf-1
        origin: custom
  pattern-either:
  - patterns:
    - pattern: printf(...)
    - pattern-not: printf("...",...)
  - patterns:
    - pattern: vprintf($FMT, ...)
    - pattern-not: vprintf("...", ...)
  - patterns:
    - pattern: vwprintf($FMT, ...)
    - pattern-not: vwprintf("...", ...)
  - patterns:
    - pattern: vfwprintf($FILE, $FMT, ...)
    - pattern-not: vfwprintf($FILE, "...", ...)
  - patterns:
    - pattern: _vtprintf($FILE, $FMT, ...)
    - pattern-not: _vtprintf($FILE, "...", ...)
  - patterns:
    - pattern: wprintf($FMT, ...)
    - pattern-not: wprintf("...", ...)
  severity: ERROR
- id: gitlab.flawfinder.readlink-1
  languages:
  - c
  message: 'Reconsider approach.

    '
  metadata:
    cwe: 'CWE-20: This accepts filename arguments; if an attacker can move those files
      or change the link content, a race condition results.  Also, it does not terminate
      with ASCII NUL. (CWE-362, CWE-20)'
    primary_identifier: flawfinder.readlink-1
    secondary_identifiers:
    - name: Flawfinder - readlink
      type: flawfinder_func_name
      value: readlink
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.readlink-1
    shortlink: https://sg.run/L8AL
    semgrep.dev:
      rule:
        rule_id: KxUYWo
        version_id: WrT9eG
        url: https://semgrep.dev/playground/r/WrT9eG/gitlab.flawfinder.readlink-1
        origin: custom
  pattern: readlink(...)
  severity: ERROR
- id: gitlab.flawfinder.realpath-1
  languages:
  - c
  message: |
    Ensure that the destination buffer is at least of size MAXPATHLEN, andto protect against
    implementation problems, the input argument should also be checked to ensure it is no larger
    than MAXPATHLEN.
  metadata:
    cwe: 'CWE-120: This function does not protect against buffer overflows, and some
      implementations can overflow internally (CWE-120/CWE-785!)'
    primary_identifier: flawfinder.realpath-1
    secondary_identifiers:
    - name: Flawfinder - realpath
      type: flawfinder_func_name
      value: realpath
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.realpath-1
    shortlink: https://sg.run/P8jN
    semgrep.dev:
      rule:
        rule_id: zdU1EX
        version_id: kbTp9Q
        url: https://semgrep.dev/playground/r/kbTp9Q/gitlab.flawfinder.realpath-1
        origin: custom
  pattern: realpath(...)
  severity: WARNING
- id: gitlab.flawfinder.scanf-1.vscanf-1.wscanf-1._tscanf-1.vwscanf-1
  languages:
  - c
  message: 'Specify a limit to %s, or use a different input function.

    '
  metadata:
    cwe: 'CWE-120: The scanf() family''s %s operation, without a limit specification,
      permits buffer overflows (CWE-120, CWE-20)'
    primary_identifier: flawfinder.scanf-1.vscanf-1.wscanf-1._tscanf-1.vwscanf-1
    secondary_identifiers:
    - name: Flawfinder - scanf
      type: flawfinder_func_name
      value: scanf
    - name: Flawfinder - vscanf
      type: flawfinder_func_name
      value: vscanf
    - name: Flawfinder - wscanf
      type: flawfinder_func_name
      value: wscanf
    - name: Flawfinder - _tscanf
      type: flawfinder_func_name
      value: _tscanf
    - name: Flawfinder - vwscanf
      type: flawfinder_func_name
      value: vwscanf
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.scanf-1.vscanf-1.wscanf-1._tscanf-1.vwscanf-1
    shortlink: https://sg.run/Jj6o
    semgrep.dev:
      rule:
        rule_id: pKUw5J
        version_id: w8Trvg
        url: https://semgrep.dev/playground/r/w8Trvg/gitlab.flawfinder.scanf-1.vscanf-1.wscanf-1._tscanf-1.vwscanf-1
        origin: custom
  pattern-either:
  - patterns:
    - pattern: scanf($FMT, ...)
    - pattern-not: scanf("...", ...)
  - patterns:
    - pattern: vscanf($FMT, ...)
    - pattern-not: vscanf("...", ...)
  - patterns:
    - pattern: wscanf($FMT, ...)
    - pattern-not: wscanf("...", ...)
  - patterns:
    - pattern: _tscanf($FMT, ...)
    - pattern-not: _tscanf("...", ...)
  - patterns:
    - pattern: vwscanf(FMT, ...)
    - pattern-not: vwscanf("...", ...)
  severity: ERROR
- id: gitlab.flawfinder.snprintf-1.vsnprintf-1._snprintf-1._sntprintf-1._vsntprintf-1
  languages:
  - c
  message: 'Use a constant for the format specification.

    '
  metadata:
    cwe: 'CWE-134: If format strings can be influenced by an attacker, they can be
      exploited, and note that sprintf variations do not always \0-terminate (CWE-134)'
    primary_identifier: flawfinder.snprintf-1.vsnprintf-1._snprintf-1._sntprintf-1._vsntprintf-1
    secondary_identifiers:
    - name: Flawfinder - snprintf
      type: flawfinder_func_name
      value: snprintf
    - name: Flawfinder - vsnprintf
      type: flawfinder_func_name
      value: vsnprintf
    - name: Flawfinder - _snprintf
      type: flawfinder_func_name
      value: _snprintf
    - name: Flawfinder - _sntprintf
      type: flawfinder_func_name
      value: _sntprintf
    - name: Flawfinder - _vsntprintf
      type: flawfinder_func_name
      value: _vsntprintf
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.snprintf-1.vsnprintf-1._snprintf-1._sntprintf-1._vsntprintf-1
    shortlink: https://sg.run/pkj3
    semgrep.dev:
      rule:
        rule_id: d8UlJZ
        version_id: PkTvKp
        url: https://semgrep.dev/playground/r/PkTvKp/gitlab.flawfinder.snprintf-1.vsnprintf-1._snprintf-1._sntprintf-1._vsntprintf-1
        origin: custom
  pattern-either:
  - patterns:
    - pattern: snprintf($BUF,$SIZ,$FMT,...)
    - pattern-not: snprintf($BUF,$SIZ,"...",...)
  - patterns:
    - pattern: vsnprintf($BUF,$SIZ,$FMT)
    - pattern-not: vsnprintf($BUF,$SIZ,"...",...)
  - patterns:
    - pattern: _snprintf($BUF,$SIZ,$FMT,...)
    - pattern-not: _snprintf($BUF,$SIZ,$FMT,"...",...)
  - patterns:
    - pattern: _sntprintf($VAR,$FMT,...)
    - pattern-not: sntprintf($VAR,"...",...)
  - patterns:
    - pattern: _vsntprintf($VAR,$FMT,...)
    - pattern-not: _vsntprintf($VAR,"...",...)
  severity: ERROR
- id: gitlab.flawfinder.sprintf-1.vsprintf-1.swprintf-1.vswprintf-1._stprintf-1._vstprintf-1
  languages:
  - c
  message: 'Use sprintf_s, snprintf, or vsnprintf.

    '
  metadata:
    cwe: 'CWE-120: Does not check for buffer overflows (CWE-120)'
    primary_identifier: flawfinder.sprintf-1.vsprintf-1.swprintf-1.vswprintf-1._stprintf-1._vstprintf-1
    secondary_identifiers:
    - name: Flawfinder - sprintf
      type: flawfinder_func_name
      value: sprintf
    - name: Flawfinder - vsprintf
      type: flawfinder_func_name
      value: vsprintf
    - name: Flawfinder - swprintf
      type: flawfinder_func_name
      value: swprintf
    - name: Flawfinder - vswprintf
      type: flawfinder_func_name
      value: vswprintf
    - name: Flawfinder - _stprintf
      type: flawfinder_func_name
      value: _stprintf
    - name: Flawfinder - _vstprintf
      type: flawfinder_func_name
      value: _vstprintf
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.sprintf-1.vsprintf-1.swprintf-1.vswprintf-1._stprintf-1._vstprintf-1
    shortlink: https://sg.run/5J76
    semgrep.dev:
      rule:
        rule_id: 2ZUK9n
        version_id: xyTO1y
        url: https://semgrep.dev/playground/r/xyTO1y/gitlab.flawfinder.sprintf-1.vsprintf-1.swprintf-1.vswprintf-1._stprintf-1._vstprintf-1
        origin: custom
  pattern-either:
  - pattern: sprintf(...)
  - pattern: vsprintf(...)
  - pattern: swprintf(...)
  - pattern: vswprintf(...)
  - pattern: _stprintf(...)
  - pattern: _vstprintf(...)
  severity: ERROR
- id: gitlab.flawfinder.strcat-1
  languages:
  - c
  message: 'Consider using strcat_s, strncat, strlcat, or snprintf (warning: strncat
    is easily misused).

    '
  metadata:
    cwe: 'CWE-120: Does not check for buffer overflows when concatenating to destination
      [MS-banned] (CWE-120)'
    primary_identifier: flawfinder.strcat-1
    secondary_identifiers:
    - name: Flawfinder - strcat
      type: flawfinder_func_name
      value: strcat
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.strcat-1
    shortlink: https://sg.run/GwqB
    semgrep.dev:
      rule:
        rule_id: X5U7re
        version_id: O9Tzr2
        url: https://semgrep.dev/playground/r/O9Tzr2/gitlab.flawfinder.strcat-1
        origin: custom
  pattern: strcat(...)
  severity: ERROR
- id: gitlab.flawfinder.strccpy-1.strcadd-1
  languages:
  - c
  message: 'Ensure that destination buffer is sufficiently large.

    '
  metadata:
    cwe: 'CWE-120: Subject to buffer overflow if buffer is not as big as claimed (CWE-120)'
    primary_identifier: flawfinder.strccpy-1.strcadd-1
    secondary_identifiers:
    - name: Flawfinder - strccpy
      type: flawfinder_func_name
      value: strccpy
    - name: Flawfinder - strcadd
      type: flawfinder_func_name
      value: strcadd
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.strccpy-1.strcadd-1
    shortlink: https://sg.run/RP9E
    semgrep.dev:
      rule:
        rule_id: j2URoA
        version_id: e1T5wo
        url: https://semgrep.dev/playground/r/e1T5wo/gitlab.flawfinder.strccpy-1.strcadd-1
        origin: custom
  pattern-either:
  - pattern: strccpy(...)
  - pattern: strcadd(...)
  severity: INFO
- id: gitlab.flawfinder.strcpy-1
  languages:
  - c
  message: 'Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily
    misused).

    '
  metadata:
    cwe: 'CWE-120: Does not check for buffer overflows when copying to destination
      [MS-banned] (CWE-120)'
    primary_identifier: flawfinder.strcpy-1
    secondary_identifiers:
    - name: Flawfinder - strcpy
      type: flawfinder_func_name
      value: strcpy
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.strcpy-1
    shortlink: https://sg.run/AwAg
    semgrep.dev:
      rule:
        rule_id: 10Ue1w
        version_id: vdTgJE
        url: https://semgrep.dev/playground/r/vdTgJE/gitlab.flawfinder.strcpy-1
        origin: custom
  pattern: strcpy(...)
  severity: ERROR
- id: gitlab.flawfinder.strcpyA-1.strcpyW-1.StrCpy-1.StrCpyA-1.lstrcpyA-1.lstrcpyW-1._tccpy-1._mbccpy-1._ftcscpy-1._mbsncpy-1.StrCpyN-1.StrCpyNA-1.StrCpyNW-1.StrNCpy-1.strcpynA-1.StrNCpyA-1.StrNCpyW-1.lstrcpynA-1.lstrcpynW-1
  languages:
  - c
  message: 'Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily
    misused).

    '
  metadata:
    cwe: 'CWE-120: Does not check for buffer overflows when copying to destination
      [MS-banned] (CWE-120)'
    primary_identifier: flawfinder.strcpyA-1.strcpyW-1.StrCpy-1.StrCpyA-1.lstrcpyA-1.lstrcpyW-1._tccpy-1._mbccpy-1._ftcscpy-1._mbsncpy-1.StrCpyN-1.StrCpyNA-1.StrCpyNW-1.StrNCpy-1.strcpynA-1.StrNCpyA-1.StrNCpyW-1.lstrcpynA-1.lstrcpynW-1
    secondary_identifiers:
    - name: Flawfinder - strcpyA
      type: flawfinder_func_name
      value: strcpyA
    - name: Flawfinder - strcpyW
      type: flawfinder_func_name
      value: strcpyW
    - name: Flawfinder - StrCpy
      type: flawfinder_func_name
      value: StrCpy
    - name: Flawfinder - StrCpyA
      type: flawfinder_func_name
      value: StrCpyA
    - name: Flawfinder - lstrcpyA
      type: flawfinder_func_name
      value: lstrcpyA
    - name: Flawfinder - lstrcpyW
      type: flawfinder_func_name
      value: lstrcpyW
    - name: Flawfinder - _tccpy
      type: flawfinder_func_name
      value: _tccpy
    - name: Flawfinder - _mbccpy
      type: flawfinder_func_name
      value: _mbccpy
    - name: Flawfinder - _ftcscpy
      type: flawfinder_func_name
      value: _ftcscpy
    - name: Flawfinder - _mbsncpy
      type: flawfinder_func_name
      value: _mbsncpy
    - name: Flawfinder - StrCpyN
      type: flawfinder_func_name
      value: StrCpyN
    - name: Flawfinder - StrCpyNA
      type: flawfinder_func_name
      value: StrCpyNA
    - name: Flawfinder - StrCpyNW
      type: flawfinder_func_name
      value: StrCpyNW
    - name: Flawfinder - StrNCpy
      type: flawfinder_func_name
      value: StrNCpy
    - name: Flawfinder - strcpynA
      type: flawfinder_func_name
      value: strcpynA
    - name: Flawfinder - StrNCpyA
      type: flawfinder_func_name
      value: StrNCpyA
    - name: Flawfinder - StrNCpyW
      type: flawfinder_func_name
      value: StrNCpyW
    - name: Flawfinder - lstrcpynA
      type: flawfinder_func_name
      value: lstrcpynA
    - name: Flawfinder - lstrcpynW
      type: flawfinder_func_name
      value: lstrcpynW
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.strcpyA-1.strcpyW-1.StrCpy-1.StrCpyA-1.lstrcpyA-1.lstrcpyW-1._tccpy-1._mbccpy-1._ftcscpy-1._mbsncpy-1.StrCpyN-1.StrCpyNA-1.StrCpyNW-1.StrNCpy-1.strcpynA-1.StrNCpyA-1.StrNCpyW-1.lstrcpynA-1.lstrcpynW-1
    shortlink: https://sg.run/BLBb
    semgrep.dev:
      rule:
        rule_id: 9AUkxG
        version_id: d6T1E1
        url: https://semgrep.dev/playground/r/d6T1E1/gitlab.flawfinder.strcpyA-1.strcpyW-1.StrCpy-1.StrCpyA-1.lstrcpyA-1.lstrcpyW-1._tccpy-1._mbccpy-1._ftcscpy-1._mbsncpy-1.StrCpyN-1.StrCpyNA-1.StrCpyNW-1.StrNCpy-1.strcpynA-1.StrNCpyA-1.StrNCpyW-1.lstrcpynA-1.lstrcpynW-1
        origin: custom
  pattern-either:
  - pattern: strcpyA(...)
  - pattern: strcpyW(...)
  - pattern: StrCpy(...)
  - pattern: StrCpyA(...)
  - pattern: lstrcpyA(...)
  - pattern: lstrcpyW(...)
  - pattern: _tccpy(...)
  - pattern: _mbccpy(...)
  - pattern: _ftcscpy(...)
  - pattern: _mbsncpy(...)
  - pattern: StrCpyN(...)
  - pattern: StrCpyNA(...)
  - pattern: StrCpyNW(...)
  - pattern: StrNCpy(...)
  - pattern: strcpynA(...)
  - pattern: StrNCpyA(...)
  - pattern: StrNCpyW(...)
  - pattern: lstrcpynA(...)
  - pattern: lstrcpynW(...)
  severity: ERROR
- id: gitlab.flawfinder.streadd-1.strecpy-1
  languages:
  - c
  message: 'Ensure the destination has 4 times the size of the source, to leave room
    for expansion.

    '
  metadata:
    cwe: 'CWE-120: This function does not protect against buffer overflows (CWE-120)'
    primary_identifier: flawfinder.streadd-1.strecpy-1
    secondary_identifiers:
    - name: Flawfinder - streadd
      type: flawfinder_func_name
      value: streadd
    - name: Flawfinder - strecpy
      type: flawfinder_func_name
      value: strecpy
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.streadd-1.strecpy-1
    shortlink: https://sg.run/DwW2
    semgrep.dev:
      rule:
        rule_id: yyUyKE
        version_id: ZRTnJ0
        url: https://semgrep.dev/playground/r/ZRTnJ0/gitlab.flawfinder.streadd-1.strecpy-1
        origin: custom
  pattern-either:
  - pattern: streadd(...)
  - pattern: strecpy(...)
  severity: ERROR
- id: gitlab.flawfinder.strlen-1.wcslen-1._tcslen-1._mbslen-1
  languages:
  - c
  message: 'Does not handle strings that are not \\0-terminated.

    '
  metadata:
    cwe: 'CWE-126: Does not handle strings that are not \0-terminated; if given one
      it may perform an over-read (it could cause a crash if unprotected) (CWE-126)'
    primary_identifier: flawfinder.strlen-1.wcslen-1._tcslen-1._mbslen-1
    secondary_identifiers:
    - name: Flawfinder - strlen
      type: flawfinder_func_name
      value: strlen
    - name: Flawfinder - wcslen
      type: flawfinder_func_name
      value: wcslen
    - name: Flawfinder - _tcslen
      type: flawfinder_func_name
      value: _tcslen
    - name: Flawfinder - _mbslen
      type: flawfinder_func_name
      value: _mbslen
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.strlen-1.wcslen-1._tcslen-1._mbslen-1
    shortlink: https://sg.run/WOky
    semgrep.dev:
      rule:
        rule_id: r6U9Qq
        version_id: nWTjl3
        url: https://semgrep.dev/playground/r/nWTjl3/gitlab.flawfinder.strlen-1.wcslen-1._tcslen-1._mbslen-1
        origin: custom
  pattern-either:
  - pattern: strlen(...)
  - pattern: wcslen(...)
  - pattern: _tcslen(...)
  - pattern: _mbslen(...)
  severity: INFO
- id: gitlab.flawfinder.strncat-1
  languages:
  - c
  message: 'Consider strcat_s, strlcat, snprintf, or automatically resizing strings.

    '
  metadata:
    cwe: 'CWE-120: Easily used incorrectly (e.g., incorrectly computing the correct
      maximum size to add) [MS-banned] (CWE-120)'
    primary_identifier: flawfinder.strncat-1
    secondary_identifiers:
    - name: Flawfinder - strncat
      type: flawfinder_func_name
      value: strncat
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.strncat-1
    shortlink: https://sg.run/057k
    semgrep.dev:
      rule:
        rule_id: bwUN2p
        version_id: ExTObz
        url: https://semgrep.dev/playground/r/ExTObz/gitlab.flawfinder.strncat-1
        origin: custom
  pattern: strncat(...)
  severity: INFO
- id: gitlab.flawfinder.strncpy-1
  languages:
  - c
  message: 'Easily used incorrectly

    '
  metadata:
    cwe: 'CWE-120: Doesn''t always \0-terminate or check for invalid pointers [MS-banned]
      (CWE-120)'
    primary_identifier: flawfinder.strncpy-1
    secondary_identifiers:
    - name: Flawfinder - strncpy
      type: flawfinder_func_name
      value: strncpy
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.strncpy-1
    shortlink: https://sg.run/K8oP
    semgrep.dev:
      rule:
        rule_id: NbUY74
        version_id: 7ZTdw4
        url: https://semgrep.dev/playground/r/7ZTdw4/gitlab.flawfinder.strncpy-1
        origin: custom
  pattern: strncpy(...)
  severity: INFO
- id: gitlab.flawfinder.strtrns-1
  languages:
  - c
  message: 'Ensure that destination is at least as long as the source.

    '
  metadata:
    cwe: 'CWE-120: This function does not protect against buffer overflows (CWE-120)'
    primary_identifier: flawfinder.strtrns-1
    secondary_identifiers:
    - name: Flawfinder - strtrns
      type: flawfinder_func_name
      value: strtrns
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.strtrns-1
    shortlink: https://sg.run/qq11
    semgrep.dev:
      rule:
        rule_id: kxU811
        version_id: LjTOJb
        url: https://semgrep.dev/playground/r/LjTOJb/gitlab.flawfinder.strtrns-1
        origin: custom
  pattern: strtrns(...)
  severity: WARNING
- id: gitlab.flawfinder.syslog-1
  languages:
  - c
  message: 'Use a constant format string for syslog.

    '
  metadata:
    cwe: 'CWE-134: If syslog''s format strings can be influenced by an attacker, they
      can be exploited (CWE-134)'
    primary_identifier: flawfinder.syslog-1
    secondary_identifiers:
    - name: Flawfinder - syslog
      type: flawfinder_func_name
      value: syslog
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.syslog-1
    shortlink: https://sg.run/2R7z
    semgrep.dev:
      rule:
        rule_id: ZqUgoz
        version_id: JdTb4q
        url: https://semgrep.dev/playground/r/JdTb4q/gitlab.flawfinder.syslog-1
        origin: custom
  pattern-either:
  - patterns:
    - pattern: syslog($FUNC,...)
    - pattern-not: syslog($FUNC,"...",...)
  severity: ERROR
- id: gitlab.flawfinder.system-1
  languages:
  - c
  message: 'try using a library call that implements the same functionality if available.

    '
  metadata:
    cwe: 'CWE-78: This causes a new program to execute and is difficult to use safely
      (CWE-78)'
    primary_identifier: flawfinder.system-1
    secondary_identifiers:
    - name: Flawfinder - system
      type: flawfinder_func_name
      value: system
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.system-1
    shortlink: https://sg.run/P80N
    semgrep.dev:
      rule:
        rule_id: zdU17X
        version_id: 6xT344
        url: https://semgrep.dev/playground/r/6xT344/gitlab.flawfinder.system-1
        origin: custom
  pattern: system(...)
  severity: ERROR
- id: gitlab.flawfinder.tmpfile-1
  languages:
  - c
  message: |
    Creating and using insecure temporary files can leave application and system data vulnerable to
    attack
  metadata:
    cwe: 'CWE-377: Function tmpfile() has a security flaw on some systems (e.g., older
      System V systems) (CWE-377)'
    primary_identifier: flawfinder.tmpfile-1
    secondary_identifiers:
    - name: Flawfinder - tmpfile
      type: flawfinder_func_name
      value: tmpfile
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.tmpfile-1
    shortlink: https://sg.run/RPqE
    semgrep.dev:
      rule:
        rule_id: j2UR7A
        version_id: 2KTenk
        url: https://semgrep.dev/playground/r/2KTenk/gitlab.flawfinder.tmpfile-1
        origin: custom
  pattern: tmpfile(...)
  severity: INFO
- id: gitlab.flawfinder.tmpnam-1.tempnam-1
  languages:
  - c
  message: |
    Creating and using insecure temporary files can leave application and system data vulnerable to
    attack.
  metadata:
    cwe: 'CWE-377: Temporary file race condition (CWE-377)'
    primary_identifier: flawfinder.tmpnam-1.tempnam-1
    secondary_identifiers:
    - name: Flawfinder - tmpnam
      type: flawfinder_func_name
      value: tmpnam
    - name: Flawfinder - tempnam
      type: flawfinder_func_name
      value: tempnam
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.tmpnam-1.tempnam-1
    shortlink: https://sg.run/Awkg
    semgrep.dev:
      rule:
        rule_id: 10Ueqw
        version_id: X0TEG1
        url: https://semgrep.dev/playground/r/X0TEG1/gitlab.flawfinder.tmpnam-1.tempnam-1
        origin: custom
  pattern-either:
  - pattern: tmpnam(...)
  - pattern: tempnam(...)
  severity: WARNING
- id: gitlab.flawfinder.ulimit-1
  languages:
  - c
  message: 'Use getrlimit(2), setrlimit(2), and sysconf(3) instead.

    '
  metadata:
    cwe: 'CWE-676: This C routine is considered obsolete (as opposed to the shell
      command by the same name, which is NOT obsolete) (CWE-676)'
    primary_identifier: flawfinder.ulimit-1
    secondary_identifiers:
    - name: Flawfinder - ulimit
      type: flawfinder_func_name
      value: ulimit
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.ulimit-1
    shortlink: https://sg.run/v2nX
    semgrep.dev:
      rule:
        rule_id: ReUo4K
        version_id: 5PTjK9
        url: https://semgrep.dev/playground/r/5PTjK9/gitlab.flawfinder.ulimit-1
        origin: custom
  pattern: ulimit(...)
  severity: INFO
- id: gitlab.flawfinder.umask-1
  languages:
  - c
  message: |
    Ensure that umask is given most restrictive possible setting (e.g.,
    066 or 077)
  metadata:
    cwe: 'CWE-732: Ensure that umask is given most restrictive possible setting (e.g.,
      066 or 077) (CWE-732)'
    primary_identifier: flawfinder.umask-1
    secondary_identifiers:
    - name: Flawfinder - umask
      type: flawfinder_func_name
      value: umask
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.umask-1
    shortlink: https://sg.run/brBZ
    semgrep.dev:
      rule:
        rule_id: KxUY1n
        version_id: WrT9go
        url: https://semgrep.dev/playground/r/WrT9go/gitlab.flawfinder.umask-1
        origin: custom
  pattern: umask(...)
  severity: INFO
- id: gitlab.flawfinder.usleep-1
  languages:
  - c
  message: 'Use nanosleep(2) or setitimer(2) instead.

    '
  metadata:
    cwe: 'CWE-676: This C routine is considered obsolete (as opposed to the shell
      command by the same name).   The interaction of this function with SIGALRM and
      other timer functions such as sleep(), alarm(), setitimer(), and nanosleep()
      is unspecified (CWE-676)'
    primary_identifier: flawfinder.usleep-1
    secondary_identifiers:
    - name: Flawfinder - usleep
      type: flawfinder_func_name
      value: usleep
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.usleep-1
    shortlink: https://sg.run/d0xP
    semgrep.dev:
      rule:
        rule_id: AbUGoN
        version_id: GxTyb6
        url: https://semgrep.dev/playground/r/GxTyb6/gitlab.flawfinder.usleep-1
        origin: custom
  pattern: usleep(...)
  severity: INFO
- id: gitlab.flawfinder.vfork-1
  languages:
  - c
  message: 'Use fork() instead.

    '
  metadata:
    cwe: 'CWE-362: On some old systems, vfork() permits race conditions, and it''s
      very difficult to use correctly (CWE-362)'
    primary_identifier: flawfinder.vfork-1
    secondary_identifiers:
    - name: Flawfinder - vfork
      type: flawfinder_func_name
      value: vfork
    license: MIT
    source: https://semgrep.dev/r/gitlab.flawfinder.vfork-1
    shortlink: https://sg.run/8R2J
    semgrep.dev:
      rule:
        rule_id: qNUb8v
        version_id: 0bTB0q
        url: https://semgrep.dev/playground/r/0bTB0q/gitlab.flawfinder.vfork-1
        origin: custom
  pattern: vfork(...)
  severity: INFO
- id: gitlab.security_code_scan.SCS0018-1
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-inside: |
        public class $CLASS : Controller {
          ...
        }
    - pattern: "$PARAM"
    - pattern-either:
      - patterns:
        - metavariable-regex:
            metavariable: "$HTTP_ANNO"
            regex: "^(Http)"
        - pattern-inside: |
            [$HTTP_ANNO]
            public string $METHOD(...,$PARAM,...){...}
      - pattern-inside: 'public IActionResult $METHOD(...,$PARAM,...){...}

          '
  pattern-sanitizers:
  - pattern-either:
    - pattern: "(Microsoft.Extensions.FileProviders.PhysicalFileProvider $E).GetFileInfo(...)"
    - pattern: "(System.Web.HttpServerUtility $E).MapPath(...)"
    - pattern: "(System.Web.HttpServerUtilityBase $E).MapPath(...)"
    - pattern: "(System.Web.HttpRequest $E).MapPath(...)"
  pattern-sinks:
  - pattern-either:
    - pattern: System.IO.Directory.Delete(...)
    - pattern: System.IO.Directory.GetFiles(...)
    - pattern: System.IO.Directory.Move(...)
    - pattern: System.IO.File.AppendAllLines(...)
    - pattern: System.IO.File.AppendAllLinesAsync(...)
    - pattern: System.IO.File.AppendAllText(...)
    - pattern: System.IO.File.AppendAllTextAsync(...)
    - pattern: System.IO.File.AppendText(...)
    - pattern: System.IO.File.Copy(...)
    - pattern: System.IO.File.Create(...)
    - pattern: System.IO.File.CreateText(...)
    - pattern: System.IO.File.Delete(...)
    - pattern: System.IO.File.Move(...)
    - pattern: System.IO.File.Open(...)
    - pattern: System.IO.File.OpenRead(...)
    - pattern: System.IO.File.OpenText(...)
    - pattern: System.IO.File.OpenWrite(...)
    - pattern: System.IO.File.ReadAllBytes(...)
    - pattern: System.IO.File.ReadAllBytesAsync(...)
    - pattern: System.IO.File.ReadAllLines(...)
    - pattern: System.IO.File.ReadAllLinesAsync(...)
    - pattern: System.IO.File.ReadAllText(...)
    - pattern: System.IO.File.ReadAllTextAsync(...)
    - pattern: System.IO.File.ReadLines(...)
    - pattern: System.IO.File.Replace(...)
    - pattern: System.IO.File.SetAccessControl(...)
    - pattern: System.IO.File.WriteAllBytes(...)
    - pattern: System.IO.File.WriteAllBytesAsync(...)
    - pattern: System.IO.File.WriteAllLines(...)
    - pattern: System.IO.File.WriteAllLinesAsync(...)
    - pattern: System.IO.File.WriteAllText(...)
    - pattern: System.IO.File.WriteAllTextAsync(...)
    - pattern: new System.IO.FileInfo(...)
    - pattern: "(System.IO.FileInfo $E).CopyTo(...)"
    - pattern: "(System.IO.FileInfo $E).MoveTo(...)"
    - pattern: "(System.IO.FileInfo $E).Replace(...)"
    - pattern: System.Reflection.Assembly.LoadFile(...)
    - pattern: System.Reflection.Assembly.LoadFrom(...)
    - pattern: System.Reflection.Assembly.ReflectionOnlyLoadFrom(...)
    - pattern: System.Reflection.Assembly.UnsafeLoadFrom(...)
    - pattern: System.AppDomain.AppendPrivatePath(...)
    - pattern: System.Xml.XmlReader.Create(...)
    - pattern: new System.IO.StreamReader.ctor(...)
    - pattern: new System.IO.StreamWriter.ctor(...)
    - pattern: new System.IO.FileStream.ctor(...)
    - pattern: new System.Web.Mvc.FilePathResult(...)
    - pattern: new Microsoft.AspNetCore.Mvc.PhysicalFileResult(...)
    - pattern: "(Microsoft.AspNetCore.Mvc.RazorPages.PageModel $E).PhysicalFile(...)"
    - pattern: "(System.Web.UI.WebControls.FileUpload $E).SaveAs(...)"
    - pattern: "(System.Web.HttpResponse $E).TransmitFile(...)"
    - pattern: "(System.Web.HttpResponse $E).WriteFile(...)"
    - pattern: "(System.Web.HttpResponseBase $E).TransmitFile(...)"
    - pattern: "(System.Web.HttpResponseBase $E).WriteFile(...)"
    - pattern: "(System.IO.Compression.ZipFileExtensions $E).CreateEntryFromFile(...)"
    - pattern: "(System.IO.Compression.ZipFileExtensions $E).ExtractToFile(...)"
    - pattern: "(System.IO.Compression.ZipFileExtensions $E).ExtractToDirectory(...)"
    - pattern: "(System.Net.WebClient $E).DownloadFile(...)"
    - pattern: "(System.Net.WebClient $E).DownloadFileAsync(...)"
    - pattern: "(System.Net.WebClient $E).DownloadFileTaskAsync(...)"
  message: |
    The software uses external input to construct a pathname that is intended
    to identify a file or directory that is located underneath a restricted
    parent directory, but the software does not properly neutralize special
    elements within the pathname that can cause the pathname to resolve to a
    location that is outside of the restricted directory..
  metadata:
    cwe: 'CWE-22: Improper Limitation of a Pathname to a Restricted Directory (''Path
      Traversal'')'
    primary_identifier: security_code_scan.SCS0018-1
    secondary_identifiers:
    - name: SCS0018
      type: security_code_scan_rule_id
      value: SCS0018
    license: MIT
    source: https://semgrep.dev/r/gitlab.security_code_scan.SCS0018-1
    shortlink: https://sg.run/zrpd
    semgrep.dev:
      rule:
        rule_id: BYUy1X
        version_id: rxTqg7
        url: https://semgrep.dev/playground/r/rxTqg7/gitlab.security_code_scan.SCS0018-1
        origin: custom
  severity: WARNING
  languages:
  - csharp
- id: mobsf.mobsfscan.accept_self_signed.accept_self_signed_certificate
  patterns:
  - pattern-either:
    - pattern: "$X.SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER\n"
    - pattern: "$X.setHostnameVerifier($Z.ALLOW_ALL_HOSTNAME_VERIFIER);\n"
    - pattern: "$X.setHostnameVerifier(new AllowAllHostnameVerifier());\n"
    - pattern: "$X.setDefaultHostnameVerifier(new NullHostnameVerifier());\n"
    - pattern: "$X.setDefaultHostnameVerifier((HostnameVerifier) new NullHostnameVerifier());\n"
    - pattern: |
        $RET verify(..., SSLSession $X) {
          ...
          return true;
        }
    - pattern: |
        $Y = SSLContext.getInstance(...);
        ...
        $Y.init(null, ...);
    - pattern: |
        $Y = $S.SSLContext.getInstance(...);
        ...
        $Y.init(null, ...);
    - pattern: |
        $Z = new TLSClientParameters(...);
        ...
        $Z.setDisableCNCheck(true);
    - pattern: "X509Certificate[] getAcceptedIssuers() { \n  ...\n  return new X509Certificate[]{};\n}\n"
    - pattern: |
        X509Certificate[] getAcceptedIssuers() {
          ...
          return new java.security.cert.X509Certificate[]{};
        }
    - pattern: "X509Certificate[] getAcceptedIssuers() { \n  ...\n  $Y = new X509Certificate[]{};\n
        \ ...\n  return $Y;\n}\n"
    - pattern: |
        X509Certificate[] getAcceptedIssuers() {
          return new X509Certificate[0];
        }
    - pattern: |
        X509Certificate[] getAcceptedIssuers() {
          ...
          $X =  new X509Certificate[0];
          ...
          return $X;
        }
    - pattern: |
        X509Certificate[] getAcceptedIssuers() {
          return null;
        }
    - pattern: 'sslContext.init(null, ...);

        '
    - pattern: 'setSslSocketFactory(new NonValidatingSSLSocketFactory());

        '
  message: Insecure Implementation of SSL. Trusting all the certificates or accepting
    self signed certificates is a critical Security Hole. This application is vulnerable
    to MITM attacks.
  languages:
  - java
  severity: ERROR
  metadata:
    cwe: cwe-295
    owasp-mobile: m3
    masvs: network-3
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x05g-Testing-Network-Communication.md#testing-endpoint-identify-verification-mstg-network-3
    license: LGPL-3.0-or-later
    source: https://semgrep.dev/r/mobsf.mobsfscan.accept_self_signed.accept_self_signed_certificate
    shortlink: https://sg.run/Q4kQ
    semgrep.dev:
      rule:
        rule_id: NbUYgl
        version_id: pZTNvl
        url: https://semgrep.dev/playground/r/pZTNvl/mobsf.mobsfscan.accept_self_signed.accept_self_signed_certificate
        origin: community
- id: mobsf.mobsfscan.aes_ecb.aes_ecb_mode
  patterns:
  - pattern-either:
    - pattern: 'Cipher.getInstance("=~/AES\/ECB.*/i")

        '
  message: The App uses ECB mode in Cryptographic encryption algorithm. ECB mode is
    known to be weak as it results in the same ciphertext for identical blocks of
    plaintext.
  severity: ERROR
  languages:
  - java
  metadata:
    cwe: cwe-327
    owasp-mobile: m5
    masvs: crypto-2
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x04g-Testing-Cryptography.md#weak-block-cipher-mode
    license: LGPL-3.0-or-later
    source: https://semgrep.dev/r/mobsf.mobsfscan.aes_ecb.aes_ecb_mode
    shortlink: https://sg.run/y6eR
    semgrep.dev:
      rule:
        rule_id: WAUPO6
        version_id: pZTwN3
        url: https://semgrep.dev/playground/r/pZTwN3/mobsf.mobsfscan.aes_ecb.aes_ecb_mode
        origin: community
- id: mobsf.mobsfscan.aes_ecb.aes_ecb_mode_default
  patterns:
  - pattern-either:
    - pattern: 'Cipher.getInstance("AES")

        '
  message: Calling Cipher.getInstance("AES") will return AES ECB mode by default.
    ECB mode is known to be weak as it results in the same ciphertext for identical
    blocks of plaintext.
  severity: ERROR
  languages:
  - java
  metadata:
    cwe: cwe-327
    owasp-mobile: m5
    masvs: crypto-2
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x04g-Testing-Cryptography.md#weak-block-cipher-mode
    license: LGPL-3.0-or-later
    source: https://semgrep.dev/r/mobsf.mobsfscan.aes_ecb.aes_ecb_mode_default
    shortlink: https://sg.run/rkxR
    semgrep.dev:
      rule:
        rule_id: 0oUJyQ
        version_id: 2KTKYj
        url: https://semgrep.dev/playground/r/2KTKYj/mobsf.mobsfscan.aes_ecb.aes_ecb_mode_default
        origin: community
- id: mobsf.mobsfscan.aes_encryption_keys.aes_hardcoded_key
  patterns:
  - pattern-either:
    - pattern: "$S = new SecretKeySpec(\"...\".getBytes(), \"AES\");\n...\n$C.init(...,
        $S); \n"
    - pattern: |
        $P = "...";
        ...
        $S = new SecretKeySpec($P.getBytes(), "AES");
        ...
        $C.init(..., $S);
  message: Hardcoded encryption key makes AES symmetric encryption useless. An attacker
    can easily reverse engineer the application and recover the keys.
  languages:
  - java
  severity: ERROR
  metadata:
    cwe: cwe-321
    owasp-mobile: m5
    masvs: crypto-1
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x04g-Testing-Cryptography.md#common-configuration-issues-mstg-crypto-1-mstg-crypto-2-and-mstg-crypto-3
    license: LGPL-3.0-or-later
    source: https://semgrep.dev/r/mobsf.mobsfscan.aes_encryption_keys.aes_hardcoded_key
    shortlink: https://sg.run/brZE
    semgrep.dev:
      rule:
        rule_id: KxUYnR
        version_id: X0T7L9
        url: https://semgrep.dev/playground/r/X0T7L9/mobsf.mobsfscan.aes_encryption_keys.aes_hardcoded_key
        origin: community
- id: mobsf.mobsfscan.android.hidden_ui.android_hidden_ui
  patterns:
  - pattern-either:
    - pattern: "$X.setVisibility(View.GONE);\n"
    - pattern: |
        $V = View.GONE;
        ...
        $X.setVisibility($V);
    - pattern: "$X.setVisibility(View.INVISIBLE);\n"
    - pattern: |
        $V = View.INVISIBLE;
        ...
        $X.setVisibility($V);
  message: Hidden elements in view can be used to hide data from user. But this data
    can be leaked.
  languages:
  - java
  severity: ERROR
  metadata:
    cwe: cwe-919
    owasp-mobile: m1
    masvs: storage-7
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x05d-Testing-Data-Storage.md#checking-for-sensitive-data-disclosure-through-the-user-interface-mstg-storage-7
    license: LGPL-3.0-or-later
    source: https://semgrep.dev/r/mobsf.mobsfscan.android.hidden_ui.android_hidden_ui
    shortlink: https://sg.run/YeEe
    semgrep.dev:
      rule:
        rule_id: L1UJDJ
        version_id: w8TPz2
        url: https://semgrep.dev/playground/r/w8TPz2/mobsf.mobsfscan.android.hidden_ui.android_hidden_ui
        origin: community
- id: mobsf.mobsfscan.android.logging.android_logging
  patterns:
  - pattern-not: System.out.print();
  - pattern-not: System.out.println();
  - pattern-not: System.err.print();
  - pattern-not: System.err.println();
  - pattern-not: Log.$D("...", "...", ...);
  - pattern-not: Log.$D($T, "...", ...);
  - pattern-not: System.out.print("...");
  - pattern-not: System.out.println("...");
  - pattern-not: System.err.print("...");
  - pattern-not: System.err.println("...");
  - pattern-either:
    - pattern: 'Log.$D($T, $X + "...", ...);

        '
    - pattern: 'Log.$D($T, "..." + $X + "...", ...);

        '
    - pattern: 'Log.$D($T, "..." + $X, ...);

        '
    - pattern: |
        $Y = $Z;
        ...
        Log.$D($T,<... $Y ...>, ...);
    - pattern: 'System.out.print(...);

        '
    - pattern: 'System.err.print(...);

        '
    - pattern: 'System.out.println(...);

        '
    - pattern: 'System.err.println(...);

        '
  message: The App logs information. Please ensure that sensitive information is never
    logged.
  languages:
  - java
  severity: INFO
  metadata:
    cwe: cwe-532
    owasp-mobile: m1
    masvs: storage-3
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x05d-Testing-Data-Storage.md#logs
    license: LGPL-3.0-or-later
    source: https://semgrep.dev/r/mobsf.mobsfscan.android.logging.android_logging
    shortlink: https://sg.run/6pQo
    semgrep.dev:
      rule:
        rule_id: 8GU0OP
        version_id: xyTgAJ
        url: https://semgrep.dev/playground/r/xyTgAJ/mobsf.mobsfscan.android.logging.android_logging
        origin: community
- id: mobsf.mobsfscan.android.secrets.hardcoded_api_key
  patterns:
  - pattern-not: $X = "";
  - pattern-not: $M($X, "", ...);
  - pattern-either:
    - pattern: '$X = "...";

        '
    - pattern: '$M($X, "...", ...);

        '
  - metavariable-regex:
      metavariable: "$X"
      regex: "(?i:.*key.*)"
  message: A hardcoded Key is identified.
  languages:
  - java
  severity: WARNING
  metadata:
    cwe: cwe-798
    owasp-mobile: m9
    masvs: storage-14
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x05d-Testing-Data-Storage.md#storing-a-key---example
    license: LGPL-3.0-or-later
    source: https://semgrep.dev/r/mobsf.mobsfscan.android.secrets.hardcoded_api_key
    shortlink: https://sg.run/p02g
    semgrep.dev:
      rule:
        rule_id: 3qUgDz
        version_id: vdTwn1
        url: https://semgrep.dev/playground/r/vdTwn1/mobsf.mobsfscan.android.secrets.hardcoded_api_key
        origin: community
- id: mobsf.mobsfscan.android.secrets.hardcoded_password
  patterns:
  - pattern-not: $X = "";
  - pattern-not: $M($X, "", ...);
  - pattern-either:
    - pattern: '$X = "...";

        '
    - pattern: '$M($X, "...", ...);

        '
  - metavariable-regex:
      metavariable: "$X"
      regex: "(?i:.*pass.*)"
  message: A hardcoded password in plain text is identified.
  languages:
  - java
  severity: WARNING
  metadata:
    cwe: cwe-798
    owasp-mobile: m9
    masvs: storage-14
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x05d-Testing-Data-Storage.md#storing-a-key---example
    license: LGPL-3.0-or-later
    source: https://semgrep.dev/r/mobsf.mobsfscan.android.secrets.hardcoded_password
    shortlink: https://sg.run/oWp9
    semgrep.dev:
      rule:
        rule_id: gxUpG8
        version_id: O9Tq3j
        url: https://semgrep.dev/playground/r/O9Tq3j/mobsf.mobsfscan.android.secrets.hardcoded_password
        origin: community
- id: mobsf.mobsfscan.android.secrets.hardcoded_secret
  patterns:
  - pattern-not: $X = "";
  - pattern-not: $M($X, "", ...);
  - pattern-either:
    - pattern: '$X = "...";

        '
    - pattern: '$M($X, "...", ...);

        '
  - metavariable-regex:
      metavariable: "$X"
      regex: "(?i:.*secret)"
  message: A hardcoded secret is identified.
  languages:
  - java
  severity: WARNING
  metadata:
    cwe: cwe-798
    owasp-mobile: m9
    masvs: storage-14
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x05d-Testing-Data-Storage.md#storing-a-key---example
    license: LGPL-3.0-or-later
    source: https://semgrep.dev/r/mobsf.mobsfscan.android.secrets.hardcoded_secret
    shortlink: https://sg.run/23O0
    semgrep.dev:
      rule:
        rule_id: 4bUJWL
        version_id: d6T0jQ
        url: https://semgrep.dev/playground/r/d6T0jQ/mobsf.mobsfscan.android.secrets.hardcoded_secret
        origin: community
- id: mobsf.mobsfscan.android.secrets.hardcoded_username
  patterns:
  - pattern-not: $X = "";
  - pattern-not: $M($X, "", ...);
  - pattern-either:
    - pattern: '$X = "...";

        '
    - pattern: '$M($X, "...", ...);

        '
  - metavariable-regex:
      metavariable: "$X"
      regex: "(?i:.*user.*)"
  message: A hardcoded username in plain text is identified.
  languages:
  - java
  severity: WARNING
  metadata:
    cwe: cwe-798
    owasp-mobile: m9
    masvs: storage-14
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x05d-Testing-Data-Storage.md#storing-a-key---example
    license: LGPL-3.0-or-later
    source: https://semgrep.dev/r/mobsf.mobsfscan.android.secrets.hardcoded_username
    shortlink: https://sg.run/zXGG
    semgrep.dev:
      rule:
        rule_id: QrULll
        version_id: e1To80
        url: https://semgrep.dev/playground/r/e1To80/mobsf.mobsfscan.android.secrets.hardcoded_username
        origin: community
- id: mobsf.mobsfscan.android.word_readable_writable.world_readable
  patterns:
  - pattern-either:
    - pattern: 'Context.MODE_WORLD_READABLE

        '
  message: The file is World Readable. Any App can read from the file.
  languages:
  - java
  severity: WARNING
  metadata:
    cwe: cwe-276
    owasp-mobile: m2
    masvs: storage-2
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x05d-Testing-Data-Storage.md#testing-local-storage-for-sensitive-data-mstg-storage-1-and-mstg-storage-2
    license: LGPL-3.0-or-later
    source: https://semgrep.dev/r/mobsf.mobsfscan.android.word_readable_writable.world_readable
    shortlink: https://sg.run/XxEK
    semgrep.dev:
      rule:
        rule_id: PeUKq9
        version_id: ZRT955
        url: https://semgrep.dev/playground/r/ZRT955/mobsf.mobsfscan.android.word_readable_writable.world_readable
        origin: community
- id: mobsf.mobsfscan.android.word_readable_writable.world_writeable
  patterns:
  - pattern-either:
    - pattern: 'Context.MODE_WORLD_WRITEABLE

        '
  message: The file is World Readable and Writable. Any App can read/write to the
    file.
  languages:
  - java
  severity: WARNING
  metadata:
    cwe: cwe-276
    owasp-mobile: m2
    masvs: storage-2
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x05d-Testing-Data-Storage.md#testing-local-storage-for-sensitive-data-mstg-storage-1-and-mstg-storage-2
    license: LGPL-3.0-or-later
    source: https://semgrep.dev/r/mobsf.mobsfscan.android.word_readable_writable.world_writeable
    shortlink: https://sg.run/jGlY
    semgrep.dev:
      rule:
        rule_id: JDU4Ab
        version_id: nWTbzY
        url: https://semgrep.dev/playground/r/nWTbzY/mobsf.mobsfscan.android.word_readable_writable.world_writeable
        origin: community
- id: mobsf.mobsfscan.android_safetynetapi.android_safetynet_api
  patterns:
  - pattern-either:
    - pattern: 'import com.google.android.gms.safetynet.SafetyNetApi;

        '
    - pattern: |
        $S = SafetyNet.getClient(...);
        ...
        $T = $S.attest(...);
    - pattern: 'new RNGoogleSafetyNetPackage(...)

        '
  message: 'This app does not uses SafetyNet Attestation API that provides cryptographically-signed
    attestation, assessing the device''s integrity. This check helps to ensure that
    the servers are interacting with the genuine app running on a genuine Android
    device. '
  languages:
  - java
  severity: INFO
  metadata:
    cwe: cwe-353
    owasp-mobile: m8
    masvs: resilience-1
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x05j-Testing-Resiliency-Against-Reverse-Engineering.md#testing-root-detection-mstg-resilience-1
    license: LGPL-3.0-or-later
    source: https://semgrep.dev/r/mobsf.mobsfscan.android_safetynetapi.android_safetynet_api
    shortlink: https://sg.run/pkZL
    semgrep.dev:
      rule:
        rule_id: 5rU8ko
        version_id: qkTb46
        url: https://semgrep.dev/playground/r/qkTb46/mobsf.mobsfscan.android_safetynetapi.android_safetynet_api
        origin: community
- id: mobsf.mobsfscan.best_practices.android_safetynetapi.android_safetynet_api
  patterns:
  - pattern-either:
    - pattern: 'import com.google.android.gms.safetynet.SafetyNetApi;

        '
    - pattern: |
        $S = SafetyNet.getClient(...);
        ...
        $T = $S.attest(...);
    - pattern: 'new RNGoogleSafetyNetPackage(...)

        '
  message: 'This app does not uses SafetyNet Attestation API that provides cryptographically-signed
    attestation, assessing the device''s integrity. This check helps to ensure that
    the servers are interacting with the genuine app running on a genuine Android
    device. '
  languages:
  - java
  severity: INFO
  metadata:
    cwe: cwe-353
    owasp-mobile: m8
    masvs: resilience-1
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x05j-Testing-Resiliency-Against-Reverse-Engineering.md#testing-root-detection-mstg-resilience-1
    license: LGPL-3.0-or-later
    source: https://semgrep.dev/r/mobsf.mobsfscan.best_practices.android_safetynetapi.android_safetynet_api
    shortlink: https://sg.run/1lOw
    semgrep.dev:
      rule:
        rule_id: 5rUx0W
        version_id: ExTL2Q
        url: https://semgrep.dev/playground/r/ExTL2Q/mobsf.mobsfscan.best_practices.android_safetynetapi.android_safetynet_api
        origin: community
- id: mobsf.mobsfscan.best_practices.flag_secure.android_prevent_screenshot
  patterns:
  - pattern-either:
    - pattern: 'getWindow().setFlags(WindowManager.LayoutParams.FLAG_SECURE, ...);

        '
    - pattern: |
        $V = WindowManager.LayoutParams.FLAG_SECURE;
        ...
        getWindow().setFlags($V);
    - pattern: 'getWindow().addFlags(WindowManager.LayoutParams.FLAG_SECURE, ...);

        '
    - pattern: |
        $V = WindowManager.LayoutParams.FLAG_SECURE;
        ...
        getWindow().addFlags($V);
    - pattern: "$A.getWindow().setFlags(WindowManager.LayoutParams.FLAG_SECURE, ...);\n"
    - pattern: |
        $V = WindowManager.LayoutParams.FLAG_SECURE;
        ...
        $A.getWindow().setFlags($V);
    - pattern: "$A.getWindow().addFlags(WindowManager.LayoutParams.FLAG_SECURE, ...);\n"
    - pattern: |
        $V = WindowManager.LayoutParams.FLAG_SECURE;
        ...
        $A.getWindow().addFlags($V);
  message: This app does not have capabilities to prevent against Screenshots from
    Recent Task History/ Now On Tap etc.
  languages:
  - java
  severity: INFO
  metadata:
    cwe: cwe-200
    owasp-mobile: m2
    masvs: storage-9
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x05d-Testing-Data-Storage.md#finding-sensitive-information-in-auto-generated-screenshots-mstg-storage-9
    license: LGPL-3.0-or-later
    source: https://semgrep.dev/r/mobsf.mobsfscan.best_practices.flag_secure.android_prevent_screenshot
    shortlink: https://sg.run/9jOY
    semgrep.dev:
      rule:
        rule_id: GdUg51
        version_id: 7ZTlQv
        url: https://semgrep.dev/playground/r/7ZTlQv/mobsf.mobsfscan.best_practices.flag_secure.android_prevent_screenshot
        origin: community
- id: mobsf.mobsfscan.best_practices.root_detection.android_root_detection
  patterns:
  - pattern-either:
    - pattern: "$J.isJailBroken(...)\n"
    - pattern: "$R.isDeviceRooted(...)\n"
    - pattern: "$R.isRooted(...)\n"
    - pattern: 'RootTools.isAccessGiven(...)

        '
    - pattern: '$MTD.contains("test-keys")

        '
  message: This app does not have root detection capabilities. Running a sensitive
    application on a rooted device questions the device integrity and affects users
    data.
  languages:
  - java
  severity: INFO
  metadata:
    cwe: cwe-919
    owasp-mobile: m8
    masvs: resilience-1
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x05j-Testing-Resiliency-Against-Reverse-Engineering.md#testing-root-detection-mstg-resilience-1
    license: LGPL-3.0-or-later
    source: https://semgrep.dev/r/mobsf.mobsfscan.best_practices.root_detection.android_root_detection
    shortlink: https://sg.run/y25x
    semgrep.dev:
      rule:
        rule_id: ReUdYj
        version_id: LjTWyP
        url: https://semgrep.dev/playground/r/LjTWyP/mobsf.mobsfscan.best_practices.root_detection.android_root_detection
        origin: community
- id: mobsf.mobsfscan.best_practices.tapjacking.android_detect_tapjacking
  patterns:
  - pattern-either:
    - pattern: "$F.setFilterTouchesWhenObscured(true);\n"
  message: This app does not have capabilities to prevent tapjacking attacks. An attacker
    can hijack the user's taps and tricks him into performing some critical operations
    that he did not intend to.
  languages:
  - java
  severity: INFO
  metadata:
    cwe: cwe-200
    owasp-mobile: m1
    masvs: platform-9
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x05h-Testing-Platform-Interaction.md#testing-for-overlay-attacks-mstg-platform-9
    license: LGPL-3.0-or-later
    source: https://semgrep.dev/r/mobsf.mobsfscan.best_practices.tapjacking.android_detect_tapjacking
    shortlink: https://sg.run/rqjn
    semgrep.dev:
      rule:
        rule_id: AbUx1o
        version_id: 8KTJjG
        url: https://semgrep.dev/playground/r/8KTJjG/mobsf.mobsfscan.best_practices.tapjacking.android_detect_tapjacking
        origin: community
- id: mobsf.mobsfscan.best_practices.tls_certificate_transparency.android_certificate_transparency
  patterns:
  - pattern-either:
    - pattern: 'import com.babylon.certificatetransparency;

        '
    - pattern: 'new CTInterceptorBuilder(...)

        '
    - pattern: 'new CTHostnameVerifierBuilder(...)

        '
  message: This app does not enforce TLS Certificate Transparency that helps to detect
    SSL certificates that have been mistakenly issued by a certificate authority or
    maliciously acquired from an otherwise unimpeachable certificate authority.
  languages:
  - java
  severity: INFO
  metadata:
    cwe: cwe-295
    owasp-mobile: m3
    masvs: network-4
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x05g-Testing-Network-Communication.md#testing-custom-certificate-stores-and-certificate-pinning-mstg-network-4
    license: LGPL-3.0-or-later
    source: https://semgrep.dev/r/mobsf.mobsfscan.best_practices.tls_certificate_transparency.android_certificate_transparency
    shortlink: https://sg.run/bERp
    semgrep.dev:
      rule:
        rule_id: BYUoO0
        version_id: gETR1k
        url: https://semgrep.dev/playground/r/gETR1k/mobsf.mobsfscan.best_practices.tls_certificate_transparency.android_certificate_transparency
        origin: community
- id: mobsf.mobsfscan.best_practices.tls_pinning.android_certificate_pinning
  patterns:
  - pattern-either:
    - pattern: 'import com.toyberman.RNSslPinningPackage;

        '
    - pattern: 'import org.thoughtcrime.ssl.pinning;

        '
    - pattern: 'new PinningValidationReportTestBroadcastReceiver()

        '
    - pattern: 'new CertificatePinner.Builder()

        '
    - pattern: 'CertificatePinner.Builder()

        '
    - pattern: 'TrustKit.getInstance().getSSLSocketFactory(...)

        '
    - pattern: |
        $X = $R.openRawResource(...);
        ...
        $KS = KeyStore.getInstance(...);
        ...
        $KS.load($X, ...);
        ...
        $T.init($KS);
    - pattern: 'TrustKit.initializeWithNetworkSecurityConfiguration(...);

        '
    - pattern: 'OkHttp2Helper.getPinningInterceptor()

        '
    - pattern: 'OkHttp3Helper.getPinningInterceptor()

        '
    - pattern: 'new PinningHostnameVerifier(...)

        '
    - pattern: 'PinningHelper.getPinnedHttpsURLConnection

        '
    - pattern: |
        $F.openRawResource(...);
        ...
        $X = new Picasso.Builder(...);
  message: This app does not use a TLS/SSL certificate or public key pinning in code
    to detect or prevent MITM attacks in secure communication channel. Please verify
    if pinning is enabled in `network_security_config.xml`.
  languages:
  - java
  severity: INFO
  metadata:
    cwe: cwe-295
    owasp-mobile: m3
    masvs: network-4
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x05g-Testing-Network-Communication.md#testing-custom-certificate-stores-and-certificate-pinning-mstg-network-4
    license: LGPL-3.0-or-later
    source: https://semgrep.dev/r/mobsf.mobsfscan.best_practices.tls_pinning.android_certificate_pinning
    shortlink: https://sg.run/NXEp
    semgrep.dev:
      rule:
        rule_id: DbUL4y
        version_id: QkTYzZ
        url: https://semgrep.dev/playground/r/QkTYzZ/mobsf.mobsfscan.best_practices.tls_pinning.android_certificate_pinning
        origin: community
- id: mobsf.mobsfscan.cbc_padding_oracle.cbc_padding_oracle
  patterns:
  - pattern-either:
    - pattern: 'Cipher.getInstance("AES/CBC/PKCS5Padding")

        '
    - pattern: 'Cipher.getInstance("Blowfish/CBC/PKCS5Padding")

        '
    - pattern: 'Cipher.getInstance("DES/CBC/PKCS5Padding")

        '
    - pattern: 'Cipher.getInstance("AES/CBC/PKCS7Padding")

        '
    - pattern: 'Cipher.getInstance("Blowfish/CBC/PKCS7Padding")

        '
    - pattern: 'Cipher.getInstance("DES/CBC/PKCS7Padding")

        '
  message: The App uses the encryption mode CBC with PKCS5/PKCS7 padding. This configuration
    is vulnerable to padding oracle attacks.
  languages:
  - java
  severity: ERROR
  metadata:
    cwe: cwe-649
    owasp-mobile: m5
    masvs: crypto-3
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x04g-Testing-Cryptography.md#padding-oracle-attacks-due-to-weaker-padding-or-block-operation-implementations
    license: LGPL-3.0-or-later
    source: https://semgrep.dev/r/mobsf.mobsfscan.cbc_padding_oracle.cbc_padding_oracle
    shortlink: https://sg.run/N8dz
    semgrep.dev:
      rule:
        rule_id: qNUb5A
        version_id: jQTRzb
        url: https://semgrep.dev/playground/r/jQTRzb/mobsf.mobsfscan.cbc_padding_oracle.cbc_padding_oracle
        origin: community
- id: mobsf.mobsfscan.cbc_static_iv.cbc_static_iv
  patterns:
  - pattern-either:
    - pattern: |
        byte[] $X = {...};
        ...
        $Y =  new IvParameterSpec($X, ...);
        ...
        $C.getInstance("=~/AES/CBC.*/i");
    - pattern: |
        byte[] $X = "...".$FUNC(...);
        ...
        $Y =  new IvParameterSpec($X, ...);
        ...
        $C.getInstance("=~/AES/CBC.*/i");
  message: The IV for AES CBC mode should be random. A static IV makes the ciphertext
    vulnerable to Chosen Plaintext Attack.
  languages:
  - java
  severity: ERROR
  metadata:
    cwe: cwe-329
    owasp-mobile: m5
    masvs: crypto-5
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x04g-Testing-Cryptography.md#predictable-initialization-vector
    license: LGPL-3.0-or-later
    source: https://semgrep.dev/r/mobsf.mobsfscan.cbc_static_iv.cbc_static_iv
    shortlink: https://sg.run/kkb2
    semgrep.dev:
      rule:
        rule_id: lBUzlq
        version_id: 1QTeoD
        url: https://semgrep.dev/playground/r/1QTeoD/mobsf.mobsfscan.cbc_static_iv.cbc_static_iv
        origin: community
- id: mobsf.mobsfscan.command_injection.command_injection
  patterns:
  - pattern-not: Runtime.getRuntime().exec("...", ...);
  - pattern-not: Runtime.getRuntime().exec(new String[] {"...", ...}, ...);
  - pattern-either:
    - pattern: 'Runtime.getRuntime().exec(...);

        '
  message: User controlled strings in exec() will result in command execution.
  languages:
  - java
  severity: ERROR
  metadata:
    cwe: cwe-78
    owasp-mobile: m7
    masvs: platform-2
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x04h-Testing-Code-Quality.md#injection-flaws-mstg-arch-2-and-mstg-platform-2
    license: LGPL-3.0-or-later
    source: https://semgrep.dev/r/mobsf.mobsfscan.command_injection.command_injection
    shortlink: https://sg.run/L8jo
    semgrep.dev:
      rule:
        rule_id: yyUy3g
        version_id: vdTjN9
        url: https://semgrep.dev/playground/r/vdTjN9/mobsf.mobsfscan.command_injection.command_injection
        origin: community
- id: mobsf.mobsfscan.command_injection_formated.command_injection_warning
  patterns:
  - pattern-either:
    - pattern: "$RUNTIME.exec($X + $Y);"
    - pattern: "$RUNTIME.exec(String.format(...));"
    - pattern: "$RUNTIME.loadLibrary($X + $Y);"
    - pattern: "$RUNTIME.loadLibrary(String.format(...));"
    - patterns:
      - pattern-either:
        - pattern: '$RUNTIME.exec("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",$ARG,...)

            '
        - pattern: '$RUNTIME.exec(Arrays.asList("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",$ARG,...),...)

            '
        - pattern: '$RUNTIME.exec(new String[]{"=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",$ARG,...},...)

            '
        - patterns:
          - pattern-either:
            - pattern: '$RUNTIME.exec($CMD,"-c",$ARG,...)

                '
            - pattern: '$RUNTIME.exec(Arrays.asList($CMD,"-c",$ARG,...),...)

                '
            - pattern: '$RUNTIME.exec(new String[]{$CMD,"-c",$ARG,...},...)

                '
          - pattern-inside: |
              $CMD = "=~/(sh|bash|ksh|csh|tcsh|zsh)/";
              ...
      - pattern-not-inside: |
          $ARG = "...";
          ...
      - pattern-not: '$RUNTIME.exec("...","...","...",...)

          '
      - pattern-not: '$RUNTIME.exec(new String[]{"...","...","...",...},...)

          '
      - pattern-not: '$RUNTIME.exec(Arrays.asList("...","...","...",...),...)

          '
  - pattern-inside: |
      $TYPE $RUNTIME = Runtime.getRuntime(...);
      ...
  message: 'A formatted or concatenated string was detected as input to a java.lang.Runtime
    call. This is dangerous if a variable is controlled by user input and could result
    in a command injection. Ensure your variables are not controlled by users or sufficiently
    sanitized.

    '
  severity: WARNING
  languages:
  - java
  metadata:
    cwe: cwe-78
    owasp-mobile: m7
    masvs: platform-2
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x04h-Testing-Code-Quality.md#injection-flaws-mstg-arch-2-and-mstg-platform-2
    license: LGPL-3.0-or-later
    source: https://semgrep.dev/r/mobsf.mobsfscan.command_injection_formated.command_injection_warning
    shortlink: https://sg.run/8RKE
    semgrep.dev:
      rule:
        rule_id: r6U90K
        version_id: d6TlA4
        url: https://semgrep.dev/playground/r/d6TlA4/mobsf.mobsfscan.command_injection_formated.command_injection_warning
        origin: community
- id: mobsf.mobsfscan.crypto.aes_ecb.aes_ecb_mode
  patterns:
  - pattern-either:
    - pattern: 'Cipher.getInstance("=~/AES\/ECB.*/i")

        '
  message: The App uses ECB mode in Cryptographic encryption algorithm. ECB mode is
    known to be weak as it results in the same ciphertext for identical blocks of
    plaintext.
  severity: ERROR
  languages:
  - java
  metadata:
    cwe: cwe-327
    owasp-mobile: m5
    masvs: crypto-2
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x04g-Testing-Cryptography.md#weak-block-cipher-mode
    license: LGPL-3.0-or-later
    source: https://semgrep.dev/r/mobsf.mobsfscan.crypto.aes_ecb.aes_ecb_mode
    shortlink: https://sg.run/kRY7
    semgrep.dev:
      rule:
        rule_id: WAUg2K
        version_id: 3ZTGPQ
        url: https://semgrep.dev/playground/r/3ZTGPQ/mobsf.mobsfscan.crypto.aes_ecb.aes_ecb_mode
        origin: community
- id: mobsf.mobsfscan.crypto.aes_ecb.aes_ecb_mode_default
  patterns:
  - pattern-either:
    - pattern: 'Cipher.getInstance("AES")

        '
  message: Calling Cipher.getInstance("AES") will return AES ECB mode by default.
    ECB mode is known to be weak as it results in the same ciphertext for identical
    blocks of plaintext.
  severity: ERROR
  languages:
  - java
  metadata:
    cwe: cwe-327
    owasp-mobile: m5
    masvs: crypto-2
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x04g-Testing-Cryptography.md#weak-block-cipher-mode
    license: LGPL-3.0-or-later
    source: https://semgrep.dev/r/mobsf.mobsfscan.crypto.aes_ecb.aes_ecb_mode_default
    shortlink: https://sg.run/wzPY
    semgrep.dev:
      rule:
        rule_id: 0oUZRX
        version_id: 44TLk6
        url: https://semgrep.dev/playground/r/44TLk6/mobsf.mobsfscan.crypto.aes_ecb.aes_ecb_mode_default
        origin: community
- id: mobsf.mobsfscan.crypto.aes_encryption_keys.aes_hardcoded_key
  patterns:
  - pattern-either:
    - pattern: "$S = new SecretKeySpec(\"...\".getBytes(), \"AES\");\n...\n$C.init(...,
        $S); \n"
    - pattern: |
        $P = "...";
        ...
        $S = new SecretKeySpec($P.getBytes(), "AES");
        ...
        $C.init(..., $S);
  message: Hardcoded encryption key makes AES symmetric encryption useless. An attacker
    can easily reverse engineer the application and recover the keys.
  languages:
  - java
  severity: ERROR
  metadata:
    cwe: cwe-321
    owasp-mobile: m5
    masvs: crypto-1
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x04g-Testing-Cryptography.md#common-configuration-issues-mstg-crypto-1-mstg-crypto-2-and-mstg-crypto-3
    license: LGPL-3.0-or-later
    source: https://semgrep.dev/r/mobsf.mobsfscan.crypto.aes_encryption_keys.aes_hardcoded_key
    shortlink: https://sg.run/xpJz
    semgrep.dev:
      rule:
        rule_id: KxURB0
        version_id: PkTlZR
        url: https://semgrep.dev/playground/r/PkTlZR/mobsf.mobsfscan.crypto.aes_encryption_keys.aes_hardcoded_key
        origin: community
- id: mobsf.mobsfscan.crypto.cbc_padding_oracle.cbc_padding_oracle
  patterns:
  - pattern-either:
    - pattern: 'Cipher.getInstance("AES/CBC/PKCS5Padding")

        '
    - pattern: 'Cipher.getInstance("Blowfish/CBC/PKCS5Padding")

        '
    - pattern: 'Cipher.getInstance("DES/CBC/PKCS5Padding")

        '
    - pattern: 'Cipher.getInstance("AES/CBC/PKCS7Padding")

        '
    - pattern: 'Cipher.getInstance("Blowfish/CBC/PKCS7Padding")

        '
    - pattern: 'Cipher.getInstance("DES/CBC/PKCS7Padding")

        '
  message: The App uses the encryption mode CBC with PKCS5/PKCS7 padding. This configuration
    is vulnerable to padding oracle attacks.
  languages:
  - java
  severity: ERROR
  metadata:
    cwe: cwe-649
    owasp-mobile: m5
    masvs: crypto-3
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x04g-Testing-Cryptography.md#padding-oracle-attacks-due-to-weaker-padding-or-block-operation-implementations
    license: LGPL-3.0-or-later
    source: https://semgrep.dev/r/mobsf.mobsfscan.crypto.cbc_padding_oracle.cbc_padding_oracle
    shortlink: https://sg.run/OjEB
    semgrep.dev:
      rule:
        rule_id: qNUrzk
        version_id: JdTByk
        url: https://semgrep.dev/playground/r/JdTByk/mobsf.mobsfscan.crypto.cbc_padding_oracle.cbc_padding_oracle
        origin: community
- id: mobsf.mobsfscan.crypto.cbc_static_iv.cbc_static_iv
  patterns:
  - pattern-either:
    - pattern: |
        byte[] $X = {...};
        ...
        $Y =  new IvParameterSpec($X, ...);
        ...
        $C.getInstance("=~/AES/CBC.*/i");
    - pattern: |
        byte[] $X = "...".$FUNC(...);
        ...
        $Y =  new IvParameterSpec($X, ...);
        ...
        $C.getInstance("=~/AES/CBC.*/i");
  message: The IV for AES CBC mode should be random. A static IV makes the ciphertext
    vulnerable to Chosen Plaintext Attack.
  languages:
  - java
  severity: ERROR
  metadata:
    cwe: cwe-329
    owasp-mobile: m5
    masvs: crypto-5
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x04g-Testing-Cryptography.md#predictable-initialization-vector
    license: LGPL-3.0-or-later
    source: https://semgrep.dev/r/mobsf.mobsfscan.crypto.cbc_static_iv.cbc_static_iv
    shortlink: https://sg.run/egDb
    semgrep.dev:
      rule:
        rule_id: lBUYwL
        version_id: 5PTRO7
        url: https://semgrep.dev/playground/r/5PTRO7/mobsf.mobsfscan.crypto.cbc_static_iv.cbc_static_iv
        origin: community
- id: mobsf.mobsfscan.crypto.insecure_random.java_insecure_random
  patterns:
  - pattern-either:
    - pattern: 'import java.util.Random;

        '
    - pattern: 'import java.util.concurrent.ThreadLocalRandom;

        '
  message: The App uses an insecure Random Number Generator.
  languages:
  - java
  severity: WARNING
  metadata:
    cwe: cwe-330
    owasp-mobile: m5
    masvs: crypto-6
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x04g-Testing-Cryptography.md#weak-random-number-generators
    license: LGPL-3.0-or-later
    source: https://semgrep.dev/r/mobsf.mobsfscan.crypto.insecure_random.java_insecure_random
    shortlink: https://sg.run/vo4A
    semgrep.dev:
      rule:
        rule_id: PeUKqY
        version_id: GxTn7Y
        url: https://semgrep.dev/playground/r/GxTn7Y/mobsf.mobsfscan.crypto.insecure_random.java_insecure_random
        origin: community
- id: mobsf.mobsfscan.crypto.insecure_ssl_v3.insecure_sslv3
  patterns:
  - pattern-either:
    - pattern: '$S.getInstance("SSLv3");

        '
  message: SSLv3 is insecure and has multiple known vulnerabilities.
  languages:
  - java
  severity: ERROR
  metadata:
    cwe: cwe-327
    owasp-mobile: m5
    masvs: crypto-4
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x04g-Testing-Cryptography.md#identifying-insecure-andor-deprecated-cryptographic-algorithms-mstg-crypto-4
    license: LGPL-3.0-or-later
    source: https://semgrep.dev/r/mobsf.mobsfscan.crypto.insecure_ssl_v3.insecure_sslv3
    shortlink: https://sg.run/dnBZ
    semgrep.dev:
      rule:
        rule_id: JDU4Ag
        version_id: RGT6g9
        url: https://semgrep.dev/playground/r/RGT6g9/mobsf.mobsfscan.crypto.insecure_ssl_v3.insecure_sslv3
        origin: community
- id: mobsf.mobsfscan.crypto.rsa_no_oeap.rsa_no_oeap
  patterns:
  - pattern-either:
    - pattern: 'Cipher.getInstance($X, ...)

        '
    - pattern: 'javax.crypto.Cipher.getInstance($X, ...)

        '
  - metavariable-regex:
      metavariable: "$X"
      regex: "(?i:.*rsa/.+/nopadding.*)"
  message: This App uses RSA Crypto without OAEP padding. The purpose of the padding
    scheme is to prevent a number of attacks on RSA that only work when the encryption
    is performed without padding.
  languages:
  - java
  severity: ERROR
  metadata:
    cwe: cwe-780
    owasp-mobile: m5
    masvs: crypto-3
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x04g-Testing-Cryptography.md#mobile-app-cryptography
    license: LGPL-3.0-or-later
    source: https://semgrep.dev/r/mobsf.mobsfscan.crypto.rsa_no_oeap.rsa_no_oeap
    shortlink: https://sg.run/ZZED
    semgrep.dev:
      rule:
        rule_id: 5rUx0n
        version_id: A8TOzL
        url: https://semgrep.dev/playground/r/A8TOzL/mobsf.mobsfscan.crypto.rsa_no_oeap.rsa_no_oeap
        origin: community
- id: mobsf.mobsfscan.crypto.sha1_hash.sha1_hash
  patterns:
  - pattern-either:
    - pattern: '$C.getInstance("=~/sha-1|sha1/i", ...);

        '
    - pattern: 'DigestUtils.sha1Hex(...);

        '
    - pattern: 'DigestUtils.sha1(...);

        '
    - pattern: 'DigestUtils.sha(...);

        '
  message: SHA1 Hash algorithm used. The SHA1 hash is known to have hash collisions.
  languages:
  - java
  severity: WARNING
  metadata:
    cwe: cwe-327
    owasp-mobile: m5
    masvs: crypto-4
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x04g-Testing-Cryptography.md#identifying-insecure-andor-deprecated-cryptographic-algorithms-mstg-crypto-4
    license: LGPL-3.0-or-later
    source: https://semgrep.dev/r/mobsf.mobsfscan.crypto.sha1_hash.sha1_hash
    shortlink: https://sg.run/nDyX
    semgrep.dev:
      rule:
        rule_id: GdUgKL
        version_id: BjTgNG
        url: https://semgrep.dev/playground/r/BjTgNG/mobsf.mobsfscan.crypto.sha1_hash.sha1_hash
        origin: community
- id: mobsf.mobsfscan.crypto.weak_ciphers.weak_cipher
  patterns:
  - pattern-either:
    - pattern: '$C.getInstance("=~/des|desede|rc2|rc4|blowfish/i", ...);

        '
    - pattern: "$C = new NullCipher();\n"
  message: Weak encryption algorithm identified. This algorithm is vulnerable to cryptographic
    attacks.
  severity: ERROR
  languages:
  - java
  metadata:
    cwe: cwe-327
    owasp-mobile: m5
    masvs: crypto-4
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x04g-Testing-Cryptography.md#identifying-insecure-andor-deprecated-cryptographic-algorithms-mstg-crypto-4
    license: LGPL-3.0-or-later
    source: https://semgrep.dev/r/mobsf.mobsfscan.crypto.weak_ciphers.weak_cipher
    shortlink: https://sg.run/EKZw
    semgrep.dev:
      rule:
        rule_id: ReUdZD
        version_id: DkTPp3
        url: https://semgrep.dev/playground/r/DkTPp3/mobsf.mobsfscan.crypto.weak_ciphers.weak_cipher
        origin: community
- id: mobsf.mobsfscan.crypto.weak_hashes.weak_hash
  patterns:
  - pattern-either:
    - pattern: '$C.getInstance("=~/md5|md4/i", ...);

        '
    - pattern: "$C.Files.hash(..., Hashing.md5());\n"
    - pattern: 'Files.hash(..., Hashing.md5());

        '
    - pattern: 'DigestUtils.md5Hex(...);

        '
    - pattern: 'DigestUtils.md5(...);

        '
  message: Weak Hash algorithm used. The hash algorithm is known to have hash collisions.
  severity: WARNING
  languages:
  - java
  metadata:
    cwe: cwe-327
    owasp-mobile: m5
    masvs: crypto-4
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x04g-Testing-Cryptography.md#identifying-insecure-andor-deprecated-cryptographic-algorithms-mstg-crypto-4
    license: LGPL-3.0-or-later
    source: https://semgrep.dev/r/mobsf.mobsfscan.crypto.weak_hashes.weak_hash
    shortlink: https://sg.run/72wZ
    semgrep.dev:
      rule:
        rule_id: AbUxZk
        version_id: WrTXog
        url: https://semgrep.dev/playground/r/WrTXog/mobsf.mobsfscan.crypto.weak_hashes.weak_hash
        origin: community
- id: mobsf.mobsfscan.crypto.weak_iv.weak_iv
  patterns:
  - pattern-either:
    - pattern: |
        byte[] $X = {
          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
        };
        ...
        $Y =  new IvParameterSpec($X, ...);
    - pattern: |
        byte[] $X = {
          0x01,0x02,0x03,0x04,0x05,0x06,0x07
        };
        ...
        $Y =  new IvParameterSpec($X, ...);
  message: The App may use weak IVs like "0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00"
    or "0x01,0x02,0x03,0x04,0x05,0x06,0x07". Not using a random IV makes the resulting
    ciphertext much more predictable and susceptible to a dictionary attack.
  languages:
  - java
  severity: WARNING
  metadata:
    cwe: cwe-1204
    owasp-mobile: m5
    masvs: crypto-5
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x04g-Testing-Cryptography.md#mobile-app-cryptography
    license: LGPL-3.0-or-later
    source: https://semgrep.dev/r/mobsf.mobsfscan.crypto.weak_iv.weak_iv
    shortlink: https://sg.run/LpZr
    semgrep.dev:
      rule:
        rule_id: BYUonD
        version_id: 0bT850
        url: https://semgrep.dev/playground/r/0bT850/mobsf.mobsfscan.crypto.weak_iv.weak_iv
        origin: community
- id: mobsf.mobsfscan.crypto.weak_key_size.weak_key_size
  patterns:
  - pattern-either:
    - pattern: |
        $K = $G.getInstance("RSA");
        ...
        $K.initialize(1024);
    - pattern: |
        $K = $G.getInstance("RSA");
        ...
        $K.initialize(512);
    - pattern: |
        $K = $G.getInstance("EC");
        ...
        $K.initialize(new ECGenParameterSpec("secp112r1"));
    - pattern: |
        $K = $G.getInstance("EC");
        ...
        $S = new ECGenParameterSpec("secp112r1");
        ...
        $K.initialize($S);
    - pattern: |
        $K = $G.getInstance("EC");
        ...
        $K.initialize(new ECGenParameterSpec("secp224r1"));
    - pattern: |
        $K = $G.getInstance("EC");
        ...
        $S = new ECGenParameterSpec("secp224r1");
        ...
        $K.initialize($S);
    - pattern: |
        $K = $G.getInstance("Blowfish");
        ...
        $K.init(64);
    - pattern: |
        $K = $G.getInstance("AES");
        ...
        $K.init(64);
  message: Cryptographic implementations with insufficient key length is susceptible
    to bruteforce attacks.
  languages:
  - java
  severity: ERROR
  metadata:
    cwe: cwe-326
    owasp-mobile: m5
    masvs: crypto-3
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x04g-Testing-Cryptography.md#common-configuration-issues-mstg-crypto-1-mstg-crypto-2-and-mstg-crypto-3
    license: LGPL-3.0-or-later
    source: https://semgrep.dev/r/mobsf.mobsfscan.crypto.weak_key_size.weak_key_size
    shortlink: https://sg.run/8Xey
    semgrep.dev:
      rule:
        rule_id: DbULZp
        version_id: K3TDb9
        url: https://semgrep.dev/playground/r/K3TDb9/mobsf.mobsfscan.crypto.weak_key_size.weak_key_size
        origin: community
- id: mobsf.mobsfscan.default_http_client_tls.default_http_client_tls
  patterns:
  - pattern-either:
    - pattern: 'new DefaultHttpClient()

        '
  message: DefaultHTTPClient() with default constructor is not compatible with TLS
    1.2.
  languages:
  - java
  severity: WARNING
  metadata:
    cwe: cwe-757
    owasp-mobile: m3
    masvs: network-2
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x04f-Testing-Network-Communication.md#verifying-data-encryption-on-the-network-mstg-network-1-and-mstg-network-2
    license: LGPL-3.0-or-later
    source: https://semgrep.dev/r/mobsf.mobsfscan.default_http_client_tls.default_http_client_tls
    shortlink: https://sg.run/34Zp
    semgrep.dev:
      rule:
        rule_id: kxU8gq
        version_id: ExTQNg
        url: https://semgrep.dev/playground/r/ExTQNg/mobsf.mobsfscan.default_http_client_tls.default_http_client_tls
        origin: community
- id: mobsf.mobsfscan.deserialization.jackson_deserialization.jackson_deserialization
  patterns:
  - pattern-either:
    - pattern: |
        import com.fasterxml.jackson.databind.ObjectMapper;
        ...
        $Z.enableDefaultTyping();
  message: The app uses jackson deserialization library. Deserialization of untrusted
    input can result in arbitrary code execution. Consider using HMACs to sign the
    data stream to make sure it is not tampered with, or consider only  transmitting
    object fields and populating a new object.
  languages:
  - java
  severity: ERROR
  metadata:
    cwe: cwe-502
    owasp-mobile: m1
    masvs: platform-8
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x05h-Testing-Platform-Interaction.md#testing-object-persistence-mstg-platform-8
    license: LGPL-3.0-or-later
    source: https://semgrep.dev/r/mobsf.mobsfscan.deserialization.jackson_deserialization.jackson_deserialization
    shortlink: https://sg.run/gPzJ
    semgrep.dev:
      rule:
        rule_id: WAUgAZ
        version_id: qkTdjz
        url: https://semgrep.dev/playground/r/qkTdjz/mobsf.mobsfscan.deserialization.jackson_deserialization.jackson_deserialization
        origin: community
- id: mobsf.mobsfscan.deserialization.object_deserialization.object_deserialization
  patterns:
  - pattern: new ObjectInputStream(...);
  severity: WARNING
  languages:
  - java
  message: 'Found object deserialization using ObjectInputStream. Deserializing entire
    Java objects is dangerous because malicious actors can create Java object streams
    with unintended consequences. Ensure that the objects being deserialized are not
    user-controlled. Consider using HMACs to sign the data stream to make sure it
    is not tampered with, or consider only  transmitting object fields and populating
    a new object.

    '
  metadata:
    cwe: cwe-502
    owasp-mobile: m1
    masvs: platform-8
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x05h-Testing-Platform-Interaction.md#testing-object-persistence-mstg-platform-8
    license: LGPL-3.0-or-later
    source: https://semgrep.dev/r/mobsf.mobsfscan.deserialization.object_deserialization.object_deserialization
    shortlink: https://sg.run/QxZ4
    semgrep.dev:
      rule:
        rule_id: 0oUZYJ
        version_id: l4TK9A
        url: https://semgrep.dev/playground/r/l4TK9A/mobsf.mobsfscan.deserialization.object_deserialization.object_deserialization
        origin: community
- id: mobsf.mobsfscan.flag_secure.android_prevent_screenshot
  patterns:
  - pattern-either:
    - pattern: 'getWindow().setFlags(WindowManager.LayoutParams.FLAG_SECURE, ...);

        '
    - pattern: |
        $V = WindowManager.LayoutParams.FLAG_SECURE;
        ...
        getWindow().setFlags($V);
    - pattern: 'getWindow().addFlags(WindowManager.LayoutParams.FLAG_SECURE, ...);

        '
    - pattern: |
        $V = WindowManager.LayoutParams.FLAG_SECURE;
        ...
        getWindow().addFlags($V);
    - pattern: "$A.getWindow().setFlags(WindowManager.LayoutParams.FLAG_SECURE, ...);\n"
    - pattern: |
        $V = WindowManager.LayoutParams.FLAG_SECURE;
        ...
        $A.getWindow().setFlags($V);
    - pattern: "$A.getWindow().addFlags(WindowManager.LayoutParams.FLAG_SECURE, ...);\n"
    - pattern: |
        $V = WindowManager.LayoutParams.FLAG_SECURE;
        ...
        $A.getWindow().addFlags($V);
  message: This app does not have capabilities to prevent against Screenshots from
    Recent Task History/ Now On Tap etc.
  languages:
  - java
  severity: INFO
  metadata:
    cwe: cwe-200
    owasp-mobile: m2
    masvs: storage-9
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x05d-Testing-Data-Storage.md#finding-sensitive-information-in-auto-generated-screenshots-mstg-storage-9
    license: LGPL-3.0-or-later
    source: https://semgrep.dev/r/mobsf.mobsfscan.flag_secure.android_prevent_screenshot
    shortlink: https://sg.run/2RKD
    semgrep.dev:
      rule:
        rule_id: GdUZjq
        version_id: l4TzxE
        url: https://semgrep.dev/playground/r/l4TzxE/mobsf.mobsfscan.flag_secure.android_prevent_screenshot
        origin: community
- id: mobsf.mobsfscan.hidden_ui.android_hidden_ui
  patterns:
  - pattern-either:
    - pattern: "$X.setVisibility(View.GONE);\n"
    - pattern: |
        $V = View.GONE;
        ...
        $X.setVisibility($V);
    - pattern: "$X.setVisibility(View.INVISIBLE);\n"
    - pattern: |
        $V = View.INVISIBLE;
        ...
        $X.setVisibility($V);
  message: Hidden elements in view can be used to hide data from user. But this data
    can be leaked.
  languages:
  - java
  severity: ERROR
  metadata:
    cwe: cwe-919
    owasp-mobile: m1
    masvs: storage-7
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x05d-Testing-Data-Storage.md#checking-for-sensitive-data-disclosure-through-the-user-interface-mstg-storage-7
    license: LGPL-3.0-or-later
    source: https://semgrep.dev/r/mobsf.mobsfscan.hidden_ui.android_hidden_ui
    shortlink: https://sg.run/05b5
    semgrep.dev:
      rule:
        rule_id: DbUKqK
        version_id: GxTZPg
        url: https://semgrep.dev/playground/r/GxTZPg/mobsf.mobsfscan.hidden_ui.android_hidden_ui
        origin: community
- id: mobsf.mobsfscan.injection.command_injection.command_injection
  patterns:
  - pattern-not: Runtime.getRuntime().exec("...", ...);
  - pattern-not: Runtime.getRuntime().exec(new String[] {"...", ...}, ...);
  - pattern-either:
    - pattern: 'Runtime.getRuntime().exec(...);

        '
  message: User controlled strings in exec() will result in command execution.
  languages:
  - java
  severity: ERROR
  metadata:
    cwe: cwe-78
    owasp-mobile: m7
    masvs: platform-2
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x04h-Testing-Code-Quality.md#injection-flaws-mstg-arch-2-and-mstg-platform-2
    license: LGPL-3.0-or-later
    source: https://semgrep.dev/r/mobsf.mobsfscan.injection.command_injection.command_injection
    shortlink: https://sg.run/36wr
    semgrep.dev:
      rule:
        rule_id: KxUR67
        version_id: YDT1R1
        url: https://semgrep.dev/playground/r/YDT1R1/mobsf.mobsfscan.injection.command_injection.command_injection
        origin: community
- id: mobsf.mobsfscan.injection.command_injection_formated.command_injection_warning
  patterns:
  - pattern-either:
    - pattern: "$RUNTIME.exec($X + $Y);"
    - pattern: "$RUNTIME.exec(String.format(...));"
    - pattern: "$RUNTIME.loadLibrary($X + $Y);"
    - pattern: "$RUNTIME.loadLibrary(String.format(...));"
    - patterns:
      - pattern-either:
        - pattern: '$RUNTIME.exec("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",$ARG,...)

            '
        - pattern: '$RUNTIME.exec(Arrays.asList("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",$ARG,...),...)

            '
        - pattern: '$RUNTIME.exec(new String[]{"=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",$ARG,...},...)

            '
        - patterns:
          - pattern-either:
            - pattern: '$RUNTIME.exec($CMD,"-c",$ARG,...)

                '
            - pattern: '$RUNTIME.exec(Arrays.asList($CMD,"-c",$ARG,...),...)

                '
            - pattern: '$RUNTIME.exec(new String[]{$CMD,"-c",$ARG,...},...)

                '
          - pattern-inside: |
              $CMD = "=~/(sh|bash|ksh|csh|tcsh|zsh)/";
              ...
      - pattern-not-inside: |
          $ARG = "...";
          ...
      - pattern-not: '$RUNTIME.exec("...","...","...",...)

          '
      - pattern-not: '$RUNTIME.exec(new String[]{"...","...","...",...},...)

          '
      - pattern-not: '$RUNTIME.exec(Arrays.asList("...","...","...",...),...)

          '
  - pattern-inside: |
      $TYPE $RUNTIME = Runtime.getRuntime(...);
      ...
  message: 'A formatted or concatenated string was detected as input to a java.lang.Runtime
    call. This is dangerous if a variable is controlled by user input and could result
    in a command injection. Ensure your variables are not controlled by users or sufficiently
    sanitized.

    '
  severity: WARNING
  languages:
  - java
  metadata:
    cwe: cwe-78
    owasp-mobile: m7
    masvs: platform-2
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x04h-Testing-Code-Quality.md#injection-flaws-mstg-arch-2-and-mstg-platform-2
    license: LGPL-3.0-or-later
    source: https://semgrep.dev/r/mobsf.mobsfscan.injection.command_injection_formated.command_injection_warning
    shortlink: https://sg.run/4oQl
    semgrep.dev:
      rule:
        rule_id: qNUrPW
        version_id: 6xTljr
        url: https://semgrep.dev/playground/r/6xTljr/mobsf.mobsfscan.injection.command_injection_formated.command_injection_warning
        origin: community
- id: mobsf.mobsfscan.injection.sqlite_injection.sqlite_injection
  patterns:
  - pattern-not: $DB.execSQL("..." , ...);
  - pattern-not: $DB.rawQuery("..." , ...);
  - pattern-either:
    - pattern: '$DB.rawQuery("..." + $INP + "..." , ...);

        '
    - pattern: '$DB.rawQuery($INP + "..." , ... );

        '
    - pattern: '$DB.rawQuery($INP + "..." + $INP2, ...);

        '
    - pattern: '$DB.rawQuery($INP + "..." + $INP2 + "...", ...);

        '
    - pattern: '$DB.execSQL($INP + "..." , ...);

        '
    - pattern: '$DB.execSQL("..." + $INP + "..." , ...);

        '
    - pattern: '$DB.execSQL($INP + "..." + $INP2, ...);

        '
    - pattern: '$DB.execSQL($INP + "..." + $INP2 + "...", ...);

        '
  message: App uses SQLite Database and execute raw SQL query. Untrusted user input
    in raw SQL queries can cause SQL Injection. Also sensitive information should
    be encrypted and written to the database.
  languages:
  - java
  severity: WARNING
  metadata:
    cwe: cwe-78
    owasp-mobile: m7
    masvs: platform-2
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x04h-Testing-Code-Quality.md#injection-flaws-mstg-arch-2-and-mstg-platform-2
    license: LGPL-3.0-or-later
    source: https://semgrep.dev/r/mobsf.mobsfscan.injection.sqlite_injection.sqlite_injection
    shortlink: https://sg.run/PxZY
    semgrep.dev:
      rule:
        rule_id: lBUYAy
        version_id: o5T3ev
        url: https://semgrep.dev/playground/r/o5T3ev/mobsf.mobsfscan.injection.sqlite_injection.sqlite_injection
        origin: community
- id: mobsf.mobsfscan.insecure_random.java_insecure_random
  patterns:
  - pattern-either:
    - pattern: 'import java.util.Random;

        '
    - pattern: 'import java.util.concurrent.ThreadLocalRandom;

        '
  message: The App uses an insecure Random Number Generator.
  languages:
  - java
  severity: WARNING
  metadata:
    cwe: cwe-330
    owasp-mobile: m5
    masvs: crypto-6
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x04g-Testing-Cryptography.md#weak-random-number-generators
    license: LGPL-3.0-or-later
    source: https://semgrep.dev/r/mobsf.mobsfscan.insecure_random.java_insecure_random
    shortlink: https://sg.run/w18P
    semgrep.dev:
      rule:
        rule_id: YGUQNj
        version_id: 9lTkyz
        url: https://semgrep.dev/playground/r/9lTkyz/mobsf.mobsfscan.insecure_random.java_insecure_random
        origin: community
- id: mobsf.mobsfscan.insecure_ssl_v3.insecure_sslv3
  patterns:
  - pattern-either:
    - pattern: '$S.getInstance("SSLv3");

        '
  message: SSLv3 is insecure and has multiple known vulnerabilities.
  languages:
  - java
  severity: ERROR
  metadata:
    cwe: cwe-327
    owasp-mobile: m5
    masvs: crypto-4
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x04g-Testing-Cryptography.md#identifying-insecure-andor-deprecated-cryptographic-algorithms-mstg-crypto-4
    license: LGPL-3.0-or-later
    source: https://semgrep.dev/r/mobsf.mobsfscan.insecure_ssl_v3.insecure_sslv3
    shortlink: https://sg.run/xeyg
    semgrep.dev:
      rule:
        rule_id: 6JU6Zw
        version_id: yeTy0L
        url: https://semgrep.dev/playground/r/yeTy0L/mobsf.mobsfscan.insecure_ssl_v3.insecure_sslv3
        origin: community
- id: mobsf.mobsfscan.jackson_deserialization.jackson_deserialization
  patterns:
  - pattern-either:
    - pattern: |
        import com.fasterxml.jackson.databind.ObjectMapper;
        ...
        $Z.enableDefaultTyping();
  message: The app uses jackson deserialization library. Deserialization of untrusted
    input can result in arbitrary code execution. Consider using HMACs to sign the
    data stream to make sure it is not tampered with, or consider only  transmitting
    object fields and populating a new object.
  languages:
  - java
  severity: ERROR
  metadata:
    cwe: cwe-502
    owasp-mobile: m1
    masvs: platform-8
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x05h-Testing-Platform-Interaction.md#testing-object-persistence-mstg-platform-8
    license: LGPL-3.0-or-later
    source: https://semgrep.dev/r/mobsf.mobsfscan.jackson_deserialization.jackson_deserialization
    shortlink: https://sg.run/EOxe
    semgrep.dev:
      rule:
        rule_id: 10Uezq
        version_id: O9TDOG
        url: https://semgrep.dev/playground/r/O9TDOG/mobsf.mobsfscan.jackson_deserialization.jackson_deserialization
        origin: community
- id: mobsf.mobsfscan.logging.android_logging
  patterns:
  - pattern-not: System.out.print();
  - pattern-not: System.out.println();
  - pattern-not: System.err.print();
  - pattern-not: System.err.println();
  - pattern-not: Log.$D("...", "...", ...);
  - pattern-not: Log.$D($T, "...", ...);
  - pattern-not: System.out.print("...");
  - pattern-not: System.out.println("...");
  - pattern-not: System.err.print("...");
  - pattern-not: System.err.println("...");
  - pattern-either:
    - pattern: 'Log.$D($T, $X + "...", ...);

        '
    - pattern: 'Log.$D($T, "..." + $X + "...", ...);

        '
    - pattern: 'Log.$D($T, "..." + $X, ...);

        '
    - pattern: |
        $Y = $Z;
        ...
        Log.$D($T,<... $Y ...>, ...);
    - pattern: 'System.out.print(...);

        '
    - pattern: 'System.err.print(...);

        '
    - pattern: 'System.out.println(...);

        '
    - pattern: 'System.err.println(...);

        '
  message: The App logs information. Please ensure that sensitive information is never
    logged.
  languages:
  - java
  severity: INFO
  metadata:
    cwe: cwe-532
    owasp-mobile: m1
    masvs: storage-3
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x05d-Testing-Data-Storage.md#logs
    license: LGPL-3.0-or-later
    source: https://semgrep.dev/r/mobsf.mobsfscan.logging.android_logging
    shortlink: https://sg.run/K83X
    semgrep.dev:
      rule:
        rule_id: WAUPOy
        version_id: RGToAN
        url: https://semgrep.dev/playground/r/RGToAN/mobsf.mobsfscan.logging.android_logging
        origin: community
- id: mobsf.mobsfscan.network.accept_self_signed.accept_self_signed_certificate
  patterns:
  - pattern-either:
    - pattern: "$X.SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER\n"
    - pattern: "$X.setHostnameVerifier($Z.ALLOW_ALL_HOSTNAME_VERIFIER);\n"
    - pattern: "$X.setHostnameVerifier(new AllowAllHostnameVerifier());\n"
    - pattern: "$X.setDefaultHostnameVerifier(new NullHostnameVerifier());\n"
    - pattern: "$X.setDefaultHostnameVerifier((HostnameVerifier) new NullHostnameVerifier());\n"
    - pattern: |
        $RET verify(..., SSLSession $X) {
          ...
          return true;
        }
    - pattern: |
        $Y = SSLContext.getInstance(...);
        ...
        $Y.init(null, ...);
    - pattern: |
        $Y = $S.SSLContext.getInstance(...);
        ...
        $Y.init(null, ...);
    - pattern: |
        $Z = new TLSClientParameters(...);
        ...
        $Z.setDisableCNCheck(true);
    - pattern: "X509Certificate[] getAcceptedIssuers() { \n  ...\n  return new X509Certificate[]{};\n}\n"
    - pattern: |
        X509Certificate[] getAcceptedIssuers() {
          ...
          return new java.security.cert.X509Certificate[]{};
        }
    - pattern: "X509Certificate[] getAcceptedIssuers() { \n  ...\n  $Y = new X509Certificate[]{};\n
        \ ...\n  return $Y;\n}\n"
    - pattern: |
        X509Certificate[] getAcceptedIssuers() {
          return new X509Certificate[0];
        }
    - pattern: |
        X509Certificate[] getAcceptedIssuers() {
          ...
          $X =  new X509Certificate[0];
          ...
          return $X;
        }
    - pattern: |
        X509Certificate[] getAcceptedIssuers() {
          return null;
        }
    - pattern: 'sslContext.init(null, ...);

        '
    - pattern: 'setSslSocketFactory(new NonValidatingSSLSocketFactory());

        '
  message: Insecure Implementation of SSL. Trusting all the certificates or accepting
    self signed certificates is a critical Security Hole. This application is vulnerable
    to MITM attacks.
  languages:
  - java
  severity: ERROR
  metadata:
    cwe: cwe-295
    owasp-mobile: m3
    masvs: network-3
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x05g-Testing-Network-Communication.md#testing-endpoint-identify-verification-mstg-network-3
    license: LGPL-3.0-or-later
    source: https://semgrep.dev/r/mobsf.mobsfscan.network.accept_self_signed.accept_self_signed_certificate
    shortlink: https://sg.run/JoZw
    semgrep.dev:
      rule:
        rule_id: YGUxKY
        version_id: zyTwko
        url: https://semgrep.dev/playground/r/zyTwko/mobsf.mobsfscan.network.accept_self_signed.accept_self_signed_certificate
        origin: community
- id: mobsf.mobsfscan.network.default_http_client_tls.default_http_client_tls
  patterns:
  - pattern-either:
    - pattern: 'new DefaultHttpClient()

        '
  message: DefaultHTTPClient() with default constructor is not compatible with TLS
    1.2.
  languages:
  - java
  severity: WARNING
  metadata:
    cwe: cwe-757
    owasp-mobile: m3
    masvs: network-2
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x04f-Testing-Network-Communication.md#verifying-data-encryption-on-the-network-mstg-network-1-and-mstg-network-2
    license: LGPL-3.0-or-later
    source: https://semgrep.dev/r/mobsf.mobsfscan.network.default_http_client_tls.default_http_client_tls
    shortlink: https://sg.run/5zwA
    semgrep.dev:
      rule:
        rule_id: 6JUkwx
        version_id: pZTdOE
        url: https://semgrep.dev/playground/r/pZTdOE/mobsf.mobsfscan.network.default_http_client_tls.default_http_client_tls
        origin: community
- id: mobsf.mobsfscan.object_deserialization.object_deserialization
  patterns:
  - pattern: new ObjectInputStream(...);
  severity: WARNING
  languages:
  - java
  message: 'Found object deserialization using ObjectInputStream. Deserializing entire
    Java objects is dangerous because malicious actors can create Java object streams
    with unintended consequences. Ensure that the objects being deserialized are not
    user-controlled. Consider using HMACs to sign the data stream to make sure it
    is not tampered with, or consider only  transmitting object fields and populating
    a new object.

    '
  metadata:
    cwe: cwe-502
    owasp-mobile: m1
    masvs: platform-8
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x05h-Testing-Platform-Interaction.md#testing-object-persistence-mstg-platform-8
    license: LGPL-3.0-or-later
    source: https://semgrep.dev/r/mobsf.mobsfscan.object_deserialization.object_deserialization
    shortlink: https://sg.run/7GZW
    semgrep.dev:
      rule:
        rule_id: 9AUke0
        version_id: e1Tp1p
        url: https://semgrep.dev/playground/r/e1Tp1p/mobsf.mobsfscan.object_deserialization.object_deserialization
        origin: community
- id: mobsf.mobsfscan.root_detection.android_root_detection
  patterns:
  - pattern-either:
    - pattern: "$J.isJailBroken(...)\n"
    - pattern: "$R.isDeviceRooted(...)\n"
    - pattern: "$R.isRooted(...)\n"
    - pattern: 'RootTools.isAccessGiven(...)

        '
    - pattern: '$MTD.contains("test-keys")

        '
  message: This app does not have root detection capabilities. Running a sensitive
    application on a rooted device questions the device integrity and affects users
    data.
  languages:
  - java
  severity: INFO
  metadata:
    cwe: cwe-919
    owasp-mobile: m8
    masvs: resilience-1
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x05j-Testing-Resiliency-Against-Reverse-Engineering.md#testing-root-detection-mstg-resilience-1
    license: LGPL-3.0-or-later
    source: https://semgrep.dev/r/mobsf.mobsfscan.root_detection.android_root_detection
    shortlink: https://sg.run/X80b
    semgrep.dev:
      rule:
        rule_id: ReUoeE
        version_id: YDTQvd
        url: https://semgrep.dev/playground/r/YDTQvd/mobsf.mobsfscan.root_detection.android_root_detection
        origin: community
- id: mobsf.mobsfscan.rsa_no_oeap.rsa_no_oeap
  patterns:
  - pattern-either:
    - pattern: 'Cipher.getInstance($X, ...)

        '
    - pattern: 'javax.crypto.Cipher.getInstance($X, ...)

        '
  - metavariable-regex:
      metavariable: "$X"
      regex: "(?i:.*rsa/.+/nopadding.*)"
  message: This App uses RSA Crypto without OAEP padding. The purpose of the padding
    scheme is to prevent a number of attacks on RSA that only work when the encryption
    is performed without padding.
  languages:
  - java
  severity: ERROR
  metadata:
    cwe: cwe-780
    owasp-mobile: m5
    masvs: crypto-3
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x04g-Testing-Cryptography.md#mobile-app-cryptography
    license: LGPL-3.0-or-later
    source: https://semgrep.dev/r/mobsf.mobsfscan.rsa_no_oeap.rsa_no_oeap
    shortlink: https://sg.run/O89n
    semgrep.dev:
      rule:
        rule_id: oqUrk3
        version_id: rxT96P
        url: https://semgrep.dev/playground/r/rxT96P/mobsf.mobsfscan.rsa_no_oeap.rsa_no_oeap
        origin: community
- id: mobsf.mobsfscan.secrets.hardcoded_api_key
  patterns:
  - pattern-not: $X = "";
  - pattern-not: $M($X, "", ...);
  - pattern-either:
    - pattern: '$X = "...";

        '
    - pattern: '$M($X, "...", ...);

        '
  - metavariable-regex:
      metavariable: "$X"
      regex: "(?i:.*key.*)"
  message: A hardcoded Key is identified.
  languages:
  - java
  severity: WARNING
  metadata:
    cwe: cwe-798
    owasp-mobile: m9
    masvs: storage-14
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x05d-Testing-Data-Storage.md#storing-a-key---example
    license: LGPL-3.0-or-later
    source: https://semgrep.dev/r/mobsf.mobsfscan.secrets.hardcoded_api_key
    shortlink: https://sg.run/YXD4
    semgrep.dev:
      rule:
        rule_id: qNUb5p
        version_id: DkTKNZ
        url: https://semgrep.dev/playground/r/DkTKNZ/mobsf.mobsfscan.secrets.hardcoded_api_key
        origin: community
- id: mobsf.mobsfscan.secrets.hardcoded_password
  patterns:
  - pattern-not: $X = "";
  - pattern-not: $M($X, "", ...);
  - pattern-either:
    - pattern: '$X = "...";

        '
    - pattern: '$M($X, "...", ...);

        '
  - metavariable-regex:
      metavariable: "$X"
      regex: "(?i:.*pass.*)"
  message: A hardcoded password in plain text is identified.
  languages:
  - java
  severity: WARNING
  metadata:
    cwe: cwe-798
    owasp-mobile: m9
    masvs: storage-14
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x05d-Testing-Data-Storage.md#storing-a-key---example
    license: LGPL-3.0-or-later
    source: https://semgrep.dev/r/mobsf.mobsfscan.secrets.hardcoded_password
    shortlink: https://sg.run/qqky
    semgrep.dev:
      rule:
        rule_id: 0oUJyr
        version_id: A8TGJP
        url: https://semgrep.dev/playground/r/A8TGJP/mobsf.mobsfscan.secrets.hardcoded_password
        origin: community
- id: mobsf.mobsfscan.secrets.hardcoded_secret
  patterns:
  - pattern-not: $X = "";
  - pattern-not: $M($X, "", ...);
  - pattern-either:
    - pattern: '$X = "...";

        '
    - pattern: '$M($X, "...", ...);

        '
  - metavariable-regex:
      metavariable: "$X"
      regex: "(?i:.*secret)"
  message: A hardcoded secret is identified.
  languages:
  - java
  severity: WARNING
  metadata:
    cwe: cwe-798
    owasp-mobile: m9
    masvs: storage-14
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x05d-Testing-Data-Storage.md#storing-a-key---example
    license: LGPL-3.0-or-later
    source: https://semgrep.dev/r/mobsf.mobsfscan.secrets.hardcoded_secret
    shortlink: https://sg.run/65xB
    semgrep.dev:
      rule:
        rule_id: lBUzlx
        version_id: WrTPEX
        url: https://semgrep.dev/playground/r/WrTPEX/mobsf.mobsfscan.secrets.hardcoded_secret
        origin: community
- id: mobsf.mobsfscan.secrets.hardcoded_username
  patterns:
  - pattern-not: $X = "";
  - pattern-not: $M($X, "", ...);
  - pattern-either:
    - pattern: '$X = "...";

        '
    - pattern: '$M($X, "...", ...);

        '
  - metavariable-regex:
      metavariable: "$X"
      regex: "(?i:.*user.*)"
  message: A hardcoded username in plain text is identified.
  languages:
  - java
  severity: WARNING
  metadata:
    cwe: cwe-798
    owasp-mobile: m9
    masvs: storage-14
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x05d-Testing-Data-Storage.md#storing-a-key---example
    license: LGPL-3.0-or-later
    source: https://semgrep.dev/r/mobsf.mobsfscan.secrets.hardcoded_username
    shortlink: https://sg.run/lx49
    semgrep.dev:
      rule:
        rule_id: KxUYnr
        version_id: BjT71O
        url: https://semgrep.dev/playground/r/BjT71O/mobsf.mobsfscan.secrets.hardcoded_username
        origin: community
- id: mobsf.mobsfscan.sha1_hash.sha1_hash
  patterns:
  - pattern-either:
    - pattern: '$C.getInstance("=~/sha-1|sha1/i", ...);

        '
    - pattern: 'DigestUtils.sha1Hex(...);

        '
    - pattern: 'DigestUtils.sha1(...);

        '
    - pattern: 'DigestUtils.sha(...);

        '
  message: SHA1 Hash algorithm used. The SHA1 hash is known to have hash collisions.
  languages:
  - java
  severity: WARNING
  metadata:
    cwe: cwe-327
    owasp-mobile: m5
    masvs: crypto-4
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x04g-Testing-Cryptography.md#identifying-insecure-andor-deprecated-cryptographic-algorithms-mstg-crypto-4
    license: LGPL-3.0-or-later
    source: https://semgrep.dev/r/mobsf.mobsfscan.sha1_hash.sha1_hash
    shortlink: https://sg.run/eK1y
    semgrep.dev:
      rule:
        rule_id: zdU1jO
        version_id: bZTN1A
        url: https://semgrep.dev/playground/r/bZTN1A/mobsf.mobsfscan.sha1_hash.sha1_hash
        origin: community
- id: mobsf.mobsfscan.sqlite_injection.sqlite_injection
  patterns:
  - pattern-not: $DB.execSQL("..." , ...);
  - pattern-not: $DB.rawQuery("..." , ...);
  - pattern-either:
    - pattern: '$DB.rawQuery("..." + $INP + "..." , ...);

        '
    - pattern: '$DB.rawQuery($INP + "..." , ... );

        '
    - pattern: '$DB.rawQuery($INP + "..." + $INP2, ...);

        '
    - pattern: '$DB.rawQuery($INP + "..." + $INP2 + "...", ...);

        '
    - pattern: '$DB.execSQL($INP + "..." , ...);

        '
    - pattern: '$DB.execSQL("..." + $INP + "..." , ...);

        '
    - pattern: '$DB.execSQL($INP + "..." + $INP2, ...);

        '
    - pattern: '$DB.execSQL($INP + "..." + $INP2 + "...", ...);

        '
  message: App uses SQLite Database and execute raw SQL query. Untrusted user input
    in raw SQL queries can cause SQL Injection. Also sensitive information should
    be encrypted and written to the database.
  languages:
  - java
  severity: WARNING
  metadata:
    cwe: cwe-78
    owasp-mobile: m7
    masvs: platform-2
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x04h-Testing-Code-Quality.md#injection-flaws-mstg-arch-2-and-mstg-platform-2
    license: LGPL-3.0-or-later
    source: https://semgrep.dev/r/mobsf.mobsfscan.sqlite_injection.sqlite_injection
    shortlink: https://sg.run/grEZ
    semgrep.dev:
      rule:
        rule_id: bwUNRd
        version_id: zyTlv5
        url: https://semgrep.dev/playground/r/zyTlv5/mobsf.mobsfscan.sqlite_injection.sqlite_injection
        origin: community
- id: mobsf.mobsfscan.tapjacking.android_detect_tapjacking
  patterns:
  - pattern-either:
    - pattern: "$F.setFilterTouchesWhenObscured(true);\n"
  message: This app does not have capabilities to prevent tapjacking attacks. An attacker
    can hijack the user's taps and tricks him into performing some critical operations
    that he did not intend to.
  languages:
  - java
  severity: INFO
  metadata:
    cwe: cwe-200
    owasp-mobile: m1
    masvs: platform-9
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x05h-Testing-Platform-Interaction.md#testing-for-overlay-attacks-mstg-platform-9
    license: LGPL-3.0-or-later
    source: https://semgrep.dev/r/mobsf.mobsfscan.tapjacking.android_detect_tapjacking
    shortlink: https://sg.run/jkQJ
    semgrep.dev:
      rule:
        rule_id: AbUGk0
        version_id: 6xT6xP
        url: https://semgrep.dev/playground/r/6xT6xP/mobsf.mobsfscan.tapjacking.android_detect_tapjacking
        origin: community
- id: mobsf.mobsfscan.tls_certificate_transparency.android_certificate_transparency
  patterns:
  - pattern-either:
    - pattern: 'import com.babylon.certificatetransparency;

        '
    - pattern: 'new CTInterceptorBuilder(...)

        '
    - pattern: 'new CTHostnameVerifierBuilder(...)

        '
  message: This app does not enforce TLS Certificate Transparency that helps to detect
    SSL certificates that have been mistakenly issued by a certificate authority or
    maliciously acquired from an otherwise unimpeachable certificate authority.
  languages:
  - java
  severity: INFO
  metadata:
    cwe: cwe-295
    owasp-mobile: m3
    masvs: network-4
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x05g-Testing-Network-Communication.md#testing-custom-certificate-stores-and-certificate-pinning-mstg-network-4
    license: LGPL-3.0-or-later
    source: https://semgrep.dev/r/mobsf.mobsfscan.tls_certificate_transparency.android_certificate_transparency
    shortlink: https://sg.run/1GQv
    semgrep.dev:
      rule:
        rule_id: BYU7xv
        version_id: o5TrZE
        url: https://semgrep.dev/playground/r/o5TrZE/mobsf.mobsfscan.tls_certificate_transparency.android_certificate_transparency
        origin: community
- id: mobsf.mobsfscan.tls_pinning.android_certificate_pinning
  patterns:
  - pattern-either:
    - pattern: 'import com.toyberman.RNSslPinningPackage;

        '
    - pattern: 'import org.thoughtcrime.ssl.pinning;

        '
    - pattern: 'new PinningValidationReportTestBroadcastReceiver()

        '
    - pattern: 'new CertificatePinner.Builder()

        '
    - pattern: 'CertificatePinner.Builder()

        '
    - pattern: 'TrustKit.getInstance().getSSLSocketFactory(...)

        '
    - pattern: |
        $X = $R.openRawResource(...);
        ...
        $KS = KeyStore.getInstance(...);
        ...
        $KS.load($X, ...);
        ...
        $T.init($KS);
    - pattern: 'TrustKit.initializeWithNetworkSecurityConfiguration(...);

        '
    - pattern: 'OkHttp2Helper.getPinningInterceptor()

        '
    - pattern: 'OkHttp3Helper.getPinningInterceptor()

        '
    - pattern: 'new PinningHostnameVerifier(...)

        '
    - pattern: 'PinningHelper.getPinnedHttpsURLConnection

        '
    - pattern: |
        $F.openRawResource(...);
        ...
        $X = new Picasso.Builder(...);
  message: This app does not use a TLS/SSL certificate or public key pinning in code
    to detect or prevent MITM attacks in secure communication channel. Please verify
    if pinning is enabled in `network_security_config.xml`.
  languages:
  - java
  severity: INFO
  metadata:
    cwe: cwe-295
    owasp-mobile: m3
    masvs: network-4
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x05g-Testing-Network-Communication.md#testing-custom-certificate-stores-and-certificate-pinning-mstg-network-4
    license: LGPL-3.0-or-later
    source: https://semgrep.dev/r/mobsf.mobsfscan.tls_pinning.android_certificate_pinning
    shortlink: https://sg.run/96l8
    semgrep.dev:
      rule:
        rule_id: DbUKqv
        version_id: zyT1l3
        url: https://semgrep.dev/playground/r/zyT1l3/mobsf.mobsfscan.tls_pinning.android_certificate_pinning
        origin: community
- id: mobsf.mobsfscan.weak_ciphers.weak_cipher
  patterns:
  - pattern-either:
    - pattern: '$C.getInstance("=~/des|desede|rc2|rc4|blowfish/i", ...);

        '
    - pattern: "$C = new NullCipher();\n"
  message: Weak encryption algorithm identified. This algorithm is vulnerable to cryptographic
    attacks.
  severity: ERROR
  languages:
  - java
  metadata:
    cwe: cwe-327
    owasp-mobile: m5
    masvs: crypto-4
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x04g-Testing-Cryptography.md#identifying-insecure-andor-deprecated-cryptographic-algorithms-mstg-crypto-4
    license: LGPL-3.0-or-later
    source: https://semgrep.dev/r/mobsf.mobsfscan.weak_ciphers.weak_cipher
    shortlink: https://sg.run/v2db
    semgrep.dev:
      rule:
        rule_id: pKUwko
        version_id: NdTYd3
        url: https://semgrep.dev/playground/r/NdTYd3/mobsf.mobsfscan.weak_ciphers.weak_cipher
        origin: community
- id: mobsf.mobsfscan.weak_hashes.weak_hash
  patterns:
  - pattern-either:
    - pattern: '$C.getInstance("=~/md5|md4/i", ...);

        '
    - pattern: "$C.Files.hash(..., Hashing.md5());\n"
    - pattern: 'Files.hash(..., Hashing.md5());

        '
    - pattern: 'DigestUtils.md5Hex(...);

        '
    - pattern: 'DigestUtils.md5(...);

        '
  message: Weak Hash algorithm used. The hash algorithm is known to have hash collisions.
  severity: WARNING
  languages:
  - java
  metadata:
    cwe: cwe-327
    owasp-mobile: m5
    masvs: crypto-4
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x04g-Testing-Cryptography.md#identifying-insecure-andor-deprecated-cryptographic-algorithms-mstg-crypto-4
    license: LGPL-3.0-or-later
    source: https://semgrep.dev/r/mobsf.mobsfscan.weak_hashes.weak_hash
    shortlink: https://sg.run/d06d
    semgrep.dev:
      rule:
        rule_id: 2ZUKGy
        version_id: kbT8xg
        url: https://semgrep.dev/playground/r/kbT8xg/mobsf.mobsfscan.weak_hashes.weak_hash
        origin: community
- id: mobsf.mobsfscan.weak_iv.weak_iv
  patterns:
  - pattern-either:
    - pattern: |
        byte[] $X = {
          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
        };
        ...
        $Y =  new IvParameterSpec($X, ...);
    - pattern: |
        byte[] $X = {
          0x01,0x02,0x03,0x04,0x05,0x06,0x07
        };
        ...
        $Y =  new IvParameterSpec($X, ...);
  message: The App may use weak IVs like "0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00"
    or "0x01,0x02,0x03,0x04,0x05,0x06,0x07". Not using a random IV makes the resulting
    ciphertext much more predictable and susceptible to a dictionary attack.
  languages:
  - java
  severity: WARNING
  metadata:
    cwe: cwe-1204
    owasp-mobile: m5
    masvs: crypto-5
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x04g-Testing-Cryptography.md#mobile-app-cryptography
    license: LGPL-3.0-or-later
    source: https://semgrep.dev/r/mobsf.mobsfscan.weak_iv.weak_iv
    shortlink: https://sg.run/ZkRo
    semgrep.dev:
      rule:
        rule_id: X5U7OR
        version_id: w8TGnz
        url: https://semgrep.dev/playground/r/w8TGnz/mobsf.mobsfscan.weak_iv.weak_iv
        origin: community
- id: mobsf.mobsfscan.weak_key_size.weak_key_size
  patterns:
  - pattern-either:
    - pattern: |
        $K = $G.getInstance("RSA");
        ...
        $K.initialize(1024);
    - pattern: |
        $K = $G.getInstance("RSA");
        ...
        $K.initialize(512);
    - pattern: |
        $K = $G.getInstance("EC");
        ...
        $K.initialize(new ECGenParameterSpec("secp112r1"));
    - pattern: |
        $K = $G.getInstance("EC");
        ...
        $S = new ECGenParameterSpec("secp112r1");
        ...
        $K.initialize($S);
    - pattern: |
        $K = $G.getInstance("EC");
        ...
        $K.initialize(new ECGenParameterSpec("secp224r1"));
    - pattern: |
        $K = $G.getInstance("EC");
        ...
        $S = new ECGenParameterSpec("secp224r1");
        ...
        $K.initialize($S);
    - pattern: |
        $K = $G.getInstance("Blowfish");
        ...
        $K.init(64);
    - pattern: |
        $K = $G.getInstance("AES");
        ...
        $K.init(64);
  message: Cryptographic implementations with insufficient key length is susceptible
    to bruteforce attacks.
  languages:
  - java
  severity: ERROR
  metadata:
    cwe: cwe-326
    owasp-mobile: m5
    masvs: crypto-3
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x04g-Testing-Cryptography.md#common-configuration-issues-mstg-crypto-1-mstg-crypto-2-and-mstg-crypto-3
    license: LGPL-3.0-or-later
    source: https://semgrep.dev/r/mobsf.mobsfscan.weak_key_size.weak_key_size
    shortlink: https://sg.run/nkW2
    semgrep.dev:
      rule:
        rule_id: j2URlo
        version_id: xyT2Zn
        url: https://semgrep.dev/playground/r/xyT2Zn/mobsf.mobsfscan.weak_key_size.weak_key_size
        origin: community
- id: mobsf.mobsfscan.webview.webview_debugging.webview_debugging
  patterns:
  - pattern-either:
    - pattern: "$WB.setWebContentsDebuggingEnabled(true);\n"
    - pattern: |
        $X = true;
        ...
        $WB.setWebContentsDebuggingEnabled($X);
  message: Remote WebView debugging is enabled. This allows an attacker with debugging
    access to interact with the webview and steal or corrupt data.
  languages:
  - java
  severity: ERROR
  metadata:
    cwe: cwe-489
    owasp-mobile: m1
    masvs: resilience-2
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x05j-Testing-Resiliency-Against-Reverse-Engineering.md#testing-anti-debugging-detection-mstg-resilience-2
    license: LGPL-3.0-or-later
    source: https://semgrep.dev/r/mobsf.mobsfscan.webview.webview_debugging.webview_debugging
    shortlink: https://sg.run/G3Zp
    semgrep.dev:
      rule:
        rule_id: oqUPpl
        version_id: 2KTkb9
        url: https://semgrep.dev/playground/r/2KTkb9/mobsf.mobsfscan.webview.webview_debugging.webview_debugging
        origin: community
- id: mobsf.mobsfscan.webview.webview_external_storage.webview_external_storage
  patterns:
  - pattern-either:
    - pattern: |
        $X = <... $E.getExternalStorageDirectory() ...>;
        ...
        $WV.loadUrl(<... $X ...>);
    - pattern: "$WV.loadUrl(<... $E.getExternalStorageDirectory().$F() ...>);\n"
    - pattern: |
        $X = <... Environment.getExternalStorageDirectory().$F() ...>;
        ...
        $WV.loadUrl(<... $X ...>);
    - pattern: |
        $X = <... $E.getExternalFilesDir(...) ...>;
        ...
        $WV.loadUrl(<... $X ...>);
  message: WebView load files from external storage. Files in external storage can
    be modified by any application.
  languages:
  - java
  severity: ERROR
  metadata:
    cwe: cwe-749
    owasp-mobile: m1
    masvs: platform-6
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x05h-Testing-Platform-Interaction.md#testing-webview-protocol-handlers-mstg-platform-6
    license: LGPL-3.0-or-later
    source: https://semgrep.dev/r/mobsf.mobsfscan.webview.webview_external_storage.webview_external_storage
    shortlink: https://sg.run/Rx3O
    semgrep.dev:
      rule:
        rule_id: zdU90D
        version_id: X0Tj86
        url: https://semgrep.dev/playground/r/X0Tj86/mobsf.mobsfscan.webview.webview_external_storage.webview_external_storage
        origin: community
- id: mobsf.mobsfscan.webview.webview_file_access.webview_set_allow_file_access
  patterns:
  - pattern-either:
    - pattern: "$WB.setAllowFileAccess(true);\n"
  message: WebView File System Access is enabled. An attacker able to inject script
    into a WebView, could exploit the opportunity to access local resources.
  languages:
  - java
  severity: WARNING
  metadata:
    cwe: cwe-73
    owasp-mobile: m7
    masvs: platform-6
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x05h-Testing-Platform-Interaction.md/#testing-webview-protocol-handlers-mstg-platform-6
    license: LGPL-3.0-or-later
    source: https://semgrep.dev/r/mobsf.mobsfscan.webview.webview_file_access.webview_set_allow_file_access
    shortlink: https://sg.run/ABgp
    semgrep.dev:
      rule:
        rule_id: pKUJ40
        version_id: jQT4vX
        url: https://semgrep.dev/playground/r/jQT4vX/mobsf.mobsfscan.webview.webview_file_access.webview_set_allow_file_access
        origin: community
- id: mobsf.mobsfscan.webview.webview_ignore_ssl_errors.ignore_ssl_certificate_errors
  patterns:
  - pattern-either:
    - pattern: |
        $RET onReceivedSslError(WebView $W, SslErrorHandler $H, SslError $E) {
          ...
          $H.proceed();
        }
  message: Insecure WebView Implementation. WebView ignores SSL Certificate errors
    and accept any SSL Certificate. This application is vulnerable to MITM attacks.
  languages:
  - java
  severity: ERROR
  metadata:
    cwe: cwe-295
    owasp-mobile: m3
    masvs: network-3
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x05g-Testing-Network-Communication.md#webview-server-certificate-verification
    license: LGPL-3.0-or-later
    source: https://semgrep.dev/r/mobsf.mobsfscan.webview.webview_ignore_ssl_errors.ignore_ssl_certificate_errors
    shortlink: https://sg.run/BDgW
    semgrep.dev:
      rule:
        rule_id: 2ZUXop
        version_id: 1QTRKN
        url: https://semgrep.dev/playground/r/1QTRKN/mobsf.mobsfscan.webview.webview_ignore_ssl_errors.ignore_ssl_certificate_errors
        origin: community
- id: mobsf.mobsfscan.webview.webview_javascript_interface.webview_javascript_interface
  patterns:
  - pattern-either:
    - pattern: 'addJavascriptInterface(...)

        '
    - pattern: "$W.addJavascriptInterface(...)\n"
  message: Ensure that javascript interface is implemented securely. Execution of
    user controlled code in WebView is a  critical Security issue.
  languages:
  - java
  severity: WARNING
  metadata:
    cwe: cwe-749
    owasp-mobile: m1
    masvs: platform-7
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x05h-Testing-Platform-Interaction.md#determining-whether-java-objects-are-exposed-through-webviews-mstg-platform-7
    license: LGPL-3.0-or-later
    source: https://semgrep.dev/r/mobsf.mobsfscan.webview.webview_javascript_interface.webview_javascript_interface
    shortlink: https://sg.run/D0LY
    semgrep.dev:
      rule:
        rule_id: X5Up0Y
        version_id: 9lTG1b
        url: https://semgrep.dev/playground/r/9lTG1b/mobsf.mobsfscan.webview.webview_javascript_interface.webview_javascript_interface
        origin: community
- id: mobsf.mobsfscan.webview_debugging.webview_debugging
  patterns:
  - pattern-either:
    - pattern: "$WB.setWebContentsDebuggingEnabled(true);\n"
    - pattern: |
        $X = true;
        ...
        $WB.setWebContentsDebuggingEnabled($X);
  message: Remote WebView debugging is enabled. This allows an attacker with debugging
    access to interact with the webview and steal or corrupt data.
  languages:
  - java
  severity: ERROR
  metadata:
    cwe: cwe-489
    owasp-mobile: m1
    masvs: resilience-2
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x05j-Testing-Resiliency-Against-Reverse-Engineering.md#testing-anti-debugging-detection-mstg-resilience-2
    license: LGPL-3.0-or-later
    source: https://semgrep.dev/r/mobsf.mobsfscan.webview_debugging.webview_debugging
    shortlink: https://sg.run/4P4z
    semgrep.dev:
      rule:
        rule_id: wdUG6e
        version_id: 9lTyyQ
        url: https://semgrep.dev/playground/r/9lTyyQ/mobsf.mobsfscan.webview_debugging.webview_debugging
        origin: community
- id: mobsf.mobsfscan.webview_external_storage.webview_external_storage
  patterns:
  - pattern-either:
    - pattern: |
        $X = <... $E.getExternalStorageDirectory() ...>;
        ...
        $WV.loadUrl(<... $X ...>);
    - pattern: "$WV.loadUrl(<... $E.getExternalStorageDirectory().$F() ...>);\n"
    - pattern: |
        $X = <... Environment.getExternalStorageDirectory().$F() ...>;
        ...
        $WV.loadUrl(<... $X ...>);
    - pattern: |
        $X = <... $E.getExternalFilesDir(...) ...>;
        ...
        $WV.loadUrl(<... $X ...>);
  message: WebView load files from external storage. Files in external storage can
    be modified by any application.
  languages:
  - java
  severity: ERROR
  metadata:
    cwe: cwe-749
    owasp-mobile: m1
    masvs: platform-6
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x05h-Testing-Platform-Interaction.md#testing-webview-protocol-handlers-mstg-platform-6
    license: LGPL-3.0-or-later
    source: https://semgrep.dev/r/mobsf.mobsfscan.webview_external_storage.webview_external_storage
    shortlink: https://sg.run/P8kW
    semgrep.dev:
      rule:
        rule_id: x8U2v4
        version_id: LjTrQA
        url: https://semgrep.dev/playground/r/LjTrQA/mobsf.mobsfscan.webview_external_storage.webview_external_storage
        origin: community
- id: mobsf.mobsfscan.webview_file_access.webview_set_allow_file_access
  patterns:
  - pattern-either:
    - pattern: "$WB.setAllowFileAccess(true);\n"
  message: WebView File System Access is enabled. An attacker able to inject script
    into a WebView, could exploit the opportunity to access local resources.
  languages:
  - java
  severity: WARNING
  metadata:
    cwe: cwe-73
    owasp-mobile: m7
    masvs: platform-6
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x05h-Testing-Platform-Interaction.md/#testing-webview-protocol-handlers-mstg-platform-6
    license: LGPL-3.0-or-later
    source: https://semgrep.dev/r/mobsf.mobsfscan.webview_file_access.webview_set_allow_file_access
    shortlink: https://sg.run/1GRk
    semgrep.dev:
      rule:
        rule_id: GdUZDo
        version_id: 8KTx95
        url: https://semgrep.dev/playground/r/8KTx95/mobsf.mobsfscan.webview_file_access.webview_set_allow_file_access
        origin: community
- id: mobsf.mobsfscan.webview_ignore_ssl_errors.ignore_ssl_certificate_errors
  patterns:
  - pattern-either:
    - pattern: |
        $RET onReceivedSslError(WebView $W, SslErrorHandler $H, SslError $E) {
          ...
          $H.proceed();
        }
  message: Insecure WebView Implementation. WebView ignores SSL Certificate errors
    and accept any SSL Certificate. This application is vulnerable to MITM attacks.
  languages:
  - java
  severity: ERROR
  metadata:
    cwe: cwe-295
    owasp-mobile: m3
    masvs: network-3
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x05g-Testing-Network-Communication.md#webview-server-certificate-verification
    license: LGPL-3.0-or-later
    source: https://semgrep.dev/r/mobsf.mobsfscan.webview_ignore_ssl_errors.ignore_ssl_certificate_errors
    shortlink: https://sg.run/JjdW
    semgrep.dev:
      rule:
        rule_id: OrUDk0
        version_id: gETYxP
        url: https://semgrep.dev/playground/r/gETYxP/mobsf.mobsfscan.webview_ignore_ssl_errors.ignore_ssl_certificate_errors
        origin: community
- id: mobsf.mobsfscan.webview_javascript_interface.webview_javascript_interface
  patterns:
  - pattern-either:
    - pattern: 'addJavascriptInterface(...)

        '
    - pattern: "$W.addJavascriptInterface(...)\n"
  message: Ensure that javascript interface is implemented securely. Execution of
    user controlled code in WebView is a  critical Security issue.
  languages:
  - java
  severity: WARNING
  metadata:
    cwe: cwe-749
    owasp-mobile: m1
    masvs: platform-7
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x05h-Testing-Platform-Interaction.md#determining-whether-java-objects-are-exposed-through-webviews-mstg-platform-7
    license: LGPL-3.0-or-later
    source: https://semgrep.dev/r/mobsf.mobsfscan.webview_javascript_interface.webview_javascript_interface
    shortlink: https://sg.run/5JPX
    semgrep.dev:
      rule:
        rule_id: eqUpg7
        version_id: QkTp0E
        url: https://semgrep.dev/playground/r/QkTp0E/mobsf.mobsfscan.webview_javascript_interface.webview_javascript_interface
        origin: community
- id: mobsf.mobsfscan.word_readable_writable.world_readable
  patterns:
  - pattern-either:
    - pattern: 'Context.MODE_WORLD_READABLE

        '
  message: The file is World Readable. Any App can read from the file.
  languages:
  - java
  severity: WARNING
  metadata:
    cwe: cwe-276
    owasp-mobile: m2
    masvs: storage-2
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x05d-Testing-Data-Storage.md#testing-local-storage-for-sensitive-data-mstg-storage-1-and-mstg-storage-2
    license: LGPL-3.0-or-later
    source: https://semgrep.dev/r/mobsf.mobsfscan.word_readable_writable.world_readable
    shortlink: https://sg.run/ow5R
    semgrep.dev:
      rule:
        rule_id: PeUBD1
        version_id: 0bTJ1D
        url: https://semgrep.dev/playground/r/0bTJ1D/mobsf.mobsfscan.word_readable_writable.world_readable
        origin: community
- id: mobsf.mobsfscan.word_readable_writable.world_writeable
  patterns:
  - pattern-either:
    - pattern: 'Context.MODE_WORLD_WRITEABLE

        '
  message: The file is World Readable and Writable. Any App can read/write to the
    file.
  languages:
  - java
  severity: WARNING
  metadata:
    cwe: cwe-276
    owasp-mobile: m2
    masvs: storage-2
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x05d-Testing-Data-Storage.md#testing-local-storage-for-sensitive-data-mstg-storage-1-and-mstg-storage-2
    license: LGPL-3.0-or-later
    source: https://semgrep.dev/r/mobsf.mobsfscan.word_readable_writable.world_writeable
    shortlink: https://sg.run/z9yW
    semgrep.dev:
      rule:
        rule_id: JDUQ5v
        version_id: K3TYJe
        url: https://semgrep.dev/playground/r/K3TYJe/mobsf.mobsfscan.word_readable_writable.world_writeable
        origin: community
- id: mobsf.mobsfscan.xmldecoder_xxe.xml_decoder_xxe
  patterns:
  - pattern: |
      $X $METHOD(...) {
        ...
        new XMLDecoder(...);
        ...
      }
  - pattern-not: |
      $X $METHOD(...) {
        ...
        new XMLDecoder("...");
        ...
      }
  - pattern-not: |-
      $X $METHOD(...) {
        ...
        String $STR = "...";
        ...
        new XMLDecoder($STR);
        ...
      }
  message: |
    XMLDecoder should not be used to parse untrusted data.
    Deserializing user input can lead to arbitrary code execution.
    Use an alternative and explicitly disable external entities.
  severity: WARNING
  languages:
  - java
  metadata:
    cwe: cwe-611
    owasp-mobile: m8
    masvs: platform-2
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x04h-Testing-Code-Quality.md#injection-flaws-mstg-arch-2-and-mstg-platform-2
    license: LGPL-3.0-or-later
    source: https://semgrep.dev/r/mobsf.mobsfscan.xmldecoder_xxe.xml_decoder_xxe
    shortlink: https://sg.run/GwR2
    semgrep.dev:
      rule:
        rule_id: v8Ujpr
        version_id: 3ZTEQW
        url: https://semgrep.dev/playground/r/3ZTEQW/mobsf.mobsfscan.xmldecoder_xxe.xml_decoder_xxe
        origin: community
- id: mobsf.mobsfscan.xmlfactory_external_entities_enabled.xmlinputfactory_xxe_enabled
  pattern: $XMLFACTORY.setProperty("javax.xml.stream.isSupportingExternalEntities",
    true);
  message: 'XML external entities are enabled for this XMLInputFactory. This is vulnerable
    to XML external entity attacks. Disable external entities by setting "javax.xml.stream.isSupportingExternalEntities"
    to false.

    '
  languages:
  - java
  severity: ERROR
  metadata:
    cwe: cwe-611
    owasp-mobile: m8
    masvs: platform-2
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x04h-Testing-Code-Quality.md#injection-flaws-mstg-arch-2-and-mstg-platform-2
    license: LGPL-3.0-or-later
    source: https://semgrep.dev/r/mobsf.mobsfscan.xmlfactory_external_entities_enabled.xmlinputfactory_xxe_enabled
    shortlink: https://sg.run/RPre
    semgrep.dev:
      rule:
        rule_id: d8UlQr
        version_id: 44T2l8
        url: https://semgrep.dev/playground/r/44T2l8/mobsf.mobsfscan.xmlfactory_external_entities_enabled.xmlinputfactory_xxe_enabled
        origin: community
- id: mobsf.mobsfscan.xmlfactory_xxe.xmlinputfactory_xxe
  patterns:
  - pattern-not-inside: |
      $RETURNTYPE $METHOD(...) {
        ...
        $XMLFACTORY.setProperty("javax.xml.stream.isSupportingExternalEntities", false);
        ...
      }
  - pattern-not-inside: |
      $RETURNTYPE $METHOD(...) {
        ...
        $XMLFACTORY.setProperty(java.xml.stream.XMLFactoryInput.IS_SUPPORTING_EXTERNAL_ENTITIES, false);
        ...
      }
  - pattern-either:
    - pattern: "$XMLFACTORY = $W.newFactory(...);"
    - pattern: "$XMLFACTORY = new XMLInputFactory(...);"
  message: 'XML external entities are not explicitly disabled for this XMLInputFactory.
    This could be vulnerable to XML external entity vulnerabilities. Explicitly disable
    external entities by setting "javax.xml.stream.isSupportingExternalEntities" to
    false.

    '
  severity: ERROR
  languages:
  - java
  metadata:
    cwe: cwe-611
    owasp-mobile: m8
    masvs: platform-2
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x04h-Testing-Code-Quality.md#injection-flaws-mstg-arch-2-and-mstg-platform-2
    license: LGPL-3.0-or-later
    source: https://semgrep.dev/r/mobsf.mobsfscan.xmlfactory_xxe.xmlinputfactory_xxe
    shortlink: https://sg.run/Awj8
    semgrep.dev:
      rule:
        rule_id: ZqUg76
        version_id: PkTB1O
        url: https://semgrep.dev/playground/r/PkTB1O/mobsf.mobsfscan.xmlfactory_xxe.xmlinputfactory_xxe
        origin: community
- id: mobsf.mobsfscan.xxe.xmldecoder_xxe.xml_decoder_xxe
  patterns:
  - pattern: |
      $X $METHOD(...) {
        ...
        new XMLDecoder(...);
        ...
      }
  - pattern-not: |
      $X $METHOD(...) {
        ...
        new XMLDecoder("...");
        ...
      }
  - pattern-not: |-
      $X $METHOD(...) {
        ...
        String $STR = "...";
        ...
        new XMLDecoder($STR);
        ...
      }
  message: |
    XMLDecoder should not be used to parse untrusted data.
    Deserializing user input can lead to arbitrary code execution.
    Use an alternative and explicitly disable external entities.
  severity: WARNING
  languages:
  - java
  metadata:
    cwe: cwe-611
    owasp-mobile: m8
    masvs: platform-2
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x04h-Testing-Code-Quality.md#injection-flaws-mstg-arch-2-and-mstg-platform-2
    license: LGPL-3.0-or-later
    source: https://semgrep.dev/r/mobsf.mobsfscan.xxe.xmldecoder_xxe.xml_decoder_xxe
    shortlink: https://sg.run/WxP4
    semgrep.dev:
      rule:
        rule_id: j2Up0D
        version_id: yeT4nr
        url: https://semgrep.dev/playground/r/yeT4nr/mobsf.mobsfscan.xxe.xmldecoder_xxe.xml_decoder_xxe
        origin: community
- id: mobsf.mobsfscan.xxe.xmlfactory_external_entities_enabled.xmlinputfactory_xxe_enabled
  pattern: $XMLFACTORY.setProperty("javax.xml.stream.isSupportingExternalEntities",
    true);
  message: 'XML external entities are enabled for this XMLInputFactory. This is vulnerable
    to XML external entity attacks. Disable external entities by setting "javax.xml.stream.isSupportingExternalEntities"
    to false.

    '
  languages:
  - java
  severity: ERROR
  metadata:
    cwe: cwe-611
    owasp-mobile: m8
    masvs: platform-2
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x04h-Testing-Code-Quality.md#injection-flaws-mstg-arch-2-and-mstg-platform-2
    license: LGPL-3.0-or-later
    source: https://semgrep.dev/r/mobsf.mobsfscan.xxe.xmlfactory_external_entities_enabled.xmlinputfactory_xxe_enabled
    shortlink: https://sg.run/0qwv
    semgrep.dev:
      rule:
        rule_id: 10UnwQ
        version_id: rxTpr3
        url: https://semgrep.dev/playground/r/rxTpr3/mobsf.mobsfscan.xxe.xmlfactory_external_entities_enabled.xmlinputfactory_xxe_enabled
        origin: community
- id: mobsf.mobsfscan.xxe.xmlfactory_xxe.xmlinputfactory_xxe
  patterns:
  - pattern-not-inside: |
      $RETURNTYPE $METHOD(...) {
        ...
        $XMLFACTORY.setProperty("javax.xml.stream.isSupportingExternalEntities", false);
        ...
      }
  - pattern-not-inside: |
      $RETURNTYPE $METHOD(...) {
        ...
        $XMLFACTORY.setProperty(java.xml.stream.XMLFactoryInput.IS_SUPPORTING_EXTERNAL_ENTITIES, false);
        ...
      }
  - pattern-either:
    - pattern: "$XMLFACTORY = $W.newFactory(...);"
    - pattern: "$XMLFACTORY = new XMLInputFactory(...);"
  message: 'XML external entities are not explicitly disabled for this XMLInputFactory.
    This could be vulnerable to XML external entity vulnerabilities. Explicitly disable
    external entities by setting "javax.xml.stream.isSupportingExternalEntities" to
    false.

    '
  severity: ERROR
  languages:
  - java
  metadata:
    cwe: cwe-611
    owasp-mobile: m8
    masvs: platform-2
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x04h-Testing-Code-Quality.md#injection-flaws-mstg-arch-2-and-mstg-platform-2
    license: LGPL-3.0-or-later
    source: https://semgrep.dev/r/mobsf.mobsfscan.xxe.xmlfactory_xxe.xmlinputfactory_xxe
    shortlink: https://sg.run/KzZ7
    semgrep.dev:
      rule:
        rule_id: 9AUL9X
        version_id: bZT7wq
        url: https://semgrep.dev/playground/r/bZT7wq/mobsf.mobsfscan.xxe.xmlfactory_xxe.xmlinputfactory_xxe
        origin: community
