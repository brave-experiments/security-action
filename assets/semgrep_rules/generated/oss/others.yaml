---
rules:
- id: gitlab.bandit.B108-1
  pattern: open("=~/^\/tmp.*/", ...)
  message: 'Detected hardcoded temp directory. Consider using ''tempfile.TemporaryFile''
    instead.

    '
  metadata:
    cwe: 'CWE-377: Insecure Temporary File'
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B108-1
    shortlink: https://sg.run/O81B
    semgrep.dev:
      rule:
        rule_id: 6JU6qd
        version_id: l4TzRP
        url: https://semgrep.dev/playground/r/l4TzRP/gitlab.bandit.B108-1
        origin: community
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B202
  languages:
  - python
  message: |
    The application may be vulnerable to a path traversal if it extracts untrusted archive files.
    This vulnerability is colloquially known as 'Zip Slip'. Archive files may contain folders
    which,
    when extracted, may write outside of the intended directory. This is exploited by including
    path traversal characters such as `../../other/directory` to overwrite or place files in system
    or application directories.

    Extra care must be taken when extracting archive files as there are numerous concerns:

    - If possible, generate unique filenames instead of using the archives file names, as it may be
    possible for users to overwrite files if the filenames are the same.
    - Validate file paths are written with a prefixed, known trusted directory.
    - Only process regular files and not symbolic links, as some applications may attempt to
    read/follow
    the symbolic link, leading to arbitrary file read / write vulnerabilities.

    Example of securely processing an archive file:
    ```
    import tarfile
    import uuid
    # import os

    tar = tarfile.open('some.tar')

    # Max number of allowed files in our archive
    max_files = 10
    # Max size for all files in archive
    max_size = 1024 * 1024 * 10 # 10MB
    # Max size per file in archive
    max_file_size = 1024 * 1024 # 1MB

    # Validate number of files in archive
    if len(tar.getmembers()) > max_files:
        raise Exception("Too many files in archive")

    total_size = 0
    # Loop over all files to see if we exceed max size
    # if so, do not process any of them.
    for f in tar.getmembers():
        total_size += f.size
        if total_size >= max_size:
            raise Exception("Archive files exceeded max file size")

    # Iterate over files now that we know the total size is within limits
    for f in tar.getmembers():
        # Internally this calls TarInfo.isreg() which ensures
        # the file is a regular file and not a sym link or directory
        if not f.isfile():
            continue

        # Optional, set a limit on each file size
        if f.size > max_file_size:
            raise Exception(f"File {f.name} too large: {f.size}")

        # If original names are required, ensure that only the
        # filename is used:
        # filename = os.path.basename(f.name)

        # More secure, generate a UUID4 value instead
        filename = uuid.uuid4().hex

        # Reset the archive filename to the basename
        # Newer versions of python (3.11.4+) should use:
        # new_tar = old_tar.replace(name=...new name...)
        f.name = filename

        # Extract the file into a restricted directory, with our
        # own user's attributes, not the file from the archive
        tar.extract(f, '/opt/app/restricted/', set_attrs=False)
    ```

    For more information on tarfile see:
    - https://docs.python.org/3/library/tarfile.html
  metadata:
    cwe: CWE-22
    shortDescription: Improper Limitation of a Pathname to a Restricted Directory
      ('Path Traversal')
    primary_identifier: bandit.B202
    secondary_identifiers:
    - name: Bandit Test ID B202
      type: bandit_test_id
      value: B202
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.bandit.B202
    shortlink: https://sg.run/J0EQ
    semgrep.dev:
      rule:
        rule_id: eqUPXn
        version_id: jQTg6j6
        url: https://semgrep.dev/playground/r/jQTg6j6/gitlab.bandit.B202
        origin: community
  patterns:
  - pattern-inside: |
      import tarfile
      ...
  - pattern-either:
    - patterns:
      - pattern-inside: |
          $TAR = tarfile.open(...)
          ...
      - pattern-either:
        - pattern: "$TAR.extractall(...)"
        - pattern: tarfile.extractall(..., members=$TAR)
        - pattern: "$TAR.extractall(..., members=[])"
    - patterns:
      - pattern: tarfile.extractall(...)
      - pattern: tarfile.extractall(..., members=[])
  severity: ERROR
- id: gitlab.bandit.B303-3
  patterns:
  - pattern-either:
    - pattern: Crypto.Hash.MD2.new(...)
    - pattern: Cryptodome.Hash.MD2.new (...)
  message: |
    Detected MD2 hash algorithm which is considered insecure. This algorithm
    has many known vulnerabilities and has been deprecated. Use SHA256 or SHA3 instead.
  metadata:
    cwe: CWE-327
    shortDescription: Use of a Broken or Risky Cryptographic Algorithm
    owasp: A3:2017-Sensitive Data Exposure
    primary_identifier: bandit.B303-3
    secondary_identifiers:
    - name: Bandit Test ID B303
      type: bandit_test_id
      value: B303
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B303-3
    shortlink: https://sg.run/nq5r
    semgrep.dev:
      rule:
        rule_id: 9AUOKZ
        version_id: WrTw4p
        url: https://semgrep.dev/playground/r/WrTw4p/gitlab.bandit.B303-3
        origin: community
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B303-4
  patterns:
  - pattern-either:
    - pattern: Crypto.Hash.MD4.new(...)
    - pattern: Cryptodome.Hash.MD4.new (...)
  message: |
    Detected MD4 hash algorithm which is considered insecure. This algorithm
    has many known vulnerabilities and has been deprecated. Use SHA256 or SHA3 instead.
  metadata:
    cwe: CWE-327
    shortDescription: Use of a Broken or Risky Cryptographic Algorithm
    owasp: A3:2017-Sensitive Data Exposure
    primary_identifier: bandit.B303-4
    secondary_identifiers:
    - name: Bandit Test ID B303
      type: bandit_test_id
      value: B303
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B303-4
    shortlink: https://sg.run/E5GB
    semgrep.dev:
      rule:
        rule_id: yyUvLN
        version_id: 0bTXP3
        url: https://semgrep.dev/playground/r/0bTXP3/gitlab.bandit.B303-4
        origin: community
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B303-5
  patterns:
  - pattern-either:
    - pattern: Crypto.Hash.MD5.new(...)
    - pattern: Cryptodome.Hash.MD5.new (...)
  message: |
    Detected MD5 hash algorithm which is considered insecure. MD5 is not
    collision resistant and is therefore not suitable as a cryptographic
    signature. Use SHA256 or SHA3 instead.
  metadata:
    cwe: CWE-327
    shortDescription: Use of a Broken or Risky Cryptographic Algorithm
    owasp: A3:2017-Sensitive Data Exposure
    primary_identifier: bandit.B303-5
    secondary_identifiers:
    - name: Bandit Test ID B303
      type: bandit_test_id
      value: B303
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B303-5
    shortlink: https://sg.run/70eQ
    semgrep.dev:
      rule:
        rule_id: r6UkYj
        version_id: K3TXWk
        url: https://semgrep.dev/playground/r/K3TXWk/gitlab.bandit.B303-5
        origin: community
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B303-6
  patterns:
  - pattern-either:
    - pattern: Crypto.Hash.SHA.new(...)
    - pattern: Cryptodome.Hash.SHA.new (...)
  message: |
    Detected SHA1 hash algorithm which is considered insecure. SHA1 is not
    collision resistant and is therefore not suitable as a cryptographic
    signature. Use SHA256 or SHA3 instead.
  metadata:
    cwe: CWE-327
    shortDescription: Use of a Broken or Risky Cryptographic Algorithm
    owasp: A3:2017-Sensitive Data Exposure
    primary_identifier: bandit.B303-6
    secondary_identifiers:
    - name: Bandit Test ID B303
      type: bandit_test_id
      value: B303
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B303-6
    shortlink: https://sg.run/L0KY
    semgrep.dev:
      rule:
        rule_id: bwUOkX
        version_id: qkTy8y
        url: https://semgrep.dev/playground/r/qkTy8y/gitlab.bandit.B303-6
        origin: community
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B303-7
  languages:
  - python
  message: |
    The application was found using an insecure or risky digest or signature algorithm. MD2, MD5
    and SHA1 hash algorithms have been found to be vulnerable to producing collisions.

    This means
    that two different values, when hashed, can lead to the same hash value. If the application is
    trying
    to use these hash methods for storing passwords, then it is recommended to switch to a
    password hashing
    algorithm such as Argon2id or PBKDF2.
    It is strongly recommended that a standard digest algorithm be chosen instead as implementing
    a custom algorithm is prone to errors.

    Example of creating a SHA-384 hash using the `cryptography` package:
    ```
    from cryptography.hazmat.primitives import hashes
    # Create a SHA384 digest
    digest = hashes.Hash(hashes.SHA384())
    # Update the digest with some initial data
    digest.update(b"some data to hash")
    # Add more data to the digest
    digest.update(b"some more data")
    # Finalize the digest as bytes
    result = digest.finalize()
    ```

    For more information on secure password storage see OWASP:
    - https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html

    For more information on the cryptography module see:
    - https://cryptography.io/en/latest/
  metadata:
    cwe: CWE-327
    owasp: A3:2017-Sensitive Data Exposure
    shortDescription: Use of a broken or risky cryptographic algorithm
    primary_identifier: bandit.B303-7
    secondary_identifiers:
    - name: Bandit Test ID B303
      type: bandit_test_id
      value: B303
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.bandit.B303-7
    shortlink: https://sg.run/7GGZ
    semgrep.dev:
      rule:
        rule_id: 10Ueez
        version_id: nWTx84Y
        url: https://semgrep.dev/playground/r/nWTx84Y/gitlab.bandit.B303-7
        origin: community
  pattern: cryptography.hazmat.primitives.hashes.MD5(...)
  severity: WARNING
- id: gitlab.bandit.B304-12
  languages:
  - python
  message: |
    The IDEA encryption algorithm was meant as a drop-in replacement for DES and was created in
    1991. A number of [vulnerabilities and
    exploits](https://en.wikipedia.org/wiki/International_Data_Encryption_Algorithm#Security) have
    been identified to work against IDEA and
    it is no longer recommended. If possible consider
    using ChaCha20Poly1305 or AES-GCM instead of Blowfish.

    For older applications that don't have support for `ChaCha20Poly1305`, `AES-256-GCM` is
    recommended, however it has many drawbacks:
      - Slower than `ChaCha20Poly1305`.
      - Catastrophic failure if nonce values are reused.

    Example using `ChaCha20Poly1305`:
    ```
    import os
    # Import ChaCha20Poly1305 from cryptography
    from cryptography.hazmat.primitives.ciphers.aead import ChaCha20Poly1305
    # Our plaintext to encrypt
    plain_text = b"Secret text to encrypt"
    # We do not require authenticated but unencrypted data, so set to None
    aad = None
    # Generate a secure key
    key = ChaCha20Poly1305.generate_key()
    # Create a new ChaCha20Poly1305 instance with our secure key
    chacha = ChaCha20Poly1305(key)
    # Note: nonce values _must_ be regenerated every time they are used.
    nonce = os.urandom(12)
    # Encrypt our plaintext
    cipher_text = chacha.encrypt(nonce, plain_text, aad)
    # Decrypt the plain text using the nonce and cipher_text
    chacha.decrypt(nonce, cipher_text, aad)
    ```

    Example using `AESGCM`:
    ```
    import os
    # Import AESGCM from cryptography
    from cryptography.hazmat.primitives.ciphers.aead import AESGCM
    # Our plaintext to encrypt
    plain_text = b"Secret text to encrypt"
    # We do not require authenticated but unencrypted data, so set to None
    aad = None
    # Generate a secure key
    key = AESGCM.generate_key(bit_length=128)
    # Create a new AESGCM instance with our secure key
    aesgcm = AESGCM(key)
    # Note: nonce values _must_ be regenerated every time they are used.
    nonce = os.urandom(12)
    # Encrypt our plaintext
    cipher_text = aesgcm.encrypt(nonce, plain_text, aad)
    # Decrypt the plain text using the nonce and cipher_text
    aesgcm.decrypt(nonce, cipher_text, aad)
    ```

    For more information on the cryptography module see:
    - https://cryptography.io/en/latest/
  metadata:
    cwe: CWE-327
    owasp: A3:2017-Sensitive Data Exposure
    shortDescription: Use of a Broken or Risky Cryptographic Algorithm
    primary_identifier: bandit.B304-12
    secondary_identifiers:
    - name: Bandit Test ID B304
      type: bandit_test_id
      value: B304
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.bandit.B304-12
    shortlink: https://sg.run/Jjjw
    semgrep.dev:
      rule:
        rule_id: x8U22d
        version_id: RGTDQG9
        url: https://semgrep.dev/playground/r/RGTDQG9/gitlab.bandit.B304-12
        origin: community
  pattern: cryptography.hazmat.primitives.ciphers.algorithms.IDEA(...)
  severity: WARNING
- id: gitlab.bandit.B308.B703
  patterns:
  - pattern-not-inside: django.utils.html.format_html(...)
  - pattern: django.utils.safestring.mark_safe(...)
  message: |
    'mark_safe()' is used to mark a string as "safe" for HTML output.
    This disables escaping and could therefore subject the content to
    XSS attacks. Use 'django.utils.html.format_html()' to build HTML
    for rendering instead.
  metadata:
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp: 'A7: Cross-Site Scripting (XSS)'
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B308.B703
    shortlink: https://sg.run/58xj
    semgrep.dev:
      rule:
        rule_id: d8UzRp
        version_id: JdTQjX
        url: https://semgrep.dev/playground/r/JdTQjX/gitlab.bandit.B308.B703
        origin: community
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B310-1
  languages:
  - python
  message: |
    The application was found passing in a non-literal value to the `urllib` methods which issue
    requests. `urllib` supports the `file://` scheme, which may allow an adversary who can control
    the URL value to read arbitrary files on the file system.

    To remediate this issue either hardcode the URLs being used in urllib or use the `requests`
    module instead.

    Example using the `requests` module to issue an HTTPS request:
    ```
    import requests
    # Issue a GET request to https://example.com with a timeout of 10 seconds
    response = requests.get('https://example.com', timeout=10)
    # Work with the response object
    # ...
    ```
  metadata:
    cwe: CWE-939
    owasp: A5:2017-Broken Access Control
    shortDescription: Improper Authorization in Handler for Custom URL Scheme
    primary_identifier: bandit.B310-1
    secondary_identifiers:
    - name: Bandit Test ID B310
      type: bandit_test_id
      value: B310
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.bandit.B310-1
    shortlink: https://sg.run/R8zN
    semgrep.dev:
      rule:
        rule_id: nJUYed
        version_id: ExTjpWX
        url: https://semgrep.dev/playground/r/ExTjpWX/gitlab.bandit.B310-1
        origin: community
  patterns:
  - pattern-not: urllib.$W("...")
  - pattern-not: urllib.request.$W("...")
  - pattern-not: $OPENER.$W("...")
  - pattern-either:
    - patterns:
      - pattern-either:
        - pattern: urllib.urlopen(...)
        - pattern: urllib.request.urlopen(...)
        - pattern: urllib.urlretrieve(...)
        - pattern: urllib.request.urlretrieve(...)
    - patterns:
      - pattern-either:
        - pattern-inside: |
            $OPENER = urllib.URLopener(...)
            ...
        - pattern-inside: |
            $OPENER = urllib.request.URLopener(...)
            ...
        - pattern-inside: |
            $OPENER = urllib.FancyURLopener(...)
            ...
        - pattern-inside: |
            $OPENER = urllib.request.FancyURLopener(...)
            ...
      - pattern-either:
        - pattern: "$OPENER.open(...)"
        - pattern: "$OPENER.retrieve(...)"
  severity: WARNING
- id: gitlab.bandit.B313.B314.B315.B316.B318.B319.B320.B405.B406.B407.B408.B409.B410
  pattern-either:
  - pattern: import xml
  - pattern: import lxml
  - pattern: xml.etree.cElementTree.fromstring(...)
  - pattern: xml.etree.cElementTree.parse(...)
  - pattern: xml.etree.cElementTree.iterparse(...)
  - pattern: xml.etree.cElementTree.XMLParser(...)
  - pattern: xml.etree.ElementTree.fromstring(...)
  - pattern: xml.etree.ElementTree.parse(...)
  - pattern: xml.etree.ElementTree.iterparse(...)
  - pattern: xml.etree.ElementTree.XMLParser(...)
  - pattern: xml.sax.expatreader.create_parser(...)
  - pattern: xml.dom.expatbuilder.parse(...)
  - pattern: xml.dom.expatbuilder.parseString(...)
  - pattern: xml.dom.minidom.parseString(...)
  - pattern: xml.dom.minidom.parse(...)
  - pattern: xml.dom.pulldom.parseString(...)
  - pattern: xml.dom.pulldom.parse(...)
  - pattern: lxml.etree.fromstring(...)
  - pattern: lxml.etree.RestrictedElement(...)
  - pattern: lxml.etree.GlobalParserTLS(...)
  - pattern: lxml.etree.getDefaultParser(...)
  - pattern: lxml.etree.check_docinfo(...)
  metadata:
    cwe: 'CWE-611: Improper Restriction of XML External Entity Reference'
    owasp: 'A4: XML External Entities (XXE)'
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B313.B314.B315.B316.B318.B319.B320.B405.B406.B407.B408.B409.B410
    shortlink: https://sg.run/DJ5G
    semgrep.dev:
      rule:
        rule_id: L1U4Yd
        version_id: DkTKjj
        url: https://semgrep.dev/playground/r/DkTKjj/gitlab.bandit.B313.B314.B315.B316.B318.B319.B320.B405.B406.B407.B408.B409.B410
        origin: community
  message: |
    Found use of the native Python XML libraries, which is vulnerable to XML external entity (XXE)
    attacks. The Python documentation recommends the 'defusedxml' library instead. Use 'defusedxml'.
    See https://github.com/tiran/defusedxml for more information.
  severity: ERROR
  languages:
  - python
- id: gitlab.bandit.B404
  languages:
  - python
  message: 'Consider possible security implications associated with subprocess module.

    '
  metadata:
    cwe: CWE-78
    owasp: A8:2017-Insecure Deserialization
    shortDescription: Improper Neutralization of Special Elements used in an OS Command
      ('OS Command Injection')
    primary_identifier: bandit.B404
    secondary_identifiers:
    - name: Bandit Test ID B404
      type: bandit_test_id
      value: B404
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.bandit.B404
    shortlink: https://sg.run/lj3o
    semgrep.dev:
      rule:
        rule_id: 4bUz3p
        version_id: K3TvzqX
        url: https://semgrep.dev/playground/r/K3TvzqX/gitlab.bandit.B404
        origin: community
  patterns:
  - pattern: import subprocess
  severity: WARNING
- id: gitlab.bandit.B502
  languages:
  - python
  message: |
    The application was found calling an SSL module with SSL or TLS protocols that have known
    deficiencies.
    It is strongly recommended that newer applications use TLS 1.2 or 1.3 and
    `SSLContext.wrap_socket`.

    If using the `pyOpenSSL` module, please note that it has been deprecated and the Python
    Cryptographic Authority
    strongly suggests moving to use the [pyca/cryptography](https://github.com/pyca/cryptography)
    module instead.

    To remediate this issue for the `ssl` module, create a new TLS context and pass in
    `ssl.PROTOCOL_TLS_CLIENT` for clients or `ssl.PROTOCOL_TLS_SERVER` for servers to the
    `ssl.SSLContext(...)` `protocol=`
    argument. When converting the socket to a TLS socket, use the new `SSLContext.wrap_socket`
    method instead.

    Example creating a TLS 1.3 client socket connection by using a newer version of Python
    (3.11.4) and
    the SSL module:
    ```
    import ssl
    import socket

    # Create our initial socket
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
        # Connect the socket
        sock.connect(('www.example.org', 443))

        # Create a new SSLContext with protocol set to ssl.PROTOCOL_TLS_CLIENT
        # This will auto-select the highest grade TLS protocol version (1.3)
        context = ssl.SSLContext(protocol=ssl.PROTOCOL_TLS_CLIENT)
        # Load our a certificates for server certificate authentication
        context.load_verify_locations('cert.pem')
        # Create our TLS socket, and validate the server hostname matches
        with context.wrap_socket(sock, server_hostname="www.example.org") as tls_sock:
            # Send some bytes over the socket (HTTP request in this case)\
            data = bytes('GET / HTTP/1.1\r\nHost: example.org\r\n\r\n', 'utf-8')
            sent_bytes = tls_sock.send(data)
            # Validate number of sent bytes
            # ...
            # Read the response
            resp = tls_sock.recv()
            # Work with the response
            # ...
    ```

    For more information on the ssl module see:
    - https://docs.python.org/3/library/ssl.html

    For more information on pyca/cryptography and openssl see:
    - https://cryptography.io/en/latest/openssl/
  metadata:
    cwe: CWE-326
    owasp: A3:2017-Sensitive Data Exposure
    shortDescription: Inadequate Encryption Strength
    primary_identifier: bandit.B502
    secondary_identifiers:
    - name: Bandit Test ID B502
      type: bandit_test_id
      value: B502
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.bandit.B502
    shortlink: https://sg.run/4g0g
    semgrep.dev:
      rule:
        rule_id: KxUOoO
        version_id: e1T0LKy
        url: https://semgrep.dev/playground/r/e1T0LKy/gitlab.bandit.B502
        origin: community
  patterns:
  - pattern-either:
    - pattern: ssl.PROTOCOL_SSLv2
    - pattern: ssl.PROTOCOL_SSLv3
    - pattern: ssl.PROTOCOL_TLSv1
    - pattern: ssl.PROTOCOL_TLSv1_1
    - pattern: pyOpenSSL.SSL.SSLv2_METHOD
    - pattern: pyOpenSSL.SSL.SSLv23_METHOD
    - pattern: pyOpenSSL.SSL.SSLv3_METHOD
    - pattern: pyOpenSSL.SSL.TLSv1_METHOD
    - pattern: pyOpenSSL.SSL.TLSv1_1_METHOD
  severity: ERROR
- id: gitlab.bandit.B502.B503
  patterns:
  - pattern-either:
    - pattern: ssl.PROTOCOL_SSLv2
    - pattern: ssl.PROTOCOL_SSLv3
    - pattern: ssl.PROTOCOL_TLSv1
    - pattern: ssl.PROTOCOL_TLSv1_1
    - pattern: pyOpenSSL.SSL.SSLv2_METHOD
    - pattern: pyOpenSSL.SSL.SSLv23_METHOD
    - pattern: pyOpenSSL.SSL.SSLv3_METHOD
    - pattern: pyOpenSSL.SSL.TLSv1_METHOD
    - pattern: pyOpenSSL.SSL.TLSv1_1_METHOD
  message: |
    An insecure SSL version was detected. TLS versions 1.0, 1.1, and all SSL versions
    are considered weak encryption and are deprecated.
    Use 'ssl.PROTOCOL_TLSv1_2' or higher.
  metadata:
    cwe: 'CWE-326: Inadequate Encryption Strength'
    owasp: 'A3: Sensitive Data Exposure'
    license: MIT
    source: https://semgrep.dev/r/gitlab.bandit.B502.B503
    shortlink: https://sg.run/plRe
    semgrep.dev:
      rule:
        rule_id: ReUPvG
        version_id: 1QTeld
        url: https://semgrep.dev/playground/r/1QTeld/gitlab.bandit.B502.B503
        origin: community
  severity: WARNING
  languages:
  - python
- id: gitlab.bandit.B504
  languages:
  - python
  message: |
    The application was found calling `ssl.wrap_socket` without a TLS protocol version specified.
    Additionally, `ssl.wrap_socket` has been deprecated since Python 3.7. It is strongly
    recommended
    that newer applications use TLS 1.2 or 1.3 and `SSLContext.wrap_socket`.

    To remediate this issue, create a new TLS context and pass in `ssl.PROTOCOL_TLS_CLIENT`
    for clients or `ssl.PROTOCOL_TLS_SERVER` for servers to the `ssl.SSLContext(...)` `protocol=`
    argument. When converting the socket to a TLS socket, use the new `SSLContext.wrap_socket`
    method instead.


    Example creating a TLS 1.3 client socket connection by using a newer version of Python
    (3.11.4) and
    the SSL module:
    ```
    import ssl
    import socket

    # Create our initial socket
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
        # Connect the socket
        sock.connect(('www.example.org', 443))

        # Create a new SSLContext with protocol set to ssl.PROTOCOL_TLS_CLIENT
        # This will auto-select the highest grade TLS protocol version (1.3)
        context = ssl.SSLContext(protocol=ssl.PROTOCOL_TLS_CLIENT)
        # Load our a certificates for server certificate authentication
        context.load_verify_locations('cert.pem')
        # Create our TLS socket, and validate the server hostname matches
        with context.wrap_socket(sock, server_hostname="www.example.org") as tls_sock:
            # Send some bytes over the socket (HTTP request in this case)\
            data = bytes('GET / HTTP/1.1\r\nHost: example.org\r\n\r\n', 'utf-8')
            sent_bytes = tls_sock.send(data)
            # Validate number of sent bytes
            # ...
            # Read the response
            resp = tls_sock.recv()
            # Work with the response
            # ...
    ```

    For more information on the ssl module see:
    - https://docs.python.org/3/library/ssl.html
  metadata:
    cwe: CWE-326
    owasp: A3:2017-Sensitive Data Exposure
    shortDescription: Inadequate encryption strength
    primary_identifier: bandit.B504
    secondary_identifiers:
    - name: Bandit Test ID B504
      type: bandit_test_id
      value: B504
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.bandit.B504
    shortlink: https://sg.run/2bNr
    semgrep.dev:
      rule:
        rule_id: AbUWYl
        version_id: O9TNn7d
        url: https://semgrep.dev/playground/r/O9TNn7d/gitlab.bandit.B504
        origin: community
  patterns:
  - pattern: ssl.wrap_socket()
  severity: WARNING
- id: gitlab.bandit.B601
  languages:
  - python
  message: |
    Unverified SSL context detected. This will permit insecure connections without `verifyingSSL`
    certificates. Use `ssl.create_default_context()` instead.
  metadata:
    cwe: CWE-78
    owasp: A1:2017-Injection
    shortDescription: Improper Neutralization of Special Elements used in an OS Command
      ('OS Command Injection')
    primary_identifier: bandit.B601
    secondary_identifiers:
    - name: Bandit Test ID B601
      type: bandit_test_id
      value: B601
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.bandit.B601
    shortlink: https://sg.run/9qdy
    semgrep.dev:
      rule:
        rule_id: 0oUEOA
        version_id: 6xTv5ge
        url: https://semgrep.dev/playground/r/6xTv5ge/gitlab.bandit.B601
        origin: community
  patterns:
  - pattern-inside: |
      import paramiko
      ...
  - pattern: "$CLIENT.exec_command(...)"
  severity: WARNING
- id: gitlab.bandit.B602
  languages:
  - python
  message: |
    Found `subprocess` function `$FUNC` with `shell=True`. This is dangerous because this call will
    spawn the command using a shell process. Doing so propagates current shell settings and
    variables,
    which makes it much easier for a malicious actor to execute commands. Use `shell=False`
    instead.
  metadata:
    cwe: CWE-78
    owasp: A1:2017-Injection
    shortDescription: Improper Neutralization of Special Elements used in an OS Command
      ('OS Command Injection')
    primary_identifier: bandit.B602
    secondary_identifiers:
    - name: Bandit Test ID B602
      type: bandit_test_id
      value: B602
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.bandit.B602
    shortlink: https://sg.run/yzYA
    semgrep.dev:
      rule:
        rule_id: KxU4yp
        version_id: pZT16DP
        url: https://semgrep.dev/playground/r/pZT16DP/gitlab.bandit.B602
        origin: community
  patterns:
  - pattern-not: subprocess.$FUNC(..., shell=False, ...)
  - pattern-not: subprocess.$FUNC(..., shell=False)
  - pattern-not: subprocess.$FUNC(..., shell=0)
  - pattern-not: subprocess.$FUNC(..., shell=[])
  - pattern-not: subprocess.$FUNC(..., shell={})
  - pattern-not: subprocess.$FUNC(..., shell=None)
  - pattern-either:
    - pattern: subprocess.$FUNC(..., shell=True, ...)
    - pattern: subprocess.$FUNC(..., shell='True', ...)
    - pattern: subprocess.$FUNC(..., shell='False', ...)
    - pattern: subprocess.$FUNC(..., shell='None', ...)
    - pattern: subprocess.$FUNC(..., shell=$X, ...)
  severity: ERROR
- id: gitlab.bandit.B603
  languages:
  - python
  message: |
    Python possesses many mechanisms to invoke an external executable. However,
    doing so may present a security issue if appropriate care is not taken to
    sanitize any user provided or variable input. This plugin test is part of a
    family of tests built to check for process spawning and warn appropriately.
    Specifically, this test looks for the spawning of a subprocess without the
    use of a command shell. This type of subprocess invocation is not
    vulnerable to shell injection attacks, but care should still be taken to
    ensure validity of input.
  metadata:
    cwe: CWE-78
    owasp: A1:2017-Injection
    shortDescription: Improper Neutralization of Special Elements used in an OS Command
      ('OS Command Injection')
    primary_identifier: bandit.B603
    secondary_identifiers:
    - name: Bandit Test ID B603
      type: bandit_test_id
      value: B603
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.bandit.B603
    shortlink: https://sg.run/rABJ
    semgrep.dev:
      rule:
        rule_id: qNUoqN
        version_id: zyTKAJP
        url: https://semgrep.dev/playground/r/zyTKAJP/gitlab.bandit.B603
        origin: community
  patterns:
  - pattern-not: subprocess.$FUNC($ARG, shell=<... True ...>)
  - pattern-not: subprocess.$FUNC($ARG, shell=<... 'True' ...>)
  - pattern-not: subprocess.$FUNC($ARG, shell=<... "True" ...>)
  - pattern-either:
    - pattern: 'subprocess.$FUNC($ARG, shell=False)

        '
    - pattern: 'subprocess.$FUNC($ARG, shell=0)

        '
    - pattern: 'subprocess.$FUNC($ARG, shell={...})

        '
    - pattern: 'subprocess.$FUNC($ARG, shell=[...])

        '
    - pattern: 'subprocess.$FUNC($ARG)

        '
  severity: WARNING
- id: gitlab.bandit.B604
  languages:
  - python
  message: 'subprocess call - check for execution of untrusted input

    '
  metadata:
    cwe: CWE-78
    owasp: A1:2017-Injection
    shortDescription: Improper Neutralization of Special Elements used in an OS Command
      ('OS Command Injection')
    primary_identifier: bandit.B604
    secondary_identifiers:
    - name: Bandit Test ID B604
      type: bandit_test_id
      value: B604
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.bandit.B604
    shortlink: https://sg.run/bDvv
    semgrep.dev:
      rule:
        rule_id: lBUdPP
        version_id: 2KTzQOz
        url: https://semgrep.dev/playground/r/2KTzQOz/gitlab.bandit.B604
        origin: community
  patterns:
  - pattern-not: subprocess.$FUNC(..., shell=True, ...)
  - pattern: "$FOO(..., shell=True, ...)"
  severity: WARNING
- id: gitlab.bandit.B605
  languages:
  - python
  message: |
    Starting a process with a shell; seems safe, but may be changed in the future, consider
    rewriting without shell
  metadata:
    cwe: CWE-78
    owasp: A1:2017-Injection
    shortDescription: Improper Neutralization of Special Elements used in an OS Command
      ('OS Command Injection')
    primary_identifier: bandit.B605
    secondary_identifiers:
    - name: Bandit Test ID B605
      type: bandit_test_id
      value: B605
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.bandit.B605
    shortlink: https://sg.run/NrlN
    semgrep.dev:
      rule:
        rule_id: YGUrPX
        version_id: YDTp603
        url: https://semgrep.dev/playground/r/YDTp603/gitlab.bandit.B605
        origin: community
  patterns:
  - pattern-either:
    - pattern: os.system(...)
    - pattern: os.popen(...)
    - pattern: os.popen2(...)
    - pattern: os.popen3(...)
    - pattern: os.popen4(...)
    - pattern: popen2.popen2(...)
    - pattern: popen2.popen3(...)
    - pattern: popen2.popen4(...)
    - pattern: popen2.Popen3(...)
    - pattern: popen2.Popen4(...)
    - pattern: commands.getoutput(...)
    - pattern: commands.getstatusoutput("")
  severity: INFO
- id: gitlab.bandit.B606
  languages:
  - python
  message: |
    Found dynamic content when spawning a process. This is dangerous if externaldata can reach this
    function call because it allows a malicious actor toexecute commands. Ensure no external data
    reaches here.
  metadata:
    cwe: CWE-78
    owasp: A1:2017-Injection
    shortDescription: Improper Neutralization of Special Elements used in an OS Command
      ('OS Command Injection')
    primary_identifier: bandit.B606
    secondary_identifiers:
    - name: Bandit Test ID B606
      type: bandit_test_id
      value: B606
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.bandit.B606
    shortlink: https://sg.run/kLQA
    semgrep.dev:
      rule:
        rule_id: 6JUqpb
        version_id: o5TgyEx
        url: https://semgrep.dev/playground/r/o5TgyEx/gitlab.bandit.B606
        origin: community
  patterns:
  - pattern-either:
    - patterns:
      - pattern-not: os.$W("...", ...)
      - pattern-either:
        - pattern: os.execl(...)
        - pattern: os.execle(...)
        - pattern: os.execlp(...)
        - pattern: os.execlpe(...)
        - pattern: os.execv(...)
        - pattern: os.execve(...)
        - pattern: os.execvp(...)
        - pattern: os.execvpe(...)
        - pattern: os.startfile(...)
    - patterns:
      - pattern-either:
        - pattern: os.spawnl(...)
        - pattern: os.spawnle(...)
        - pattern: os.spawnlp(...)
        - pattern: os.spawnlpe(...)
        - pattern: os.spawnv(...)
        - pattern: os.spawnve(...)
        - pattern: os.spawnvp(...)
        - pattern: os.spawnvpe(...)
  severity: WARNING
- id: gitlab.bandit.B607
  languages:
  - python
  message: |
    Starting a process with a shell; seems safe, but may be changed in the future, consider
    rewriting without shell
  metadata:
    cwe: CWE-78
    owasp: A1:2017-Injection
    shortDescription: Improper Neutralization of Special Elements used in an OS Command
      ('OS Command Injection')
    primary_identifier: bandit.B607
    secondary_identifiers:
    - name: Bandit Test ID B607
      type: bandit_test_id
      value: B607
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.bandit.B607
    shortlink: https://sg.run/wx9d
    semgrep.dev:
      rule:
        rule_id: oqUzYg
        version_id: l4T4rO7
        url: https://semgrep.dev/playground/r/l4T4rO7/gitlab.bandit.B607
        origin: community
  pattern-either:
  - pattern: os.system("...", ...)
  - pattern: $OS.popen("...", ...)
  - pattern: $OS.popen2("...", ...)
  - pattern: $OS.popen3("...", ...)
  - pattern: $OS.popen4("...", ...)
  - pattern: commands.getoutput("...", ...)
  - pattern: commands.getstatusoutput("...", ...)
  severity: INFO
- id: gitlab.bandit.B609
  languages:
  - python
  message: |
    Detected use of the wildcard character in a system call that spawns a shell.This subjects the
    wildcard to normal shell expansion, which can have unintended consequencesif there exist any
    non-standard file names. Consider a file named `-e sh script.sh`.
  metadata:
    cwe: CWE-155
    owasp: A1:2017-Injection
    shortDescription: Improper Neutralization of Wildcards or Matching Symbols
    primary_identifier: bandit.B609
    secondary_identifiers:
    - name: Bandit Test ID B609
      type: bandit_test_id
      value: B609
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.bandit.B609
    shortlink: https://sg.run/055v
    semgrep.dev:
      rule:
        rule_id: 7KUppP
        version_id: qkT21nZ
        url: https://semgrep.dev/playground/r/qkT21nZ/gitlab.bandit.B609
        origin: community
  patterns:
  - pattern-either:
    - pattern-inside: os.system("...")
    - pattern-inside: os.popen("...")
    - pattern-inside: os.popen2("...")
    - pattern-inside: os.popen3("...")
    - pattern-inside: os.popen4("...")
    - pattern-inside: subprocess.$W(..., shell=True, ...)
  - pattern-regex: "(tar|chmod|chown|rsync)(.*?)\\*"
  severity: WARNING
- id: gitlab.eslint.detect-object-injection
  patterns:
  - pattern: "$O[$ARG]"
  - pattern-not: $O["..."]
  - pattern-not: "$O[($ARG : float)]"
  - pattern-not-inside: |
      $ARG = [$V];
      ...
      <... $O[$ARG] ...>;
  - pattern-not-inside: |
      $ARG = $V;
      ...
      <... $O[$ARG] ...>;
  - metavariable-regex:
      metavariable: "$ARG"
      regex: "(?![0-9]+)"
  message: Bracket object notation with user input is present, this might allow an
    attacker to access all properties of the object and even it's prototype, leading
    to possible code execution.
  languages:
  - javascript
  - typescript
  severity: WARNING
  metadata:
    cwe: 'CWE-94: Improper Control of Generation of Code (''Code Injection'')'
    primary_identifier: eslint.detect-object-injection
    secondary_identifiers:
    - name: ESLint rule ID security/detect-object-injection
      type: eslint_rule_id
      value: security/detect-object-injection
    license: MIT
    source: https://semgrep.dev/r/gitlab.eslint.detect-object-injection
    shortlink: https://sg.run/8nbQ
    semgrep.dev:
      rule:
        rule_id: NbUAnd
        version_id: rxTqor
        url: https://semgrep.dev/playground/r/rxTqor/gitlab.eslint.detect-object-injection
        origin: community
- id: gitlab.find_sec_bugs_scala.INSECURE_SMTP_SSL-1
  languages:
  - scala
  message: 'Server identity verification is disabled when making SSL connections.

    '
  metadata:
    cwe: CWE-297
    shortDescription: Improper Validation of Certificate with Host Mismatch
    primary_identifier: find_sec_bugs.INSECURE_SMTP_SSL
    secondary_identifiers:
    - name: Find Security Bugs-INSECURE_SMTP_SSL
      type: find_sec_bugs_type
      value: INSECURE_SMTP_SSL
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs_scala.INSECURE_SMTP_SSL-1
    shortlink: https://sg.run/4Nyg
    semgrep.dev:
      rule:
        rule_id: kxUPRZ
        version_id: K3Tvblo
        url: https://semgrep.dev/playground/r/K3Tvblo/gitlab.find_sec_bugs_scala.INSECURE_SMTP_SSL-1
        origin: community
  patterns:
  - pattern-either:
    - pattern-inside: |
        $E = new org.apache.commons.mail.SimpleEmail(...);
        ...
    - pattern-inside: |
        $E = new org.apache.commons.mail.Email(...);
        ...
    - pattern-inside: |
        $E = new org.apache.commons.mail.MultiPartEmail(...);
        ...
    - pattern-inside: |
        $E = new org.apache.commons.mail.HtmlEmail(...);
        ...
    - pattern-inside: |
        $E = new org.apache.commons.mail.ImageHtmlEmail(...);
        ...
  - pattern-not: |
      $E.setSSLOnConnect(true);
      ...
      $E.setSSLCheckServerIdentity(true);
  severity: ERROR
- id: gitlab.find_sec_bugs_scala.RSA_NO_PADDING-1
  languages:
  - scala
  message: |
    The software uses the RSA algorithm but does not incorporate Optimal Asymmetric
    Encryption Padding (OAEP), which might weaken the encryption.
  metadata:
    cwe: CWE-780
    shortDescription: Use of RSA Algorithm without OAEP
    primary_identifier: find_sec_bugs.RSA_NO_PADDING
    secondary_identifiers:
    - name: Find Security Bugs-RSA_NO_PADDING
      type: find_sec_bugs_type
      value: RSA_NO_PADDING
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs_scala.RSA_NO_PADDING-1
    shortlink: https://sg.run/zNvG
    semgrep.dev:
      rule:
        rule_id: JDURyA
        version_id: w8T9Je0
        url: https://semgrep.dev/playground/r/w8T9Je0/gitlab.find_sec_bugs_scala.RSA_NO_PADDING-1
        origin: community
  patterns:
  - pattern: javax.crypto.Cipher.getInstance("$ALG",...)
  - metavariable-regex:
      metavariable: "$ALG"
      regex: ".*NoPadding.*"
  severity: WARNING
- id: gitlab.find_sec_bugs_scala.SCRIPT_ENGINE_INJECTION-1.SPEL_INJECTION-1.EL_INJECTION-2.SEAM_LOG_INJECTION-1
  languages:
  - scala
  message: |
    The software constructs all or part of a code segment using externally-influenced
    input from an upstream component, but it does not neutralize or incorrectly
    neutralizes special elements that could modify the syntax or behavior of the
    intended code segment.
  metadata:
    cwe: CWE-94
    shortDescription: Improper Control of Generation of Code ('Code Injection')
    primary_identifier: find_sec_bugs.SCRIPT_ENGINE_INJECTION-1.SPEL_INJECTION-1.EL_INJECTION-2.SEAM_LOG_INJECTION-1
    secondary_identifiers:
    - name: Find Security Bugs-SCRIPT_ENGINE_INJECTION
      type: find_sec_bugs_type
      value: SCRIPT_ENGINE_INJECTION
    - name: Find Security Bugs-SPEL_INJECTION
      type: find_sec_bugs_type
      value: SPEL_INJECTION
    - name: Find Security Bugs-EL_INJECTION
      type: find_sec_bugs_type
      value: EL_INJECTION
    - name: Find Security Bugs-SEAM_LOG_INJECTION
      type: find_sec_bugs_type
      value: SEAM_LOG_INJECTION
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs_scala.SCRIPT_ENGINE_INJECTION-1.SPEL_INJECTION-1.EL_INJECTION-2.SEAM_LOG_INJECTION-1
    shortlink: https://sg.run/09nv
    semgrep.dev:
      rule:
        rule_id: bwUoOl
        version_id: WrTWob3
        url: https://semgrep.dev/playground/r/WrTWob3/gitlab.find_sec_bugs_scala.SCRIPT_ENGINE_INJECTION-1.SPEL_INJECTION-1.EL_INJECTION-2.SEAM_LOG_INJECTION-1
        origin: community
  patterns:
  - pattern: "($ENGINE: javax.script.ScriptEngine).eval($ARG)"
  - pattern-not: '($ENGINE: javax.script.ScriptEngine).eval("...")'
  severity: ERROR
- id: gitlab.find_sec_bugs_scala.SCRIPT_ENGINE_INJECTION-2
  languages:
  - scala
  message: |
    The software constructs all or part of a code segment using externally-influenced
    input from an upstream component, but it does not neutralize or incorrectly
    neutralizes special elements that could modify the syntax or behavior of the
    intended code segment.
  metadata:
    cwe: CWE-94
    shortDescription: Improper Control of Generation of Code ('Code Injection')
    primary_identifier: find_sec_bugs.SCRIPT_ENGINE_INJECTION-2
    secondary_identifiers:
    - name: Find Security Bugs-SCRIPT_ENGINE_INJECTION
      type: find_sec_bugs_type
      value: SCRIPT_ENGINE_INJECTION
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs_scala.SCRIPT_ENGINE_INJECTION-2
    shortlink: https://sg.run/K6W7
    semgrep.dev:
      rule:
        rule_id: NbURAr
        version_id: 0bTL5vK
        url: https://semgrep.dev/playground/r/0bTL5vK/gitlab.find_sec_bugs_scala.SCRIPT_ENGINE_INJECTION-2
        origin: community
  patterns:
  - pattern: "($P: org.springframework.expression.spel.standard.SpelExpressionParser).parseExpression($ARG);"
  - pattern-not: '($P: org.springframework.expression.spel.standard.SpelExpressionParser
      ).parseExpression("...");'
  severity: ERROR
- id: gitlab.find_sec_bugs_scala.UNENCRYPTED_SOCKET-1.UNENCRYPTED_SERVER_SOCKET-1
  languages:
  - scala
  message: |
    Beyond using an SSL socket, you need to make sure your use of SSLSocketFactory
    does all the appropriate certificate validation checks to make sure you are not
    subject to man-in-the-middle attacks. Please read the OWASP Transport Layer
    Protection Cheat Sheet for details on how to do this correctly.
  metadata:
    cwe: CWE-319
    shortDescription: Cleartext Transmission of Sensitive Information
    primary_identifier: find_sec_bugs.UNENCRYPTED_SOCKET-1.UNENCRYPTED_SERVER_SOCKET-1
    secondary_identifiers:
    - name: Find Security Bugs-UNENCRYPTED_SOCKET
      type: find_sec_bugs_type
      value: UNENCRYPTED_SOCKET
    - name: Find Security Bugs-UNENCRYPTED_SERVER_SOCKET
      type: find_sec_bugs_type
      value: UNENCRYPTED_SERVER_SOCKET
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs_scala.UNENCRYPTED_SOCKET-1.UNENCRYPTED_SERVER_SOCKET-1
    shortlink: https://sg.run/9eoY
    semgrep.dev:
      rule:
        rule_id: DbUypE
        version_id: ZRTQ5Lv
        url: https://semgrep.dev/playground/r/ZRTQ5Lv/gitlab.find_sec_bugs_scala.UNENCRYPTED_SOCKET-1.UNENCRYPTED_SERVER_SOCKET-1
        origin: community
  patterns:
  - pattern: new java.net.Socket(...)
  severity: WARNING
- id: gitlab.flawfinder.AddAccessAllowedAce-1
  languages:
  - c
  message: 'Make sure that you set inheritance by hand if you wish it to inherit.

    '
  metadata:
    cwe: CWE-732
    owasp: A5:2017-Broken Access Control
    shortDescription: This doesn't set the inheritance bits in the access control
      entry (ACE) header (CWE-732)
    primary_identifier: flawfinder.AddAccessAllowedAce-1
    secondary_identifiers:
    - name: Flawfinder - AddAccessAllowedAce
      type: flawfinder_func_name
      value: AddAccessAllowedAce
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.flawfinder.AddAccessAllowedAce-1
    shortlink: https://sg.run/1G7b
    semgrep.dev:
      rule:
        rule_id: 7KUpk7
        version_id: BjTXDwx
        url: https://semgrep.dev/playground/r/BjTXDwx/gitlab.flawfinder.AddAccessAllowedAce-1
        origin: community
  pattern: AddAccessAllowedAce(...)
  severity: WARNING
- id: gitlab.flawfinder.CreateProcess-1
  languages:
  - c
  message: |
    Due to how `CreateProcess` parses spaces, an attacker may be able to exploit this function
    by creating a binary with the same name that is loaded first, depending on the search path
    order.

    Ensure that quotation marks around the executable path are used, such as:
    ```
    CreateProcessA(NULL, "\"C:\\Program Files\\MyApp.exe\"", ...)
    ```
    For more information, please see MSDNs documentation at:
    https://learn.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-createprocessa#security-remarks
  metadata:
    shortDescription: Possible executable path hijacking (CreateProcess)
    cwe: CWE-78
    owasp: A1:2017-Injection
    primary_identifier: flawfinder.CreateProcess-1
    secondary_identifiers:
    - name: Flawfinder - CreateProcess
      type: flawfinder_func_name
      value: CreateProcess
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.flawfinder.CreateProcess-1
    shortlink: https://sg.run/Q4KD
    semgrep.dev:
      rule:
        rule_id: YGUQ94
        version_id: K3TvzdQ
        url: https://semgrep.dev/playground/r/K3TvzdQ/gitlab.flawfinder.CreateProcess-1
        origin: community
  pattern: CreateProcess(...)
  severity: WARNING
- id: gitlab.flawfinder.CreateProcessAsUser-1.CreateProcessWithLogon-1
  languages:
  - c
  message: |
    Due to how `CreateProcess` parses spaces, an attacker may be able to exploit this function
    by creating a binary with the same name that is loaded first, depending on the search path
    order.

    Ensure that quotation marks around the executable path are used, such as:
    ```
    CreateProcessAsUser(hToken, NULL, "\"C:\\Program Files\\MyApp.exe\"", ...)
    ```
    For more information, please see MSDNs documentation at:
    https://learn.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-createprocessasusera#security-remarks
  metadata:
    shortDescription: Possible executable path hijacking (CreateProcessAsUser/CreateProcessWithLogon)
    cwe: CWE-78
    owasp: A1:2017-Injection
    primary_identifier: flawfinder.CreateProcessAsUser-1.CreateProcessWithLogon-1
    secondary_identifiers:
    - name: Flawfinder - CreateProcessAsUser
      type: flawfinder_func_name
      value: CreateProcessAsUser
    - name: Flawfinder - CreateProcessWithLogon
      type: flawfinder_func_name
      value: CreateProcessWithLogon
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.flawfinder.CreateProcessAsUser-1.CreateProcessWithLogon-1
    shortlink: https://sg.run/34Yg
    semgrep.dev:
      rule:
        rule_id: 6JU6Pz
        version_id: qkT21kK
        url: https://semgrep.dev/playground/r/qkT21kK/gitlab.flawfinder.CreateProcessAsUser-1.CreateProcessWithLogon-1
        origin: community
  pattern-either:
  - pattern: CreateProcessAsUser(...)
  - pattern: CreateProcessWithLogon(...)
  severity: WARNING
- id: gitlab.flawfinder.EVP_des_ecb-1.EVP_des_cbc-1.EVP_des_cfb-1.EVP_des_ofb-1.EVP_desx_cbc-1
  languages:
  - c
  message: |
    The DES algorithm has not been recommended for over 15 years and was withdrawn from NIST (FIPS
    46-3) in 2005.

    Consider using libsodium's `crypto_secretbox_easy` authenticated encryption functions instead.

    For more information please see:
     https://libsodium.gitbook.io/doc/secret-key_cryptography/secretbox.

    If you must be FIPS compliant, consider using OpenSSLs AES or 3DES ciphers.
  metadata:
    shortDescription: Insecure encryption algorithm (DES)
    cwe: CWE-327
    owasp: A3:2017-Sensitive Data Exposure
    primary_identifier: flawfinder.EVP_des_ecb-1.EVP_des_cbc-1.EVP_des_cfb-1.EVP_des_ofb-1.EVP_desx_cbc-1
    secondary_identifiers:
    - name: Flawfinder - EVP_des_ecb
      type: flawfinder_func_name
      value: EVP_des_ecb
    - name: Flawfinder - EVP_des_cbc
      type: flawfinder_func_name
      value: EVP_des_cbc
    - name: Flawfinder - EVP_des_cfb
      type: flawfinder_func_name
      value: EVP_des_cfb
    - name: Flawfinder - EVP_des_ofb
      type: flawfinder_func_name
      value: EVP_des_ofb
    - name: Flawfinder - EVP_desx_cbc
      type: flawfinder_func_name
      value: EVP_desx_cbc
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.flawfinder.EVP_des_ecb-1.EVP_des_cbc-1.EVP_des_cfb-1.EVP_des_ofb-1.EVP_desx_cbc-1
    shortlink: https://sg.run/lxzL
    semgrep.dev:
      rule:
        rule_id: wdUGO7
        version_id: QkTW7oO
        url: https://semgrep.dev/playground/r/QkTW7oO/gitlab.flawfinder.EVP_des_ecb-1.EVP_des_cbc-1.EVP_des_cfb-1.EVP_des_ofb-1.EVP_desx_cbc-1
        origin: community
  pattern-either:
  - pattern: EVP_des_ecb(...)
  - pattern: EVP_des_cbc(...)
  - pattern: EVP_des_cfb(...)
  - pattern: EVP_des_ofb(...)
  - pattern: EVP_desx_cbc(...)
  severity: ERROR
- id: gitlab.flawfinder.EVP_rc4_40-1.EVP_rc2_40_cbc-1.EVP_rc2_64_cbc-1
  languages:
  - c
  message: |
    The RC4 algorithm is vulnerable to many attacks and should no longer be used for encrypting
    data streams.

    Consider using libsodium's `crypto_secretstream_xchacha20poly1305` stream cipher encryption
    functions instead. For more information please see:
    https://libsodium.gitbook.io/doc/secret-key_cryptography/secretstream

    If you must be FIPS compliant, consider using OpenSSLs AES or 3DES ciphers.
  metadata:
    shortDescription: Insecure stream cipher (RC4)
    cwe: CWE-327
    owasp: A3:2017-Sensitive Data Exposure
    primary_identifier: flawfinder.EVP_rc4_40-1.EVP_rc2_40_cbc-1.EVP_rc2_64_cbc-1
    secondary_identifiers:
    - name: Flawfinder - EVP_rc4_40
      type: flawfinder_func_name
      value: EVP_rc4_40
    - name: Flawfinder - EVP_rc2_40_cbc
      type: flawfinder_func_name
      value: EVP_rc2_40_cbc
    - name: Flawfinder - EVP_rc2_64_cbc
      type: flawfinder_func_name
      value: EVP_rc2_64_cbc
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.flawfinder.EVP_rc4_40-1.EVP_rc2_40_cbc-1.EVP_rc2_64_cbc-1
    shortlink: https://sg.run/YXxW
    semgrep.dev:
      rule:
        rule_id: x8U2ke
        version_id: 3ZTkpNN
        url: https://semgrep.dev/playground/r/3ZTkpNN/gitlab.flawfinder.EVP_rc4_40-1.EVP_rc2_40_cbc-1.EVP_rc2_64_cbc-1
        origin: community
  pattern-either:
  - pattern: EVP_rc4_40(...)
  - pattern: EVP_rc2_40_cbc(...)
  - pattern: EVP_rc2_64_cbc(...)
  severity: ERROR
- id: gitlab.flawfinder.GetTempFileName-1
  languages:
  - c
  message: |
    The `GetTempFileName` function works by generating a randomly named file, creating the file
    (if it does not exist) and then closing it. An application wishing to use this temporary file
    will need to reopen this file to begin working with it. This leads to a potential
    Time Of Check Time Of Use (TOCTOU) vulnerability, as an attacker could replace or modify
    the contents of the file prior to it being used by the application.

    Consider generating a random filename and opening the file directly in a single `CreateFile`
    or `OpenFile` call.
  metadata:
    shortDescription: Potential time of check time of use vulnerability (GetTempFileName)
    cwe: CWE-377
    owasp: A5:2017-Broken Access Control
    primary_identifier: flawfinder.GetTempFileName-1
    secondary_identifiers:
    - name: Flawfinder - GetTempFileName
      type: flawfinder_func_name
      value: GetTempFileName
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.flawfinder.GetTempFileName-1
    shortlink: https://sg.run/JjGo
    semgrep.dev:
      rule:
        rule_id: pKUw7J
        version_id: 6xTv5d4
        url: https://semgrep.dev/playground/r/6xTv5d4/gitlab.flawfinder.GetTempFileName-1
        origin: community
  pattern: GetTempFileName(...)
  severity: WARNING
- id: gitlab.flawfinder.LoadLibrary-1
  languages:
  - c
  message: |
    The `LoadLibrary` function is used to load DLLs dynamically. Depending on the filepath
    parameter,
    the OS version, and the modes set for the process prior to calling LoadLibrary, DLL hijacking
    may
    be possible. Attackers can exploit this by placing DLL files with the same name in directories
    that
    are searched before the legitimate DLL is.

    To assist in preventing against this class of vulnerability consider:
    - Specifying a fully qualified path when using LoadLibraryEx.
    - Use the `LOAD_LIBRARY_SEARCH` flags with LoadLibraryEx or with SetDefaultDllDirectories.
    - If you use SetDefaultDllDirectories, be sure to use the AddDllDirectory or SetDllDirectory
      functions to modify the list of directories.
    - Only use `SearchPath` if the `SetSearchPathMode` function is called with
      `BASE_SEARCH_PATH_ENABLE_SAFE_SEARCHMODE`. (Note: this only moves the current directory to
      the end of the SearchPath search list.)

    For more information see the security remarks section of the MSDN documentation:
    https://learn.microsoft.com/en-us/windows/win32/api/libloaderapi/nf-libloaderapi-loadlibrarya#security-remarks

    For general information securely loading dynamic link libraries, see the MSDN documentation:
    https://learn.microsoft.com/en-us/windows/win32/dlls/dynamic-link-library-security
  metadata:
    shortDescription: Potential for DLL hijacking (LoadLibrary)
    cwe: CWE-20
    owasp: A1:2017-Injection
    primary_identifier: flawfinder.LoadLibrary-1
    secondary_identifiers:
    - name: Flawfinder - LoadLibrary
      type: flawfinder_func_name
      value: LoadLibrary
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.flawfinder.LoadLibrary-1
    shortlink: https://sg.run/y6n8
    semgrep.dev:
      rule:
        rule_id: 8GUx8Y
        version_id: DkT69D9
        url: https://semgrep.dev/playground/r/DkT69D9/gitlab.flawfinder.LoadLibrary-1
        origin: community
  pattern: LoadLibrary(...)
  severity: WARNING
- id: gitlab.flawfinder.LoadLibraryEx-1
  languages:
  - c
  message: |
    The `LoadLibraryEx` function is used to load DLLs dynamically. Depending on the filepath
    parameter,
    the OS version, and the modes set for the process prior to calling LoadLibrary, DLL hijacking
    may
    be possible. Attackers can exploit this by placing DLL files with the same name in directories
    that
    are searched before the legitimate DLL is.

    To assist in preventing against this class of vulnerability consider:
    - Specifying a fully qualified path when using LoadLibraryEx.
    - Use the `LOAD_LIBRARY_SEARCH` flags with LoadLibraryEx or with SetDefaultDllDirectories.
    - If you use SetDefaultDllDirectories, be sure to use the AddDllDirectory or SetDllDirectory
      functions to modify the list of directories.
    - Only use `SearchPath` if the `SetSearchPathMode` function is called with
      `BASE_SEARCH_PATH_ENABLE_SAFE_SEARCHMODE`. (Note: this only moves the current directory to
      the end of the SearchPath search list.)

    For more information see the security remarks section of the MSDN documentation:
    https://learn.microsoft.com/en-us/windows/win32/api/libloaderapi/nf-libloaderapi-loadlibrarya#security-remarks

    For general information securely loading dynamic link libraries, see the MSDN documentation:
    https://learn.microsoft.com/en-us/windows/win32/dlls/dynamic-link-library-security
  metadata:
    shortDescription: Potential for DLL hijacking (LoadLibraryEx)
    cwe: CWE-20
    owasp: A1:2017-Injection
    primary_identifier: flawfinder.LoadLibraryEx-1
    secondary_identifiers:
    - name: Flawfinder - LoadLibraryEx
      type: flawfinder_func_name
      value: LoadLibraryEx
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.flawfinder.LoadLibraryEx-1
    shortlink: https://sg.run/rkn6
    semgrep.dev:
      rule:
        rule_id: gxUYQ3
        version_id: WrTWlvo
        url: https://semgrep.dev/playground/r/WrTWlvo/gitlab.flawfinder.LoadLibraryEx-1
        origin: community
  pattern: LoadLibraryEx(...)
  severity: WARNING
- id: gitlab.flawfinder.MultiByteToWideChar-1
  languages:
  - c
  message: |
    The input buffer is the number of bytes in the string, but the size
    of the output buffer is the number of characters. To avoid overflows, the
    application must determine the correct buffer size which depends on the data type
    the buffer receives.

    For more information see:
    https://learn.microsoft.com/en-us/windows/win32/intl/security-considerations--international-features
  metadata:
    shortDescription: Easily misused function may lead to buffer overflows
    cwe: CWE-120
    owasp: A1:2017-Injection
    primary_identifier: flawfinder.MultiByteToWideChar-1
    secondary_identifiers:
    - name: Flawfinder - MultiByteToWideChar
      type: flawfinder_func_name
      value: MultiByteToWideChar
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.flawfinder.MultiByteToWideChar-1
    shortlink: https://sg.run/N82x
    semgrep.dev:
      rule:
        rule_id: qNUb31
        version_id: 6xTv5Yy
        url: https://semgrep.dev/playground/r/6xTv5Yy/gitlab.flawfinder.MultiByteToWideChar-1
        origin: community
  pattern: MultiByteToWideChar(...)
  severity: INFO
- id: gitlab.flawfinder.RpcImpersonateClient-1.ImpersonateLoggedOnUser-1.CoImpersonateClient-1.ImpersonateNamedPipeClient-1.ImpersonateDdeClientWindow-1.ImpersonateSecurityContext-1.SetThreadToken-1
  languages:
  - c
  message: |
    These functions may be used to either drop or change account privileges. If the calls
    fail, the process will continue to run with the privileges assigned to it on start. Depending
    on
    the logic of the application, this may allow attackers to abuse the system due to privileges
    never
    being changed to a different access level.

    Always ensure return values of this function are checked to determine if the application should
    continue to operate.
  metadata:
    shortDescription: Ensure return values are checked when attempting to drop privileges
    cwe: CWE-250
    owasp: A5:2017-Broken Access Control
    primary_identifier: flawfinder.RpcImpersonateClient-1.ImpersonateLoggedOnUser-1.CoImpersonateClient-1.ImpersonateNamedPipeClient-1.ImpersonateDdeClientWindow-1.ImpersonateSecurityContext-1.SetThreadToken-1
    secondary_identifiers:
    - name: Flawfinder - RpcImpersonateClient
      type: flawfinder_func_name
      value: RpcImpersonateClient
    - name: Flawfinder - ImpersonateLoggedOnUser
      type: flawfinder_func_name
      value: ImpersonateLoggedOnUser
    - name: Flawfinder - CoImpersonateClient
      type: flawfinder_func_name
      value: CoImpersonateClient
    - name: Flawfinder - ImpersonateNamedPipeClient
      type: flawfinder_func_name
      value: ImpersonateNamedPipeClient
    - name: Flawfinder - ImpersonateDdeClientWindow
      type: flawfinder_func_name
      value: ImpersonateDdeClientWindow
    - name: Flawfinder - ImpersonateSecurityContext
      type: flawfinder_func_name
      value: ImpersonateSecurityContext
    - name: Flawfinder - SetThreadToken
      type: flawfinder_func_name
      value: SetThreadToken
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.flawfinder.RpcImpersonateClient-1.ImpersonateLoggedOnUser-1.CoImpersonateClient-1.ImpersonateNamedPipeClient-1.ImpersonateDdeClientWindow-1.ImpersonateSecurityContext-1.SetThreadToken-1
    shortlink: https://sg.run/rk96
    semgrep.dev:
      rule:
        rule_id: 0oUJjL
        version_id: l4T4rjW
        url: https://semgrep.dev/playground/r/l4T4rjW/gitlab.flawfinder.RpcImpersonateClient-1.ImpersonateLoggedOnUser-1.CoImpersonateClient-1.ImpersonateNamedPipeClient-1.ImpersonateDdeClientWindow-1.ImpersonateSecurityContext-1.SetThreadToken-1
        origin: community
  pattern-either:
  - pattern: RpcImpersonateClient(...)
  - pattern: ImpersonateLoggedOnUser(...)
  - pattern: CoImpersonateClient(...)
  - pattern: ImpersonateNamedPipeClient(...)
  - pattern: ImpersonateDdeClientWindow(...)
  - pattern: ImpersonateSecurityContext(...)
  - pattern: SetThreadToken(...)
  severity: ERROR
- id: gitlab.flawfinder.SetSecurityDescriptorDacl-1
  languages:
  - c
  message: |
    When `SetSecurityDescriptorDacl` is called with a null `pDacl` parameter and the
    `bDaclPresent` flag is `TRUE`, all access to the object is allowed. An attacker
    could set the object to Deny all, which would include even the Administrator user(s).

    Either call `SetSecurityDescriptorDacl` with bDaclPresent as `FALSE`, or supply a valid
    non-null `pDacl` parameter value.

    For more information please see:
    https://learn.microsoft.com/en-us/windows/win32/api/securitybaseapi/nf-securitybaseapi-setsecuritydescriptordacl#remarks
  metadata:
    shortDescription: Null ACL when calling SetSecurityDescriptorDacl may allow all
      access to objects
    cwe: CWE-732
    owasp: A5:2017-Broken Access Control
    primary_identifier: flawfinder.SetSecurityDescriptorDacl-1
    secondary_identifiers:
    - name: Flawfinder - SetSecurityDescriptorDacl
      type: flawfinder_func_name
      value: SetSecurityDescriptorDacl
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.flawfinder.SetSecurityDescriptorDacl-1
    shortlink: https://sg.run/brkZ
    semgrep.dev:
      rule:
        rule_id: QrUpe8
        version_id: 0bTL7AE
        url: https://semgrep.dev/playground/r/0bTL7AE/gitlab.flawfinder.SetSecurityDescriptorDacl-1
        origin: community
  pattern: SetSecurityDescriptorDacl(...)
  severity: ERROR
- id: gitlab.flawfinder.StrCat-1.StrCatA-1.StrcatW-1.lstrcatA-1.lstrcatW-1.strCatBuff-1.StrCatBuffA-1.StrCatBuffW-1.StrCatChainW-1._tccat-1._mbccat-1._ftcscat-1.StrCatN-1.StrCatNA-1.StrCatNW-1.StrNCat-1.StrNCatA-1.StrNCatW-1.lstrncat-1.lstrcatnA-1.lstrcatnW-1
  languages:
  - c
  message: |
    The `StrCat` family of functions do not guarantee the final string to be null terminated.
    Consider using one of the following alternatives: `StringCbCat`, `StringCbCatEx`,
    `StringCbCatN`, `StringCbCatNEx`, `StringCchCat`, `StringCchCatEx`, `StringCchCatN`, or
    `StringCchCatNEx`.

    For more information please see: https://learn.microsoft.com/en-us/windows/win32/api/strsafe/
  metadata:
    shortDescription: Insecure string processing function
    cwe: CWE-120
    owasp: A1:2017-Injection
    primary_identifier: flawfinder.StrCat-1.StrCatA-1.StrcatW-1.lstrcatA-1.lstrcatW-1.strCatBuff-1.StrCatBuffA-1.StrCatBuffW-1.StrCatChainW-1._tccat-1._mbccat-1._ftcscat-1.StrCatN-1.StrCatNA-1.StrCatNW-1.StrNCat-1.StrNCatA-1.StrNCatW-1.lstrncat-1.lstrcatnA-1.lstrcatnW-1
    secondary_identifiers:
    - name: Flawfinder - StrCat
      type: flawfinder_func_name
      value: StrCat
    - name: Flawfinder - StrCatA
      type: flawfinder_func_name
      value: StrCatA
    - name: Flawfinder - StrcatW
      type: flawfinder_func_name
      value: StrcatW
    - name: Flawfinder - lstrcatA
      type: flawfinder_func_name
      value: lstrcatA
    - name: Flawfinder - lstrcatW
      type: flawfinder_func_name
      value: lstrcatW
    - name: Flawfinder - strCatBuff
      type: flawfinder_func_name
      value: strCatBuff
    - name: Flawfinder - StrCatBuffA
      type: flawfinder_func_name
      value: StrCatBuffA
    - name: Flawfinder - StrCatBuffW
      type: flawfinder_func_name
      value: StrCatBuffW
    - name: Flawfinder - StrCatChainW
      type: flawfinder_func_name
      value: StrCatChainW
    - name: Flawfinder - _tccat
      type: flawfinder_func_name
      value: _tccat
    - name: Flawfinder - _mbccat
      type: flawfinder_func_name
      value: _mbccat
    - name: Flawfinder - _ftcscat
      type: flawfinder_func_name
      value: _ftcscat
    - name: Flawfinder - StrCatN
      type: flawfinder_func_name
      value: StrCatN
    - name: Flawfinder - StrCatNA
      type: flawfinder_func_name
      value: StrCatNA
    - name: Flawfinder - StrCatNW
      type: flawfinder_func_name
      value: StrCatNW
    - name: Flawfinder - StrNCat
      type: flawfinder_func_name
      value: StrNCat
    - name: Flawfinder - StrNCatA
      type: flawfinder_func_name
      value: StrNCatA
    - name: Flawfinder - StrNCatW
      type: flawfinder_func_name
      value: StrNCatW
    - name: Flawfinder - lstrncat
      type: flawfinder_func_name
      value: lstrncat
    - name: Flawfinder - lstrcatnA
      type: flawfinder_func_name
      value: lstrcatnA
    - name: Flawfinder - lstrcatnW
      type: flawfinder_func_name
      value: lstrcatnW
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.flawfinder.StrCat-1.StrCatA-1.StrcatW-1.lstrcatA-1.lstrcatW-1.strCatBuff-1.StrCatBuffA-1.StrCatBuffW-1.StrCatChainW-1._tccat-1._mbccat-1._ftcscat-1.StrCatN-1.StrCatNA-1.StrCatNW-1.StrNCat-1.StrNCatA-1.StrNCatW-1.lstrncat-1.lstrcatnA-1.lstrcatnW-1
    shortlink: https://sg.run/kkoX
    semgrep.dev:
      rule:
        rule_id: lBUzG9
        version_id: o5TgyNZ
        url: https://semgrep.dev/playground/r/o5TgyNZ/gitlab.flawfinder.StrCat-1.StrCatA-1.StrcatW-1.lstrcatA-1.lstrcatW-1.strCatBuff-1.StrCatBuffA-1.StrCatBuffW-1.StrCatChainW-1._tccat-1._mbccat-1._ftcscat-1.StrCatN-1.StrCatNA-1.StrCatNW-1.StrNCat-1.StrNCatA-1.StrNCatW-1.lstrncat-1.lstrcatnA-1.lstrcatnW-1
        origin: community
  pattern-either:
  - pattern: StrCat(...)
  - pattern: StrCatA(...)
  - pattern: StrcatW(...)
  - pattern: lstrcatA(...)
  - pattern: lstrcatW(...)
  - pattern: strCatBuff(...)
  - pattern: StrCatBuffA(...)
  - pattern: StrCatBuffW(...)
  - pattern: StrCatChainW(...)
  - pattern: _tccat(...)
  - pattern: _mbccat(...)
  - pattern: _ftcscat(...)
  - pattern: StrCatN(...)
  - pattern: StrCatNA(...)
  - pattern: StrCatNW(...)
  - pattern: StrNCat(...)
  - pattern: StrNCatA(...)
  - pattern: StrNCatW(...)
  - pattern: lstrncat(...)
  - pattern: lstrcatnA(...)
  - pattern: lstrcatnW(...)
  severity: ERROR
- id: gitlab.flawfinder.access-1
  languages:
  - c
  message: |
    Usage of the `access` function call hints at a potential Time Of Check Time Of Use (TOCTOU)
    vulnerability. Using the `access` function to check if a file exists and is readable before
    opening it, an attacker can create a race condition between the `access` call and
    opening the file. The attacker could replace the file with a different one or modify its
    content between the time the `access` function is called and the file is opened, thus
    bypassing the permission check.

    Call `setuid` to drop privileges on the process prior to opening any files. Instead of using
    `access`, use `lstat` prior to opening the file and confirm the attributes are correct. Then
    use `open` to get a file descriptor to this file. Call `fstat` on the `open` file descriptor
    to confirm that `st_dev` and `st_ino` are equal between the two. If they are, it is safe to
    read and operate on the file's contents.

    For more information please see:
    https://wiki.sei.cmu.edu/confluence/display/c/FIO45-C.+Avoid+TOCTOU+race+conditions+while+accessing+files
  metadata:
    shortDescription: Potential time of check time of use vulnerability (access)
    cwe: CWE-362
    owasp: A5:2017-Broken Access Control
    primary_identifier: flawfinder.access-1
    secondary_identifiers:
    - name: Flawfinder - access
      type: flawfinder_func_name
      value: access
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.flawfinder.access-1
    shortlink: https://sg.run/ZkX7
    semgrep.dev:
      rule:
        rule_id: BYU731
        version_id: RGTDQ5R
        url: https://semgrep.dev/playground/r/RGTDQ5R/gitlab.flawfinder.access-1
        origin: community
  pattern: access(...)
  severity: ERROR
- id: gitlab.flawfinder.atoi-1.atol-1._wtoi-1._wtoi64-1
  languages:
  - c
  message: |
    The `atoi` family of functions can potentially overflow or underflow integer values. Consider
    using `stroul` instead.

    For more information please see:
    https://wiki.sei.cmu.edu/confluence/display/c/ERR34-C.+Detect+errors+when+converting+a+string+to+a+number
  metadata:
    shortDescription: Possible integer overflow or underflow
    cwe: CWE-190
    owasp: A1:2017-Injection
    primary_identifier: flawfinder.atoi-1.atol-1._wtoi-1._wtoi64-1
    secondary_identifiers:
    - name: Flawfinder - atoi
      type: flawfinder_func_name
      value: atoi
    - name: Flawfinder - atol
      type: flawfinder_func_name
      value: atol
    - name: Flawfinder - _wtoi
      type: flawfinder_func_name
      value: _wtoi
    - name: Flawfinder - _wtoi64
      type: flawfinder_func_name
      value: _wtoi64
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.flawfinder.atoi-1.atol-1._wtoi-1._wtoi64-1
    shortlink: https://sg.run/jk6Z
    semgrep.dev:
      rule:
        rule_id: EwUQzn
        version_id: A8T9rA9
        url: https://semgrep.dev/playground/r/A8T9rA9/gitlab.flawfinder.atoi-1.atol-1._wtoi-1._wtoi64-1
        origin: community
  pattern-either:
  - pattern: atoi(...)
  - pattern: atol(...)
  - pattern: _wtoi(...)
  - pattern: _wtoi64(...)
  severity: INFO
- id: gitlab.flawfinder.chmod-1
  languages:
  - c
  message: |
    Usage of the `chmod` function call hints at a potential Time Of Check Time Of Use (TOCTOU)
    vulnerability. An attacker may be able to modify the file being specified by the `chmod`
    function prior to the `chmod` function being called. Since `chmod` will resolve symbolic links,
    an attacker may be able to exploit this fact to have files outside of their control modified.

    It is recommended that the `fchmod` function be used instead since this function takes
    a file descriptor instead of a file. Ensure the opened file descriptor is pointing to
    the correct file or directory prior to executing `fchmod` or any other file based operations.

    For more information please see:
    https://wiki.sei.cmu.edu/confluence/display/c/FIO01-C.+Be+careful+using+functions+that+use+file+names+for+identification
  metadata:
    shortDescription: Potential time of check time of use vulnerability (chmod)
    cwe: CWE-362
    owasp: A5:2017-Broken Access Control
    primary_identifier: flawfinder.chmod-1
    secondary_identifiers:
    - name: Flawfinder - chmod
      type: flawfinder_func_name
      value: chmod
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.flawfinder.chmod-1
    shortlink: https://sg.run/EOe8
    semgrep.dev:
      rule:
        rule_id: WAUP43
        version_id: A8T9rAg
        url: https://semgrep.dev/playground/r/A8T9rAg/gitlab.flawfinder.chmod-1
        origin: community
  pattern: chmod(...)
  severity: ERROR
- id: gitlab.flawfinder.chown-1
  languages:
  - c
  message: |
    Usage of the `chown` function call hints at a potential Time Of Check Time Of Use (TOCTOU)
    vulnerability. An attacker may be able to modify the file being specified by the `chmod`
    function prior to the `chown` function being called. Since `chown` will resolve symbolic links,
    an attacker may be able to exploit this fact to have files outside of their control modified.

    It is recommended that the `fchown` or the `lchown` functions be used instead. The `fchown`
    function takes a file descriptor instead of a file. The `lchown` function does not follow
    symbolic links. Ensure the opened file descriptor is pointing to the correct file or
    directory prior to executing `fchown` or any other file based operations.

    For more information please see:
    https://wiki.sei.cmu.edu/confluence/display/c/FIO01-C.+Be+careful+using+functions+that+use+file+names+for+identification
  metadata:
    shortDescription: Potential time of check time of use vulnerability (chown)
    cwe: CWE-362
    owasp: A5:2017-Broken Access Control
    primary_identifier: flawfinder.chown-1
    secondary_identifiers:
    - name: Flawfinder - chown
      type: flawfinder_func_name
      value: chown
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.flawfinder.chown-1
    shortlink: https://sg.run/7Gpv
    semgrep.dev:
      rule:
        rule_id: 0oUJPK
        version_id: BjTXDwb
        url: https://semgrep.dev/playground/r/BjTXDwb/gitlab.flawfinder.chown-1
        origin: community
  pattern: chown(...)
  severity: ERROR
- id: gitlab.flawfinder.crypt-1.crypt_r-1
  languages:
  - c
  message: |
    The crypt functions are not recommended due to the significantly small
    key space. Modern hardware can crack crypt produced passwords relatively quickly.

    Consider using the Argon2id password hashing algorithm provided by libsodium.
    For more information please see: https://libsodium.gitbook.io/doc/password_hashing.
  metadata:
    shortDescription: Insecure hashing algorithm
    cwe: CWE-327
    owasp: A3:2017-Sensitive Data Exposure
    primary_identifier: flawfinder.crypt-1.crypt_r-1
    secondary_identifiers:
    - name: Flawfinder - crypt
      type: flawfinder_func_name
      value: crypt
    - name: Flawfinder - crypt_r
      type: flawfinder_func_name
      value: crypt_r
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.flawfinder.crypt-1.crypt_r-1
    shortlink: https://sg.run/657w
    semgrep.dev:
      rule:
        rule_id: OrUD57
        version_id: 44TRAOn
        url: https://semgrep.dev/playground/r/44TRAOn/gitlab.flawfinder.crypt-1.crypt_r-1
        origin: community
  pattern-either:
  - pattern: crypt(...)
  - pattern: crypt_r(...)
  severity: ERROR
- id: gitlab.flawfinder.cuserid-1
  languages:
  - c
  message: |
    `cuserid()` is poorly defined (e.g., some systems use the effective
    UID, like Linux, while others like System V use the real UID). Therefore, you can't trust
    what it does. The cuserid function was included in the 1988 version of POSIX, but removed
    from the 1990 version.  Also, if passed a non-null parameter, there's a risk of a buffer
    overflow if the passed-in buffer is not at least `L_cuserid` characters long.

    Use `getpwuid(geteuid())` and extract the desired information instead.

    For more information please see: https://linux.die.net/man/3/getpwuid
  metadata:
    shortDescription: Usage of deprecated function (cuserid)
    cwe: CWE-120
    primary_identifier: flawfinder.cuserid-1
    secondary_identifiers:
    - name: Flawfinder - cuserid
      type: flawfinder_func_name
      value: cuserid
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.flawfinder.cuserid-1
    shortlink: https://sg.run/kkgX
    semgrep.dev:
      rule:
        rule_id: 4bU20k
        version_id: K3TvzdY
        url: https://semgrep.dev/playground/r/K3TvzdY/gitlab.flawfinder.cuserid-1
        origin: community
  pattern: cuserid(...)
  severity: ERROR
- id: gitlab.flawfinder.drand48-1.erand48-1.jrand48-1.lcong48-1.lrand48-1.mrand48-1.nrand48-1.random-1.seed48-1.setstate-1.srand-1.strfry-1.srandom-1.g_rand_boolean-1.g_rand_int-1.g_rand_int_range-1.g_rand_double-1.g_rand_double_range-1.g_random_boolean-1.g_random_int-1.g_random_int_range-1.g_random_double-1.g_random_double_range-1
  languages:
  - c
  message: |
    The detected function is not sufficient at generating security-related random numbers,
    such as those used in key and nonce creation. Consider using the libsodium library's
    `randombytes_random` function instead. More information on libsodium's random number
    generators can be found here: https://libsodium.gitbook.io/doc/generating_random_data.

    If FIPS validation is required, consider using OpenSSLs `RAND_bytes` family of functions after
    enabling the `FIPS_mode_set`.

    For more information on OpenSSL random numbers please see:
    https://wiki.openssl.org/index.php/Random_Numbers
  metadata:
    shortDescription: Usage of insufficient random number generators
    cwe: CWE-327
    owasp: A3:2017-Sensitive Data Exposure
    primary_identifier: flawfinder.drand48-1.erand48-1.jrand48-1.lcong48-1.lrand48-1.mrand48-1.nrand48-1.random-1.seed48-1.setstate-1.srand-1.strfry-1.srandom-1.g_rand_boolean-1.g_rand_int-1.g_rand_int_range-1.g_rand_double-1.g_rand_double_range-1.g_random_boolean-1.g_random_int-1.g_random_int_range-1.g_random_double-1.g_random_double_range-1
    secondary_identifiers:
    - name: Flawfinder - drand48
      type: flawfinder_func_name
      value: drand48
    - name: Flawfinder - erand48
      type: flawfinder_func_name
      value: erand48
    - name: Flawfinder - jrand48
      type: flawfinder_func_name
      value: jrand48
    - name: Flawfinder - lcong48
      type: flawfinder_func_name
      value: lcong48
    - name: Flawfinder - lrand48
      type: flawfinder_func_name
      value: lrand48
    - name: Flawfinder - mrand48
      type: flawfinder_func_name
      value: mrand48
    - name: Flawfinder - nrand48
      type: flawfinder_func_name
      value: nrand48
    - name: Flawfinder - random
      type: flawfinder_func_name
      value: random
    - name: Flawfinder - seed48
      type: flawfinder_func_name
      value: seed48
    - name: Flawfinder - setstate
      type: flawfinder_func_name
      value: setstate
    - name: Flawfinder - srand
      type: flawfinder_func_name
      value: srand
    - name: Flawfinder - strfry
      type: flawfinder_func_name
      value: strfry
    - name: Flawfinder - srandom
      type: flawfinder_func_name
      value: srandom
    - name: Flawfinder - g_rand_boolean
      type: flawfinder_func_name
      value: g_rand_boolean
    - name: Flawfinder - g_rand_int
      type: flawfinder_func_name
      value: g_rand_int
    - name: Flawfinder - g_rand_int_range
      type: flawfinder_func_name
      value: g_rand_int_range
    - name: Flawfinder - g_rand_double
      type: flawfinder_func_name
      value: g_rand_double
    - name: Flawfinder - g_rand_double_range
      type: flawfinder_func_name
      value: g_rand_double_range
    - name: Flawfinder - g_random_boolean
      type: flawfinder_func_name
      value: g_random_boolean
    - name: Flawfinder - g_random_int
      type: flawfinder_func_name
      value: g_random_int
    - name: Flawfinder - g_random_int_range
      type: flawfinder_func_name
      value: g_random_int_range
    - name: Flawfinder - g_random_double
      type: flawfinder_func_name
      value: g_random_double
    - name: Flawfinder - g_random_double_range
      type: flawfinder_func_name
      value: g_random_double_range
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.flawfinder.drand48-1.erand48-1.jrand48-1.lcong48-1.lrand48-1.mrand48-1.nrand48-1.random-1.seed48-1.setstate-1.srand-1.strfry-1.srandom-1.g_rand_boolean-1.g_rand_int-1.g_rand_int_range-1.g_rand_double-1.g_rand_double_range-1.g_random_boolean-1.g_random_int-1.g_random_int_range-1.g_random_double-1.g_random_double_range-1
    shortlink: https://sg.run/grno
    semgrep.dev:
      rule:
        rule_id: lBUzno
        version_id: 0bTL7Aq
        url: https://semgrep.dev/playground/r/0bTL7Aq/gitlab.flawfinder.drand48-1.erand48-1.jrand48-1.lcong48-1.lrand48-1.mrand48-1.nrand48-1.random-1.seed48-1.setstate-1.srand-1.strfry-1.srandom-1.g_rand_boolean-1.g_rand_int-1.g_rand_int_range-1.g_rand_double-1.g_rand_double_range-1.g_random_boolean-1.g_random_int-1.g_random_int_range-1.g_random_double-1.g_random_double_range-1
        origin: community
  pattern-either:
  - pattern: drand48(...)
  - pattern: erand48(...)
  - pattern: jrand48(...)
  - pattern: lcong48(...)
  - pattern: lrand48(...)
  - pattern: mrand48(...)
  - pattern: nrand48(...)
  - pattern: random(...)
  - pattern: seed48(...)
  - pattern: setstate(...)
  - pattern: srand(...)
  - pattern: strfry(...)
  - pattern: srandom(...)
  - pattern: g_rand_boolean(...)
  - pattern: g_rand_int(...)
  - pattern: g_rand_int_range(...)
  - pattern: g_rand_double(...)
  - pattern: g_rand_double_range(...)
  - pattern: g_random_boolean(...)
  - pattern: g_random_int(...)
  - pattern: g_random_int_range(...)
  - pattern: g_random_double(...)
  - pattern: g_random_double_range(...)
  - pattern-regex: "(long|short|double|int|float|void)\\s(\\*|)(\\s|)(seed48|lcong48)(\\(.*\\))\\;"
  severity: WARNING
- id: gitlab.flawfinder.equal-1.mismatch-1.is_permutation-1
  languages:
  - c
  message: |
    This function is often discouraged by most C++ coding standards in favor of its safer
    alternatives provided since C++14. Consider using a form of this function:
    (std::equal, std::mismatch or std::is_permutation) that checks the second iterator
    before potentially reading past its bounds.

    For more information please see: https://en.cppreference.com/w/cpp/algorithm
  metadata:
    shortDescription: Function does not check the second iterator for over-read conditions
    cwe: CWE-126
    primary_identifier: flawfinder.equal-1.mismatch-1.is_permutation-1
    secondary_identifiers:
    - name: Flawfinder - equal
      type: flawfinder_func_name
      value: equal
    - name: Flawfinder - mismatch
      type: flawfinder_func_name
      value: mismatch
    - name: Flawfinder - is_permutation
      type: flawfinder_func_name
      value: is_permutation
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.flawfinder.equal-1.mismatch-1.is_permutation-1
    shortlink: https://sg.run/xewe
    semgrep.dev:
      rule:
        rule_id: JDUQ8Q
        version_id: zyTKA48
        url: https://semgrep.dev/playground/r/zyTKA48/gitlab.flawfinder.equal-1.mismatch-1.is_permutation-1
        origin: community
  pattern-either:
  - pattern: equal(...)
  - pattern: mismatch(...)
  - pattern: is_permutation(...)
  severity: INFO
- id: gitlab.flawfinder.execl-1.execlp-1.execle-1.execv-1.execvp-1.popen-1.WinExec-1.ShellExecute-1
  languages:
  - c
  message: |
    It is generally not recommended to call out to the operating system to execute commands.
    When the application is executing file system based commands, user input should never be used
    in
    constructing commands or command arguments. If possible, determine if a library can be used
    instead to provide the same functionality. Otherwise, consider hard coding both the command
    and arguments to be used, or at the very least restricting which arguments can be passed
    to the command execution function.

    Please see the compliant solutions in the following page:
    https://wiki.sei.cmu.edu/confluence/pages/viewpage.action?pageId=87152177
  metadata:
    shortDescription: Potential for OS command injection
    cwe: CWE-78
    owasp: A1:2017-Injection
    primary_identifier: flawfinder.execl-1.execlp-1.execle-1.execv-1.execvp-1.popen-1.WinExec-1.ShellExecute-1
    secondary_identifiers:
    - name: Flawfinder - execl
      type: flawfinder_func_name
      value: execl
    - name: Flawfinder - execlp
      type: flawfinder_func_name
      value: execlp
    - name: Flawfinder - execle
      type: flawfinder_func_name
      value: execle
    - name: Flawfinder - execv
      type: flawfinder_func_name
      value: execv
    - name: Flawfinder - execvp
      type: flawfinder_func_name
      value: execvp
    - name: Flawfinder - popen
      type: flawfinder_func_name
      value: popen
    - name: Flawfinder - WinExec
      type: flawfinder_func_name
      value: WinExec
    - name: Flawfinder - ShellExecute
      type: flawfinder_func_name
      value: ShellExecute
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.flawfinder.execl-1.execlp-1.execle-1.execv-1.execvp-1.popen-1.WinExec-1.ShellExecute-1
    shortlink: https://sg.run/4P6g
    semgrep.dev:
      rule:
        rule_id: oqUr85
        version_id: l4T4r7e
        url: https://semgrep.dev/playground/r/l4T4r7e/gitlab.flawfinder.execl-1.execlp-1.execle-1.execv-1.execvp-1.popen-1.WinExec-1.ShellExecute-1
        origin: community
  pattern-either:
  - pattern: execl(...)
  - pattern: execlp(...)
  - pattern: execle(...)
  - pattern: execv(...)
  - pattern: execvp(...)
  - pattern: popen(...)
  - pattern: WinExec(...)
  - pattern: ShellExecute(...)
  severity: ERROR
- id: gitlab.flawfinder.fopen-1.open-1
  languages:
  - c
  message: |
    Usage of the `open` family of functions may hint at a potential Time Of Check Time Of Use
    (TOCTOU)
    vulnerability. An attacker may be able to modify the file being specified by the `open`
    function prior to the `open` function being called.

    Prior to calling `open`, use `lstat` to open the file and confirm the attributes
    are correct. Then use `open` to get a file descriptor to this file. Call `fstat` on the
    `open` file descriptor to confirm that `st_dev` and `st_ino` are equal between the two.
    If they are, it is safe to read and operate on the file's contents.

    For more information please see:
    https://wiki.sei.cmu.edu/confluence/display/c/FIO45-C.+Avoid+TOCTOU+race+conditions+while+accessing+files
  metadata:
    shortDescription: Potential time of check time of use vulnerability (open/fopen)
    cwe: CWE-362
    owasp: A5:2017-Broken Access Control
    primary_identifier: flawfinder.fopen-1.open-1
    secondary_identifiers:
    - name: Flawfinder - fopen
      type: flawfinder_func_name
      value: fopen
    - name: Flawfinder - open
      type: flawfinder_func_name
      value: open
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.flawfinder.fopen-1.open-1
    shortlink: https://sg.run/w1nx
    semgrep.dev:
      rule:
        rule_id: PeUBPk
        version_id: qkT21kX
        url: https://semgrep.dev/playground/r/qkT21kX/gitlab.flawfinder.fopen-1.open-1
        origin: community
  pattern-either:
  - pattern: fopen(...)
  - pattern: open(...)
  severity: INFO
- id: gitlab.flawfinder.fprintf-1.vfprintf-1._ftprintf-1._vftprintf-1.fwprintf-1.fvwprintf-1
  languages:
  - c
  message: |
    Format string vulnerabilities allow an attacker to read or in some cases,
    potentially write data to
    and from locations in the processes' memory. To prevent against format
    string attacks, do not allow
    users or un-validated input to provide the format specification.
    Consider using a constant for the format specification, or only allow specific
    characters to be provided to the format argument for the `fprintf` family of functions.

    For more information please see: https://linux.die.net/man/3/fprintf

    For more information on format string attacks please see OWASP's attack
    guide: https://owasp.org/www-community/attacks/Format_string_attack
  metadata:
    shortDescription: Potential format string vulnerability
    cwe: CWE-134
    owasp: A1:2017-Injection
    primary_identifier: flawfinder.fprintf-1.vfprintf-1._ftprintf-1._vftprintf-1.fwprintf-1.fvwprintf-1
    secondary_identifiers:
    - name: Flawfinder - fprintf
      type: flawfinder_func_name
      value: fprintf
    - name: Flawfinder - vfprintf
      type: flawfinder_func_name
      value: vfprintf
    - name: Flawfinder - _ftprintf
      type: flawfinder_func_name
      value: _ftprintf
    - name: Flawfinder - _vftprintf
      type: flawfinder_func_name
      value: _vftprintf
    - name: Flawfinder - fwprintf
      type: flawfinder_func_name
      value: fwprintf
    - name: Flawfinder - fvwprintf
      type: flawfinder_func_name
      value: fvwprintf
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.flawfinder.fprintf-1.vfprintf-1._ftprintf-1._vftprintf-1.fwprintf-1.fvwprintf-1
    shortlink: https://sg.run/owX7
    semgrep.dev:
      rule:
        rule_id: eqUpJj
        version_id: PkTJW6p
        url: https://semgrep.dev/playground/r/PkTJW6p/gitlab.flawfinder.fprintf-1.vfprintf-1._ftprintf-1._vftprintf-1.fwprintf-1.fvwprintf-1
        origin: community
  pattern-either:
  - patterns:
    - pattern: fprintf($FD, $FMT, ...)
    - pattern-not: fprintf($FD, "...", ...)
  - patterns:
    - pattern: vfprintf($FMT, $ARGS, ...)
    - pattern-not: vfprintf("...", $ARGS, ...)
  - patterns:
    - pattern: _ftprintf($FD, $FMT, ...)
    - pattern-not: _ftprintf($FD, "...", ...)
  - patterns:
    - pattern: fwprintf($FD, $FMT, ...)
    - pattern-not: fwprintf($FD, "...", ...)
  - patterns:
    - pattern: fvwprintf($FD, $FMT, ...)
    - pattern-not: fvwprintf($FD, "...", ...)
  severity: ERROR
- id: gitlab.flawfinder.fscanf-1.sscanf-1.vsscanf-1.vfscanf-1._ftscanf-1.fwscanf-1.vfwscanf-1.vswscanf-1
  languages:
  - c
  message: |
    Format specifiers can take optional field widths, which should be
    used to limit how many characters are copied into the target buffer.

    Example:
    ```
      const char str[20] = "AAAAAAAAAAAAAAAAAAA";
      char buf[11] = {0};
      sscanf(str, "%10s", &buf); // buf = AAAAAAAAAA\0
    ```
  metadata:
    shortDescription: sscanf() functions may allow format string based overflows
    cwe: CWE-120
    owasp: A1:2017-Injection
    primary_identifier: flawfinder.fscanf-1.sscanf-1.vsscanf-1.vfscanf-1._ftscanf-1.fwscanf-1.vfwscanf-1.vswscanf-1
    secondary_identifiers:
    - name: Flawfinder - fscanf
      type: flawfinder_func_name
      value: fscanf
    - name: Flawfinder - sscanf
      type: flawfinder_func_name
      value: sscanf
    - name: Flawfinder - vsscanf
      type: flawfinder_func_name
      value: vsscanf
    - name: Flawfinder - vfscanf
      type: flawfinder_func_name
      value: vfscanf
    - name: Flawfinder - _ftscanf
      type: flawfinder_func_name
      value: _ftscanf
    - name: Flawfinder - fwscanf
      type: flawfinder_func_name
      value: fwscanf
    - name: Flawfinder - vfwscanf
      type: flawfinder_func_name
      value: vfwscanf
    - name: Flawfinder - vswscanf
      type: flawfinder_func_name
      value: vswscanf
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.flawfinder.fscanf-1.sscanf-1.vsscanf-1.vfscanf-1._ftscanf-1.fwscanf-1.vfwscanf-1.vswscanf-1
    shortlink: https://sg.run/O8Xe
    semgrep.dev:
      rule:
        rule_id: 5rU8bL
        version_id: pZT16WL
        url: https://semgrep.dev/playground/r/pZT16WL/gitlab.flawfinder.fscanf-1.sscanf-1.vsscanf-1.vfscanf-1._ftscanf-1.fwscanf-1.vfwscanf-1.vswscanf-1
        origin: community
  pattern-either:
  - pattern: fscanf(...)
  - pattern: sscanf(...)
  - pattern: vsscanf(...)
  - pattern: vfscanf(...)
  - pattern: _ftscanf(...)
  - pattern: fwscanf(...)
  - pattern: vfwscanf(...)
  - pattern: vswscanf(...)
  severity: ERROR
- id: gitlab.flawfinder.g_get_home_dir-1
  languages:
  - c
  message: |
    This function is synonymous with `getenv("HOME")` and should be treated
    as untrusted input as it could be modified by an attacker. Possible risks
    include:

    - The value being too large and causing buffer overflows
    - Files under the attacker's control being used maliciously
    - Files outside of an attacker's control becoming accessible, depending on
    access privileges.
  metadata:
    shortDescription: Possible use of untrusted environment variable
    cwe: CWE-20
    owasp: A1:2017-Injection
    primary_identifier: flawfinder.g_get_home_dir-1
    secondary_identifiers:
    - name: Flawfinder - g_get_home_dir
      type: flawfinder_func_name
      value: g_get_home_dir
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.flawfinder.g_get_home_dir-1
    shortlink: https://sg.run/eK0X
    semgrep.dev:
      rule:
        rule_id: GdUZpz
        version_id: 2KTzQqv
        url: https://semgrep.dev/playground/r/2KTzQqv/gitlab.flawfinder.g_get_home_dir-1
        origin: community
  pattern: g_get_home_dir(...)
  severity: WARNING
- id: gitlab.flawfinder.g_get_tmp_dir-1
  languages:
  - c
  message: |
    This function is synonymous with `getenv("TMP")` and should be treated
    as untrusted input as it could be modified by an attacker. Possible risks
    include:

    - The value being too large and causing buffer overflows
    - Files under the attacker's control being used maliciously
    - Files outside of an attacker's control becoming accessible, depending on
    access privileges.
  metadata:
    shortDescription: Possible use of untrusted environment variable
    cwe: CWE-20
    owasp: A1:2017-Injection
    primary_identifier: flawfinder.g_get_tmp_dir-1
    secondary_identifiers:
    - name: Flawfinder - g_get_tmp_dir
      type: flawfinder_func_name
      value: g_get_tmp_dir
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.flawfinder.g_get_tmp_dir-1
    shortlink: https://sg.run/v2NX
    semgrep.dev:
      rule:
        rule_id: ReUojK
        version_id: X0TQw94
        url: https://semgrep.dev/playground/r/X0TQw94/gitlab.flawfinder.g_get_tmp_dir-1
        origin: community
  pattern: g_get_tmp_dir(...)
  severity: WARNING
- id: gitlab.flawfinder.getenv-1.curl_getenv-1
  languages:
  - c
  message: |
    This function's return value should be treated as untrusted input as it could be
    modified by an attacker. Possible risks include:

    - The value being too large and causing buffer overflows
    - Files under the attacker's control being used maliciously
    - Files outside of an attacker's control becoming accessible, depending on
    access privileges.
  metadata:
    shortDescription: Possible use of untrusted environment variable
    cwe: CWE-20
    owasp: A1:2017-Injection
    primary_identifier: flawfinder.getenv-1.curl_getenv-1
    secondary_identifiers:
    - name: Flawfinder - getenv
      type: flawfinder_func_name
      value: getenv
    - name: Flawfinder - curl_getenv
      type: flawfinder_func_name
      value: curl_getenv
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.flawfinder.getenv-1.curl_getenv-1
    shortlink: https://sg.run/ZkO7
    semgrep.dev:
      rule:
        rule_id: BYU761
        version_id: jQTg6x1
        url: https://semgrep.dev/playground/r/jQTg6x1/gitlab.flawfinder.getenv-1.curl_getenv-1
        origin: community
  pattern-either:
  - pattern: getenv(...)
  - pattern: curl_getenv(...)
  severity: WARNING
- id: gitlab.flawfinder.getlogin-1
  languages:
  - c
  message: |
    The `getlogin` function suffers from many bugs or unknown behaviors depending on the
    system. Often, it gives only the first 8 characters of the login name. The user
    currently logged in on the controlling TTY of our program does not necessarily mean
    it is the user who started the process.

    Use getpwuid(geteuid()) and extract the desired information instead.

    For more information please see: https://linux.die.net/man/3/getpwuid
  metadata:
    shortDescription: Usage of deprecated function (getlogin)
    cwe: CWE-807
    primary_identifier: flawfinder.getlogin-1
    secondary_identifiers:
    - name: Flawfinder - getlogin
      type: flawfinder_func_name
      value: getlogin
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.flawfinder.getlogin-1
    shortlink: https://sg.run/xene
    semgrep.dev:
      rule:
        rule_id: JDUQ9Q
        version_id: l4T4r7W
        url: https://semgrep.dev/playground/r/l4T4r7W/gitlab.flawfinder.getlogin-1
        origin: community
  pattern: getlogin(...)
  severity: ERROR
- id: gitlab.flawfinder.getpass-1
  languages:
  - c
  message: |
    This function is obsolete and not portable. It was in SUSv2 but removed by POSIX.2. What
    it does exactly varies considerably between systems, particularly in where its prompt is
    displayed and where it gets its data. Some systems will write to stderr instead of stdout.
    Some will read from stdin if it can not be read from /dev/tty. In some systems the
    buffer is static and limited to 127 characters, meaning the full password may not be returned
    properly.

    If you want to read input without terminal echoing enabled, see the description of the ECHO
    flag
    in the termios manual pager. If you ever read passwords from a terminal, be sure to zero the
    password as soon as possible, to avoid leaving the cleartext password visible in the
    process' address space.
  metadata:
    shortDescription: Usage of deprecated function (getpass)
    cwe: CWE-20
    primary_identifier: flawfinder.getpass-1
    secondary_identifiers:
    - name: Flawfinder - getpass
      type: flawfinder_func_name
      value: getpass
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.flawfinder.getpass-1
    shortlink: https://sg.run/O8We
    semgrep.dev:
      rule:
        rule_id: 5rU8gL
        version_id: YDTp6Jl
        url: https://semgrep.dev/playground/r/YDTp6Jl/gitlab.flawfinder.getpass-1
        origin: community
  pattern: getpass(...)
  severity: ERROR
- id: gitlab.flawfinder.getpw-1
  languages:
  - c
  message: |
    The getpw() function is dangerous as it may overflow the provided
    buffer when reading from the `/etc/passwd` file.  While the passwd file
    is not generally writeable, there are no protections offered by this function
    to protect from reading past the bounds of the destination buffer. This function
    is obsoleted by `getpwuid`.

    For more information please see: https://linux.die.net/man/3/getpwuid
  metadata:
    shortDescription: Use of deprecated function (getpwd)
    cwe: CWE-120
    owasp: A1:2017-Injection
    primary_identifier: flawfinder.getpw-1
    secondary_identifiers:
    - name: Flawfinder - getpw
      type: flawfinder_func_name
      value: getpw
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.flawfinder.getpw-1
    shortlink: https://sg.run/EO08
    semgrep.dev:
      rule:
        rule_id: WAUP03
        version_id: 1QTObl3
        url: https://semgrep.dev/playground/r/1QTObl3/gitlab.flawfinder.getpw-1
        origin: community
  pattern: getpw(...)
  severity: ERROR
- id: gitlab.flawfinder.gets-1._getts-1
  languages:
  - c
  message: |
    The gets() function reads a line from stdin into the provided buffer
    until either a terminating newline or EOF. This terminating newline or
    EOF is replaced with a null byte `'\0'`. No check for buffer overruns are
    performed so it is recommended to use `fgets()` instead. Do note
    that some platforms will continue reading data after a `'\0'` is encountered.

    Usage of `fgets()` is not recommended for reading binary based files or inputs,
    instead the `read` or `fread` functions should be used.

    For more information please see: https://linux.die.net/man/3/fgets
  metadata:
    shortDescription: Use of deprecated function (gets)
    cwe: CWE-120
    owasp: A1:2017-Injection
    primary_identifier: flawfinder.gets-1._getts-1
    secondary_identifiers:
    - name: Flawfinder - gets
      type: flawfinder_func_name
      value: gets
    - name: Flawfinder - _getts
      type: flawfinder_func_name
      value: _getts
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.flawfinder.gets-1._getts-1
    shortlink: https://sg.run/7G7v
    semgrep.dev:
      rule:
        rule_id: 0oUJjK
        version_id: 9lTdoB6
        url: https://semgrep.dev/playground/r/9lTdoB6/gitlab.flawfinder.gets-1._getts-1
        origin: community
  pattern-either:
  - pattern: gets(...)
  - pattern: _getts(...)
  severity: ERROR
- id: gitlab.flawfinder.getwd-1
  languages:
  - c
  message: |
    `getwd` does not contain a parameter to limit how many characters can be copied into the
    destination buffer. For portability and security reasons `getwd` has been deprecated in
    favor of `getcwd`.

    For more information please see: https://linux.die.net/man/3/getcwd
  metadata:
    shortDescription: Insufficient protection against buffer overflow (getwd)
    cwe: CWE-120
    owasp: A1:2017-Injection
    primary_identifier: flawfinder.getwd-1
    secondary_identifiers:
    - name: Flawfinder - getwd
      type: flawfinder_func_name
      value: getwd
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.flawfinder.getwd-1
    shortlink: https://sg.run/L8zL
    semgrep.dev:
      rule:
        rule_id: KxUY1o
        version_id: yeTRBj5
        url: https://semgrep.dev/playground/r/yeTRBj5/gitlab.flawfinder.getwd-1
        origin: community
  pattern: getwd(...)
  severity: WARNING
- id: gitlab.flawfinder.gsignal-1.ssignal-1
  languages:
  - c
  message: |
    The `gsignal` and `ssignal` functions are obsolete and no longer recommended. Consider
    using the `raise` or `sigaction` functions instead for process signalling.

    For more information please see: https://linux.die.net/man/3/sigaction
  metadata:
    shortDescription: Deprecated function calls (ssignal/gsignal)
    cwe: CWE-676
    primary_identifier: flawfinder.gsignal-1.ssignal-1
    secondary_identifiers:
    - name: Flawfinder - gsignal
      type: flawfinder_func_name
      value: gsignal
    - name: Flawfinder - ssignal
      type: flawfinder_func_name
      value: ssignal
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.flawfinder.gsignal-1.ssignal-1
    shortlink: https://sg.run/eKOX
    semgrep.dev:
      rule:
        rule_id: GdUZdz
        version_id: JdTN3do
        url: https://semgrep.dev/playground/r/JdTN3do/gitlab.flawfinder.gsignal-1.ssignal-1
        origin: community
  pattern-either:
  - pattern: gsignal(...)
  - pattern: ssignal(...)
  severity: INFO
- id: gitlab.flawfinder.lstrcat-1.wcscat-1._tcscat-1._mbscat-1
  languages:
  - c
  message: |
    The `strcat` family of functions are unable to limit how many bytes are copied
    to the destination buffer. It is recommended to use more secure alternatives such as
    `snprintf`.

    If developing for C Runtime Library (CRT), more secure versions of these functions should be
    used, see:
    https://learn.microsoft.com/en-us/cpp/c-runtime-library/reference/strcat-s-wcscat-s-mbscat-s?view=msvc-170
  metadata:
    shortDescription: Insecure functions unable to limit / check buffer sizes
    cwe: CWE-120
    owasp: A1:2017-Injection
    primary_identifier: flawfinder.lstrcat-1.wcscat-1._tcscat-1._mbscat-1
    secondary_identifiers:
    - name: Flawfinder - lstrcat
      type: flawfinder_func_name
      value: lstrcat
    - name: Flawfinder - wcscat
      type: flawfinder_func_name
      value: wcscat
    - name: Flawfinder - _tcscat
      type: flawfinder_func_name
      value: _tcscat
    - name: Flawfinder - _mbscat
      type: flawfinder_func_name
      value: _mbscat
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.flawfinder.lstrcat-1.wcscat-1._tcscat-1._mbscat-1
    shortlink: https://sg.run/8R7J
    semgrep.dev:
      rule:
        rule_id: qNUb3v
        version_id: rxTyo38
        url: https://semgrep.dev/playground/r/rxTyo38/gitlab.flawfinder.lstrcat-1.wcscat-1._tcscat-1._mbscat-1
        origin: community
  pattern-either:
  - pattern: lstrcat(...)
  - pattern: wcscat(...)
  - pattern: _tcscat(...)
  - pattern: _mbscat(...)
  severity: ERROR
- id: gitlab.flawfinder.lstrcatn-1.wcsncat-1._tcsncat-1._mbsnbcat-1
  languages:
  - c
  message: |
    Consider using more secure alternatives such as `snprintf`, instead of the
    `wcsncat` family of functions.

    If developing for C Runtime Library (CRT), more secure versions of these functions should be
    used, see:
    https://learn.microsoft.com/en-us/cpp/c-runtime-library/reference/strncat-strncat-l-wcsncat-wcsncat-l-mbsncat-mbsncat-l?view=msvc-170
  metadata:
    shortDescription: Easily misused string processing functions
    cwe: CWE-120
    owasp: A1:2017-Injection
    primary_identifier: flawfinder.lstrcatn-1.wcsncat-1._tcsncat-1._mbsnbcat-1
    secondary_identifiers:
    - name: Flawfinder - lstrcatn
      type: flawfinder_func_name
      value: lstrcatn
    - name: Flawfinder - wcsncat
      type: flawfinder_func_name
      value: wcsncat
    - name: Flawfinder - _tcsncat
      type: flawfinder_func_name
      value: _tcsncat
    - name: Flawfinder - _mbsnbcat
      type: flawfinder_func_name
      value: _mbsnbcat
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.flawfinder.lstrcatn-1.wcsncat-1._tcsncat-1._mbsnbcat-1
    shortlink: https://sg.run/grqo
    semgrep.dev:
      rule:
        rule_id: lBUzGo
        version_id: bZTbKvx
        url: https://semgrep.dev/playground/r/bZTbKvx/gitlab.flawfinder.lstrcatn-1.wcsncat-1._tcsncat-1._mbsnbcat-1
        origin: community
  pattern-either:
  - pattern: lstrcatn(...)
  - pattern: wcsncat(...)
  - pattern: _tcsncat(...)
  - pattern: _mbsnbcat(...)
  severity: INFO
- id: gitlab.flawfinder.lstrcpy-1.wcscpy-1._tcscpy-1._mbscpy-1
  languages:
  - c
  message: |
    The `lstrcpy` family of functions do not provide the ability to limit or check buffer
    sizes before copying to a destination buffer. This can lead to buffer overflows. Consider
    using more secure alternatives such as `strncpy_s`.

    If developing for C Runtime Library (CRT), more secure versions of these functions should be
    used, see:
    https://learn.microsoft.com/en-us/cpp/c-runtime-library/reference/strncpy-s-strncpy-s-l-wcsncpy-s-wcsncpy-s-l-mbsncpy-s-mbsncpy-s-l?view=msvc-170
  metadata:
    shortDescription: Insecure functions unable to limit / check buffer sizes
    cwe: CWE-120
    owasp: A1:2017-Injection
    primary_identifier: flawfinder.lstrcpy-1.wcscpy-1._tcscpy-1._mbscpy-1
    secondary_identifiers:
    - name: Flawfinder - lstrcpy
      type: flawfinder_func_name
      value: lstrcpy
    - name: Flawfinder - wcscpy
      type: flawfinder_func_name
      value: wcscpy
    - name: Flawfinder - _tcscpy
      type: flawfinder_func_name
      value: _tcscpy
    - name: Flawfinder - _mbscpy
      type: flawfinder_func_name
      value: _mbscpy
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.flawfinder.lstrcpy-1.wcscpy-1._tcscpy-1._mbscpy-1
    shortlink: https://sg.run/Q41D
    semgrep.dev:
      rule:
        rule_id: YGUQd4
        version_id: NdT39lE
        url: https://semgrep.dev/playground/r/NdT39lE/gitlab.flawfinder.lstrcpy-1.wcscpy-1._tcscpy-1._mbscpy-1
        origin: community
  pattern-either:
  - pattern: lstrcpy(...)
  - pattern: wcscpy(...)
  - pattern: _tcscpy(...)
  - pattern: _mbscpy(...)
  severity: ERROR
- id: gitlab.flawfinder.lstrcpyn-1.wcsncpy-1._tcsncpy-1._mbsnbcpy-1
  languages:
  - c
  message: |
    The `lstrcpyn` family of functions do not always check for invalid pointers or check if there
    is sufficient space prior to copying. The count argument limits the number of characters copied
    but does validate if the count will fit within the size of the destination buffer, leading to
    potential overflows.

    If developing for C Runtime Library (CRT), more secure versions of these functions should be
    used, see:
    https://learn.microsoft.com/en-us/cpp/c-runtime-library/reference/strncpy-s-strncpy-s-l-wcsncpy-s-wcsncpy-s-l-mbsncpy-s-mbsncpy-s-l?view=msvc-170
  metadata:
    shortDescription: Insecure functions do not always null terminate or check invalid
      pointers
    cwe: CWE-120
    owasp: A1:2017-Injection
    primary_identifier: flawfinder.lstrcpyn-1.wcsncpy-1._tcsncpy-1._mbsnbcpy-1
    secondary_identifiers:
    - name: Flawfinder - lstrcpyn
      type: flawfinder_func_name
      value: lstrcpyn
    - name: Flawfinder - wcsncpy
      type: flawfinder_func_name
      value: wcsncpy
    - name: Flawfinder - _tcsncpy
      type: flawfinder_func_name
      value: _tcsncpy
    - name: Flawfinder - _mbsnbcpy
      type: flawfinder_func_name
      value: _mbsnbcpy
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.flawfinder.lstrcpyn-1.wcsncpy-1._tcsncpy-1._mbsnbcpy-1
    shortlink: https://sg.run/347g
    semgrep.dev:
      rule:
        rule_id: 6JU6Nz
        version_id: kbTdjXQ
        url: https://semgrep.dev/playground/r/kbTdjXQ/gitlab.flawfinder.lstrcpyn-1.wcsncpy-1._tcsncpy-1._mbsnbcpy-1
        origin: community
  pattern-either:
  - pattern: lstrcpyn(...)
  - pattern: wcsncpy(...)
  - pattern: _tcsncpy(...)
  - pattern: _mbsnbcpy(...)
  severity: INFO
- id: gitlab.flawfinder.memalign-1
  languages:
  - c
  message: |
    The `memalign` function may not check that the alignment argument is correct. Calling
    free (on non Linux-based systems) may fail and in certain circumstances this failure
    may be exploitable. This function has been deprecated in favor of `posix_memalign`.

    For more information please see: https://linux.die.net/man/3/memalign
  metadata:
    shortDescription: Use of deprecated function (memalign)
    cwe: CWE-676
    owasp: A1:2017-Injection
    primary_identifier: flawfinder.memalign-1
    secondary_identifiers:
    - name: Flawfinder - memalign
      type: flawfinder_func_name
      value: memalign
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.flawfinder.memalign-1
    shortlink: https://sg.run/X8wl
    semgrep.dev:
      rule:
        rule_id: nJUrv6
        version_id: RGTDQ5O
        url: https://semgrep.dev/playground/r/RGTDQ5O/gitlab.flawfinder.memalign-1
        origin: community
  pattern-either:
  - pattern: memalign(...)
  - pattern-regex: "(void)\\s\\*(\\s|)(memalign)\\;"
  severity: INFO
- id: gitlab.flawfinder.memcpy-1.CopyMemory-1.bcopy-1
  languages:
  - c
  message: |
    The `memcpy` family of functions require the developer to validate that the destination buffer
    is the same size or larger than the source buffer. Buffer overflows could be introduced if care
    is not taken to validate buffer sizes.

    If developing for C Runtime Library (CRT), more secure versions of these functions should be
    used, see:
    https://learn.microsoft.com/en-us/cpp/c-runtime-library/reference/memcpy-s-wmemcpy-s?view=msvc-170
  metadata:
    shortDescription: Function does not check for buffer overflows when copying
    cwe: CWE-120
    owasp: A1:2017-Injection
    primary_identifier: flawfinder.memcpy-1.CopyMemory-1.bcopy-1
    secondary_identifiers:
    - name: Flawfinder - memcpy
      type: flawfinder_func_name
      value: memcpy
    - name: Flawfinder - CopyMemory
      type: flawfinder_func_name
      value: CopyMemory
    - name: Flawfinder - bcopy
      type: flawfinder_func_name
      value: bcopy
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.flawfinder.memcpy-1.CopyMemory-1.bcopy-1
    shortlink: https://sg.run/4P7g
    semgrep.dev:
      rule:
        rule_id: oqUr65
        version_id: w8T9zwg
        url: https://semgrep.dev/playground/r/w8T9zwg/gitlab.flawfinder.memcpy-1.CopyMemory-1.bcopy-1
        origin: community
  pattern-either:
  - pattern: memcpy(...)
  - pattern: CopyMemory(...)
  - pattern: bcopy(...)
  severity: INFO
- id: gitlab.flawfinder.mkstemp-1
  languages:
  - c
  message: |
    Some older Unix-like systems, `mkstemp` would create temp files with 0666 permissions,
    meaning the file created would be read/write access for all users.

    Ensure the process has called the `umask` function with restricted permissions prior
    to calling `mkstemp` and validate the permissions prior to using the file descriptor.

    For more information on temporary files please see:
    https://wiki.sei.cmu.edu/confluence/pages/viewpage.action?pageId=87152425
  metadata:
    shortDescription: Potential file permissions issue (mkstemp)
    cwe: CWE-377
    owasp: A5:2017-Broken Access Control
    primary_identifier: flawfinder.mkstemp-1
    secondary_identifiers:
    - name: Flawfinder - mkstemp
      type: flawfinder_func_name
      value: mkstemp
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.flawfinder.mkstemp-1
    shortlink: https://sg.run/5Jo6
    semgrep.dev:
      rule:
        rule_id: 2ZUKJn
        version_id: o5Tgy0Q
        url: https://semgrep.dev/playground/r/o5Tgy0Q/gitlab.flawfinder.mkstemp-1
        origin: community
  pattern: mkstemp(...)
  severity: INFO
- id: gitlab.flawfinder.mktemp-1
  languages:
  - c
  message: |
    The `mktemp` function should no longer be used due to multiple flaws. Some implementations
    created random files by using known information like the process ID and a single letter. This
    allows for possible race conditions where an attacker could guess or manipulate these files
    prior to them being used.

    Consider using the `mkstemp` function instead, but be aware it also contains possible
    risks. Ensure the process has called the `umask` function with restricted permissions prior
    to calling `mkstemp` and validate the permissions prior to using the file descriptor.

    For more information on temporary files please see:
    https://wiki.sei.cmu.edu/confluence/pages/viewpage.action?pageId=87152425
  metadata:
    shortDescription: Use of deprecated function (mktemp)
    cwe: CWE-377
    owasp: A5:2017-Broken Access Control
    primary_identifier: flawfinder.mktemp-1
    secondary_identifiers:
    - name: Flawfinder - mktemp
      type: flawfinder_func_name
      value: mktemp
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.flawfinder.mktemp-1
    shortlink: https://sg.run/GwPB
    semgrep.dev:
      rule:
        rule_id: X5U76e
        version_id: zyTKApv
        url: https://semgrep.dev/playground/r/zyTKApv/gitlab.flawfinder.mktemp-1
        origin: community
  pattern: mktemp(...)
  severity: ERROR
- id: gitlab.flawfinder.printf-1.vprintf-1.vwprintf-1.vfwprintf-1._vtprintf-1.wprintf-1
  languages:
  - c
  message: |
    Format string vulnerabilities allow an attacker to read or in some cases, potentially write
    data to
    and from locations in the processes' memory. To prevent against format string attacks, do not
    allow
    users or un-validated input to provide the format specification.
    Consider using a constant for the format specification, or only allow specific
    characters to be provided to the format argument for the `printf` family of functions.

    For more information please see: https://linux.die.net/man/3/fprintf

    For more information on format string attacks please see OWASP's attack guide:
    https://owasp.org/www-community/attacks/Format_string_attack
  metadata:
    shortDescription: Potential format string vulnerability
    cwe: CWE-134
    owasp: A1:2017-Injection
    primary_identifier: flawfinder.printf-1.vprintf-1.vwprintf-1.vfwprintf-1._vtprintf-1.wprintf-1
    secondary_identifiers:
    - name: Flawfinder - printf
      type: flawfinder_func_name
      value: printf
    - name: Flawfinder - vprintf
      type: flawfinder_func_name
      value: vprintf
    - name: Flawfinder - vwprintf
      type: flawfinder_func_name
      value: vwprintf
    - name: Flawfinder - vfwprintf
      type: flawfinder_func_name
      value: vfwprintf
    - name: Flawfinder - _vtprintf
      type: flawfinder_func_name
      value: _vtprintf
    - name: Flawfinder - wprintf
      type: flawfinder_func_name
      value: wprintf
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.flawfinder.printf-1.vprintf-1.vwprintf-1.vfwprintf-1._vtprintf-1.wprintf-1
    shortlink: https://sg.run/z9Oz
    semgrep.dev:
      rule:
        rule_id: v8UjyR
        version_id: JdTN3Wq
        url: https://semgrep.dev/playground/r/JdTN3Wq/gitlab.flawfinder.printf-1.vprintf-1.vwprintf-1.vfwprintf-1._vtprintf-1.wprintf-1
        origin: community
  pattern-either:
  - patterns:
    - pattern: printf(...)
    - pattern-not: printf("...",...)
  - patterns:
    - pattern: vprintf($FMT, ...)
    - pattern-not: vprintf("...", ...)
  - patterns:
    - pattern: vwprintf($FMT, ...)
    - pattern-not: vwprintf("...", ...)
  - patterns:
    - pattern: vfwprintf($FILE, $FMT, ...)
    - pattern-not: vfwprintf($FILE, "...", ...)
  - patterns:
    - pattern: _vtprintf($FILE, $FMT, ...)
    - pattern-not: _vtprintf($FILE, "...", ...)
  - patterns:
    - pattern: wprintf($FMT, ...)
    - pattern-not: wprintf("...", ...)
  severity: ERROR
- id: gitlab.flawfinder.readlink-1
  languages:
  - c
  message: |
    Usage of the `readlink` function call hints at a potential Time Of Check Time Of Use (TOCTOU)
    vulnerability. An attacker may be able to modify the file being specified by the `readlink`
    function prior to the `readlink` function being called. Additionally, care must be taken
    that the buffer provided is large enough to hold the contents of the file.

    Instead of using `readlink`, use `lstat` prior to opening the file and confirm the attributes
    are correct. Then use `open` to get a file descriptor to this file. Call `fstat` on the
    `open` file descriptor to confirm that `st_dev` and `st_ino` are equal between the two.
    If they are, it is safe to read and operate on the file's contents.

    For more information please see:
    https://wiki.sei.cmu.edu/confluence/display/c/FIO45-C.+Avoid+TOCTOU+race+conditions+while+accessing+files
  metadata:
    shortDescription: Potential time of check time of use vulnerability (readlink)
    cwe: CWE-20
    owasp: A5:2017-Broken Access Control
    primary_identifier: flawfinder.readlink-1
    secondary_identifiers:
    - name: Flawfinder - readlink
      type: flawfinder_func_name
      value: readlink
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.flawfinder.readlink-1
    shortlink: https://sg.run/L8AL
    semgrep.dev:
      rule:
        rule_id: KxUYWo
        version_id: DkT69Dw
        url: https://semgrep.dev/playground/r/DkT69Dw/gitlab.flawfinder.readlink-1
        origin: community
  pattern: readlink(...)
  severity: ERROR
- id: gitlab.flawfinder.realpath-1
  languages:
  - c
  message: |
    The `realpath` function should not be called with a destination buffer as it could
    lead to overflowing if the path is greater than PATH_LEN. It is instead recommended
    to call `realpath` with the destination buffer set to NULL and use the return value
    as the resolved path. Be sure to free the returned pointer as realpath will allocate
    the buffer internally using `malloc`.

    For more information see: https://linux.die.net/man/3/realpath

    Example:

    ```
    char const *symlink_path = "/tmp/symlink";
    char *resolved_path = NULL;

    resolved_path = realpath(symlink_path, NULL);
    if (errno == 0) {
      // ... use resolved_path...
      free(resolved_path);
    }
    ```
  metadata:
    shortDescription: Function does not ensure destination buffer length is sufficient
      before copying
    cwe: CWE-120
    owasp: A1:2017-Injection
    primary_identifier: flawfinder.realpath-1
    secondary_identifiers:
    - name: Flawfinder - realpath
      type: flawfinder_func_name
      value: realpath
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.flawfinder.realpath-1
    shortlink: https://sg.run/P8jN
    semgrep.dev:
      rule:
        rule_id: zdU1EX
        version_id: xyTKAoy
        url: https://semgrep.dev/playground/r/xyTKAoy/gitlab.flawfinder.realpath-1
        origin: community
  pattern: realpath(...)
  severity: WARNING
- id: gitlab.flawfinder.scanf-1.vscanf-1.wscanf-1._tscanf-1.vwscanf-1
  languages:
  - c
  message: |
    Format specifiers can take optional field widths, which should be
    used to limit how many characters are copied into the target buffer.

    For more information please see: https://linux.die.net/man/3/scanf

    Example:
    ```
      char buf[11] = {0};
      scanf("%10s", &buf); // buf = AAAAAAAAAA\0
    ```

    If developing for C Runtime Library (CRT), more secure versions of these functions should be
    used, see:
    https://learn.microsoft.com/en-us/cpp/c-runtime-library/reference/scanf-s-scanf-s-l-wscanf-s-wscanf-s-l?view=msvc-170
  metadata:
    shortDescription: scanf() functions may allow format string based overflows
    cwe: CWE-120
    owasp: A1:2017-Injection
    primary_identifier: flawfinder.scanf-1.vscanf-1.wscanf-1._tscanf-1.vwscanf-1
    secondary_identifiers:
    - name: Flawfinder - scanf
      type: flawfinder_func_name
      value: scanf
    - name: Flawfinder - vscanf
      type: flawfinder_func_name
      value: vscanf
    - name: Flawfinder - wscanf
      type: flawfinder_func_name
      value: wscanf
    - name: Flawfinder - _tscanf
      type: flawfinder_func_name
      value: _tscanf
    - name: Flawfinder - vwscanf
      type: flawfinder_func_name
      value: vwscanf
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.flawfinder.scanf-1.vscanf-1.wscanf-1._tscanf-1.vwscanf-1
    shortlink: https://sg.run/Jj6o
    semgrep.dev:
      rule:
        rule_id: pKUw5J
        version_id: O9TNnY2
        url: https://semgrep.dev/playground/r/O9TNnY2/gitlab.flawfinder.scanf-1.vscanf-1.wscanf-1._tscanf-1.vwscanf-1
        origin: community
  pattern-either:
  - patterns:
    - pattern: scanf($FMT, ...)
    - pattern-not: scanf("...", ...)
  - patterns:
    - pattern: vscanf($FMT, ...)
    - pattern-not: vscanf("...", ...)
  - patterns:
    - pattern: wscanf($FMT, ...)
    - pattern-not: wscanf("...", ...)
  - patterns:
    - pattern: _tscanf($FMT, ...)
    - pattern-not: _tscanf("...", ...)
  - patterns:
    - pattern: vwscanf(FMT, ...)
    - pattern-not: vwscanf("...", ...)
  severity: ERROR
- id: gitlab.flawfinder.snprintf-1.vsnprintf-1._snprintf-1._sntprintf-1._vsntprintf-1
  languages:
  - c
  message: |
    Format string vulnerabilities allow an attacker to read or in some cases, potentially write
    data to
    and from locations in the processes' memory. To prevent against format string attacks, do not
    allow
    users or un-validated input to provide the format specification.
    Consider using a constant for the format specification, or strip all format
    specifiers from the input prior to calling the `snprintf` family of functions.

    Note that some variations of this function do not always null terminate the strings.

    For more information on using snprintf please see: https://linux.die.net/man/3/snprintf

    For more information on format string attacks please see OWASP's attack guide:
    https://owasp.org/www-community/attacks/Format_string_attack
  metadata:
    shortDescription: Potential format string vulnerability
    cwe: CWE-134
    owasp: A1:2017-Injection
    primary_identifier: flawfinder.snprintf-1.vsnprintf-1._snprintf-1._sntprintf-1._vsntprintf-1
    secondary_identifiers:
    - name: Flawfinder - snprintf
      type: flawfinder_func_name
      value: snprintf
    - name: Flawfinder - vsnprintf
      type: flawfinder_func_name
      value: vsnprintf
    - name: Flawfinder - _snprintf
      type: flawfinder_func_name
      value: _snprintf
    - name: Flawfinder - _sntprintf
      type: flawfinder_func_name
      value: _sntprintf
    - name: Flawfinder - _vsntprintf
      type: flawfinder_func_name
      value: _vsntprintf
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.flawfinder.snprintf-1.vsnprintf-1._snprintf-1._sntprintf-1._vsntprintf-1
    shortlink: https://sg.run/pkj3
    semgrep.dev:
      rule:
        rule_id: d8UlJZ
        version_id: 5PTdPw5
        url: https://semgrep.dev/playground/r/5PTdPw5/gitlab.flawfinder.snprintf-1.vsnprintf-1._snprintf-1._sntprintf-1._vsntprintf-1
        origin: community
  pattern-either:
  - patterns:
    - pattern: snprintf($BUF,$SIZ,$FMT,...)
    - pattern-not: snprintf($BUF,$SIZ,"...",...)
  - patterns:
    - pattern: vsnprintf($BUF,$SIZ,$FMT)
    - pattern-not: vsnprintf($BUF,$SIZ,"...",...)
  - patterns:
    - pattern: _snprintf($BUF,$SIZ,$FMT,...)
    - pattern-not: _snprintf($BUF,$SIZ,$FMT,"...",...)
  - patterns:
    - pattern: _sntprintf($VAR,$FMT,...)
    - pattern-not: sntprintf($VAR,"...",...)
  - patterns:
    - pattern: _vsntprintf($VAR,$FMT,...)
    - pattern-not: _vsntprintf($VAR,"...",...)
  severity: ERROR
- id: gitlab.flawfinder.sprintf-1.vsprintf-1.swprintf-1.vswprintf-1._stprintf-1._vstprintf-1
  languages:
  - c
  message: |
    Use sprintf_s, snprintf, or vsnprintf instead. The `sprintf` family of functions do not allow
    callers to set limits on how many bytes the destination buffer can hold. Consider using more
    secure alternatives such as `snprintf`.

    For more information please see: https://linux.die.net/man/3/snprintf

    If developing for C Runtime Library (CRT), more secure versions of these functions should be
    used, see:
    https://learn.microsoft.com/en-us/cpp/c-runtime-library/reference/sprintf-s-sprintf-s-l-swprintf-s-swprintf-s-l?view=msvc-170
  metadata:
    shortDescription: Insecure function unable to limit / check buffer sizes
    cwe: CWE-120
    owasp: A1:2017-Injection
    primary_identifier: flawfinder.sprintf-1.vsprintf-1.swprintf-1.vswprintf-1._stprintf-1._vstprintf-1
    secondary_identifiers:
    - name: Flawfinder - sprintf
      type: flawfinder_func_name
      value: sprintf
    - name: Flawfinder - vsprintf
      type: flawfinder_func_name
      value: vsprintf
    - name: Flawfinder - swprintf
      type: flawfinder_func_name
      value: swprintf
    - name: Flawfinder - vswprintf
      type: flawfinder_func_name
      value: vswprintf
    - name: Flawfinder - _stprintf
      type: flawfinder_func_name
      value: _stprintf
    - name: Flawfinder - _vstprintf
      type: flawfinder_func_name
      value: _vstprintf
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.flawfinder.sprintf-1.vsprintf-1.swprintf-1.vswprintf-1._stprintf-1._vstprintf-1
    shortlink: https://sg.run/5J76
    semgrep.dev:
      rule:
        rule_id: 2ZUK9n
        version_id: e1T0Lno
        url: https://semgrep.dev/playground/r/e1T0Lno/gitlab.flawfinder.sprintf-1.vsprintf-1.swprintf-1.vswprintf-1._stprintf-1._vstprintf-1
        origin: community
  pattern-either:
  - pattern: sprintf(...)
  - pattern: vsprintf(...)
  - pattern: swprintf(...)
  - pattern: vswprintf(...)
  - pattern: _stprintf(...)
  - pattern: _vstprintf(...)
  severity: ERROR
- id: gitlab.flawfinder.strcat-1
  languages:
  - c
  message: |
    The `strcat` family of functions are unable to limit how many bytes are copied
    to the destination buffer. It is recommended to use more secure alternatives such as
    `snprintf`.

    For more information please see: https://linux.die.net/man/3/snprintf

    If developing for C Runtime Library (CRT), more secure versions of these functions should be
    used, see:
    https://learn.microsoft.com/en-us/cpp/c-runtime-library/reference/strcat-s-wcscat-s-mbscat-s?view=msvc-170
  metadata:
    shortDescription: Insecure string processing function
    cwe: CWE-120
    owasp: A1:2017-Injection
    primary_identifier: flawfinder.strcat-1
    secondary_identifiers:
    - name: Flawfinder - strcat
      type: flawfinder_func_name
      value: strcat
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.flawfinder.strcat-1
    shortlink: https://sg.run/GwqB
    semgrep.dev:
      rule:
        rule_id: X5U7re
        version_id: vdTYpPE
        url: https://semgrep.dev/playground/r/vdTYpPE/gitlab.flawfinder.strcat-1
        origin: community
  pattern: strcat(...)
  severity: ERROR
- id: gitlab.flawfinder.strccpy-1.strcadd-1
  languages:
  - c
  message: |
    The `strccpy` and `strcadd` functions do not allow the caller to check that the destination
    size
    of the buffer will fit the input buffer prior to copying.

    For more information please see:
    https://docs.oracle.com/cd/E18752_01/html/816-5172/streadd-3gen.html
  metadata:
    shortDescription: Insecure string processing functions
    cwe: CWE-120
    owasp: A1:2017-Injection
    primary_identifier: flawfinder.strccpy-1.strcadd-1
    secondary_identifiers:
    - name: Flawfinder - strccpy
      type: flawfinder_func_name
      value: strccpy
    - name: Flawfinder - strcadd
      type: flawfinder_func_name
      value: strcadd
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.flawfinder.strccpy-1.strcadd-1
    shortlink: https://sg.run/RP9E
    semgrep.dev:
      rule:
        rule_id: j2URoA
        version_id: d6TrQZ1
        url: https://semgrep.dev/playground/r/d6TrQZ1/gitlab.flawfinder.strccpy-1.strcadd-1
        origin: community
  pattern-either:
  - pattern: strccpy(...)
  - pattern: strcadd(...)
  severity: INFO
- id: gitlab.flawfinder.strcpy-1
  languages:
  - c
  message: |
    The `strcpy` family of functions do not provide the ability to limit or check buffer
    sizes before copying to a destination buffer. This can lead to buffer overflows. Consider
    using more secure alternatives such as `strncpy` and provide the correct limit to the
    destination buffer and ensure the string is null terminated.

    For more information please see: https://linux.die.net/man/3/strncpy

    If developing for C Runtime Library (CRT), more secure versions of these functions should be
    used, see:
    https://learn.microsoft.com/en-us/cpp/c-runtime-library/reference/strncpy-s-strncpy-s-l-wcsncpy-s-wcsncpy-s-l-mbsncpy-s-mbsncpy-s-l?view=msvc-170
  metadata:
    shortDescription: Insecure string processing function (strcpy)
    cwe: CWE-120
    owasp: A1:2017-Injection
    primary_identifier: flawfinder.strcpy-1
    secondary_identifiers:
    - name: Flawfinder - strcpy
      type: flawfinder_func_name
      value: strcpy
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.flawfinder.strcpy-1
    shortlink: https://sg.run/AwAg
    semgrep.dev:
      rule:
        rule_id: 10Ue1w
        version_id: ZRTQ7r0
        url: https://semgrep.dev/playground/r/ZRTQ7r0/gitlab.flawfinder.strcpy-1
        origin: community
  pattern: strcpy(...)
  severity: ERROR
- id: gitlab.flawfinder.strcpyA-1.strcpyW-1.StrCpy-1.StrCpyA-1.lstrcpyA-1.lstrcpyW-1._tccpy-1._mbccpy-1._ftcscpy-1._mbsncpy-1.StrCpyN-1.StrCpyNA-1.StrCpyNW-1.StrNCpy-1.strcpynA-1.StrNCpyA-1.StrNCpyW-1.lstrcpynA-1.lstrcpynW-1
  languages:
  - c
  message: |
    The `StrCpy` family of functions do not guarantee the final string to be null terminated.
    Consider
    using one of the following alternatives `StringCbCopy`, `StringCbCopyEx`, `StringCbCopyN`,
    `StringCbCopyNEx`, `StringCchCopy`, `StringCchCopyEx`, `StringCchCopyN`, or `StringCchCopyNEx`.

    If developing for C Runtime Library (CRT), more secure versions of these functions should be
    used, see:
    https://learn.microsoft.com/en-us/cpp/c-runtime-library/reference/strncpy-s-strncpy-s-l-wcsncpy-s-wcsncpy-s-l-mbsncpy-s-mbsncpy-s-l?view=msvc-170
  metadata:
    shortDescription: Insecure string processing function
    cwe: CWE-120
    owasp: A1:2017-Injection
    primary_identifier: flawfinder.strcpyA-1.strcpyW-1.StrCpy-1.StrCpyA-1.lstrcpyA-1.lstrcpyW-1._tccpy-1._mbccpy-1._ftcscpy-1._mbsncpy-1.StrCpyN-1.StrCpyNA-1.StrCpyNW-1.StrNCpy-1.strcpynA-1.StrNCpyA-1.StrNCpyW-1.lstrcpynA-1.lstrcpynW-1
    secondary_identifiers:
    - name: Flawfinder - strcpyA
      type: flawfinder_func_name
      value: strcpyA
    - name: Flawfinder - strcpyW
      type: flawfinder_func_name
      value: strcpyW
    - name: Flawfinder - StrCpy
      type: flawfinder_func_name
      value: StrCpy
    - name: Flawfinder - StrCpyA
      type: flawfinder_func_name
      value: StrCpyA
    - name: Flawfinder - lstrcpyA
      type: flawfinder_func_name
      value: lstrcpyA
    - name: Flawfinder - lstrcpyW
      type: flawfinder_func_name
      value: lstrcpyW
    - name: Flawfinder - _tccpy
      type: flawfinder_func_name
      value: _tccpy
    - name: Flawfinder - _mbccpy
      type: flawfinder_func_name
      value: _mbccpy
    - name: Flawfinder - _ftcscpy
      type: flawfinder_func_name
      value: _ftcscpy
    - name: Flawfinder - _mbsncpy
      type: flawfinder_func_name
      value: _mbsncpy
    - name: Flawfinder - StrCpyN
      type: flawfinder_func_name
      value: StrCpyN
    - name: Flawfinder - StrCpyNA
      type: flawfinder_func_name
      value: StrCpyNA
    - name: Flawfinder - StrCpyNW
      type: flawfinder_func_name
      value: StrCpyNW
    - name: Flawfinder - StrNCpy
      type: flawfinder_func_name
      value: StrNCpy
    - name: Flawfinder - strcpynA
      type: flawfinder_func_name
      value: strcpynA
    - name: Flawfinder - StrNCpyA
      type: flawfinder_func_name
      value: StrNCpyA
    - name: Flawfinder - StrNCpyW
      type: flawfinder_func_name
      value: StrNCpyW
    - name: Flawfinder - lstrcpynA
      type: flawfinder_func_name
      value: lstrcpynA
    - name: Flawfinder - lstrcpynW
      type: flawfinder_func_name
      value: lstrcpynW
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.flawfinder.strcpyA-1.strcpyW-1.StrCpy-1.StrCpyA-1.lstrcpyA-1.lstrcpyW-1._tccpy-1._mbccpy-1._ftcscpy-1._mbsncpy-1.StrCpyN-1.StrCpyNA-1.StrCpyNW-1.StrNCpy-1.strcpynA-1.StrNCpyA-1.StrNCpyW-1.lstrcpynA-1.lstrcpynW-1
    shortlink: https://sg.run/BLBb
    semgrep.dev:
      rule:
        rule_id: 9AUkxG
        version_id: nWTx8K3
        url: https://semgrep.dev/playground/r/nWTx8K3/gitlab.flawfinder.strcpyA-1.strcpyW-1.StrCpy-1.StrCpyA-1.lstrcpyA-1.lstrcpyW-1._tccpy-1._mbccpy-1._ftcscpy-1._mbsncpy-1.StrCpyN-1.StrCpyNA-1.StrCpyNW-1.StrNCpy-1.strcpynA-1.StrNCpyA-1.StrNCpyW-1.lstrcpynA-1.lstrcpynW-1
        origin: community
  pattern-either:
  - pattern: strcpyA(...)
  - pattern: strcpyW(...)
  - pattern: StrCpy(...)
  - pattern: StrCpyA(...)
  - pattern: lstrcpyA(...)
  - pattern: lstrcpyW(...)
  - pattern: _tccpy(...)
  - pattern: _mbccpy(...)
  - pattern: _ftcscpy(...)
  - pattern: _mbsncpy(...)
  - pattern: StrCpyN(...)
  - pattern: StrCpyNA(...)
  - pattern: StrCpyNW(...)
  - pattern: StrNCpy(...)
  - pattern: strcpynA(...)
  - pattern: StrNCpyA(...)
  - pattern: StrNCpyW(...)
  - pattern: lstrcpynA(...)
  - pattern: lstrcpynW(...)
  severity: ERROR
- id: gitlab.flawfinder.streadd-1.strecpy-1
  languages:
  - c
  message: |
    The `strecpy` and `streadd` functions require that the destination buffer size be at least
    four
    times the size of the source due to each character potentially becoming a `\` and 3 digits.

    For more information please see:
    https://docs.oracle.com/cd/E18752_01/html/816-5172/streadd-3gen.html
  metadata:
    shortDescription: Insecure string processing functions
    cwe: CWE-120
    owasp: A1:2017-Injection
    primary_identifier: flawfinder.streadd-1.strecpy-1
    secondary_identifiers:
    - name: Flawfinder - streadd
      type: flawfinder_func_name
      value: streadd
    - name: Flawfinder - strecpy
      type: flawfinder_func_name
      value: strecpy
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.flawfinder.streadd-1.strecpy-1
    shortlink: https://sg.run/DwW2
    semgrep.dev:
      rule:
        rule_id: yyUyKE
        version_id: ExTjpGz
        url: https://semgrep.dev/playground/r/ExTjpGz/gitlab.flawfinder.streadd-1.strecpy-1
        origin: community
  pattern-either:
  - pattern: streadd(...)
  - pattern: strecpy(...)
  severity: ERROR
- id: gitlab.flawfinder.strlen-1.wcslen-1._tcslen-1._mbslen-1
  languages:
  - c
  message: |
    The `strlen` family of functions does not handle strings that are not null
    terminated. This can lead to buffer over reads and cause the application to
    crash by accessing unintended memory locations. It is recommended that `strnlen`
    be used instead as a `maxlen` value can be provided.

    For more information please see: https://linux.die.net/man/3/strnlen

    If developing for C Runtime Library (CRT), more secure versions of these functions should be
    used, see:
    https://learn.microsoft.com/en-us/cpp/c-runtime-library/reference/strnlen-strnlen-s?view=msvc-170
  metadata:
    shortDescription: Function does not handle null terminated strings properly
    cwe: CWE-126
    owasp: A1:2017-Injection
    primary_identifier: flawfinder.strlen-1.wcslen-1._tcslen-1._mbslen-1
    secondary_identifiers:
    - name: Flawfinder - strlen
      type: flawfinder_func_name
      value: strlen
    - name: Flawfinder - wcslen
      type: flawfinder_func_name
      value: wcslen
    - name: Flawfinder - _tcslen
      type: flawfinder_func_name
      value: _tcslen
    - name: Flawfinder - _mbslen
      type: flawfinder_func_name
      value: _mbslen
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.flawfinder.strlen-1.wcslen-1._tcslen-1._mbslen-1
    shortlink: https://sg.run/WOky
    semgrep.dev:
      rule:
        rule_id: r6U9Qq
        version_id: 7ZTg1A4
        url: https://semgrep.dev/playground/r/7ZTg1A4/gitlab.flawfinder.strlen-1.wcslen-1._tcslen-1._mbslen-1
        origin: community
  pattern-either:
  - pattern: strlen(...)
  - pattern: wcslen(...)
  - pattern: _tcslen(...)
  - pattern: _mbslen(...)
  severity: INFO
- id: gitlab.flawfinder.strncat-1
  languages:
  - c
  message: |
    The `strncat` family of functions are easy to use incorrectly when calculating destination
    buffer
    sizes. It is recommended to use more secure alternatives such as `snprintf`.

    For more information please see: https://linux.die.net/man/3/snprintf

    If developing for C Runtime Library (CRT), more secure versions of these functions should be
    used, see:
    https://learn.microsoft.com/en-us/cpp/c-runtime-library/reference/strncat-s-strncat-s-l-wcsncat-s-wcsncat-s-l-mbsncat-s-mbsncat-s-l?view=msvc-170
  metadata:
    shortDescription: Function does not handle null terminated strings or invalid
      pointers properly
    cwe: CWE-120
    owasp: A1:2017-Injection
    primary_identifier: flawfinder.strncat-1
    secondary_identifiers:
    - name: Flawfinder - strncat
      type: flawfinder_func_name
      value: strncat
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.flawfinder.strncat-1
    shortlink: https://sg.run/057k
    semgrep.dev:
      rule:
        rule_id: bwUN2p
        version_id: LjTq2Kb
        url: https://semgrep.dev/playground/r/LjTq2Kb/gitlab.flawfinder.strncat-1
        origin: community
  pattern: strncat(...)
  severity: INFO
- id: gitlab.flawfinder.strncpy-1
  languages:
  - c
  message: |
    The `strncpy` family of functions do not properly handle strings that are not null terminated.
    It is recommended to use more secure alternatives such as `snprintf`.

    For more information please see: https://linux.die.net/man/3/snprintf

    If developing for C Runtime Library (CRT), more secure versions of these functions should be
    used, see:
    https://learn.microsoft.com/en-us/cpp/c-runtime-library/reference/strncpy-s-strncpy-s-l-wcsncpy-s-wcsncpy-s-l-mbsncpy-s-mbsncpy-s-l?view=msvc-170
  metadata:
    shortDescription: Function does not handle null terminated strings or invalid
      pointers properly
    cwe: CWE-120
    owasp: A6:2017-Security Misconfiguration
    primary_identifier: flawfinder.strncpy-1
    secondary_identifiers:
    - name: Flawfinder - strncpy
      type: flawfinder_func_name
      value: strncpy
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.flawfinder.strncpy-1
    shortlink: https://sg.run/K8oP
    semgrep.dev:
      rule:
        rule_id: NbUY74
        version_id: 8KTQq1l
        url: https://semgrep.dev/playground/r/8KTQq1l/gitlab.flawfinder.strncpy-1
        origin: community
  pattern: strncpy(...)
  severity: INFO
- id: gitlab.flawfinder.strtrns-1
  languages:
  - c
  message: |
    This function is easy to misuse by not accounting for the space necessary when transforming
    strings. Ensure that the destination buffer is large enough to fit the transformed output.

    For more information please see:
    https://docs.oracle.com/cd/E36784_01/html/E36877/strtrns-3gen.html
  metadata:
    shortDescription: Insecure string processing function
    cwe: CWE-120
    owasp: A1:2017-Injection
    primary_identifier: flawfinder.strtrns-1
    secondary_identifiers:
    - name: Flawfinder - strtrns
      type: flawfinder_func_name
      value: strtrns
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.flawfinder.strtrns-1
    shortlink: https://sg.run/qq11
    semgrep.dev:
      rule:
        rule_id: kxU811
        version_id: gET3Al7
        url: https://semgrep.dev/playground/r/gET3Al7/gitlab.flawfinder.strtrns-1
        origin: community
  pattern: strtrns(...)
  severity: WARNING
- id: gitlab.flawfinder.syslog-1
  languages:
  - c
  message: |
    Format string vulnerabilities allow an attacker to read or in some cases, potentially write
    data to
    and from locations in the processes' memory. To prevent against format string attacks, do not
    allow
    users or un-validated input to provide the format specification.
    Consider using a constant for the format specification, or strip all format
    specifiers from the input prior to calling the `syslog` function.

    For more information please see: https://capec.mitre.org/data/definitions/67.html
  metadata:
    shortDescription: Potential format string vulnerability in syslog call
    cwe: CWE-134
    owasp: A1:2017-Injection
    primary_identifier: flawfinder.syslog-1
    secondary_identifiers:
    - name: Flawfinder - syslog
      type: flawfinder_func_name
      value: syslog
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.flawfinder.syslog-1
    shortlink: https://sg.run/2R7z
    semgrep.dev:
      rule:
        rule_id: ZqUgoz
        version_id: GxTvxA9
        url: https://semgrep.dev/playground/r/GxTvxA9/gitlab.flawfinder.syslog-1
        origin: community
  pattern-either:
  - patterns:
    - pattern: syslog($FUNC,...)
    - pattern-not: syslog($FUNC,"...",...)
  severity: ERROR
- id: gitlab.flawfinder.system-1
  languages:
  - c
  message: |
    It is generally not recommended to call out to the operating system to execute commands.
    When the application is executing file system based commands, user input should never be used
    in
    constructing commands or command arguments. If possible, determine if a library can be used
    instead to provide the same functionality. Otherwise, consider hard coding both the command
    and arguments to be used, or at the very least restricting which arguments can be passed
    to the command execution function.

    For more information please see:
    https://wiki.sei.cmu.edu/confluence/pages/viewpage.action?pageId=87152177
  metadata:
    shortDescription: Potential for OS command injection
    cwe: CWE-78
    owasp: A1:2017-Injection
    primary_identifier: flawfinder.system-1
    secondary_identifiers:
    - name: Flawfinder - system
      type: flawfinder_func_name
      value: system
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.flawfinder.system-1
    shortlink: https://sg.run/P80N
    semgrep.dev:
      rule:
        rule_id: zdU17X
        version_id: YDTp6Jx
        url: https://semgrep.dev/playground/r/YDTp6Jx/gitlab.flawfinder.system-1
        origin: community
  pattern: system(...)
  severity: ERROR
- id: gitlab.flawfinder.tmpfile-1
  languages:
  - c
  message: |
    There exists a possible race condition in between the time that `tmpfile` returns
    a pathname, and the time that the program opens it, another program might create
    that pathname using `open`, or create it as a symbolic link.

    Consider using the `mkstemp` function instead, but be aware it also contains possible
    risks. Ensure the process has called the `umask` function with restricted permissions prior
    to calling `mkstemp` and validate the permissions prior to using the file descriptor.

    For more information on temporary files please see:
    https://wiki.sei.cmu.edu/confluence/pages/viewpage.action?pageId=87152425
  metadata:
    shortDescription: Potential time of check time of use vulnerability (tmpfile)
    cwe: CWE-377
    owasp: A5:2017-Broken Access Control
    primary_identifier: flawfinder.tmpfile-1
    secondary_identifiers:
    - name: Flawfinder - tmpfile
      type: flawfinder_func_name
      value: tmpfile
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.flawfinder.tmpfile-1
    shortlink: https://sg.run/RPqE
    semgrep.dev:
      rule:
        rule_id: j2UR7A
        version_id: pZT16K4
        url: https://semgrep.dev/playground/r/pZT16K4/gitlab.flawfinder.tmpfile-1
        origin: community
  pattern: tmpfile(...)
  severity: INFO
- id: gitlab.flawfinder.tmpnam-1.tempnam-1
  languages:
  - c
  message: |
    There exists a possible race condition in between the time that `tempnam` or `tmpnam`
    returns a pathname, and the time that the program opens it, another program might create
    that pathname using `open`, or create it as a symbolic link.

    Consider using the `mkstemp` function instead, but be aware it also contains possible
    risks. Ensure the process has called the `umask` function with restricted permissions prior
    to calling `mkstemp` and validate the permissions prior to using the file descriptor.

    For more information on temporary files please see:
    https://wiki.sei.cmu.edu/confluence/pages/viewpage.action?pageId=87152425
  metadata:
    shortDescription: Potential time of check time of use vulnerability (tmpnam/tempnam)
    cwe: CWE-377
    owasp: A5:2017-Broken Access Control
    primary_identifier: flawfinder.tmpnam-1.tempnam-1
    secondary_identifiers:
    - name: Flawfinder - tmpnam
      type: flawfinder_func_name
      value: tmpnam
    - name: Flawfinder - tempnam
      type: flawfinder_func_name
      value: tempnam
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.flawfinder.tmpnam-1.tempnam-1
    shortlink: https://sg.run/Awkg
    semgrep.dev:
      rule:
        rule_id: 10Ueqw
        version_id: 2KTzQgk
        url: https://semgrep.dev/playground/r/2KTzQgk/gitlab.flawfinder.tmpnam-1.tempnam-1
        origin: community
  pattern-either:
  - pattern: tmpnam(...)
  - pattern: tempnam(...)
  severity: WARNING
- id: gitlab.flawfinder.ulimit-1
  languages:
  - c
  message: |
    The ulimit function is obsolete and no longer recommended. Use `getrlimit(2)`,
    `setrlimit`, or `sysconf` instead.

    For more information please see: https://linux.die.net/man/3/setrlimit
  metadata:
    shortDescription: Usage of deprecated function (ulimit)
    cwe: CWE-676
    primary_identifier: flawfinder.ulimit-1
    secondary_identifiers:
    - name: Flawfinder - ulimit
      type: flawfinder_func_name
      value: ulimit
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.flawfinder.ulimit-1
    shortlink: https://sg.run/v2nX
    semgrep.dev:
      rule:
        rule_id: ReUo4K
        version_id: 5PTdPX9
        url: https://semgrep.dev/playground/r/5PTdPX9/gitlab.flawfinder.ulimit-1
        origin: community
  pattern: ulimit(...)
  severity: INFO
- id: gitlab.flawfinder.umask-1
  languages:
  - c
  message: |
    The umask function call sets the process's file mode creation mask. umask values determine
    what permissions a file should be created with and who can read or write to these files.
    Ensure that umask is given most restrictive possible setting depending on the context,
    usually 066 or 077, for more information please see:
    https://en.wikipedia.org/wiki/Umask#Mask_effect.
  metadata:
    shortDescription: Ensure restrictive umask values
    cwe: CWE-732
    owasp: A6:2017-Security Misconfiguration
    primary_identifier: flawfinder.umask-1
    secondary_identifiers:
    - name: Flawfinder - umask
      type: flawfinder_func_name
      value: umask
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.flawfinder.umask-1
    shortlink: https://sg.run/brBZ
    semgrep.dev:
      rule:
        rule_id: KxUY1n
        version_id: YDTp6yl
        url: https://semgrep.dev/playground/r/YDTp6yl/gitlab.flawfinder.umask-1
        origin: community
  pattern: umask(...)
  severity: INFO
- id: gitlab.flawfinder.usleep-1
  languages:
  - c
  message: |
    The `usleep` function has been deprecated, use `nanosleep` or `setitimer` instead.

    For more information please see: https://linux.die.net/man/3/setitimer
  metadata:
    shortDescription: Usage of deprecated function (usleep)
    cwe: CWE-676
    primary_identifier: flawfinder.usleep-1
    secondary_identifiers:
    - name: Flawfinder - usleep
      type: flawfinder_func_name
      value: usleep
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.flawfinder.usleep-1
    shortlink: https://sg.run/d0xP
    semgrep.dev:
      rule:
        rule_id: AbUGoN
        version_id: GxTvxQ6
        url: https://semgrep.dev/playground/r/GxTvxQ6/gitlab.flawfinder.usleep-1
        origin: community
  pattern: usleep(...)
  severity: INFO
- id: gitlab.flawfinder.vfork-1
  languages:
  - c
  message: |
    The `vfork` function is suffers from portability issues and is not recommended. In
    some Linux systems `vfork` is vulnerable to a race condition while the child process
    is running as the user's UID but hasn't executed `execve`. The user may be able to send
    signals to this process, which in `vfork` would not be sent to the parent process. As
    a result a user may be able to cause a denial of service against the privileged process.

    Use `fork` instead and be aware of other potential Time Of Check Time Of Use (TOCTOU)
    vulnerabilities.

    For more information please see:
    https://wiki.sei.cmu.edu/confluence/display/c/POS38-C.+Beware+of+race+conditions+when+using+fork+and+file+descriptors
  metadata:
    shortDescription: Potential time of check time of use vulnerability (vfork)
    cwe: CWE-362
    primary_identifier: flawfinder.vfork-1
    secondary_identifiers:
    - name: Flawfinder - vfork
      type: flawfinder_func_name
      value: vfork
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.flawfinder.vfork-1
    shortlink: https://sg.run/8R2J
    semgrep.dev:
      rule:
        rule_id: qNUb8v
        version_id: WrTWlvG
        url: https://semgrep.dev/playground/r/WrTWlvG/gitlab.flawfinder.vfork-1
        origin: community
  pattern: vfork(...)
  severity: INFO
- id: gitlab.security_code_scan.SCS0018-1
  languages:
  - csharp
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-inside: |
        public class $CLASS : Controller {
          ...
        }
    - pattern: "$PARAM"
    - pattern-either:
      - patterns:
        - metavariable-regex:
            metavariable: "$HTTP_ANNO"
            regex: "^(Http)"
        - pattern-inside: |
            [$HTTP_ANNO]
            public string $METHOD(...,$PARAM,...){...}
      - pattern-inside: 'public IActionResult $METHOD(...,$PARAM,...){...}

          '
  pattern-sanitizers:
  - pattern-either:
    - pattern: "(Microsoft.Extensions.FileProviders.PhysicalFileProvider $E).GetFileInfo(...)"
    - pattern: "(System.Web.HttpServerUtility $E).MapPath(...)"
    - pattern: "(System.Web.HttpServerUtilityBase $E).MapPath(...)"
    - pattern: "(System.Web.HttpRequest $E).MapPath(...)"
  pattern-sinks:
  - pattern-either:
    - pattern: System.IO.Directory.Delete(...)
    - pattern: System.IO.Directory.GetFiles(...)
    - pattern: System.IO.Directory.Move(...)
    - pattern: System.IO.File.AppendAllLines(...)
    - pattern: System.IO.File.AppendAllLinesAsync(...)
    - pattern: System.IO.File.AppendAllText(...)
    - pattern: System.IO.File.AppendAllTextAsync(...)
    - pattern: System.IO.File.AppendText(...)
    - pattern: System.IO.File.Copy(...)
    - pattern: System.IO.File.Create(...)
    - pattern: System.IO.File.CreateText(...)
    - pattern: System.IO.File.Delete(...)
    - pattern: System.IO.File.Move(...)
    - pattern: System.IO.File.Open(...)
    - pattern: System.IO.File.OpenRead(...)
    - pattern: System.IO.File.OpenText(...)
    - pattern: System.IO.File.OpenWrite(...)
    - pattern: System.IO.File.ReadAllBytes(...)
    - pattern: System.IO.File.ReadAllBytesAsync(...)
    - pattern: System.IO.File.ReadAllLines(...)
    - pattern: System.IO.File.ReadAllLinesAsync(...)
    - pattern: System.IO.File.ReadAllText(...)
    - pattern: System.IO.File.ReadAllTextAsync(...)
    - pattern: System.IO.File.ReadLines(...)
    - pattern: System.IO.File.Replace(...)
    - pattern: System.IO.File.SetAccessControl(...)
    - pattern: System.IO.File.WriteAllBytes(...)
    - pattern: System.IO.File.WriteAllBytesAsync(...)
    - pattern: System.IO.File.WriteAllLines(...)
    - pattern: System.IO.File.WriteAllLinesAsync(...)
    - pattern: System.IO.File.WriteAllText(...)
    - pattern: System.IO.File.WriteAllTextAsync(...)
    - pattern: new System.IO.FileInfo(...)
    - pattern: "(System.IO.FileInfo $E).CopyTo(...)"
    - pattern: "(System.IO.FileInfo $E).MoveTo(...)"
    - pattern: "(System.IO.FileInfo $E).Replace(...)"
    - pattern: System.Reflection.Assembly.LoadFile(...)
    - pattern: System.Reflection.Assembly.LoadFrom(...)
    - pattern: System.Reflection.Assembly.ReflectionOnlyLoadFrom(...)
    - pattern: System.Reflection.Assembly.UnsafeLoadFrom(...)
    - pattern: System.AppDomain.AppendPrivatePath(...)
    - pattern: System.Xml.XmlReader.Create(...)
    - pattern: new System.IO.StreamReader.ctor(...)
    - pattern: new System.IO.StreamWriter.ctor(...)
    - pattern: new System.IO.FileStream.ctor(...)
    - pattern: new System.Web.Mvc.FilePathResult(...)
    - pattern: new Microsoft.AspNetCore.Mvc.PhysicalFileResult(...)
    - pattern: "(Microsoft.AspNetCore.Mvc.RazorPages.PageModel $E).PhysicalFile(...)"
    - pattern: "(System.Web.UI.WebControls.FileUpload $E).SaveAs(...)"
    - pattern: "(System.Web.HttpResponse $E).TransmitFile(...)"
    - pattern: "(System.Web.HttpResponse $E).WriteFile(...)"
    - pattern: "(System.Web.HttpResponseBase $E).TransmitFile(...)"
    - pattern: "(System.Web.HttpResponseBase $E).WriteFile(...)"
    - pattern: "(System.IO.Compression.ZipFileExtensions $E).CreateEntryFromFile(...)"
    - pattern: "(System.IO.Compression.ZipFileExtensions $E).ExtractToFile(...)"
    - pattern: "(System.IO.Compression.ZipFileExtensions $E).ExtractToDirectory(...)"
    - pattern: "(System.Net.WebClient $E).DownloadFile(...)"
    - pattern: "(System.Net.WebClient $E).DownloadFileAsync(...)"
    - pattern: "(System.Net.WebClient $E).DownloadFileTaskAsync(...)"
  message: |
    The application dynamically constructs file or path information. If the path
    information comes from user input, it could be abused to read sensitive files,
    access other users data, or aid in exploitation to gain further system access.

    User input should never be used in constructing paths or files for interacting
    with the filesystem. This includes filenames supplied by user uploads or downloads.
    If possible consider hashing user input or replacing it with unique values and
    use `System.IO.Path.GetFullPath` to resolve and validate the path information
    prior to processing any file functionality.

    Example using `Path.GetFullPath` and not allowing direct user input:
    ```
    // store user input alongside an ID we control
    struct userData
    {
        public string userFilename;
        public Guid id;
    }

    class Program
    {
        public static void Main()
        {
            userData data = new userData();
            // user input, saved only as a reference
            data.userFilename = "..\\test.txt";

            // random id as the filename
            data.id = Guid.NewGuid();

            // restrict all file processing to this directory only
            string basePath = "C:\\Restricted\\";

            // resolve the full path, but only use our random generated id
            string fullPath = Path.GetFullPath(basePath + data.id);

            // verify the path is contained within our basePath
            if (!fullPath.StartsWith(basePath)) {
                Console.WriteLine("Invalid path specified!");
                return;
            }
            // process / work with file
        }
    }
    ```

    For more information on path traversal issues see OWASP:
    https://owasp.org/www-community/attacks/Path_Traversal
  metadata:
    shortDescription: Improper limitation of a pathname to a restricted directory
      ('Path Traversal')
    cwe: CWE-22
    primary_identifier: security_code_scan.SCS0018-1
    secondary_identifiers:
    - name: SCS0018
      type: security_code_scan_rule_id
      value: SCS0018
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.security_code_scan.SCS0018-1
    shortlink: https://sg.run/zrpd
    semgrep.dev:
      rule:
        rule_id: BYUy1X
        version_id: bZTbKYe
        url: https://semgrep.dev/playground/r/bZTbKYe/gitlab.security_code_scan.SCS0018-1
        origin: community
  severity: WARNING
- id: mobsf.mobsfscan.android.hidden_ui.android_hidden_ui
  patterns:
  - pattern-either:
    - pattern: "$X.setVisibility(View.GONE);\n"
    - pattern: |
        $V = View.GONE;
        ...
        $X.setVisibility($V);
    - pattern: "$X.setVisibility(View.INVISIBLE);\n"
    - pattern: |
        $V = View.INVISIBLE;
        ...
        $X.setVisibility($V);
  message: Hidden elements in view can be used to hide data from user. But this data
    can be leaked.
  languages:
  - java
  severity: ERROR
  metadata:
    cwe: cwe-919
    owasp-mobile: m1
    masvs: storage-7
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x05d-Testing-Data-Storage.md#checking-for-sensitive-data-disclosure-through-the-user-interface-mstg-storage-7
    license: LGPL-3.0-or-later
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/mobsf.mobsfscan.android.hidden_ui.android_hidden_ui
    shortlink: https://sg.run/YeEe
    semgrep.dev:
      rule:
        rule_id: L1UJDJ
        version_id: PkTpOL
        url: https://semgrep.dev/playground/r/PkTpOL/mobsf.mobsfscan.android.hidden_ui.android_hidden_ui
        origin: community
- id: mobsf.mobsfscan.android.logging.android_logging
  patterns:
  - pattern-not: System.out.print();
  - pattern-not: System.out.println();
  - pattern-not: System.err.print();
  - pattern-not: System.err.println();
  - pattern-not: Log.$D("...", "...", ...);
  - pattern-not: Log.$D($T, "...", ...);
  - pattern-not: System.out.print("...");
  - pattern-not: System.out.println("...");
  - pattern-not: System.err.print("...");
  - pattern-not: System.err.println("...");
  - pattern-either:
    - pattern: 'Log.$D($T, $X + "...", ...);

        '
    - pattern: 'Log.$D($T, "..." + $X + "...", ...);

        '
    - pattern: 'Log.$D($T, "..." + $X, ...);

        '
    - pattern: |
        $Y = $Z;
        ...
        Log.$D($T,<... $Y ...>, ...);
    - pattern: 'System.out.print(...);

        '
    - pattern: 'System.err.print(...);

        '
    - pattern: 'System.out.println(...);

        '
    - pattern: 'System.err.println(...);

        '
  message: The App logs information. Please ensure that sensitive information is never
    logged.
  languages:
  - java
  severity: INFO
  metadata:
    cwe: cwe-532
    owasp-mobile: m1
    masvs: storage-3
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x05d-Testing-Data-Storage.md#logs
    license: LGPL-3.0-or-later
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/mobsf.mobsfscan.android.logging.android_logging
    shortlink: https://sg.run/6pQo
    semgrep.dev:
      rule:
        rule_id: 8GU0OP
        version_id: JdTJe7
        url: https://semgrep.dev/playground/r/JdTJe7/mobsf.mobsfscan.android.logging.android_logging
        origin: community
- id: mobsf.mobsfscan.android.secrets.hardcoded_api_key
  patterns:
  - pattern-not: $X = "";
  - pattern-not: $M($X, "", ...);
  - pattern-either:
    - pattern: '$X = "...";

        '
    - pattern: '$M($X, "...", ...);

        '
  - metavariable-regex:
      metavariable: "$X"
      regex: "(?i:^.{0,100}key.{0,100})"
  message: A hardcoded Key is identified.
  languages:
  - java
  severity: WARNING
  metadata:
    cwe: cwe-798
    owasp-mobile: m9
    masvs: storage-14
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x05d-Testing-Data-Storage.md#storing-a-key---example
    license: LGPL-3.0-or-later
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/mobsf.mobsfscan.android.secrets.hardcoded_api_key
    shortlink: https://sg.run/p02g
    semgrep.dev:
      rule:
        rule_id: 3qUgDz
        version_id: WrTWOdb
        url: https://semgrep.dev/playground/r/WrTWOdb/mobsf.mobsfscan.android.secrets.hardcoded_api_key
        origin: community
- id: mobsf.mobsfscan.android.secrets.hardcoded_password
  patterns:
  - pattern-not: $X = "";
  - pattern-not: $M($X, "", ...);
  - pattern-either:
    - pattern: '$X = "...";

        '
    - pattern: '$M($X, "...", ...);

        '
  - metavariable-regex:
      metavariable: "$X"
      regex: "(?i:^.{0,100}pass.{0,100})"
  message: A hardcoded password in plain text is identified.
  languages:
  - java
  severity: WARNING
  metadata:
    cwe: cwe-798
    owasp-mobile: m9
    masvs: storage-14
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x05d-Testing-Data-Storage.md#storing-a-key---example
    license: LGPL-3.0-or-later
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/mobsf.mobsfscan.android.secrets.hardcoded_password
    shortlink: https://sg.run/oWp9
    semgrep.dev:
      rule:
        rule_id: gxUpG8
        version_id: BjTXxew
        url: https://semgrep.dev/playground/r/BjTXxew/mobsf.mobsfscan.android.secrets.hardcoded_password
        origin: community
- id: mobsf.mobsfscan.android.secrets.hardcoded_secret
  patterns:
  - pattern-not: $X = "";
  - pattern-not: $M($X, "", ...);
  - pattern-either:
    - pattern: '$X = "...";

        '
    - pattern: '$M($X, "...", ...);

        '
  - metavariable-regex:
      metavariable: "$X"
      regex: "(?i:^.{0,100}secret.{0,100})"
  message: A hardcoded secret is identified.
  languages:
  - java
  severity: WARNING
  metadata:
    cwe: cwe-798
    owasp-mobile: m9
    masvs: storage-14
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x05d-Testing-Data-Storage.md#storing-a-key---example
    license: LGPL-3.0-or-later
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/mobsf.mobsfscan.android.secrets.hardcoded_secret
    shortlink: https://sg.run/23O0
    semgrep.dev:
      rule:
        rule_id: 4bUJWL
        version_id: 0bTLywO
        url: https://semgrep.dev/playground/r/0bTLywO/mobsf.mobsfscan.android.secrets.hardcoded_secret
        origin: community
- id: mobsf.mobsfscan.android.secrets.hardcoded_username
  patterns:
  - pattern-not: $X = "";
  - pattern-not: $M($X, "", ...);
  - pattern-either:
    - pattern: '$X = "...";

        '
    - pattern: '$M($X, "...", ...);

        '
  - metavariable-regex:
      metavariable: "$X"
      regex: "(?i:^.{0,100}user.{0,100})"
  message: A hardcoded username in plain text is identified.
  languages:
  - java
  severity: WARNING
  metadata:
    cwe: cwe-798
    owasp-mobile: m9
    masvs: storage-14
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x05d-Testing-Data-Storage.md#storing-a-key---example
    license: LGPL-3.0-or-later
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/mobsf.mobsfscan.android.secrets.hardcoded_username
    shortlink: https://sg.run/zXGG
    semgrep.dev:
      rule:
        rule_id: QrULll
        version_id: DkT6qGO
        url: https://semgrep.dev/playground/r/DkT6qGO/mobsf.mobsfscan.android.secrets.hardcoded_username
        origin: community
- id: mobsf.mobsfscan.android.word_readable_writable.world_readable
  patterns:
  - pattern-either:
    - pattern: 'Context.MODE_WORLD_READABLE

        '
  message: The file is World Readable. Any App can read from the file.
  languages:
  - java
  severity: WARNING
  metadata:
    cwe: cwe-276
    owasp-mobile: m2
    masvs: storage-2
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x05d-Testing-Data-Storage.md#testing-local-storage-for-sensitive-data-mstg-storage-1-and-mstg-storage-2
    license: LGPL-3.0-or-later
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/mobsf.mobsfscan.android.word_readable_writable.world_readable
    shortlink: https://sg.run/XxEK
    semgrep.dev:
      rule:
        rule_id: PeUKq9
        version_id: BjT9GN
        url: https://semgrep.dev/playground/r/BjT9GN/mobsf.mobsfscan.android.word_readable_writable.world_readable
        origin: community
- id: mobsf.mobsfscan.android.word_readable_writable.world_writeable
  patterns:
  - pattern-either:
    - pattern: 'Context.MODE_WORLD_WRITEABLE

        '
  message: The file is World Readable and Writable. Any App can read/write to the
    file.
  languages:
  - java
  severity: WARNING
  metadata:
    cwe: cwe-276
    owasp-mobile: m2
    masvs: storage-2
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x05d-Testing-Data-Storage.md#testing-local-storage-for-sensitive-data-mstg-storage-1-and-mstg-storage-2
    license: LGPL-3.0-or-later
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/mobsf.mobsfscan.android.word_readable_writable.world_writeable
    shortlink: https://sg.run/jGlY
    semgrep.dev:
      rule:
        rule_id: JDU4Ab
        version_id: DkTOeW
        url: https://semgrep.dev/playground/r/DkTOeW/mobsf.mobsfscan.android.word_readable_writable.world_writeable
        origin: community
- id: mobsf.mobsfscan.best_practices.android_safetynetapi.android_safetynet_api
  patterns:
  - pattern-either:
    - pattern: 'import com.google.android.gms.safetynet.SafetyNetApi;

        '
    - pattern: |
        $S = SafetyNet.getClient(...);
        ...
        $T = $S.attest(...);
    - pattern: 'new RNGoogleSafetyNetPackage(...)

        '
  message: 'This app does not uses SafetyNet Attestation API that provides cryptographically-signed
    attestation, assessing the device''s integrity. This check helps to ensure that
    the servers are interacting with the genuine app running on a genuine Android
    device. '
  languages:
  - java
  severity: INFO
  metadata:
    cwe: cwe-353
    owasp-mobile: m8
    masvs: resilience-1
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x05j-Testing-Resiliency-Against-Reverse-Engineering.md#testing-root-detection-mstg-resilience-1
    license: LGPL-3.0-or-later
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/mobsf.mobsfscan.best_practices.android_safetynetapi.android_safetynet_api
    shortlink: https://sg.run/1lOw
    semgrep.dev:
      rule:
        rule_id: 5rUx0W
        version_id: WrTR6P
        url: https://semgrep.dev/playground/r/WrTR6P/mobsf.mobsfscan.best_practices.android_safetynetapi.android_safetynet_api
        origin: community
- id: mobsf.mobsfscan.best_practices.flag_secure.android_prevent_screenshot
  patterns:
  - pattern-either:
    - pattern: 'getWindow().setFlags(WindowManager.LayoutParams.FLAG_SECURE, ...);

        '
    - pattern: |
        $V = WindowManager.LayoutParams.FLAG_SECURE;
        ...
        getWindow().setFlags($V);
    - pattern: 'getWindow().addFlags(WindowManager.LayoutParams.FLAG_SECURE, ...);

        '
    - pattern: |
        $V = WindowManager.LayoutParams.FLAG_SECURE;
        ...
        getWindow().addFlags($V);
    - pattern: "$A.getWindow().setFlags(WindowManager.LayoutParams.FLAG_SECURE, ...);\n"
    - pattern: |
        $V = WindowManager.LayoutParams.FLAG_SECURE;
        ...
        $A.getWindow().setFlags($V);
    - pattern: "$A.getWindow().addFlags(WindowManager.LayoutParams.FLAG_SECURE, ...);\n"
    - pattern: |
        $V = WindowManager.LayoutParams.FLAG_SECURE;
        ...
        $A.getWindow().addFlags($V);
  message: This app does not have capabilities to prevent against Screenshots from
    Recent Task History/ Now On Tap etc.
  languages:
  - java
  severity: INFO
  metadata:
    cwe: cwe-200
    owasp-mobile: m2
    masvs: storage-9
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x05d-Testing-Data-Storage.md#finding-sensitive-information-in-auto-generated-screenshots-mstg-storage-9
    license: LGPL-3.0-or-later
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/mobsf.mobsfscan.best_practices.flag_secure.android_prevent_screenshot
    shortlink: https://sg.run/9jOY
    semgrep.dev:
      rule:
        rule_id: GdUg51
        version_id: 0bT462
        url: https://semgrep.dev/playground/r/0bT462/mobsf.mobsfscan.best_practices.flag_secure.android_prevent_screenshot
        origin: community
- id: mobsf.mobsfscan.best_practices.root_detection.android_root_detection
  patterns:
  - pattern-either:
    - pattern: "$J.isJailBroken(...)\n"
    - pattern: "$R.isDeviceRooted(...)\n"
    - pattern: "$R.isRooted(...)\n"
    - pattern: 'RootTools.isAccessGiven(...)

        '
    - pattern: '$MTD.contains("test-keys")

        '
  message: This app does not have root detection capabilities. Running a sensitive
    application on a rooted device questions the device integrity and affects users
    data.
  languages:
  - java
  severity: INFO
  metadata:
    cwe: cwe-919
    owasp-mobile: m8
    masvs: resilience-1
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x05j-Testing-Resiliency-Against-Reverse-Engineering.md#testing-root-detection-mstg-resilience-1
    license: LGPL-3.0-or-later
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/mobsf.mobsfscan.best_practices.root_detection.android_root_detection
    shortlink: https://sg.run/y25x
    semgrep.dev:
      rule:
        rule_id: ReUdYj
        version_id: K3TpO5
        url: https://semgrep.dev/playground/r/K3TpO5/mobsf.mobsfscan.best_practices.root_detection.android_root_detection
        origin: community
- id: mobsf.mobsfscan.best_practices.tapjacking.android_detect_tapjacking
  patterns:
  - pattern-either:
    - pattern: "$F.setFilterTouchesWhenObscured(true);\n"
  message: This app does not have capabilities to prevent tapjacking attacks. An attacker
    can hijack the user's taps and tricks him into performing some critical operations
    that he did not intend to.
  languages:
  - java
  severity: INFO
  metadata:
    cwe: cwe-200
    owasp-mobile: m1
    masvs: platform-9
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x05h-Testing-Platform-Interaction.md#testing-for-overlay-attacks-mstg-platform-9
    license: LGPL-3.0-or-later
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/mobsf.mobsfscan.best_practices.tapjacking.android_detect_tapjacking
    shortlink: https://sg.run/rqjn
    semgrep.dev:
      rule:
        rule_id: AbUx1o
        version_id: qkT0KQ
        url: https://semgrep.dev/playground/r/qkT0KQ/mobsf.mobsfscan.best_practices.tapjacking.android_detect_tapjacking
        origin: community
- id: mobsf.mobsfscan.best_practices.tls_certificate_transparency.android_certificate_transparency
  patterns:
  - pattern-either:
    - pattern: 'import com.babylon.certificatetransparency;

        '
    - pattern: 'new CTInterceptorBuilder(...)

        '
    - pattern: 'new CTHostnameVerifierBuilder(...)

        '
  message: This app does not enforce TLS Certificate Transparency that helps to detect
    SSL certificates that have been mistakenly issued by a certificate authority or
    maliciously acquired from an otherwise unimpeachable certificate authority.
  languages:
  - java
  severity: INFO
  metadata:
    cwe: cwe-295
    owasp-mobile: m3
    masvs: network-4
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x05g-Testing-Network-Communication.md#testing-custom-certificate-stores-and-certificate-pinning-mstg-network-4
    license: LGPL-3.0-or-later
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/mobsf.mobsfscan.best_practices.tls_certificate_transparency.android_certificate_transparency
    shortlink: https://sg.run/bERp
    semgrep.dev:
      rule:
        rule_id: BYUoO0
        version_id: l4TLNX
        url: https://semgrep.dev/playground/r/l4TLNX/mobsf.mobsfscan.best_practices.tls_certificate_transparency.android_certificate_transparency
        origin: community
- id: mobsf.mobsfscan.best_practices.tls_pinning.android_certificate_pinning
  patterns:
  - pattern-either:
    - pattern: 'import com.toyberman.RNSslPinningPackage;

        '
    - pattern: 'import org.thoughtcrime.ssl.pinning;

        '
    - pattern: 'new PinningValidationReportTestBroadcastReceiver()

        '
    - pattern: 'new CertificatePinner.Builder()

        '
    - pattern: 'CertificatePinner.Builder()

        '
    - pattern: 'TrustKit.getInstance().getSSLSocketFactory(...)

        '
    - pattern: |
        $X = $R.openRawResource(...);
        ...
        $KS = KeyStore.getInstance(...);
        ...
        $KS.load($X, ...);
        ...
        $T.init($KS);
    - pattern: 'TrustKit.initializeWithNetworkSecurityConfiguration(...);

        '
    - pattern: 'OkHttp2Helper.getPinningInterceptor()

        '
    - pattern: 'OkHttp3Helper.getPinningInterceptor()

        '
    - pattern: 'new PinningHostnameVerifier(...)

        '
    - pattern: 'PinningHelper.getPinnedHttpsURLConnection

        '
    - pattern: |
        $F.openRawResource(...);
        ...
        $X = new Picasso.Builder(...);
  message: This app does not use a TLS/SSL certificate or public key pinning in code
    to detect or prevent MITM attacks in secure communication channel. Please verify
    if pinning is enabled in `network_security_config.xml`.
  languages:
  - java
  severity: INFO
  metadata:
    cwe: cwe-295
    owasp-mobile: m3
    masvs: network-4
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x05g-Testing-Network-Communication.md#testing-custom-certificate-stores-and-certificate-pinning-mstg-network-4
    license: LGPL-3.0-or-later
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/mobsf.mobsfscan.best_practices.tls_pinning.android_certificate_pinning
    shortlink: https://sg.run/NXEp
    semgrep.dev:
      rule:
        rule_id: DbUL4y
        version_id: YDT38v
        url: https://semgrep.dev/playground/r/YDT38v/mobsf.mobsfscan.best_practices.tls_pinning.android_certificate_pinning
        origin: community
- id: mobsf.mobsfscan.crypto.aes_ecb.aes_ecb_mode
  patterns:
  - pattern-either:
    - pattern: 'Cipher.getInstance("=~/AES\/ECB.*/i")

        '
  message: The App uses ECB mode in Cryptographic encryption algorithm. ECB mode is
    known to be weak as it results in the same ciphertext for identical blocks of
    plaintext.
  severity: ERROR
  languages:
  - java
  metadata:
    cwe: cwe-327
    owasp-mobile: m5
    masvs: crypto-2
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x04g-Testing-Cryptography.md#weak-block-cipher-mode
    license: LGPL-3.0-or-later
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/mobsf.mobsfscan.crypto.aes_ecb.aes_ecb_mode
    shortlink: https://sg.run/kRY7
    semgrep.dev:
      rule:
        rule_id: WAUg2K
        version_id: 6xTL0J
        url: https://semgrep.dev/playground/r/6xTL0J/mobsf.mobsfscan.crypto.aes_ecb.aes_ecb_mode
        origin: community
- id: mobsf.mobsfscan.crypto.aes_ecb.aes_ecb_mode_default
  patterns:
  - pattern-either:
    - pattern: 'Cipher.getInstance("AES")

        '
  message: Calling Cipher.getInstance("AES") will return AES ECB mode by default.
    ECB mode is known to be weak as it results in the same ciphertext for identical
    blocks of plaintext.
  severity: ERROR
  languages:
  - java
  metadata:
    cwe: cwe-327
    owasp-mobile: m5
    masvs: crypto-2
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x04g-Testing-Cryptography.md#weak-block-cipher-mode
    license: LGPL-3.0-or-later
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/mobsf.mobsfscan.crypto.aes_ecb.aes_ecb_mode_default
    shortlink: https://sg.run/wzPY
    semgrep.dev:
      rule:
        rule_id: 0oUZRX
        version_id: o5T759
        url: https://semgrep.dev/playground/r/o5T759/mobsf.mobsfscan.crypto.aes_ecb.aes_ecb_mode_default
        origin: community
- id: mobsf.mobsfscan.crypto.aes_encryption_keys.aes_hardcoded_key
  patterns:
  - pattern-either:
    - pattern: "$S = new SecretKeySpec(\"...\".getBytes(), \"AES\");\n...\n$C.init(...,
        $S); \n"
    - pattern: |
        $P = "...";
        ...
        $S = new SecretKeySpec($P.getBytes(), "AES");
        ...
        $C.init(..., $S);
  message: Hardcoded encryption key makes AES symmetric encryption useless. An attacker
    can easily reverse engineer the application and recover the keys.
  languages:
  - java
  severity: ERROR
  metadata:
    cwe: cwe-321
    owasp-mobile: m5
    masvs: crypto-1
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x04g-Testing-Cryptography.md#common-configuration-issues-mstg-crypto-1-mstg-crypto-2-and-mstg-crypto-3
    license: LGPL-3.0-or-later
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/mobsf.mobsfscan.crypto.aes_encryption_keys.aes_hardcoded_key
    shortlink: https://sg.run/xpJz
    semgrep.dev:
      rule:
        rule_id: KxURB0
        version_id: zyTxeb
        url: https://semgrep.dev/playground/r/zyTxeb/mobsf.mobsfscan.crypto.aes_encryption_keys.aes_hardcoded_key
        origin: community
- id: mobsf.mobsfscan.crypto.cbc_padding_oracle.cbc_padding_oracle
  patterns:
  - pattern-either:
    - pattern: 'Cipher.getInstance("AES/CBC/PKCS5Padding")

        '
    - pattern: 'Cipher.getInstance("Blowfish/CBC/PKCS5Padding")

        '
    - pattern: 'Cipher.getInstance("DES/CBC/PKCS5Padding")

        '
    - pattern: 'Cipher.getInstance("AES/CBC/PKCS7Padding")

        '
    - pattern: 'Cipher.getInstance("Blowfish/CBC/PKCS7Padding")

        '
    - pattern: 'Cipher.getInstance("DES/CBC/PKCS7Padding")

        '
  message: The App uses the encryption mode CBC with PKCS5/PKCS7 padding. This configuration
    is vulnerable to padding oracle attacks.
  languages:
  - java
  severity: ERROR
  metadata:
    cwe: cwe-649
    owasp-mobile: m5
    masvs: crypto-3
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x04g-Testing-Cryptography.md#padding-oracle-attacks-due-to-weaker-padding-or-block-operation-implementations
    license: LGPL-3.0-or-later
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/mobsf.mobsfscan.crypto.cbc_padding_oracle.cbc_padding_oracle
    shortlink: https://sg.run/OjEB
    semgrep.dev:
      rule:
        rule_id: qNUrzk
        version_id: pZTBQn
        url: https://semgrep.dev/playground/r/pZTBQn/mobsf.mobsfscan.crypto.cbc_padding_oracle.cbc_padding_oracle
        origin: community
- id: mobsf.mobsfscan.crypto.cbc_static_iv.cbc_static_iv
  patterns:
  - pattern-either:
    - pattern: |
        byte[] $X = {...};
        ...
        $Y =  new IvParameterSpec($X, ...);
        ...
        $C.getInstance("=~/AES/CBC.*/i");
    - pattern: |
        byte[] $X = "...".$FUNC(...);
        ...
        $Y =  new IvParameterSpec($X, ...);
        ...
        $C.getInstance("=~/AES/CBC.*/i");
  message: The IV for AES CBC mode should be random. A static IV makes the ciphertext
    vulnerable to Chosen Plaintext Attack.
  languages:
  - java
  severity: ERROR
  metadata:
    cwe: cwe-329
    owasp-mobile: m5
    masvs: crypto-5
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x04g-Testing-Cryptography.md#predictable-initialization-vector
    license: LGPL-3.0-or-later
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/mobsf.mobsfscan.crypto.cbc_static_iv.cbc_static_iv
    shortlink: https://sg.run/egDb
    semgrep.dev:
      rule:
        rule_id: lBUYwL
        version_id: 2KTD6R
        url: https://semgrep.dev/playground/r/2KTD6R/mobsf.mobsfscan.crypto.cbc_static_iv.cbc_static_iv
        origin: community
- id: mobsf.mobsfscan.crypto.insecure_random.java_insecure_random
  patterns:
  - pattern-either:
    - pattern: 'import java.util.Random;

        '
    - pattern: 'import java.util.concurrent.ThreadLocalRandom;

        '
  message: The App uses an insecure Random Number Generator.
  languages:
  - java
  severity: WARNING
  metadata:
    cwe: cwe-330
    owasp-mobile: m5
    masvs: crypto-6
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x04g-Testing-Cryptography.md#weak-random-number-generators
    license: LGPL-3.0-or-later
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/mobsf.mobsfscan.crypto.insecure_random.java_insecure_random
    shortlink: https://sg.run/vo4A
    semgrep.dev:
      rule:
        rule_id: PeUKqY
        version_id: X0TvJk
        url: https://semgrep.dev/playground/r/X0TvJk/mobsf.mobsfscan.crypto.insecure_random.java_insecure_random
        origin: community
- id: mobsf.mobsfscan.crypto.insecure_ssl_v3.insecure_sslv3
  patterns:
  - pattern-either:
    - pattern: '$S.getInstance("SSLv3");

        '
  message: SSLv3 is insecure and has multiple known vulnerabilities.
  languages:
  - java
  severity: ERROR
  metadata:
    cwe: cwe-327
    owasp-mobile: m5
    masvs: crypto-4
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x04g-Testing-Cryptography.md#identifying-insecure-andor-deprecated-cryptographic-algorithms-mstg-crypto-4
    license: LGPL-3.0-or-later
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/mobsf.mobsfscan.crypto.insecure_ssl_v3.insecure_sslv3
    shortlink: https://sg.run/dnBZ
    semgrep.dev:
      rule:
        rule_id: JDU4Ag
        version_id: jQTE9J
        url: https://semgrep.dev/playground/r/jQTE9J/mobsf.mobsfscan.crypto.insecure_ssl_v3.insecure_sslv3
        origin: community
- id: mobsf.mobsfscan.crypto.rsa_no_oeap.rsa_no_oeap
  patterns:
  - pattern-either:
    - pattern: 'Cipher.getInstance($X, ...)

        '
    - pattern: 'javax.crypto.Cipher.getInstance($X, ...)

        '
  - metavariable-regex:
      metavariable: "$X"
      regex: "(?i:^.{0,100}rsa/.{1,23}/nopadding.{0,100})"
  message: This App uses RSA Crypto without OAEP padding. The purpose of the padding
    scheme is to prevent a number of attacks on RSA that only work when the encryption
    is performed without padding.
  languages:
  - java
  severity: ERROR
  metadata:
    cwe: cwe-780
    owasp-mobile: m5
    masvs: crypto-3
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x04g-Testing-Cryptography.md#mobile-app-cryptography
    license: LGPL-3.0-or-later
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/mobsf.mobsfscan.crypto.rsa_no_oeap.rsa_no_oeap
    shortlink: https://sg.run/ZZED
    semgrep.dev:
      rule:
        rule_id: 5rUx0n
        version_id: K3TvnrN
        url: https://semgrep.dev/playground/r/K3TvnrN/mobsf.mobsfscan.crypto.rsa_no_oeap.rsa_no_oeap
        origin: community
- id: mobsf.mobsfscan.crypto.sha1_hash.sha1_hash
  patterns:
  - pattern-either:
    - pattern: '$C.getInstance("=~/sha-1|sha1/i", ...);

        '
    - pattern: 'DigestUtils.sha1Hex(...);

        '
    - pattern: 'DigestUtils.sha1(...);

        '
    - pattern: 'DigestUtils.sha(...);

        '
  message: SHA1 Hash algorithm used. The SHA1 hash is known to have hash collisions.
  languages:
  - java
  severity: WARNING
  metadata:
    cwe: cwe-327
    owasp-mobile: m5
    masvs: crypto-4
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x04g-Testing-Cryptography.md#identifying-insecure-andor-deprecated-cryptographic-algorithms-mstg-crypto-4
    license: LGPL-3.0-or-later
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/mobsf.mobsfscan.crypto.sha1_hash.sha1_hash
    shortlink: https://sg.run/nDyX
    semgrep.dev:
      rule:
        rule_id: GdUgKL
        version_id: 9lTjnn
        url: https://semgrep.dev/playground/r/9lTjnn/mobsf.mobsfscan.crypto.sha1_hash.sha1_hash
        origin: community
- id: mobsf.mobsfscan.crypto.weak_ciphers.weak_cipher
  patterns:
  - pattern-either:
    - pattern: '$C.getInstance("=~/des|desede|rc2|rc4|blowfish/i", ...);

        '
    - pattern: "$C = new NullCipher();\n"
  message: Weak encryption algorithm identified. This algorithm is vulnerable to cryptographic
    attacks.
  severity: ERROR
  languages:
  - java
  metadata:
    cwe: cwe-327
    owasp-mobile: m5
    masvs: crypto-4
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x04g-Testing-Cryptography.md#identifying-insecure-andor-deprecated-cryptographic-algorithms-mstg-crypto-4
    license: LGPL-3.0-or-later
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/mobsf.mobsfscan.crypto.weak_ciphers.weak_cipher
    shortlink: https://sg.run/EKZw
    semgrep.dev:
      rule:
        rule_id: ReUdZD
        version_id: yeT6dQ
        url: https://semgrep.dev/playground/r/yeT6dQ/mobsf.mobsfscan.crypto.weak_ciphers.weak_cipher
        origin: community
- id: mobsf.mobsfscan.crypto.weak_hashes.weak_hash
  patterns:
  - pattern-either:
    - pattern: '$C.getInstance("=~/md5|md4/i", ...);

        '
    - pattern: "$C.Files.hash(..., Hashing.md5());\n"
    - pattern: 'Files.hash(..., Hashing.md5());

        '
    - pattern: 'DigestUtils.md5Hex(...);

        '
    - pattern: 'DigestUtils.md5(...);

        '
  message: Weak Hash algorithm used. The hash algorithm is known to have hash collisions.
  severity: WARNING
  languages:
  - java
  metadata:
    cwe: cwe-327
    owasp-mobile: m5
    masvs: crypto-4
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x04g-Testing-Cryptography.md#identifying-insecure-andor-deprecated-cryptographic-algorithms-mstg-crypto-4
    license: LGPL-3.0-or-later
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/mobsf.mobsfscan.crypto.weak_hashes.weak_hash
    shortlink: https://sg.run/72wZ
    semgrep.dev:
      rule:
        rule_id: AbUxZk
        version_id: rxT58X
        url: https://semgrep.dev/playground/r/rxT58X/mobsf.mobsfscan.crypto.weak_hashes.weak_hash
        origin: community
- id: mobsf.mobsfscan.crypto.weak_iv.weak_iv
  patterns:
  - pattern-either:
    - pattern: |
        byte[] $X = {
          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
        };
        ...
        $Y =  new IvParameterSpec($X, ...);
    - pattern: |
        byte[] $X = {
          0x01,0x02,0x03,0x04,0x05,0x06,0x07
        };
        ...
        $Y =  new IvParameterSpec($X, ...);
  message: The App may use weak IVs like "0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00"
    or "0x01,0x02,0x03,0x04,0x05,0x06,0x07". Not using a random IV makes the resulting
    ciphertext much more predictable and susceptible to a dictionary attack.
  languages:
  - java
  severity: WARNING
  metadata:
    cwe: cwe-1204
    owasp-mobile: m5
    masvs: crypto-5
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x04g-Testing-Cryptography.md#mobile-app-cryptography
    license: LGPL-3.0-or-later
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/mobsf.mobsfscan.crypto.weak_iv.weak_iv
    shortlink: https://sg.run/LpZr
    semgrep.dev:
      rule:
        rule_id: BYUonD
        version_id: bZTY4P
        url: https://semgrep.dev/playground/r/bZTY4P/mobsf.mobsfscan.crypto.weak_iv.weak_iv
        origin: community
- id: mobsf.mobsfscan.crypto.weak_key_size.weak_key_size
  patterns:
  - pattern-either:
    - pattern: |
        $K = $G.getInstance("RSA");
        ...
        $K.initialize(1024);
    - pattern: |
        $K = $G.getInstance("RSA");
        ...
        $K.initialize(512);
    - pattern: |
        $K = $G.getInstance("EC");
        ...
        $K.initialize(new ECGenParameterSpec("secp112r1"));
    - pattern: |
        $K = $G.getInstance("EC");
        ...
        $S = new ECGenParameterSpec("secp112r1");
        ...
        $K.initialize($S);
    - pattern: |
        $K = $G.getInstance("EC");
        ...
        $K.initialize(new ECGenParameterSpec("secp224r1"));
    - pattern: |
        $K = $G.getInstance("EC");
        ...
        $S = new ECGenParameterSpec("secp224r1");
        ...
        $K.initialize($S);
    - pattern: |
        $K = $G.getInstance("Blowfish");
        ...
        $K.init(64);
    - pattern: |
        $K = $G.getInstance("AES");
        ...
        $K.init(64);
  message: Cryptographic implementations with insufficient key length is susceptible
    to bruteforce attacks.
  languages:
  - java
  severity: ERROR
  metadata:
    cwe: cwe-326
    owasp-mobile: m5
    masvs: crypto-3
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x04g-Testing-Cryptography.md#common-configuration-issues-mstg-crypto-1-mstg-crypto-2-and-mstg-crypto-3
    license: LGPL-3.0-or-later
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/mobsf.mobsfscan.crypto.weak_key_size.weak_key_size
    shortlink: https://sg.run/8Xey
    semgrep.dev:
      rule:
        rule_id: DbULZp
        version_id: NdTxQW
        url: https://semgrep.dev/playground/r/NdTxQW/mobsf.mobsfscan.crypto.weak_key_size.weak_key_size
        origin: community
- id: mobsf.mobsfscan.deserialization.jackson_deserialization.jackson_deserialization
  patterns:
  - pattern-either:
    - pattern: |
        import com.fasterxml.jackson.databind.ObjectMapper;
        ...
        $Z.enableDefaultTyping();
  message: The app uses jackson deserialization library. Deserialization of untrusted
    input can result in arbitrary code execution. Consider using HMACs to sign the
    data stream to make sure it is not tampered with, or consider only  transmitting
    object fields and populating a new object.
  languages:
  - java
  severity: ERROR
  metadata:
    cwe: cwe-502
    owasp-mobile: m1
    masvs: platform-8
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x05h-Testing-Platform-Interaction.md#testing-object-persistence-mstg-platform-8
    license: LGPL-3.0-or-later
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/mobsf.mobsfscan.deserialization.jackson_deserialization.jackson_deserialization
    shortlink: https://sg.run/gPzJ
    semgrep.dev:
      rule:
        rule_id: WAUgAZ
        version_id: kbToZ0
        url: https://semgrep.dev/playground/r/kbToZ0/mobsf.mobsfscan.deserialization.jackson_deserialization.jackson_deserialization
        origin: community
- id: mobsf.mobsfscan.deserialization.object_deserialization.object_deserialization
  patterns:
  - pattern: new ObjectInputStream(...);
  severity: WARNING
  languages:
  - java
  message: 'Found object deserialization using ObjectInputStream. Deserializing entire
    Java objects is dangerous because malicious actors can create Java object streams
    with unintended consequences. Ensure that the objects being deserialized are not
    user-controlled. Consider using HMACs to sign the data stream to make sure it
    is not tampered with, or consider only  transmitting object fields and populating
    a new object.

    '
  metadata:
    cwe: cwe-502
    owasp-mobile: m1
    masvs: platform-8
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x05h-Testing-Platform-Interaction.md#testing-object-persistence-mstg-platform-8
    license: LGPL-3.0-or-later
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/mobsf.mobsfscan.deserialization.object_deserialization.object_deserialization
    shortlink: https://sg.run/QxZ4
    semgrep.dev:
      rule:
        rule_id: 0oUZYJ
        version_id: w8Te0B
        url: https://semgrep.dev/playground/r/w8Te0B/mobsf.mobsfscan.deserialization.object_deserialization.object_deserialization
        origin: community
- id: mobsf.mobsfscan.injection.command_injection.command_injection
  patterns:
  - pattern-not: Runtime.getRuntime().exec("...", ...);
  - pattern-not: Runtime.getRuntime().exec(new String[] {"...", ...}, ...);
  - pattern-either:
    - pattern: 'Runtime.getRuntime().exec(...);

        '
  message: User controlled strings in exec() will result in command execution.
  languages:
  - java
  severity: ERROR
  metadata:
    cwe: cwe-78
    owasp-mobile: m7
    masvs: platform-2
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x04h-Testing-Code-Quality.md#injection-flaws-mstg-arch-2-and-mstg-platform-2
    license: LGPL-3.0-or-later
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/mobsf.mobsfscan.injection.command_injection.command_injection
    shortlink: https://sg.run/36wr
    semgrep.dev:
      rule:
        rule_id: KxUR67
        version_id: xyTY3g
        url: https://semgrep.dev/playground/r/xyTY3g/mobsf.mobsfscan.injection.command_injection.command_injection
        origin: community
- id: mobsf.mobsfscan.injection.command_injection_formated.command_injection_warning
  patterns:
  - pattern-either:
    - pattern: "$RUNTIME.exec($X + $Y);"
    - pattern: "$RUNTIME.exec(String.format(...));"
    - pattern: "$RUNTIME.loadLibrary($X + $Y);"
    - pattern: "$RUNTIME.loadLibrary(String.format(...));"
    - patterns:
      - pattern-either:
        - pattern: '$RUNTIME.exec("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",$ARG,...)

            '
        - pattern: '$RUNTIME.exec(Arrays.asList("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",$ARG,...),...)

            '
        - pattern: '$RUNTIME.exec(new String[]{"=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",$ARG,...},...)

            '
        - patterns:
          - pattern-either:
            - pattern: '$RUNTIME.exec($CMD,"-c",$ARG,...)

                '
            - pattern: '$RUNTIME.exec(Arrays.asList($CMD,"-c",$ARG,...),...)

                '
            - pattern: '$RUNTIME.exec(new String[]{$CMD,"-c",$ARG,...},...)

                '
          - pattern-inside: |
              $CMD = "=~/(sh|bash|ksh|csh|tcsh|zsh)/";
              ...
      - pattern-not-inside: |
          $ARG = "...";
          ...
      - pattern-not: '$RUNTIME.exec("...","...","...",...)

          '
      - pattern-not: '$RUNTIME.exec(new String[]{"...","...","...",...},...)

          '
      - pattern-not: '$RUNTIME.exec(Arrays.asList("...","...","...",...),...)

          '
  - pattern-inside: |
      $TYPE $RUNTIME = Runtime.getRuntime(...);
      ...
  message: 'A formatted or concatenated string was detected as input to a java.lang.Runtime
    call. This is dangerous if a variable is controlled by user input and could result
    in a command injection. Ensure your variables are not controlled by users or sufficiently
    sanitized.

    '
  severity: WARNING
  languages:
  - java
  metadata:
    cwe: cwe-78
    owasp-mobile: m7
    masvs: platform-2
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x04h-Testing-Code-Quality.md#injection-flaws-mstg-arch-2-and-mstg-platform-2
    license: LGPL-3.0-or-later
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/mobsf.mobsfscan.injection.command_injection_formated.command_injection_warning
    shortlink: https://sg.run/4oQl
    semgrep.dev:
      rule:
        rule_id: qNUrPW
        version_id: O9TPZ9
        url: https://semgrep.dev/playground/r/O9TPZ9/mobsf.mobsfscan.injection.command_injection_formated.command_injection_warning
        origin: community
- id: mobsf.mobsfscan.injection.sqlite_injection.sqlite_injection
  patterns:
  - pattern-not: $DB.execSQL("..." , ...);
  - pattern-not: $DB.rawQuery("..." , ...);
  - pattern-either:
    - pattern: '$DB.rawQuery("..." + $INP + "..." , ...);

        '
    - pattern: '$DB.rawQuery($INP + "..." , ... );

        '
    - pattern: '$DB.rawQuery($INP + "..." + $INP2, ...);

        '
    - pattern: '$DB.rawQuery($INP + "..." + $INP2 + "...", ...);

        '
    - pattern: '$DB.execSQL($INP + "..." , ...);

        '
    - pattern: '$DB.execSQL("..." + $INP + "..." , ...);

        '
    - pattern: '$DB.execSQL($INP + "..." + $INP2, ...);

        '
    - pattern: '$DB.execSQL($INP + "..." + $INP2 + "...", ...);

        '
  message: App uses SQLite Database and execute raw SQL query. Untrusted user input
    in raw SQL queries can cause SQL Injection. Also sensitive information should
    be encrypted and written to the database.
  languages:
  - java
  severity: WARNING
  metadata:
    cwe: cwe-78
    owasp-mobile: m7
    masvs: platform-2
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x04h-Testing-Code-Quality.md#injection-flaws-mstg-arch-2-and-mstg-platform-2
    license: LGPL-3.0-or-later
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/mobsf.mobsfscan.injection.sqlite_injection.sqlite_injection
    shortlink: https://sg.run/PxZY
    semgrep.dev:
      rule:
        rule_id: lBUYAy
        version_id: e1T6A5
        url: https://semgrep.dev/playground/r/e1T6A5/mobsf.mobsfscan.injection.sqlite_injection.sqlite_injection
        origin: community
- id: mobsf.mobsfscan.network.accept_self_signed.accept_self_signed_certificate
  patterns:
  - pattern-either:
    - pattern: "$X.SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER\n"
    - pattern: "$X.setHostnameVerifier($Z.ALLOW_ALL_HOSTNAME_VERIFIER);\n"
    - pattern: "$X.setHostnameVerifier(new AllowAllHostnameVerifier());\n"
    - pattern: "$X.setDefaultHostnameVerifier(new NullHostnameVerifier());\n"
    - pattern: "$X.setDefaultHostnameVerifier((HostnameVerifier) new NullHostnameVerifier());\n"
    - pattern: |
        $RET verify(..., SSLSession $X) {
          ...
          return true;
        }
    - pattern: |
        $Y = SSLContext.getInstance(...);
        ...
        $Y.init(null, ...);
    - pattern: |
        $Y = $S.SSLContext.getInstance(...);
        ...
        $Y.init(null, ...);
    - pattern: |
        $Z = new TLSClientParameters(...);
        ...
        $Z.setDisableCNCheck(true);
    - pattern: "X509Certificate[] getAcceptedIssuers() { \n  ...\n  return new X509Certificate[]{};\n}\n"
    - pattern: |
        X509Certificate[] getAcceptedIssuers() {
          ...
          return new java.security.cert.X509Certificate[]{};
        }
    - pattern: "X509Certificate[] getAcceptedIssuers() { \n  ...\n  $Y = new X509Certificate[]{};\n
        \ ...\n  return $Y;\n}\n"
    - pattern: |
        X509Certificate[] getAcceptedIssuers() {
          return new X509Certificate[0];
        }
    - pattern: |
        X509Certificate[] getAcceptedIssuers() {
          ...
          $X =  new X509Certificate[0];
          ...
          return $X;
        }
    - pattern: |
        X509Certificate[] getAcceptedIssuers() {
          return null;
        }
    - pattern: 'sslContext.init(null, ...);

        '
    - pattern: 'setSslSocketFactory(new NonValidatingSSLSocketFactory());

        '
  message: Insecure Implementation of SSL. Trusting all the certificates or accepting
    self signed certificates is a critical Security Hole. This application is vulnerable
    to MITM attacks.
  languages:
  - java
  severity: ERROR
  metadata:
    cwe: cwe-295
    owasp-mobile: m3
    masvs: network-3
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x05g-Testing-Network-Communication.md#testing-endpoint-identify-verification-mstg-network-3
    license: LGPL-3.0-or-later
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/mobsf.mobsfscan.network.accept_self_signed.accept_self_signed_certificate
    shortlink: https://sg.run/JoZw
    semgrep.dev:
      rule:
        rule_id: YGUxKY
        version_id: vdTZ3e
        url: https://semgrep.dev/playground/r/vdTZ3e/mobsf.mobsfscan.network.accept_self_signed.accept_self_signed_certificate
        origin: community
- id: mobsf.mobsfscan.network.default_http_client_tls.default_http_client_tls
  patterns:
  - pattern-either:
    - pattern: 'new DefaultHttpClient()

        '
  message: DefaultHTTPClient() with default constructor is not compatible with TLS
    1.2.
  languages:
  - java
  severity: WARNING
  metadata:
    cwe: cwe-757
    owasp-mobile: m3
    masvs: network-2
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x04f-Testing-Network-Communication.md#verifying-data-encryption-on-the-network-mstg-network-1-and-mstg-network-2
    license: LGPL-3.0-or-later
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/mobsf.mobsfscan.network.default_http_client_tls.default_http_client_tls
    shortlink: https://sg.run/5zwA
    semgrep.dev:
      rule:
        rule_id: 6JUkwx
        version_id: d6TBbY
        url: https://semgrep.dev/playground/r/d6TBbY/mobsf.mobsfscan.network.default_http_client_tls.default_http_client_tls
        origin: community
- id: mobsf.mobsfscan.webview.webview_debugging.webview_debugging
  patterns:
  - pattern-either:
    - pattern: "$WB.setWebContentsDebuggingEnabled(true);\n"
    - pattern: |
        $X = true;
        ...
        $WB.setWebContentsDebuggingEnabled($X);
  message: Remote WebView debugging is enabled. This allows an attacker with debugging
    access to interact with the webview and steal or corrupt data.
  languages:
  - java
  severity: ERROR
  metadata:
    cwe: cwe-489
    owasp-mobile: m1
    masvs: resilience-2
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x05j-Testing-Resiliency-Against-Reverse-Engineering.md#testing-anti-debugging-detection-mstg-resilience-2
    license: LGPL-3.0-or-later
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/mobsf.mobsfscan.webview.webview_debugging.webview_debugging
    shortlink: https://sg.run/G3Zp
    semgrep.dev:
      rule:
        rule_id: oqUPpl
        version_id: ZRTLyo
        url: https://semgrep.dev/playground/r/ZRTLyo/mobsf.mobsfscan.webview.webview_debugging.webview_debugging
        origin: community
- id: mobsf.mobsfscan.webview.webview_external_storage.webview_external_storage
  patterns:
  - pattern-either:
    - pattern: |
        $X = <... $E.getExternalStorageDirectory() ...>;
        ...
        $WV.loadUrl(<... $X ...>);
    - pattern: "$WV.loadUrl(<... $E.getExternalStorageDirectory().$F() ...>);\n"
    - pattern: |
        $X = <... Environment.getExternalStorageDirectory().$F() ...>;
        ...
        $WV.loadUrl(<... $X ...>);
    - pattern: |
        $X = <... $E.getExternalFilesDir(...) ...>;
        ...
        $WV.loadUrl(<... $X ...>);
  message: WebView load files from external storage. Files in external storage can
    be modified by any application.
  languages:
  - java
  severity: ERROR
  metadata:
    cwe: cwe-749
    owasp-mobile: m1
    masvs: platform-6
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x05h-Testing-Platform-Interaction.md#testing-webview-protocol-handlers-mstg-platform-6
    license: LGPL-3.0-or-later
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/mobsf.mobsfscan.webview.webview_external_storage.webview_external_storage
    shortlink: https://sg.run/Rx3O
    semgrep.dev:
      rule:
        rule_id: zdU90D
        version_id: nWT6wg
        url: https://semgrep.dev/playground/r/nWT6wg/mobsf.mobsfscan.webview.webview_external_storage.webview_external_storage
        origin: community
- id: mobsf.mobsfscan.webview.webview_file_access.webview_set_allow_file_access
  patterns:
  - pattern-either:
    - pattern: "$WB.setAllowFileAccess(true);\n"
  message: WebView File System Access is enabled. An attacker able to inject script
    into a WebView, could exploit the opportunity to access local resources.
  languages:
  - java
  severity: WARNING
  metadata:
    cwe: cwe-73
    owasp-mobile: m7
    masvs: platform-6
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x05h-Testing-Platform-Interaction.md/#testing-webview-protocol-handlers-mstg-platform-6
    license: LGPL-3.0-or-later
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/mobsf.mobsfscan.webview.webview_file_access.webview_set_allow_file_access
    shortlink: https://sg.run/ABgp
    semgrep.dev:
      rule:
        rule_id: pKUJ40
        version_id: ExT9YD
        url: https://semgrep.dev/playground/r/ExT9YD/mobsf.mobsfscan.webview.webview_file_access.webview_set_allow_file_access
        origin: community
- id: mobsf.mobsfscan.webview.webview_ignore_ssl_errors.ignore_ssl_certificate_errors
  patterns:
  - pattern-either:
    - pattern: |
        $RET onReceivedSslError(WebView $W, SslErrorHandler $H, SslError $E) {
          ...
          $H.proceed();
        }
  message: Insecure WebView Implementation. WebView ignores SSL Certificate errors
    and accept any SSL Certificate. This application is vulnerable to MITM attacks.
  languages:
  - java
  severity: ERROR
  metadata:
    cwe: cwe-295
    owasp-mobile: m3
    masvs: network-3
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x05g-Testing-Network-Communication.md#webview-server-certificate-verification
    license: LGPL-3.0-or-later
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/mobsf.mobsfscan.webview.webview_ignore_ssl_errors.ignore_ssl_certificate_errors
    shortlink: https://sg.run/BDgW
    semgrep.dev:
      rule:
        rule_id: 2ZUXop
        version_id: 7ZTLYR
        url: https://semgrep.dev/playground/r/7ZTLYR/mobsf.mobsfscan.webview.webview_ignore_ssl_errors.ignore_ssl_certificate_errors
        origin: community
- id: mobsf.mobsfscan.webview.webview_javascript_interface.webview_javascript_interface
  patterns:
  - pattern-either:
    - pattern: 'addJavascriptInterface(...)

        '
    - pattern: "$W.addJavascriptInterface(...)\n"
  message: Ensure that javascript interface is implemented securely. Execution of
    user controlled code in WebView is a  critical Security issue.
  languages:
  - java
  severity: WARNING
  metadata:
    cwe: cwe-749
    owasp-mobile: m1
    masvs: platform-7
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x05h-Testing-Platform-Interaction.md#determining-whether-java-objects-are-exposed-through-webviews-mstg-platform-7
    license: LGPL-3.0-or-later
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/mobsf.mobsfscan.webview.webview_javascript_interface.webview_javascript_interface
    shortlink: https://sg.run/D0LY
    semgrep.dev:
      rule:
        rule_id: X5Up0Y
        version_id: LjT1pg
        url: https://semgrep.dev/playground/r/LjT1pg/mobsf.mobsfscan.webview.webview_javascript_interface.webview_javascript_interface
        origin: community
- id: mobsf.mobsfscan.xxe.xmldecoder_xxe.xml_decoder_xxe
  patterns:
  - pattern: |
      $X $METHOD(...) {
        ...
        new XMLDecoder(...);
        ...
      }
  - pattern-not: |
      $X $METHOD(...) {
        ...
        new XMLDecoder("...");
        ...
      }
  - pattern-not: |-
      $X $METHOD(...) {
        ...
        String $STR = "...";
        ...
        new XMLDecoder($STR);
        ...
      }
  message: |
    XMLDecoder should not be used to parse untrusted data.
    Deserializing user input can lead to arbitrary code execution.
    Use an alternative and explicitly disable external entities.
  severity: WARNING
  languages:
  - java
  metadata:
    cwe: cwe-611
    owasp-mobile: m8
    masvs: platform-2
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x04h-Testing-Code-Quality.md#injection-flaws-mstg-arch-2-and-mstg-platform-2
    license: LGPL-3.0-or-later
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/mobsf.mobsfscan.xxe.xmldecoder_xxe.xml_decoder_xxe
    shortlink: https://sg.run/WxP4
    semgrep.dev:
      rule:
        rule_id: j2Up0D
        version_id: 8KTdLZ
        url: https://semgrep.dev/playground/r/8KTdLZ/mobsf.mobsfscan.xxe.xmldecoder_xxe.xml_decoder_xxe
        origin: community
- id: mobsf.mobsfscan.xxe.xmlfactory_external_entities_enabled.xmlinputfactory_xxe_enabled
  pattern: $XMLFACTORY.setProperty("javax.xml.stream.isSupportingExternalEntities",
    true);
  message: 'XML external entities are enabled for this XMLInputFactory. This is vulnerable
    to XML external entity attacks. Disable external entities by setting "javax.xml.stream.isSupportingExternalEntities"
    to false.

    '
  languages:
  - java
  severity: ERROR
  metadata:
    cwe: cwe-611
    owasp-mobile: m8
    masvs: platform-2
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x04h-Testing-Code-Quality.md#injection-flaws-mstg-arch-2-and-mstg-platform-2
    license: LGPL-3.0-or-later
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/mobsf.mobsfscan.xxe.xmlfactory_external_entities_enabled.xmlinputfactory_xxe_enabled
    shortlink: https://sg.run/0qwv
    semgrep.dev:
      rule:
        rule_id: 10UnwQ
        version_id: gETb5l
        url: https://semgrep.dev/playground/r/gETb5l/mobsf.mobsfscan.xxe.xmlfactory_external_entities_enabled.xmlinputfactory_xxe_enabled
        origin: community
- id: mobsf.mobsfscan.xxe.xmlfactory_xxe.xmlinputfactory_xxe
  patterns:
  - pattern-not-inside: |
      $RETURNTYPE $METHOD(...) {
        ...
        $XMLFACTORY.setProperty("javax.xml.stream.isSupportingExternalEntities", false);
        ...
      }
  - pattern-not-inside: |
      $RETURNTYPE $METHOD(...) {
        ...
        $XMLFACTORY.setProperty(java.xml.stream.XMLFactoryInput.IS_SUPPORTING_EXTERNAL_ENTITIES, false);
        ...
      }
  - pattern-either:
    - pattern: "$XMLFACTORY = $W.newFactory(...);"
    - pattern: "$XMLFACTORY = new XMLInputFactory(...);"
  message: 'XML external entities are not explicitly disabled for this XMLInputFactory.
    This could be vulnerable to XML external entity vulnerabilities. Explicitly disable
    external entities by setting "javax.xml.stream.isSupportingExternalEntities" to
    false.

    '
  severity: ERROR
  languages:
  - java
  metadata:
    cwe: cwe-611
    owasp-mobile: m8
    masvs: platform-2
    reference: https://github.com/MobSF/owasp-mstg/blob/master/Document/0x04h-Testing-Code-Quality.md#injection-flaws-mstg-arch-2-and-mstg-platform-2
    license: LGPL-3.0-or-later
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/mobsf.mobsfscan.xxe.xmlfactory_xxe.xmlinputfactory_xxe
    shortlink: https://sg.run/KzZ7
    semgrep.dev:
      rule:
        rule_id: 9AUL9X
        version_id: QkT4Qb
        url: https://semgrep.dev/playground/r/QkT4Qb/mobsf.mobsfscan.xxe.xmlfactory_xxe.xmlinputfactory_xxe
        origin: community
- id: trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules
  message: Usage of NumPy library inside PyTorch `$MODULE` module was found. Avoid
    mixing these libraries for efficiency and proper ONNX loading
  languages:
  - python
  severity: WARNING
  metadata:
    category: performance
    subcategory:
    - audit
    confidence: MEDIUM
    technology:
    - pytorch
    - numpy
    description: Uses of `NumPy` functions inside `PyTorch` modules
    references:
    - https://tanelp.github.io/posts/a-bug-that-plagues-thousands-of-open-source-ml-projects
    license: AGPL-3.0 license
    source: https://semgrep.dev/r/trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules
    shortlink: https://sg.run/9vxr
    semgrep.dev:
      rule:
        rule_id: KxU507
        version_id: yeTRvvY
        url: https://semgrep.dev/playground/r/yeTRvvY/trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules
        origin: community
  patterns:
  - pattern: "$RESULT = numpy.$FUNCTION(...)"
  - pattern-inside: |
      class $MODULE(torch.nn.Module):
          ...
- id: trailofbits.python.pytorch-tensor.pytorch-tensor
  message: Avoid using `torch.Tensor()` to directly create a tensor for efficiency
    and proper parsing
  languages:
  - python
  severity: WARNING
  metadata:
    category: performance
    subcategory:
    - audit
    confidence: HIGH
    technology:
    - pytorch
    description: Possible parsing issues and inefficiency from improper tensor creation
    references:
    - https://pytorch.org/docs/stable/tensors.html
    license: AGPL-3.0 license
    source: https://semgrep.dev/r/trailofbits.python.pytorch-tensor.pytorch-tensor
    shortlink: https://sg.run/72xG
    semgrep.dev:
      rule:
        rule_id: JDU4RQ
        version_id: vdTY55y
        url: https://semgrep.dev/playground/r/vdTY55y/trailofbits.python.pytorch-tensor.pytorch-tensor
        origin: community
  pattern: torch.Tensor(...)
