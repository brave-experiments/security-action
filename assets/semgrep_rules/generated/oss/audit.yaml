---
rules:
- id: raptor-argv-envp-access
  metadata:
    author: Marco Ivaldi <raptor@0xdeadbeef.info>
    references:
    - https://www.gnu.org/software/libc/manual/html_node/Program-Arguments.html
    confidence: MEDIUM
    license: MIT
    category: security
    subcategory:
    - audit
    source: https://github.com/0xdea/semgrep-rules/blob/main/c/argv-envp-access.yaml
  message: The program accesses command-line arguments or environment variables, which
    are controlled by potential attackers.
  severity: INFO
  languages:
  - c
  - cpp
  patterns:
  - pattern-either:
    - pattern: argv
    - pattern: envp
- id: raptor-command-injection
  metadata:
    author: Marco Ivaldi <raptor@0xdeadbeef.info>
    references:
    - https://cwe.mitre.org/data/definitions/676
    - https://cwe.mitre.org/data/definitions/78
    - https://cwe.mitre.org/data/definitions/88
    - https://g.co/kgs/PCHQjJ
    - https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf
    confidence: HIGH
    license: MIT
    category: security
    subcategory:
    - audit
    source: https://github.com/0xdea/semgrep-rules/blob/main/c/command-injection.yaml
  message: The software constructs an OS command using externally-influenced input,  but
    it does not neutralize or incorrectly neutralizes special elements  that could
    modify the intended OS command.
  severity: ERROR
  languages:
  - c
  - cpp
  patterns:
  - pattern-either:
    - pattern: system(...)
    - pattern: popen(...)
  - pattern-not: $FUN("...", ...)
- id: raptor-double-free
  metadata:
    author: Marco Ivaldi <raptor@0xdeadbeef.info>
    references:
    - https://cwe.mitre.org/data/definitions/415
    - https://github.com/struct/mms
    - https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf
    - https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples
    - https://dustri.org/b/playing-with-weggli.html
    confidence: MEDIUM
    license: MIT
    category: security
    subcategory:
    - audit
    source: https://github.com/0xdea/semgrep-rules/blob/main/c/double-free.yaml
  message: The software calls free() twice on the same memory address, potentially  leading
    to memory corruption. This corruption can cause the program to  crash or cause
    two later calls to malloc() to return the same pointer.
  severity: ERROR
  languages:
  - c
  - cpp
  patterns:
  - pattern: |
      free($PTR);
      ...
      free($PTR);
  - pattern-not: |
      free($PTR);
      ...
      $PTR = $EXPR;
      ...
      free($PTR);
- id: raptor-format-string-bugs
  metadata:
    author: Marco Ivaldi <raptor@0xdeadbeef.info>
    references:
    - https://cwe.mitre.org/data/definitions/134
    - https://julianor.tripod.com/bc/formatstring-1.2.pdf
    - http://phrack.org/issues/70/13.html#article
    - https://g.co/kgs/PCHQjJ
    - https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf
    confidence: MEDIUM
    license: MIT
    category: security
    subcategory:
    - audit
    source: https://github.com/0xdea/semgrep-rules/blob/main/c/format-string-bugs.yaml
  message: The software uses a function that accepts a format string as an argument,
    but the format string originates from an external source. This can lead  to buffer
    overflows, denial of service, or data representation problems.
  severity: ERROR
  languages:
  - c
  - cpp
  pattern-either:
  - patterns:
    - pattern-either:
      - pattern: printf(...)
      - pattern: vprintf(...)
      - pattern: wprintf(...)
      - pattern: vwprintf(...)
      - pattern: vcprintf(...)
      - pattern: vcwprintf(...)
      - pattern: vscprintf(...)
      - pattern: vscwprintf(...)
      - pattern: printk(...)
      - pattern: scanf(...)
      - pattern: vscanf(...)
      - pattern: wscanf(...)
      - pattern: vwscanf(...)
      - pattern: warn(...)
      - pattern: vwarn(...)
      - pattern: warnx(...)
      - pattern: vwarnx(...)
    - pattern-not: $FUN("...", ...)
  - patterns:
    - pattern-either:
      - pattern: fprintf(...)
      - pattern: vfprintf(...)
      - pattern: fwprintf(...)
      - pattern: vfwprintf(...)
      - pattern: sprintf(...)
      - pattern: vsprintf(...)
      - pattern: asprintf(...)
      - pattern: vasprintf(...)
      - pattern: dprintf(...)
      - pattern: vdprintf(...)
      - pattern: wsprintf(...)
      - pattern: fscanf(...)
      - pattern: vfscanf(...)
      - pattern: fwscanf(...)
      - pattern: vfwscanf(...)
      - pattern: sscanf(...)
      - pattern: vsscanf(...)
      - pattern: swscanf(...)
      - pattern: vswscanf(...)
      - pattern: syslog(...)
      - pattern: vsyslog(...)
      - pattern: err(...)
      - pattern: verr(...)
      - pattern: errx(...)
      - pattern: verrx(...)
      - pattern: warnc(...)
      - pattern: vwarnc(...)
    - pattern-not: $FUN($ARG1, "...", ...)
  - patterns:
    - pattern-either:
      - pattern: snprintf(...)
      - pattern: vsnprintf(...)
      - pattern: swprintf(...)
      - pattern: vswprintf(...)
      - pattern: errc(...)
      - pattern: verrc(...)
    - pattern-not: $FUN($ARG1, $ARG2, "...", ...)
- id: raptor-incorrect-order-setuid-setgid-etc
  metadata:
    author: Marco Ivaldi <raptor@0xdeadbeef.info>
    references:
    - https://cwe.mitre.org/data/definitions/696
    - https://www.usenix.org/legacy/events/sec02/full_papers/chen/chen.pdf
    - https://g.co/kgs/PCHQjJ
    - https://github.com/struct/mms
    confidence: MEDIUM
    license: MIT
    category: security
    subcategory:
    - audit
    source: https://github.com/0xdea/semgrep-rules/blob/main/c/incorrect-order-setuid-setgid-etc.yaml
  message: A compromised process might be able to regain elevated group privileges
    if set(e)gid() is called after set(e)uid(). A similar case is when  privileges
    are temporarily dropped with seteuid() and then setuid() or  seteuid() are called
    from while under unprivileged user.
  severity: ERROR
  languages:
  - c
  - cpp
  pattern-either:
  - patterns:
    - pattern: |
        setuid(...);
        ...
        setgid(...);
    - pattern-not: |
        setuid(0);
        ...
        setgid(...);
  - patterns:
    - pattern: |
        seteuid(...);
        ...
        setegid(...);
    - pattern-not: |
        seteuid(0);
        ...
        setegid(...);
    - pattern-not-inside: |
        seteuid(...);
        ...
        seteuid(0);
        ...
        setegid(...);
  - patterns:
    - pattern: |
        seteuid(...);
        ...
        setuid(...);
    - pattern-not: |
        seteuid(0);
        ...
        setuid(...);
    - pattern-not-inside: |
        seteuid(...);
        ...
        seteuid(0);
        ...
        setuid(...);
  - patterns:
    - pattern: |
        seteuid(...);
        ...
        seteuid(...);
    - pattern-not: |
        seteuid(0);
        ...
        seteuid(...);
    - pattern-not: |
        seteuid(...);
        ...
        seteuid(0);
    - pattern-not-inside: |
        seteuid(...);
        ...
        seteuid(0);
        ...
        seteuid(...);
- id: raptor-incorrect-unsigned-comparison
  metadata:
    author: Marco Ivaldi <raptor@0xdeadbeef.info>
    references:
    - https://cwe.mitre.org/data/definitions/697
    - https://g.co/kgs/PCHQjJ
    confidence: HIGH
    license: MIT
    category: security
    subcategory:
    - audit
    source: https://github.com/0xdea/semgrep-rules/blob/main/c/incorrect-unsigned-comparison.yaml
  message: Checking if an unsigned variable is negative makes no sense and is usually
    a good indication that something is probably wrong with the code.
  severity: WARNING
  languages:
  - c
  - cpp
  pattern-either:
  - pattern: "(unsigned short $UNSIGNED) < 0"
  - pattern: "(unsigned short int $UNSIGNED) < 0"
  - pattern: "(unsigned int $UNSIGNED) < 0"
  - pattern: "(unsigned long $UNSIGNED) < 0"
  - pattern: "(unsigned long int $UNSIGNED) < 0"
  - pattern: "(size_t $UNSIGNED) < 0"
  - pattern: "(unsigned short $UNSIGNED) <= 0"
  - pattern: "(unsigned short int $UNSIGNED) <= 0"
  - pattern: "(unsigned int $UNSIGNED) <= 0"
  - pattern: "(unsigned long $UNSIGNED) <= 0"
  - pattern: "(unsigned long int $UNSIGNED) <= 0"
  - pattern: "(size_t $UNSIGNED) <= 0"
  - pattern: "(unsigned short $UNSIGNED) >= 0"
  - pattern: "(unsigned short int $UNSIGNED) >= 0"
  - pattern: "(unsigned int $UNSIGNED) >= 0"
  - pattern: "(unsigned long $UNSIGNED) >= 0"
  - pattern: "(unsigned long int $UNSIGNED) >= 0"
  - pattern: "(size_t $UNSIGNED) >= 0"
- id: raptor-incorrect-use-of-sizeof
  metadata:
    author: Marco Ivaldi <raptor@0xdeadbeef.info>
    references:
    - https://cwe.mitre.org/data/definitions/467
    - https://g.co/kgs/PCHQjJ
    - https://github.com/struct/mms
    - https://dustri.org/b/playing-with-weggli.html
    confidence: MEDIUM
    license: MIT
    category: security
    subcategory:
    - audit
    source: https://github.com/0xdea/semgrep-rules/blob/main/c/incorrect-use-of-sizeof.yaml
  message: The code calls sizeof() on a malloced pointer type, which always returns
    the wordsize/8. This can produce an unexpected result if the programmer intended
    to determine how much memory has been allocated.
  severity: WARNING
  languages:
  - c
  - cpp
  pattern-either:
  - patterns:
    - pattern: sizeof((char * $PTR))
    - pattern-not: sizeof("...")
  - pattern: sizeof((int * $PTR))
  - pattern: sizeof((float * $PTR))
  - pattern: sizeof((double * $PTR))
  - patterns:
    - pattern: sizeof($PTR)
    - pattern-either:
      - pattern-inside: |
          $TYPE * $PTR;
          ...
      - pattern-inside: |
          $TYPE * $PTR = $EXPR;
          ...
- id: raptor-incorrect-use-of-strncat
  metadata:
    author: Marco Ivaldi <raptor@0xdeadbeef.info>
    references:
    - https://g.co/kgs/PCHQjJ
    confidence: HIGH
    license: MIT
    category: security
    subcategory:
    - audit
    source: https://github.com/0xdea/semgrep-rules/blob/main/c/incorrect-use-of-strncat.yaml
  message: 'The strncat() function is nearly as dangerous as strcat(), in that it''s
    quite easy to misuse. The first common mistake is supplying the size of  the entire
    buffer instead of the size remaining in the buffer. A more  subtle mistake can
    be made: the size parameter needs to be the amount of space left in the buffer
    less one; otherwise, the NUL byte is written  one byte past the end of the buffer.'
  severity: ERROR
  languages:
  - c
  - cpp
  pattern-either:
  - patterns:
    - pattern: strncat($DST, $SRC, $LEN)
    - pattern-either:
      - pattern-inside: |
          $TYPE $DST[$LEN];
          ...
      - pattern-inside: |
          $TYPE $DST[$LEN] = $EXPR;
          ...
  - pattern: strncat($DST, $SRC, sizeof($DST))
  - pattern: strncat($DST, $SRC, sizeof($DST) - strlen($DST))
- id: raptor-incorrect-use-of-strncpy-stpncpy-strlcpy
  metadata:
    author: Marco Ivaldi <raptor@0xdeadbeef.info>
    references:
    - https://cwe.mitre.org/data/definitions/806
    - https://github.com/0xdea/advisories/blob/master/2020-07-solaris-whodo-w.txt
    - https://dustri.org/b/playing-with-weggli.html
    confidence: MEDIUM
    license: MIT
    category: security
    subcategory:
    - audit
    source: https://github.com/0xdea/semgrep-rules/blob/main/c/incorrect-use-of-strncpy-stpncpy-strlcpy.yaml
  message: The software uses the size of a source buffer when reading from or writing
    to a destination buffer, which may cause it to access memory that is outside of
    the bounds of the buffer.
  severity: ERROR
  languages:
  - c
  - cpp
  pattern-either:
  - patterns:
    - pattern: "$FUN($DST, $SRC, $LEN)"
    - metavariable-pattern:
        metavariable: "$FUN"
        pattern-either:
        - pattern: strncpy
        - pattern: stpncpy
        - pattern: strlcpy
    - pattern-either:
      - pattern-inside: |
          $TYPE $SRC[$LEN];
          ...
      - pattern-inside: |
          $TYPE $SRC[$LEN] = $EXPR;
          ...
  - patterns:
    - pattern: "$FUN($DST, $SRC, <... $SRC ...>)"
    - metavariable-pattern:
        metavariable: "$FUN"
        pattern-either:
        - pattern: strncpy
        - pattern: stpncpy
        - pattern: strlcpy
- id: raptor-insecure-api-access-stat-lstat
  metadata:
    author: Marco Ivaldi <raptor@0xdeadbeef.info>
    references:
    - https://cwe.mitre.org/data/definitions/367
    - https://g.co/kgs/PCHQjJ
    confidence: HIGH
    license: MIT
    category: security
    subcategory:
    - audit
    source: https://github.com/0xdea/semgrep-rules/blob/main/c/insecure-api-access-stat-lstat.yaml
  message: The software checks the state of a resource before using it, but the  resource's
    state can change between the check and the use in a way that  invalidates the
    results of the check. This canmcause the software to  perform invalid actions
    when the resource is inman unexpected state.
  severity: WARNING
  languages:
  - c
  - cpp
  pattern-either:
  - pattern: access(...)
  - pattern: stat(...)
  - pattern: lstat(...)
- id: raptor-insecure-api-alloca
  metadata:
    author: Marco Ivaldi <raptor@0xdeadbeef.info>
    references:
    - https://cwe.mitre.org/data/definitions/676
    - https://cwe.mitre.org/data/definitions/1325
    - https://nullprogram.com/blog/2019/10/28/
    - https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples
    confidence: HIGH
    license: MIT
    category: security
    subcategory:
    - audit
    source: https://github.com/0xdea/semgrep-rules/blob/main/c/insecure-api-alloca.yaml
  message: Use of alloca() is unsafe because it cannot ensure that the pointer  returned
    points to a valid and usable block of memory. The allocation  made may exceed
    the bounds of the stack, or even go further into other  objects in memory, and
    alloca() cannot determine such an error.
  severity: ERROR
  languages:
  - c
  - cpp
  pattern: alloca(...)
- id: raptor-insecure-api-atoi-atol-atof
  metadata:
    author: Marco Ivaldi <raptor@0xdeadbeef.info>
    references:
    - https://rules.sonarsource.com/c/type/Bug/RSPEC-989
    - https://wiki.sei.cmu.edu/confluence/display/c/ERR34-C.+Detect+errors+when+converting+a+string+to+a+number
    confidence: HIGH
    license: MIT
    category: security
    subcategory:
    - audit
    source: https://github.com/0xdea/semgrep-rules/blob/main/c/insecure-api-atoi-atol-atof.yaml
  message: The atoi(), atol(), atof(), and similar functions have undefined  behavior
    if the value of the result cannot be represented. They return  0 (or 0.0) if the
    string does not represent an integer (or decimal),  which is indistinguishable
    from a correctly formatted, zero-denoting  input string.
  severity: WARNING
  languages:
  - c
  - cpp
  pattern-either:
  - pattern: atoi(...)
  - pattern: atol(...)
  - pattern: atof(...)
  - pattern: atoll(...)
- id: raptor-insecure-api-gets
  metadata:
    author: Marco Ivaldi <raptor@0xdeadbeef.info>
    references:
    - https://cwe.mitre.org/data/definitions/242
    - https://cwe.mitre.org/data/definitions/120
    confidence: HIGH
    license: MIT
    category: security
    subcategory:
    - audit
    source: https://github.com/0xdea/semgrep-rules/blob/main/c/insecure-api-gets.yaml
  message: The gets() function is always unsafe because it does not perform bounds  checking
    on the size of its input. An attacker can easily send  arbitrarily-sized input
    to gets() and overflow the destination buffer.
  severity: ERROR
  languages:
  - c
  - cpp
  pattern: gets(...)
- id: raptor-insecure-api-mktemp-tmpnam-tempnam
  metadata:
    author: Marco Ivaldi <raptor@0xdeadbeef.info>
    references:
    - https://cwe.mitre.org/data/definitions/377
    - https://cwe.mitre.org/data/definitions/367
    confidence: HIGH
    license: MIT
    category: security
    subcategory:
    - audit
    source: https://github.com/0xdea/semgrep-rules/blob/main/c/insecure-api-mktemp-tmpnam-tempnam.yaml
  message: Creating and using insecure temporary files can leave application and system
    data vulnerable to attack.
  severity: WARNING
  languages:
  - c
  - cpp
  pattern-either:
  - pattern: mktemp(...)
  - pattern: tmpnam(...)
  - pattern: tempnam(...)
- id: raptor-insecure-api-rand-srand
  metadata:
    author: Marco Ivaldi <raptor@0xdeadbeef.info>
    references:
    - https://cwe.mitre.org/data/definitions/338
    - https://cwe.mitre.org/data/definitions/330
    - https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf
    confidence: HIGH
    license: MIT
    category: security
    subcategory:
    - audit
    source: https://github.com/0xdea/semgrep-rules/blob/main/c/insecure-api-rand-srand.yaml
  message: The rand() PRNG should not be used in applications intended to be  portable
    when good randomness is needed. Instead, the use of random()  is recommended.
  severity: WARNING
  languages:
  - c
  - cpp
  pattern-either:
  - pattern: rand(...)
  - pattern: srand(...)
- id: raptor-insecure-api-scanf-etc
  metadata:
    author: Marco Ivaldi <raptor@0xdeadbeef.info>
    references:
    - https://cwe.mitre.org/data/definitions/676
    - https://cwe.mitre.org/data/definitions/120
    - https://cwe.mitre.org/data/definitions/787
    - https://g.co/kgs/PCHQjJ
    confidence: HIGH
    license: MIT
    category: security
    subcategory:
    - audit
    source: https://github.com/0xdea/semgrep-rules/blob/main/c/insecure-api-scanf-etc.yaml
  message: A buffer overflow condition exists when a program attempts to put more
    data in a buffer than it can hold, or when a program attempts to put data in a
    memory area outside of the boundaries of a buffer.
  severity: ERROR
  languages:
  - c
  - cpp
  patterns:
  - pattern-either:
    - pattern: scanf($FMT, ...)
    - pattern: vscanf($FMT, ...)
    - pattern: fscanf($FS, $FMT, ...)
    - pattern: vfscanf($FS, $FMT, ...)
    - pattern: sscanf($BUF, $FMT, ...)
    - pattern: vsscanf($BUF, $FMT, ...)
    - pattern: wscanf($FMT, ...)
    - pattern: vwscanf($FMT, ...)
    - pattern: fwscanf($FS, $FMT, ...)
    - pattern: vfwscanf($FS, $FMT, ...)
    - pattern: swscanf($BUF, $FMT, ...)
    - pattern: vswscanf($BUF, $FMT, ...)
  - metavariable-regex:
      metavariable: "$FMT"
      regex: (".*%l?s.*"|".*%S.*"|[a-zA-Z_][a-zA-Z0-9_]*)
- id: raptor-insecure-api-sprintf-vsprintf
  metadata:
    author: Marco Ivaldi <raptor@0xdeadbeef.info>
    references:
    - https://cwe.mitre.org/data/definitions/676
    - https://cwe.mitre.org/data/definitions/120
    - https://cwe.mitre.org/data/definitions/787
    - https://g.co/kgs/PCHQjJ
    confidence: HIGH
    license: MIT
    category: security
    subcategory:
    - audit
    source: https://github.com/0xdea/semgrep-rules/blob/main/c/insecure-api-sprintf-vsprintf.yaml
  message: A buffer overflow condition exists when a program attempts to put more
    data in a buffer than it can hold, or when a program attempts to put data in a
    memory area outside of the boundaries of a buffer.
  severity: ERROR
  languages:
  - c
  - cpp
  patterns:
  - pattern-either:
    - pattern: sprintf($BUF, $FMT, ...)
    - pattern: vsprintf($BUF, $FMT, ...)
  - metavariable-regex:
      metavariable: "$FMT"
      regex: (".*%l?s.*"|".*%S.*"|[a-zA-Z_][a-zA-Z0-9_]*)
- id: raptor-insecure-api-strcpy-stpcpy-strcat
  metadata:
    author: Marco Ivaldi <raptor@0xdeadbeef.info>
    references:
    - https://cwe.mitre.org/data/definitions/676
    - https://cwe.mitre.org/data/definitions/120
    - https://cwe.mitre.org/data/definitions/787
    - https://g.co/kgs/PCHQjJ
    confidence: HIGH
    license: MIT
    category: security
    subcategory:
    - audit
    source: https://github.com/0xdea/semgrep-rules/blob/main/c/insecure-api-strcpy-stpcpy-strcat.yaml
  message: A buffer overflow condition exists when a program attempts to put more
    data in a buffer than it can hold, or when a program attempts to put data in a
    memory area outside of the boundaries of a buffer.
  severity: ERROR
  languages:
  - c
  - cpp
  patterns:
  - pattern-either:
    - pattern: strcpy(...)
    - pattern: stpcpy(...)
    - pattern: strcat(...)
    - pattern: wcscpy(...)
    - pattern: wcpcpy(...)
    - pattern: wcscat(...)
  - pattern-not: $FUN($BUF, "...", ...)
- id: raptor-integer-truncation
  metadata:
    author: Marco Ivaldi <raptor@0xdeadbeef.info>
    references:
    - https://cwe.mitre.org/data/definitions/197
    - https://cwe.mitre.org/data/definitions/681
    - https://g.co/kgs/PCHQjJ
    - https://github.com/struct/mms
    confidence: MEDIUM
    license: MIT
    category: security
    subcategory:
    - audit
    source: https://github.com/0xdea/semgrep-rules/blob/main/c/integer-truncation.yaml
  message: Truncation errors occur when a primitive is cast to a primitive of a  smaller
    size and data is lost in the conversion. The value cannot be  trusted and the
    application will be in an undefined state.
  severity: WARNING
  languages:
  - c
  - cpp
  pattern-either:
  - pattern: "(char $NARROW) = <... (short $LARGE) ...>"
  - pattern: "(char $NARROW) = <... (short int $LARGE) ...>"
  - pattern: "(char $NARROW) = <... (unsigned short $LARGE) ...>"
  - pattern: "(char $NARROW) = <... (unsigned short int $LARGE) ...>"
  - pattern: "(char $NARROW) = <... (int $LARGE) ...>"
  - pattern: "(char $NARROW) = <... (unsigned $LARGE) ...>"
  - pattern: "(char $NARROW) = <... (unsigned int $LARGE) ...>"
  - pattern: "(char $NARROW) = <... (long $LARGE) ...>"
  - pattern: "(char $NARROW) = <... (long int $LARGE) ...>"
  - pattern: "(char $NARROW) = <... (unsigned long $LARGE) ...>"
  - pattern: "(char $NARROW) = <... (unsigned long int $LARGE) ...>"
  - pattern: |
      char $FUN(...)
      {
      ...
      return (short $LARGE);
      }
  - pattern: |
      char $FUN(...)
      {
      ...
      return (int $LARGE);
      }
  - pattern: |
      char $FUN(...)
      {
      ...
      return (long $LARGE);
      }
  - pattern: "(short $NARROW) = <... (unsigned short $LARGE) ...>"
  - pattern: "(short int $NARROW) = <... (unsigned short int $LARGE) ...>"
  - pattern: "(short $NARROW) = <... (int $LARGE) ...>"
  - pattern: "(short $NARROW) = <... (unsigned $LARGE) ...>"
  - pattern: "(short int $NARROW) = <... (unsigned int $LARGE) ...>"
  - pattern: "(short $NARROW) = <... (long $LARGE) ...>"
  - pattern: "(short int $NARROW) = <... (long int $LARGE) ...>"
  - pattern: "(short $NARROW) = <... (unsigned long $LARGE) ...>"
  - pattern: "(short int $NARROW) = <... (unsigned long int $LARGE) ...>"
  - pattern: "(unsigned short $NARROW) = <... (int $LARGE) ...>"
  - pattern: "(unsigned short $NARROW) = <... (unsigned $LARGE) ...>"
  - pattern: "(unsigned short int $NARROW) = <... (unsigned int $LARGE) ...>"
  - pattern: "(unsigned short $NARROW) = <... (long $LARGE) ...>"
  - pattern: "(unsigned short int $NARROW) = <... (long int $LARGE) ...>"
  - pattern: "(unsigned short $NARROW) = <... (unsigned long $LARGE) ...>"
  - pattern: "(unsigned short int $NARROW) = <... (unsigned long int $LARGE) ...>"
  - pattern: |
      short $FUN(...)
      {
      ...
      return (int $LARGE);
      }
  - pattern: |
      short $FUN(...)
      {
      ...
      return (long $LARGE);
      }
  - pattern: "(int $NARROW) = <... (unsigned $LARGE) ...>"
  - pattern: "(int $NARROW) = <... (unsigned int $LARGE) ...>"
  - pattern: "(int $NARROW) = <... (long $LARGE) ...>"
  - pattern: "(int $NARROW) = <... (long int $LARGE) ...>"
  - pattern: "(int $NARROW) = <... (unsigned long $LARGE) ...>"
  - pattern: "(int $NARROW) = <... (unsigned long int $LARGE) ...>"
  - pattern: |
      int $FUN(...)
      {
      ...
      return (long $LARGE);
      }
  - pattern: "(long $NARROW) = <... (unsigned long $LARGE) ...>"
  - pattern: "(long int $NARROW) = <... (unsigned long int $LARGE) ...>"
- id: raptor-integer-wraparound
  metadata:
    author: Marco Ivaldi <raptor@0xdeadbeef.info>
    references:
    - https://cwe.mitre.org/data/definitions/190
    - https://cwe.mitre.org/data/definitions/128
    - https://cwe.mitre.org/data/definitions/131
    - https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf
    - http://www.phrack.org/issues/60/10.html#article
    - https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples
    - https://dustri.org/b/playing-with-weggli.html
    confidence: MEDIUM
    license: MIT
    category: security
    subcategory:
    - audit
    source: https://github.com/0xdea/semgrep-rules/blob/main/c/integer-wraparound.yaml
  message: The software performs a calculation that can produce an integer overflow
    or wraparound, when the logic assumes that the resulting value will always be
    larger than the original value. This can introduce other weaknesses when the calculation
    is used for resource management or execution control.
  severity: WARNING
  languages:
  - c
  - cpp
  pattern-either:
  - patterns:
    - pattern: "$FUN($X * $Y)"
    - metavariable-pattern:
        metavariable: "$FUN"
        pattern-either:
        - pattern: malloc
        - pattern: valloc
  - patterns:
    - pattern: "$FUN($N)"
    - pattern-inside: |
        $N = $X * $Y;
        ...
    - metavariable-pattern:
        metavariable: "$FUN"
        pattern-either:
        - pattern: malloc
        - pattern: valloc
  - patterns:
    - pattern: "$FUN($X + $Y)"
    - metavariable-pattern:
        metavariable: "$FUN"
        pattern-either:
        - pattern: malloc
        - pattern: valloc
  - patterns:
    - pattern: "$FUN($N)"
    - pattern-inside: |
        $N = $X + $Y;
        ...
    - metavariable-pattern:
        metavariable: "$FUN"
        pattern-either:
        - pattern: malloc
        - pattern: valloc
  - patterns:
    - pattern: "$FUN($ARG1, $X * $Y)"
    - metavariable-pattern:
        metavariable: "$FUN"
        pattern-either:
        - pattern: calloc
        - pattern: realloc
        - pattern: reallocf
        - pattern: aligned_alloc
  - patterns:
    - pattern: "$FUN($ARG1, $N)"
    - pattern-inside: |
        $N = $X * $Y;
        ...
    - metavariable-pattern:
        metavariable: "$FUN"
        pattern-either:
        - pattern: calloc
        - pattern: realloc
        - pattern: reallocf
        - pattern: aligned_alloc
  - patterns:
    - pattern: "$FUN($ARG1, $X + $Y)"
    - metavariable-pattern:
        metavariable: "$FUN"
        pattern-either:
        - pattern: calloc
        - pattern: realloc
        - pattern: reallocf
        - pattern: aligned_alloc
  - patterns:
    - pattern: "$FUN($ARG1, $N)"
    - pattern-inside: |
        $N = $X + $Y;
        ...
    - metavariable-pattern:
        metavariable: "$FUN"
        pattern-either:
        - pattern: calloc
        - pattern: realloc
        - pattern: reallocf
        - pattern: aligned_alloc
- id: raptor-interesting-api-calls
  metadata:
    author: Marco Ivaldi <raptor@0xdeadbeef.info>
    references:
    - https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java
    - https://github.com/x509cert/banned/blob/master/banned.h
    - https://g.co/kgs/PCHQjJ
    - https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf
    confidence: MEDIUM
    license: MIT
    category: security
    subcategory:
    - audit
    source: https://github.com/0xdea/semgrep-rules/blob/main/c/interesting-api-calls.yaml
  message: Locate all calls to interesting and potentially insecure API functions
    (candidate points). The auditor can backtrace from these candidate points to find
    pathways allowing access from untrusted input.
  severity: WARNING
  languages:
  - c
  - cpp
  pattern-either:
  - patterns:
    - pattern: "$FUN(...)"
    - metavariable-regex:
        metavariable: "$FUN"
        regex: "^\\w*set\\w*(u|g)id\\s*$|^\\w*(init|set)groups\\s*$"
  - patterns:
    - pattern: "$FUN(...)"
    - metavariable-regex:
        metavariable: "$FUN"
        regex: "^\\w*str\\w?cpy\\s*$|^\\w*stpn?cpy\\s*$|^\\w*wcs\\w?cpy\\s*$|^\\w*wcpn?cpy\\s*$"
  - patterns:
    - pattern: "$FUN(...)"
    - metavariable-regex:
        metavariable: "$FUN"
        regex: "^\\w*str\\w?cat\\s*$|^\\w*wcs\\w?cat\\s*$"
  - patterns:
    - pattern: "$FUN(...)"
    - metavariable-regex:
        metavariable: "$FUN"
        regex: "^\\w*strtok\\s*$|^\\w*wcstok\\s*$"
  - patterns:
    - pattern: "$FUN(...)"
    - metavariable-regex:
        metavariable: "$FUN"
        regex: "^\\w*s\\w?printf\\w*\\s*$|^\\w*sn\\w?printf\\w*\\s*$"
  - patterns:
    - pattern: "$FUN(...)"
    - metavariable-regex:
        metavariable: "$FUN"
        regex: "^\\w*scanf\\s*$"
  - patterns:
    - pattern: "$FUN(...)"
    - metavariable-regex:
        metavariable: "$FUN"
        regex: "^\\w*get(s|c|char|pw|pass|wd|cwd|env|opt|opt_long)\\s*$"
  - patterns:
    - pattern: "$FUN(...)"
    - metavariable-regex:
        metavariable: "$FUN"
        regex: "^\\w*memc?cpy\\s*$|^\\w*memmove\\s*$|^\\w*bcopy\\s*$"
  - patterns:
    - pattern: "$FUN(...)"
    - metavariable-regex:
        metavariable: "$FUN"
        regex: "^\\w*alloca?\\s*$"
  - patterns:
    - pattern: "$FUN(...)"
    - metavariable-regex:
        metavariable: "$FUN"
        regex: "^\\w*exec(l|v)?(p|e)?e?\\s*$|^\\w*system\\s*$"
  - patterns:
    - pattern: "$FUN(...)"
    - metavariable-regex:
        metavariable: "$FUN"
        regex: "^\\w*open(at)?(64)?\\s*$|^\\w*pipe\\s*$|^\\w*read\\s*$|^\\w*recv(from)?\\s*$"
  - patterns:
    - pattern: "$FUN(...)"
    - metavariable-regex:
        metavariable: "$FUN"
        regex: "^\\w*fork\\s*$|^\\w*clone\\s*$"
  - patterns:
    - pattern: "$FUN(...)"
    - metavariable-regex:
        metavariable: "$FUN"
        regex: "^\\w*mk\\w?temp(64)?\\s*$|^\\w*te?mpnam\\s*$|^\\w*tmpfile\\s*$"
  - patterns:
    - pattern: "$FUN(...)"
    - metavariable-regex:
        metavariable: "$FUN"
        regex: "^\\w*mkdir\\s*$|^\\w*creat\\s*$|^\\w*link(at)?\\s*$|^\\w*rename(at)?\\s*$|^\\w*access(at)?\\s*$|^\\w*stat(at)?\\s*$|^\\w*ch(own|mod)(at)?\\s*$"
  - patterns:
    - pattern: "$FUN(...)"
    - metavariable-regex:
        metavariable: "$FUN"
        regex: "^\\w*rand\\s*$"
- id: raptor-memory-address-exposure
  metadata:
    author: Marco Ivaldi <raptor@0xdeadbeef.info>
    references:
    - https://cwe.mitre.org/data/definitions/200
    - https://cwe.mitre.org/data/definitions/209
    - https://cwe.mitre.org/data/definitions/497
    - https://github.com/struct/mms
    confidence: MEDIUM
    license: MIT
    category: security
    subcategory:
    - audit
    source: https://github.com/0xdea/semgrep-rules/blob/main/c/memory-address-exposure.yaml
  message: The software generates an error message that includes sensitive information
    about its environment, users, or associated data. In particular, exposure of memory
    addresses might defeat ASLR.
  severity: INFO
  languages:
  - c
  - cpp
  patterns:
  - pattern-either:
    - pattern: printf($FMT, ...)
    - pattern: vprintf($FMT, ...)
    - pattern: wprintf($FMT, ...)
    - pattern: vwprintf($FMT, ...)
    - pattern: vcprintf($FMT, ...)
    - pattern: vcwprintf($FMT, ...)
    - pattern: vscprintf($FMT, ...)
    - pattern: vscwprintf($FMT, ...)
    - pattern: fprintf($ARG1, $FMT, ...)
    - pattern: vfprintf($ARG1, $FMT, ...)
    - pattern: fwprintf($ARG1, $FMT, ...)
    - pattern: vfwprintf($ARG1, $FMT, ...)
    - pattern: sprintf($ARG1, $FMT, ...)
    - pattern: vsprintf($ARG1, $FMT, ...)
    - pattern: asprintf($ARG1, $FMT, ...)
    - pattern: vasprintf($ARG1, $FMT, ...)
    - pattern: dprintf($ARG1, $FMT, ...)
    - pattern: vdprintf($ARG1, $FMT, ...)
    - pattern: wsprintf($ARG1, $FMT, ...)
    - pattern: snprintf($ARG1, $ARG2, $FMT, ...)
    - pattern: vsnprintf($ARG1, $ARG2, $FMT, ...)
    - pattern: swprintf($ARG1, $ARG2, $FMT, ...)
    - pattern: vswprintf($ARG1, $ARG2, $FMT, ...)
  - metavariable-regex:
      metavariable: "$FMT"
      regex: (".*%\w*x.*"|".*%\w*X.*"|".*%\w*p.*")
- id: raptor-mismatched-memory-management
  metadata:
    author: Marco Ivaldi <raptor@0xdeadbeef.info>
    references:
    - https://cwe.mitre.org/data/definitions/762
    - https://cwe.mitre.org/data/definitions/590
    - https://github.com/struct/mms
    confidence: LOW
    license: MIT
    category: security
    subcategory:
    - audit
    source: https://github.com/0xdea/semgrep-rules/blob/main/c/mismatched-memory-management.yaml
  message: The software attempts to return a memory resource to the system, but it
    calls a release function that is not compatible with the function that was originally
    used to allocate that resource. Due to inherent limitations of Semgrep, this rule
    might generate many false positives and should therefore be customized for your
    codebase.
  severity: INFO
  languages:
  - c
  - cpp
  pattern-either:
  - patterns:
    - pattern: free($PTR);
    - pattern-not-inside: |
        $PTR = malloc(...);
        ...
        free($PTR);
    - pattern-not-inside: |
        $PTR = ($CAST)malloc(...);
        ...
        free($PTR);
    - pattern-not-inside: |
        $PTR = calloc(...);
        ...
        free($PTR);
    - pattern-not-inside: |
        $PTR = ($CAST)calloc(...);
        ...
        free($PTR);
    - pattern-not-inside: |
        $PTR = realloc(...);
        ...
        free($PTR);
    - pattern-not-inside: "$PTR = ($CAST)realloc(...);\n...\nfree($PTR); \n"
    - pattern-not-inside: "$PTR = strdup(...);\n...\nfree($PTR); \n"
    - pattern-not-inside: "$PTR = strndup(...);\n...\nfree($PTR); \n"
- id: raptor-mismatched-memory-management-cpp
  metadata:
    author: Marco Ivaldi <raptor@0xdeadbeef.info>
    references:
    - https://cwe.mitre.org/data/definitions/762
    - https://cwe.mitre.org/data/definitions/590
    - https://github.com/struct/mms
    - https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples
    confidence: LOW
    license: MIT
    category: security
    subcategory:
    - audit
    source: https://github.com/0xdea/semgrep-rules/blob/main/c/mismatched-memory-management-cpp.yaml
  message: The software attempts to return a memory resource to the system, but it
    calls a release function that is not compatible with the function that was originally
    used to allocate that resource. Due to inherent limitations of Semgrep, this rule
    might generate many false positives and should therefore be customized for your
    codebase.
  severity: INFO
  languages:
  - cpp
  pattern-either:
  - patterns:
    - pattern: free($PTR);
    - pattern-not-inside: |
        $PTR = malloc(...);
        ...
        free($PTR);
    - pattern-not-inside: |
        $PTR = ($CAST)malloc(...);
        ...
        free($PTR);
    - pattern-not-inside: |
        $PTR = calloc(...);
        ...
        free($PTR);
    - pattern-not-inside: |
        $PTR = ($CAST)calloc(...);
        ...
        free($PTR);
    - pattern-not-inside: |
        $PTR = realloc(...);
        ...
        free($PTR);
    - pattern-not-inside: "$PTR = ($CAST)realloc(...);\n...\nfree($PTR); \n"
    - pattern-not-inside: "$PTR = strdup(...);\n...\nfree($PTR); \n"
    - pattern-not-inside: "$PTR = strndup(...);\n...\nfree($PTR); \n"
  - patterns:
    - pattern: delete[]($PTR);
    - pattern-not-inside: |
        $PTR = new $OBJ[$SIZE];
        ...
        delete[]($PTR);
  - patterns:
    - pattern: delete($PTR);
    - pattern-not-inside: |
        $PTR = new $OBJ;
        ...
        delete($PTR);
  - patterns:
    - pattern: delete($PTR);
    - pattern-inside: |
        $PTR = new $OBJ[$SIZE];
        ...
        delete($PTR);
- id: raptor-missing-break-in-switch
  metadata:
    author: Marco Ivaldi <raptor@0xdeadbeef.info>
    references:
    - https://cwe.mitre.org/data/definitions/484
    - https://g.co/kgs/PCHQjJ
    - https://github.com/struct/mms
    - https://github.com/returntocorp/semgrep/issues/4939
    confidence: MEDIUM
    license: MIT
    category: security
    subcategory:
    - audit
    source: https://github.com/0xdea/semgrep-rules/blob/main/c/missing-break-in-switch.yaml
  message: The software omits a break statement within a switch or similar construct,
    causing code associated with multiple conditions to execute. This can cause problems
    when the programmer only intended to execute code associated with one condition.
  severity: INFO
  languages:
  - c
  - cpp
  patterns:
  - pattern: 'switch ($VAR) { case $VAL1: ... case $VAL2: ... }

      '
  - pattern-not: 'switch ($VAR) { case $VAL1: ... break; case $VAL2: ... }

      '
  - pattern-not: 'switch ($VAR) { case $VAL1: break; case $VAL2: ... }

      '
  - pattern-not: 'switch ($VAR) { case $VAL1: ... exit($RET); case $VAL2: ... }

      '
  - pattern-not: 'switch ($VAR) { case $VAL1: exit($RET); case $VAL2: ... }

      '
  - pattern-not: 'switch ($VAR) { case $VAL1: ... return; case $VAL2: ... }

      '
  - pattern-not: 'switch ($VAR) { case $VAL1: return; case $VAL2: ... }

      '
  - pattern-not: 'switch ($VAR) { case $VAL1: ... return $RET; case $VAL2: ... }

      '
  - pattern-not: 'switch ($VAR) { case $VAL1: return $RET; case $VAL2: ... }

      '
- id: raptor-missing-default-in-switch
  metadata:
    author: Marco Ivaldi <raptor@0xdeadbeef.info>
    references:
    - https://cwe.mitre.org/data/definitions/478
    - https://g.co/kgs/PCHQjJ
    - https://github.com/struct/mms
    - https://github.com/returntocorp/semgrep/issues/4939
    confidence: MEDIUM
    license: MIT
    category: security
    subcategory:
    - audit
    source: https://github.com/0xdea/semgrep-rules/blob/main/c/missing-default-in-switch.yaml
  message: The code does not have a default case in an expression with multiple conditions,
    such as a switch statement.
  severity: INFO
  languages:
  - c
  - cpp
  patterns:
  - pattern: 'switch ($VAR) { }

      '
  - pattern-not: 'switch ($VAR) { default: ... }

      '
- id: raptor-off-by-one
  metadata:
    author: Marco Ivaldi <raptor@0xdeadbeef.info>
    references:
    - https://cwe.mitre.org/data/definitions/193
    - https://cwe.mitre.org/data/definitions/787
    - https://g.co/kgs/PCHQjJ
    - https://github.com/struct/mms
    confidence: LOW
    license: MIT
    category: security
    subcategory:
    - audit
    source: https://github.com/0xdea/semgrep-rules/blob/main/c/off-by-one.yaml
  message: The software calculates or uses an incorrect maximum or minimum value that
    is 1 more, or 1 less, than the correct value.
  severity: INFO
  languages:
  - c
  - cpp
  pattern-either:
  - pattern: "$BUF[sizeof($BUF)] = $EXPR"
  - patterns:
    - pattern: "$BUF[$SIZE] = $EXPR"
    - pattern-inside: |
        $TYPE $BUF[$SIZE];
        ...
        $BUF[$SIZE] = $EXPR;
  - patterns:
    - pattern: "*($BUF + $SIZE) = $EXPR\n"
    - pattern-inside: |
        $TYPE $BUF[$SIZE];
        ...
        *($BUF + $SIZE) = $EXPR;
  - pattern: for (<... $I = $NUM ...>; <... $I <= $SIZE ...>; <... $I++ ...>) ...
  - pattern: for (<... $I = $NUM ...>; <... $I <= $SIZE ...>; <... ++$I ...>) ...
  - pattern: for ($TYPE $I = $NUM; <... $I <= $SIZE ...>; <... $I++ ...>) ...
  - pattern: for ($TYPE $I = $NUM; <... $I <= $SIZE ...>; <... ++$I ...>) ...
  - pattern: while (<... $I <= $SIZE ...>) ...
  - pattern: do ... while (<... $I <= $SIZE ...>);
  - pattern: strlen($SRC) > sizeof($DST)
  - pattern: strlen($SRC) <= sizeof($DST)
  - pattern: sizeof($DST) < strlen($SRC)
  - pattern: sizeof($DST) >= strlen($SRC)
  - patterns:
    - pattern: strncat($DST, $SRC, $LEN)
    - metavariable-pattern:
        metavariable: "$LEN"
        patterns:
        - pattern-not: "$VAL - 1"
- id: raptor-pointer-subtraction
  metadata:
    author: Marco Ivaldi <raptor@0xdeadbeef.info>
    references:
    - https://cwe.mitre.org/data/definitions/469
    - https://github.com/struct/mms
    confidence: MEDIUM
    license: MIT
    category: security
    subcategory:
    - audit
    source: https://github.com/0xdea/semgrep-rules/blob/main/c/pointer-subtraction.yaml
  message: The software subtracts one pointer from another in order to determine size,
    but this calculation can be incorrect if the pointers do not exist in the same
    memory chunk.
  severity: WARNING
  languages:
  - c
  - cpp
  pattern-either:
  - pattern: "(char * $PTR1) - (char * $PTR2)"
  - pattern: "(int * $PTR1) - (int * $PTR2)"
  - pattern: "(float * $PTR1) - (float * $PTR2)"
  - pattern: "(double * $PTR1) - (double * $PTR2)"
  - patterns:
    - pattern-either:
      - pattern: "$PTR1 - $PTR2"
      - pattern: "$PTR2 - $PTR1"
    - pattern-either:
      - pattern-inside: |
          $TYPE * $PTR1;
          $TYPE * $PTR2;
          ...
      - pattern-inside: |
          $TYPE * $PTR1 = $EXPR1;
          $TYPE * $PTR2 = $EXPR2;
          ...
      - pattern-inside: |
          $TYPE * $PTR1 = $EXPR1;
          $TYPE * $PTR2;
          ...
      - pattern-inside: |
          $TYPE * $PTR1;
          $TYPE * $PTR2 = $EXPR2;
          ...
      - pattern-inside: |
          $TYPE * $PTR3 = $PTR1;
          $TYPE * $PTR2;
          ...
      - pattern-inside: |
          $TYPE * $PTR2;
          $TYPE * $PTR3 = $PTR1;
          ...
- id: raptor-ret-stack-address
  metadata:
    author: Marco Ivaldi <raptor@0xdeadbeef.info>
    references:
    - https://cwe.mitre.org/data/definitions/562
    - https://github.com/struct/mms
    - https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf
    - https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples
    - https://rules.sonarsource.com/c/type/Bug/RSPEC-946
    confidence: LOW
    license: MIT
    category: security
    subcategory:
    - audit
    source: https://github.com/0xdea/semgrep-rules/blob/main/c/ret-stack-address.yaml
  message: A function returns the address of a stack variable, which will cause unintended
    program behavior, typically in the form of a crash.
  severity: WARNING
  languages:
  - c
  - cpp
  pattern-either:
  - patterns:
    - pattern: return $PTR;
    - pattern-either:
      - pattern-inside: |
          $TYPE $PTR[$SIZE];
          ...
      - pattern-inside: |
          $TYPE $PTR[$SIZE] = $EXPR;
          ...
      - pattern-inside: |
          $TYPE $ARR[$SIZE];
          ...
          $PTR = $ARR;
          ...
      - pattern-inside: |
          $TYPE $ARR[$SIZE] = $EXPR;
          ...
          $PTR = $ARR;
          ...
  - patterns:
    - pattern: return &$VAR;
    - pattern-either:
      - pattern-inside: |
          $TYPE $VAR;
          ...
      - pattern-inside: |
          $TYPE $VAR = $EXPR;
          ...
- id: raptor-signed-unsigned-conversion
  metadata:
    author: Marco Ivaldi <raptor@0xdeadbeef.info>
    references:
    - https://cwe.mitre.org/data/definitions/195
    - https://cwe.mitre.org/data/definitions/196
    - https://cwe.mitre.org/data/definitions/194
    - https://cwe.mitre.org/data/definitions/191
    - https://cwe.mitre.org/data/definitions/681
    - https://cwe.mitre.org/data/definitions/789
    - https://g.co/kgs/PCHQjJ
    - https://github.com/struct/mms
    - https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf
    - http://www.phrack.org/issues/60/10.html#article
    - https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples
    confidence: LOW
    license: MIT
    category: security
    subcategory:
    - audit
    source: https://github.com/0xdea/semgrep-rules/blob/main/c/signed-unsigned-conversion.yaml
  message: The software uses a signed primitive and performs a cast to an unsigned
    primitive, or uses an unsigned primitive and performs a cast to a signed primitive,
    which can produce an unexpected value. When the result of a function is to be
    used as a size parameter, using negative return values can have unexpected results.
    Although less frequent an issue, unsigned-to-signed conversion can be  the precursor
    to buffer underwrite conditions. Buffer underwrites  occur frequently when large
    unsigned values are cast to signed values,  and then used as indexes into a buffer
    or for pointer arithmetic.
  severity: WARNING
  languages:
  - c
  - cpp
  pattern-either:
  - pattern: "(unsigned int $UNSIGNED) = <... (int $SIGNED) ...>"
  - pattern: |
      unsigned int $FUN(...)
      {
      ...
      return (int $SIGNED);
      }
  - pattern: "(unsigned $UNSIGNED) = <... (int $SIGNED) ...>"
  - pattern: |
      unsigned $FUN(...)
      {
      ...
      return (int $SIGNED);
      }
  - pattern: "(size_t $UNSIGNED) = <... (int $SIGNED) ...>"
  - pattern: |
      size_t $FUN(...)
      {
      ...
      return (int $SIGNED);
      }
  - pattern: "(size_t $UNSIGNED) = <... (off_t $SIGNED) ...>"
  - pattern: |
      size_t $FUN(...)
      {
      ...
      return (off_t $SIGNED);
      }
  - pattern: strncpy($DST, $SRC, (int $LEN))
  - pattern: stpncpy($DST, $SRC, (int $LEN))
  - pattern: strncat($DST, $SRC, (int $LEN))
  - pattern: strlcpy($DST, $SRC, (int $LEN))
  - pattern: strlcat($DST, $SRC, (int $LEN))
  - pattern: snprintf($BUF, (int $LEN), ...)
  - pattern: vsnprintf($BUF, (int $LEN), ...)
  - pattern: getcwd($BUF, (int $LEN))
  - pattern: memcpy($DST, $SRC, (int $LEN))
  - pattern: memccpy($DST, $SRC, $CHAR, (int $LEN))
  - pattern: memmove($DST, $SRC, (int $LEN))
  - pattern: memset($DST, $CHAR, (int $LEN))
  - pattern: bcopy($SRC, $DST, (int $LEN))
  - pattern: alloca((int $LEN))
  - pattern: malloc((int $LEN))
  - pattern: calloc($CNT, (int $LEN))
  - pattern: calloc((int $CNT), $LEN)
  - pattern: realloc($PTR, (int $LEN))
  - pattern: read($FD, $BUF, (int $LEN))
  - pattern: recv($SD, $BUF, (int $LEN), $FL)
  - pattern: recvfrom($SD, $BUF, (int $LEN), $FL, ...)
  - pattern: fread($PTR, (int $SIZE), $NITEMS, $FS)
  - pattern: "(int $SIGNED) = <... (unsigned int $UNSIGNED) ...>"
  - pattern: |
      int $FUN(...)
      {
      ...
      return (unsigned int $UNSIGNED);
      }
  - pattern: "(int $SIGNED) = <... (unsigned $UNSIGNED) ...>"
  - pattern: |
      int $FUN(...)
      {
      ...
      return (unsigned $UNSIGNED);
      }
  - pattern: "(int $SIGNED) = <... (size_t $UNSIGNED) ...>"
  - pattern: |
      int $FUN(...)
      {
      ...
      return (size_t $UNSIGNED);
      }
  - pattern: "(off_t $SIGNED) = <... (size_t $UNSIGNED) ...>"
  - pattern: |
      off_t $FUN(...)
      {
      ...
      return (size_t $UNSIGNED);
      }
- id: raptor-suspicious-assert
  metadata:
    author: Marco Ivaldi <raptor@0xdeadbeef.info>
    references:
    - https://legends2k.github.io/note/assert_vs_if/
    - https://github.com/struct/mms
    confidence: MEDIUM
    license: MIT
    category: security
    subcategory:
    - audit
    source: https://github.com/0xdea/semgrep-rules/blob/main/c/suspicious-assert.yaml
  message: Most codebases define assertion macros which compile to a no-op on non-debug
    builds. If assertions are the only line of defense against untrusted input, the
    software may be exposed to attacks that leverage the lack of proper input checks.
  severity: WARNING
  languages:
  - c
  - cpp
  patterns:
  - pattern-either:
    - pattern: "$ASSERT(<... $A < $B ...>)"
    - pattern: "$ASSERT(<... $A < $B ...>, ...)"
    - pattern: "$ASSERT(<... $A <= $B ...>)"
    - pattern: "$ASSERT(<... $A <= $B ...>, ...)"
    - pattern: "$ASSERT(<... $A > $B ...>)"
    - pattern: "$ASSERT(<... $A > $B ...>, ...)"
    - pattern: "$ASSERT(<... $A >= $B ...>)"
    - pattern: "$ASSERT(<... $A >= $B ...>, ...)"
  - metavariable-regex:
      metavariable: "$ASSERT"
      regex: "(?i)^\\w*assert\\w*\\s*$"
- id: raptor-typos
  metadata:
    author: Marco Ivaldi <raptor@0xdeadbeef.info>
    references:
    - https://cwe.mitre.org/data/definitions/480
    - https://cwe.mitre.org/data/definitions/481
    - https://cwe.mitre.org/data/definitions/482
    - https://cwe.mitre.org/data/definitions/483
    - https://g.co/kgs/PCHQjJ
    - https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf
    confidence: LOW
    license: MIT
    category: security
    subcategory:
    - audit
    source: https://github.com/0xdea/semgrep-rules/blob/main/c/typos.yaml
  message: The programmer accidentally uses the wrong operator, which changes the
    application logic in security-relevant ways. This rule also covers  some other
    common typo patterns.
  severity: INFO
  languages:
  - c
  - cpp
  pattern-either:
  - pattern: for ($EXPR1 == $EXPR2; $EXPR3; $EXPR4) ...
  - pattern: "$EXPR1 == $EXPR2;"
  - patterns:
    - pattern: if (<... $EXPR1 = $EXPR2 ...>) ...
    - pattern-not-inside: if (<... ($EXPR1 = $EXPR2) == $EXPR ...>) ...
    - pattern-not-inside: if (<... ($EXPR1 = $EXPR2) != $EXPR ...>) ...
    - pattern-not-inside: if (<... ($EXPR1 = $EXPR2) < $EXPR ...>) ...
    - pattern-not-inside: if (<... ($EXPR1 = $EXPR2) <= $EXPR ...>) ...
    - pattern-not-inside: if (<... ($EXPR1 = $EXPR2) > $EXPR ...>) ...
    - pattern-not-inside: if (<... ($EXPR1 = $EXPR2) >= $EXPR ...>) ...
  - patterns:
    - pattern: if (<... $EXPR1 & $EXPR2 ...>) ...
    - pattern-not-inside: if (<... ($EXPR1 & $EXPR2) == $EXPR ...>) ...
    - pattern-not-inside: if (<... ($EXPR1 & $EXPR2) != $EXPR ...>) ...
    - pattern-not-inside: if (<... ($EXPR1 & $EXPR2) < $EXPR ...>) ...
    - pattern-not-inside: if (<... ($EXPR1 & $EXPR2) <= $EXPR ...>) ...
    - pattern-not-inside: if (<... ($EXPR1 & $EXPR2) > $EXPR ...>) ...
    - pattern-not-inside: if (<... ($EXPR1 & $EXPR2) >= $EXPR ...>) ...
  - patterns:
    - pattern: if (<... $EXPR1 | $EXPR2 ...>) ...
    - pattern-not-inside: if (<... ($EXPR1 | $EXPR2) == $EXPR ...>) ...
    - pattern-not-inside: if (<... ($EXPR1 | $EXPR2) != $EXPR ...>) ...
    - pattern-not-inside: if (<... ($EXPR1 | $EXPR2) < $EXPR ...>) ...
    - pattern-not-inside: if (<... ($EXPR1 | $EXPR2) <= $EXPR ...>) ...
    - pattern-not-inside: if (<... ($EXPR1 | $EXPR2) > $EXPR ...>) ...
    - pattern-not-inside: if (<... ($EXPR1 | $EXPR2) >= $EXPR ...>) ...
  - pattern: "$EXPR1 =+ $EXPR2"
  - pattern: if ($COND);
  - pattern: for ($EXPR1; $EXPR2; $EXPR3);
  - patterns:
    - pattern-either:
      - pattern: "$TYPE $ARR[$SIZE];"
      - pattern: "$TYPE $ARR[$SIZE] = $EXPR;"
    - metavariable-regex:
        metavariable: "$SIZE"
        regex: "^0.*"
- id: raptor-unchecked-ret-malloc-calloc-realloc
  metadata:
    author: Marco Ivaldi <raptor@0xdeadbeef.info>
    references:
    - https://cwe.mitre.org/data/definitions/252
    - https://cwe.mitre.org/data/definitions/690
    - https://g.co/kgs/PCHQjJ
    - https://github.com/struct/mms
    - https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf
    confidence: MEDIUM
    license: MIT
    category: security
    subcategory:
    - audit
    source: https://github.com/0xdea/semgrep-rules/blob/main/c/unchecked-ret-malloc-calloc-realloc.yaml
  message: The software does not check the return value from a method or function,
    which can prevent it from detecting unexpected states and conditions.
  severity: WARNING
  languages:
  - c
  - cpp
  pattern-either:
  - patterns:
    - pattern-either:
      - pattern: "$RET = malloc(...)"
      - pattern: "$RET = ($CAST)malloc(...)"
    - pattern-not-inside: |
        malloc(...);
        ...
        if (<... $RET == NULL ...>) ...
    - pattern-not-inside: |
        malloc(...);
        ...
        if (<... $RET != NULL ...>) ...
    - pattern-not-inside: |
        malloc(...);
        ...
        if (<... !$RET ...>) ...
    - pattern-not-inside: |
        malloc(...);
        ...
        if (<... $RET ...>) ...
    - pattern-not-inside: "<... $ALLOC == NULL ...>"
    - pattern-not-inside: "<... $ALLOC != NULL ...>"
    - pattern-not-inside: "<... !$ALLOC ...>"
  - patterns:
    - pattern-either:
      - pattern: "$RET = calloc(...)"
      - pattern: "$RET = ($CAST)calloc(...)"
    - pattern-not-inside: |
        calloc(...);
        ...
        if (<... $RET == NULL ...>) ...
    - pattern-not-inside: |
        calloc(...);
        ...
        if (<... $RET != NULL ...>) ...
    - pattern-not-inside: |
        calloc(...);
        ...
        if (<... !$RET ...>) ...
    - pattern-not-inside: |
        calloc(...);
        ...
        if (<... $RET ...>) ...
    - pattern-not-inside: "<... $ALLOC == NULL ...>"
    - pattern-not-inside: "<... $ALLOC != NULL ...>"
    - pattern-not-inside: "<... !$ALLOC ...>"
  - patterns:
    - pattern-either:
      - pattern: "$RET = realloc(...)"
      - pattern: "$RET = ($CAST)realloc(...)"
    - pattern-not-inside: |
        realloc(...);
        ...
        if (<... $RET == NULL ...>) ...
    - pattern-not-inside: |
        realloc(...);
        ...
        if (<... $RET != NULL ...>) ...
    - pattern-not-inside: |
        realloc(...);
        ...
        if (<... !$RET ...>) ...
    - pattern-not-inside: |
        realloc(...);
        ...
        if (<... $RET ...>) ...
    - pattern-not-inside: "<... $ALLOC == NULL ...>"
    - pattern-not-inside: "<... $ALLOC != NULL ...>"
    - pattern-not-inside: "<... !$ALLOC ...>"
- id: raptor-unchecked-ret-setuid-seteuid
  metadata:
    author: Marco Ivaldi <raptor@0xdeadbeef.info>
    references:
    - https://cwe.mitre.org/data/definitions/252
    - https://lwn.net/Articles/451985/
    - https://www.usenix.org/legacy/events/sec02/full_papers/chen/chen.pdf
    confidence: MEDIUM
    license: MIT
    category: security
    subcategory:
    - audit
    source: https://github.com/0xdea/semgrep-rules/blob/main/c/unchecked-ret-setuid-seteuid.yaml
  message: The software does not check the return value from a method or function,
    which can prevent it from detecting unexpected states and conditions. If the program
    calls a function to drop privileges but  does not check the return code to ensure
    that privileges were  successfully dropped, then the program will continue to
    operate with  the higher privileges.
  severity: WARNING
  languages:
  - c
  - cpp
  pattern-either:
  - patterns:
    - pattern: setuid(...)
    - pattern-not-inside: "$RET = setuid(...)"
    - pattern-not-inside: "<... setuid(...) == $VAL ...>"
    - pattern-not-inside: "<... setuid(...) != $VAL ...>"
    - pattern-not-inside: "<... setuid(...) < $VAL ...>"
    - pattern-not-inside: "<... !setuid(...) ...>"
    - pattern-not-inside: return setuid(...);
  - patterns:
    - pattern: seteuid(...)
    - pattern-not-inside: "$RET = seteuid(...)"
    - pattern-not-inside: "<... seteuid(...) == $VAL ...>"
    - pattern-not-inside: "<... seteuid(...) != $VAL ...>"
    - pattern-not-inside: "<... seteuid(...) < $VAL ...>"
    - pattern-not-inside: "<... !seteuid(...) ...>"
    - pattern-not-inside: return seteuid(...);
- id: raptor-unsafe-ret-snprintf-vsnprintf
  metadata:
    author: Marco Ivaldi <raptor@0xdeadbeef.info>
    references:
    - https://lwn.net/Articles/507319/
    - https://g.co/kgs/PCHQjJ
    - https://dustri.org/b/playing-with-weggli.html
    confidence: MEDIUM
    license: MIT
    category: security
    subcategory:
    - audit
    source: https://github.com/0xdea/semgrep-rules/blob/main/c/unsafe-ret-snprintf-vsnprintf.yaml
  message: The snprintf() and vsnprintf() functions return the total length of the
    string they tried to create. Therefore, this return value can be larger than the
    size of the destination buffer. If it is used unsafely, e.g. as an index to write
    to the destination buffer, memory corruption might occur.
  severity: WARNING
  languages:
  - c
  - cpp
  pattern-either:
  - pattern: "$RET = snprintf(...)"
  - pattern: "$RET = vsnprintf(...)"
  - pattern: "$RET += snprintf(...)"
  - pattern: "$RET += vsnprintf(...)"
- id: raptor-unsafe-ret-strlcpy-strlcat
  metadata:
    author: Marco Ivaldi <raptor@0xdeadbeef.info>
    references:
    - https://lwn.net/Articles/507319/
    - https://g.co/kgs/PCHQjJ
    confidence: MEDIUM
    license: MIT
    category: security
    subcategory:
    - audit
    source: https://github.com/0xdea/semgrep-rules/blob/main/c/unsafe-ret-strlcpy-strlcat.yaml
  message: The strlcpy() and strlcat() functions return the total length of the string
    they tried to create. For strlcpy() that means the length of the source string.
    For strlcat() that means the initial length of the destination string plus the
    length of of the source string. Therefore, this return value can be larger than
    the size of the destination buffer. If it is used unsafely, e.g. as an index to
    write to the destination buffer, memory corruption might occur.
  severity: WARNING
  languages:
  - c
  - cpp
  pattern-either:
  - pattern: "$RET = strlcpy(...)"
  - pattern: "$RET = strlcat(...)"
  - pattern: "$RET = wcslcpy(...)"
  - pattern: "$RET = wcslcat(...)"
  - pattern: "$RET += strlcpy(...)"
  - pattern: "$RET += strlcat(...)"
  - pattern: "$RET += wcslcpy(...)"
  - pattern: "$RET += wcslcat(...)"
- id: raptor-unsafe-strlen
  metadata:
    author: Marco Ivaldi <raptor@0xdeadbeef.info>
    references:
    - https://cwe.mitre.org/data/definitions/190
    - https://cwe.mitre.org/data/definitions/680
    - https://github.com/struct/mms
    confidence: MEDIUM
    license: MIT
    category: security
    subcategory:
    - audit
    source: https://github.com/0xdea/semgrep-rules/blob/main/c/unsafe-strlen.yaml
  message: The software performs a calculation that can produce an integer overflow
    or wraparound, when the logic assumes that the resulting value will always be
    larger than the original value. This can introduce other weaknesses when the calculation
    is used for resource management or execution control. When influenced by the size
    of an  input it is often easier to overflow a short than an int.
  severity: WARNING
  languages:
  - c
  - cpp
  pattern-either:
  - pattern: "(short $LEN) = strlen(...);"
  - pattern: "(short int $LEN) = strlen(...);"
  - pattern: "(unsigned short $LEN) = strlen(...);"
  - pattern: "(unsigned short int $LEN) = strlen(...);"
  - pattern: "(short $LEN) = wcslen(...);"
  - pattern: "(short int $LEN) = wcslen(...);"
  - pattern: "(unsigned short $LEN) = wcslen(...);"
  - pattern: "(unsigned short int $LEN) = wcslen(...);"
- id: raptor-unterminated-string-strncpy-stpncpy
  metadata:
    author: Marco Ivaldi <raptor@0xdeadbeef.info>
    references:
    - https://cwe.mitre.org/data/definitions/170
    - https://cwe.mitre.org/data/definitions/126
    - https://g.co/kgs/PCHQjJ
    - https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf
    confidence: MEDIUM
    license: MIT
    category: security
    subcategory:
    - audit
    source: https://github.com/0xdea/semgrep-rules/blob/main/c/unterminated-string-strncpy-stpncpy.yaml
  message: If there is no NUL character byte in the first n bytes of the source string,
    strncpy() and stpncpy() do not null-terminate the destination buffer. If the program
    does not explicitly terminate the destination buffer, this will almost certainly
    result in information disclosure, and possibly a buffer overflow condition.
  severity: WARNING
  languages:
  - c
  - cpp
  pattern-either:
  - patterns:
    - pattern: strncpy(...)
    - pattern-not-inside: |
        strncpy($DST, $SRC, $N);
        ...
        $DST[$POS] = NULL;
    - pattern-not-inside: |
        strncpy($DST, $SRC, $N);
        ...
        $DST[$POS] = '\0';
    - pattern-not-inside: |
        strncpy($DST, $SRC, $N);
        ...
        $DST[$POS] = 0;
  - patterns:
    - pattern: stpncpy(...)
    - pattern-not-inside: |
        stpncpy($DST, $SRC, $N);
        ...
        $DST[$POS] = NULL;
    - pattern-not-inside: |
        stpncpy($DST, $SRC, $N);
        ...
        $DST[$POS] = '\0';
    - pattern-not-inside: |
        stpncpy($DST, $SRC, $N);
        ...
        $DST[$POS] = 0;
  - patterns:
    - pattern: wcsncpy(...)
    - pattern-not-inside: |
        wcsncpy($DST, $SRC, $N);
        ...
        $DST[$POS] = NULL;
    - pattern-not-inside: |
        wcsncpy($DST, $SRC, $N);
        ...
        $DST[$POS] = '\0';
    - pattern-not-inside: |
        wcsncpy($DST, $SRC, $N);
        ...
        $DST[$POS] = 0;
  - patterns:
    - pattern: wcpncpy(...)
    - pattern-not-inside: |
        wcpncpy($DST, $SRC, $N);
        ...
        $DST[$POS] = NULL;
    - pattern-not-inside: |
        wcpncpy($DST, $SRC, $N);
        ...
        $DST[$POS] = '\0';
    - pattern-not-inside: |
        wcpncpy($DST, $SRC, $N);
        ...
        $DST[$POS] = 0;
- id: raptor-use-after-free
  metadata:
    author: Marco Ivaldi <raptor@0xdeadbeef.info>
    references:
    - https://cwe.mitre.org/data/definitions/416
    - https://github.com/struct/mms
    - https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf
    - https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples
    confidence: MEDIUM
    license: MIT
    category: security
    subcategory:
    - audit
    source: https://github.com/0xdea/semgrep-rules/blob/main/c/use-after-free.yaml
  message: The use of previously-freed memory can have any number of adverse consequences,
    ranging from the corruption of valid data to the execution of arbitrary code,
    depending on the instantiation and timing of the flaw. The simplest way data corruption
    may occur involves the system's reuse of the freed memory.
  severity: ERROR
  languages:
  - c
  - cpp
  pattern-either:
  - patterns:
    - pattern: |
        free($PTR);
        ...
        $FUN(..., $PTR, ...);
    - pattern-not: |
        free($PTR);
        ...
        $PTR = $EXPR;
        ...
        $FUN(..., $PTR, ...);
    - metavariable-pattern:
        metavariable: "$FUN"
        patterns:
        - pattern-not: free
  - patterns:
    - pattern: |
        free($PTR);
        ...
        $FUN(..., $PTR->$MEM, ...);
    - pattern-not: |
        free($PTR);
        ...
        $PTR = $EXPR;
        ...
        $FUN(..., $PTR->$MEM, ...);
  - patterns:
    - pattern: |
        free($PTR);
        ...
        $PTR->$FUN(...);
    - pattern-not: |
        free($PTR);
        ...
        $PTR = $EXPR;
        ...
        $PTR->$FUN(...);
  - patterns:
    - pattern: |
        free($PTR);
        ...
        return $PTR;
    - pattern-not: |
        free($PTR);
        ...
        $PTR = $EXPR;
        ...
        return $PTR;
  - patterns:
    - pattern: |
        free($PTR);
        ...
        return $PTR[$POS];
    - pattern-not: |
        free($PTR);
        ...
        $PTR = $EXPR;
        ...
        return $PTR;
- id: raptor-write-into-stack-buffer
  metadata:
    author: Marco Ivaldi <raptor@0xdeadbeef.info>
    references:
    - https://cwe.mitre.org/data/definitions/121
    - https://github.com/googleprojectzero/weggli
    confidence: MEDIUM
    license: MIT
    category: security
    subcategory:
    - audit
    source: https://github.com/0xdea/semgrep-rules/blob/main/c/write-into-stack-buffer.yaml
  message: The software directly writes into a stack buffer. This might lead to a
    stack-based buffer overflow.
  severity: WARNING
  languages:
  - c
  - cpp
  pattern-either:
  - patterns:
    - pattern: "$FUN($BUF, ...)"
    - pattern-inside: |
        $TYPE $BUF[$SIZE];
        ...
        $FUN($BUF, ...);
    - pattern-not: $FUN($BUF, "...", ...)
    - metavariable-pattern:
        metavariable: "$FUN"
        pattern-either:
        - pattern: strcpy
        - pattern: strncpy
        - pattern: stpcpy
        - pattern: stpncpy
        - pattern: strlcpy
        - pattern: wcscpy
        - pattern: wcsncpy
        - pattern: wcpcpy
        - pattern: wcpncpy
        - pattern: wcslcpy
        - pattern: strcat
        - pattern: strncat
        - pattern: strlcat
        - pattern: wcscat
        - pattern: wcsncat
        - pattern: wcslcat
        - pattern: memcpy
        - pattern: memccpy
        - pattern: memmove
        - pattern: memset
        - pattern: wmemcpy
        - pattern: wmemmove
        - pattern: wmemset
  - patterns:
    - pattern: "$FUN($BUF, $FMT, ...)"
    - pattern-inside: |
        $TYPE $BUF[$SIZE];
        ...
        $FUN($BUF, $FMT, ...);
    - metavariable-regex:
        metavariable: "$FMT"
        regex: (".*%l?s.*"|".*%S.*"|[a-zA-Z_][a-zA-Z0-9_]*)
    - metavariable-pattern:
        metavariable: "$FUN"
        pattern-either:
        - pattern: sprintf
        - pattern: vsprintf
  - patterns:
    - pattern: "$FUN($BUF, $LEN, $FMT, ...)"
    - pattern-inside: |
        $TYPE $BUF[$SIZE];
        ...
        $FUN($BUF, $LEN, $FMT, ...);
    - metavariable-regex:
        metavariable: "$FMT"
        regex: (".*%l?s.*"|".*%S.*"|[a-zA-Z_][a-zA-Z0-9_]*)
    - metavariable-pattern:
        metavariable: "$FUN"
        pattern-either:
        - pattern: snprintf
        - pattern: vsnprintf
  - patterns:
    - pattern: "$FUN($BUF, ...)"
    - pattern-inside: |
        $TYPE $BUF[$SIZE];
        ...
        $FUN($BUF, ...);
    - metavariable-pattern:
        metavariable: "$FUN"
        pattern-either:
        - pattern: gets
        - pattern: fgets
        - pattern: getwd
        - pattern: getcwd
        - pattern: fread
  - patterns:
    - pattern: "$FUN($ARG1, $BUF, ...)"
    - pattern-inside: |
        $TYPE $BUF[$SIZE];
        ...
        $FUN($ARG1, $BUF, ...);
    - pattern-not: $FUN("...", $BUF, ...)
    - metavariable-pattern:
        metavariable: "$FUN"
        pattern-either:
        - pattern: bcopy
  - patterns:
    - pattern: "$FUN($ARG1, $BUF, ...)"
    - pattern-inside: |
        $TYPE $BUF[$SIZE];
        ...
        $FUN($ARG1, $BUF, ...);
    - metavariable-pattern:
        metavariable: "$FUN"
        pattern-either:
        - pattern: read
        - pattern: pread
        - pattern: recv
        - pattern: recvfrom
