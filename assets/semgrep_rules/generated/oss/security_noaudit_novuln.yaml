---
rules:
- id: gitlab.bandit.B101
  languages:
  - python
  message: |
    The application was found using `assert` in non-test code. Usually reserved for debug and test
    code, the `assert`
    function is commonly used to test conditions before continuing execution. However, enclosed
    code will be removed
    when compiling Python code to optimized byte code. Depending on the assertion and subsequent
    logic, this could
    lead to undefined behavior of the application or application crashes.

    To remediate this issue, remove the `assert` calls. If necessary, replace them with either `if`
    conditions or
    `try/except` blocks.

    Example using `try/except` instead of `assert`:
    ```
    # Below try/except is equal to the assert statement of:
    # assert user.is_authenticated(), "user must be authenticated"
    try:
        if not user.is_authenticated():
            raise AuthError("user must be authenticated")
    except AuthError as e:
        # Handle error
        # ...
        # Return, do not continue processing
        return
    ```
  metadata:
    cwe: CWE-754
    category: security
    shortDescription: Improper check for unusual or exceptional conditions
    primary_identifier: bandit.B101
    secondary_identifiers:
    - name: Bandit Test ID B101
      type: bandit_test_id
      value: B101
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.bandit.B101
    shortlink: https://sg.run/yzWA
    semgrep.dev:
      rule:
        rule_id: KxU4lp
        version_id: vdTYpz1
        url: https://semgrep.dev/playground/r/vdTYpz1/gitlab.bandit.B101
        origin: community
  patterns:
  - pattern: assert(...)
  - pattern-not-inside: |
      import pytest
      ...
  - pattern-not-inside: |
      import unittest
      ...
  severity: INFO
- id: gitlab.bandit.B102
  languages:
  - python
  message: |
    The application was found calling the `exec` function with a non-literal variable. If the
    variable comes from user-supplied input, an adversary could compromise the entire system by
    executing arbitrary python code.

    To remediate this issue, remove all calls to `exec` and consider alternative methods for
    executing
    the necessary business logic. There is almost no safe method of calling `eval` with
    user-supplied input.

    If the application only needs to convert strings into objects, consider using `json.loads`.
    In some cases `ast.literal_eval` is recommended, but this should be avoided as it can still
    suffer from other issues such as the ability for malicious code to crash the python
    interpreter or application.

    Example using `json.loads`` to load in arbitrary data to create data structures:
    ```
    # User supplied data as a blob of JSON
    user_supplied_data = """{"user": "test", "metadata": [1,2,3]}"""
    # Load the JSON
    user_object = json.loads(user_supplied_data)
    # Manually add protected properties _after_ loading, never before
    user_object["is_admin"] = False
    # Work with the object
    ```
  metadata:
    cwe: CWE-78
    owasp: A1:2017-Injection
    category: security
    shortDescription: Improper neutralization of special elements used in an OS command
      ('OS Command Injection')
    primary_identifier: bandit.B102
    secondary_identifiers:
    - name: Bandit Test ID B102
      type: bandit_test_id
      value: B102
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.bandit.B102
    shortlink: https://sg.run/rAJJ
    semgrep.dev:
      rule:
        rule_id: qNUoNN
        version_id: 0bTL7bz
        url: https://semgrep.dev/playground/r/0bTL7bz/gitlab.bandit.B102
        origin: community
  patterns:
  - pattern: exec(...)
  - pattern-not: exec("...")
  severity: WARNING
- id: gitlab.bandit.B103
  languages:
  - python
  message: |
    The application was found setting file permissions to overly permissive values. Consider
    using the following values if the application user is the only process to access
    the file:

    - 0400 - read only access to the file
    - 0200 - write only access to the file
    - 0600 - read/write access to the file

    Example creating a file with read/write permissions for the application user:
    ```
    # Use octal values to set 0o600 (read/write access to the file) for the current
    # user
    os.chmod('somefile.txt', 0o600)
    ```

    For all other values please see:
    https://en.wikipedia.org/wiki/File-system_permissions#Numeric_notation
  metadata:
    shortDescription: Incorrect permission assignment for critical resource
    cwe: CWE-732
    category: security
    owasp: A6:2017-Security Misconfiguration
    primary_identifier: bandit.B103
    secondary_identifiers:
    - name: Bandit Test ID B103
      type: bandit_test_id
      value: B103
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.bandit.B103
    shortlink: https://sg.run/bDNv
    semgrep.dev:
      rule:
        rule_id: lBUd5P
        version_id: X0TQwKO
        url: https://semgrep.dev/playground/r/X0TQwKO/gitlab.bandit.B103
        origin: community
  patterns:
  - pattern: os.chmod(...,$MASK)
  - metavariable-regex:
      metavariable: "$MASK"
      regex: "(0x..f|0o..[2,3,7]|stat.S_IXGRP|stat.S_IWOTH)"
  severity: WARNING
- id: gitlab.bandit.B104
  languages:
  - python
  message: |
    Binding to all network interfaces can potentially open up a service to
    traffic on unintended interfaces, that may not be properly documented or
    secured. By passing "0.0.0.0", "::" or an empty string as the address to the `socket.bind`
    function,
    the application will bind to all interfaces.

    Consider passing in the interface ip address through an environment variable,
    configuration file, or by determining the primary interface(s) IP address.

    Example getting the IP address from an environment variable `IP_ADDRESS`:
    ```
    # Get the IP_ADDRESS env variable, or bind to
    # 127.0.0.1 if it is not set
    address = os.getenv("IP_ADDRESS", "127.0.0.1")
    # Create an internet socket
    sock = socket.socket(socket.AF_INET)
    # Set the port to listen on
    port = 9777
    # Bind to the address and port combination
    sock.bind((address, port))
    # Listen for connections
    sock.listen()
    # Handle the connection
    ```
  metadata:
    cwe: CWE-200
    category: security
    owasp: A6:2017-Security Misconfiguration
    shortDescription: Exposure of sensitive information to an unauthorized actor
    primary_identifier: bandit.B104
    secondary_identifiers:
    - name: Bandit Test ID B104
      type: bandit_test_id
      value: B104
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.bandit.B104
    shortlink: https://sg.run/NrBN
    semgrep.dev:
      rule:
        rule_id: YGUroX
        version_id: d6TrQGQ
        url: https://semgrep.dev/playground/r/d6TrQGQ/gitlab.bandit.B104
        origin: community
  patterns:
  - pattern-either:
    - pattern: |
        $S = socket.socket(...)
        ...
        $S.bind(("0.0.0.0", ...))
    - pattern: |
        $S = socket.socket(...)
        ...
        $S.bind(("::", ...))
    - pattern: |
        $S = socket.socket(...)
        ...
        $S.bind(("", ...))
  severity: INFO
- id: gitlab.bandit.B108
  languages:
  - python
  message: |
    The application was found creating files in shared system temporary directories
    (`/tmp` or `/var/tmp`) without using the `tempfile.TemporaryFile` function. Depending
    on how the application uses this temporary file, an attacker may be able to create
    symlinks that point to other files prior to the application creating or writing
    to the target file, leading to unintended files being created or overwritten.

    Example using `tempfile.TemporaryFile` to write a file:
    ```
    import tempfile

    # Open a new temporary file using a context manager
    with tempfile.TemporaryFile() as fp:
        # Write some data to the temporary file
        fp.write(b'Some data')
        # Seek back to beginning of file
        fp.seek(0)
        # Read it
        data = fp.read()
    # File is automatically closed/removed once we exit the with context
    ```

    For more information on alternative tempfile functions see:
    - https://docs.python.org/3/library/tempfile.html
  metadata:
    cwe: CWE-377
    category: security
    shortDescription: Insecure temporary file
    primary_identifier: bandit.B108
    secondary_identifiers:
    - name: Bandit Test ID B108
      type: bandit_test_id
      value: B108
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.bandit.B108
    shortlink: https://sg.run/QRL4
    semgrep.dev:
      rule:
        rule_id: 0oU6oJ
        version_id: ZRTQ7dx
        url: https://semgrep.dev/playground/r/ZRTQ7dx/gitlab.bandit.B108
        origin: community
  pattern: $CALL("=~/^\/tmp.*/", ...)
  severity: WARNING
- id: gitlab.bandit.B113
  languages:
  - python
  message: |
    The application was found using the `requests` module without configuring a timeout value for
    connections. This could lead to uncontrolled resource consumption where the application could
    run out of
    socket descriptors, effectively causing a Denial of Service (DoS).

    To remediate this issue, pass in a `timeout=` argument to each `requests` call.

    Example using a timeout for an HTTP GET request:
    ```
    # Issue a GET request to https://example.com with a timeout of 10 seconds
    response = requests.get('https://example.com', timeout=10)
    # Work with the response object
    # ...
    ```

    For more information on using the requests module see:
    - https://requests.readthedocs.io/en/latest/api/
  metadata:
    cwe: CWE-400
    category: security
    shortDescription: Uncontrolled resource consumption
    primary_identifier: bandit.B113
    secondary_identifiers:
    - name: Bandit Test ID B113
      type: bandit_test_id
      value: B113
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.bandit.B113
    shortlink: https://sg.run/PoEq
    semgrep.dev:
      rule:
        rule_id: OrULKb
        version_id: rxTyovw
        url: https://semgrep.dev/playground/r/rxTyovw/gitlab.bandit.B113
        origin: community
  patterns:
  - pattern-either:
    - patterns:
      - pattern: requests.$METHOD('...', timeout=$VAL)
      - metavariable-comparison:
          comparison: "$VAL <= 0"
          metavariable: "$VAL"
    - patterns:
      - pattern: requests.$METHOD('...', timeout=$VAL)
      - metavariable-regex:
          metavariable: "$VAL"
          regex: "(^None)"
    - patterns:
      - pattern-not: requests.$METHOD('...', timeout=$VAL, ...)
      - pattern-either:
        - pattern: requests.$METHOD('...', ...)
        - pattern: requests.$METHOD('...')
  - metavariable-regex:
      metavariable: "$METHOD"
      regex: "(get|put|delete|post|options|head|patch)"
  severity: WARNING
- id: gitlab.bandit.B201
  languages:
  - python
  message: |
    The Flask application is running with `debug=True` configured. By enabling this option, certain
    exceptions or errors could cause sensitive information to be leaked in HTTP responses.

    Additionally, it is not recommended to run a Flask application using `Flask.run(...)` in
    production. Instead, a WSGI server such as
    [gunicorn](https://flask.palletsprojects.com/en/2.3.x/deploying/gunicorn/)
    or [waitress](https://flask.palletsprojects.com/en/2.3.x/deploying/waitress/) be used instead.

    For more information on deployment options for Flask applications see:
    - https://flask.palletsprojects.com/en/2.3.x/deploying/
  metadata:
    cwe: CWE-489
    category: security
    owasp: A6:2017-Security Misconfiguration
    shortDescription: Active debug code
    primary_identifier: bandit.B201
    secondary_identifiers:
    - name: Bandit Test ID B201
      type: bandit_test_id
      value: B201
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.bandit.B201
    shortlink: https://sg.run/eK4b
    semgrep.dev:
      rule:
        rule_id: oqUrz7
        version_id: 1QTObNK
        url: https://semgrep.dev/playground/r/1QTObNK/gitlab.bandit.B201
        origin: community
  patterns:
  - pattern-inside: |
      import flask
      ...
  - pattern: "$APP.run(..., debug=True, ...)"
  severity: WARNING
- id: gitlab.bandit.B301-1
  languages:
  - python
  message: |
    The application was found using `pickle` which is vulnerable to deserialization attacks.
    Deserialization attacks exploit the process of reading serialized data and turning it back
    into an object. By constructing malicious objects and serializing them, an adversary may
    attempt to:

    - Inject code that is executed upon object construction, which occurs during the
    deserialization process.
    - Exploit mass assignment by including fields that are not normally a part of the serialized
    data but are read in during deserialization.

    Consider safer alternatives such as serializing data in the JSON format. Ensure any format
    chosen allows
    the application to specify exactly which object types are allowed to be deserialized.

    To protect against mass assignment, only allow deserialization of the specific fields that are
    required. If this is not easily done, consider creating an intermediary type that
    can be serialized with only the necessary fields exposed.

    Example JSON deserializer using an intermediary type that is validated against a schema to
    ensure
    it is safe from mass assignment:
    ```
    import jsonschema

    # Create a schema to validate our user-supplied input against
    # an intermediary object
    intermediary_schema = {
        "type" : "object",
        "properties" :  {
            "name": {"type" : "string"}
        },
        "required": ["name"],
        # Protect against random properties being added to the object
        "additionalProperties": False,
    }
    # If a user attempted to add "'is_admin': True" it would cause a validation error
    intermediary_object = {'name': 'test user'}

    try:
        # Validate the user supplied intermediary object against our schema
        jsonschema.validate(instance=intermediary_object, schema=intermediary_schema)
        user_object = {'user':
            {
                # Assign the deserialized data from intermediary object
                'name': intermediary_object['name'],
                # Add in protected data in object definition (or set it from a class constructor)
                'is_admin': False,
            }
        }
        # Work with the user_object
    except jsonschema.exceptions.ValidationError as ex:
        # Gracefully handle validation errors
        # ...
    ```

    For more details on deserialization attacks in general, see OWASP's guide:
    - https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html
  metadata:
    cwe: CWE-502
    owasp: A8:2017-Insecure Deserialization
    category: security
    shortDescription: Deserialization of untrusted data
    primary_identifier: bandit.B301-1
    secondary_identifiers:
    - name: Bandit Test ID B301
      type: bandit_test_id
      value: B301
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.bandit.B301-1
    shortlink: https://sg.run/v20A
    semgrep.dev:
      rule:
        rule_id: zdU1y5
        version_id: JdTN3rE
        url: https://semgrep.dev/playground/r/JdTN3rE/gitlab.bandit.B301-1
        origin: community
  pattern-either:
  - pattern: pickle.$FUNC(...)
  - pattern: _pickle.$FUNC(...)
  severity: WARNING
- id: gitlab.bandit.B301-2
  languages:
  - python
  message: |
    The application was found using `cPickle` which is vulnerable to deserialization attacks.
    Deserialization attacks exploit the process of reading serialized data and turning it back
    into an object. By constructing malicious objects and serializing them, an adversary may
    attempt to:

    - Inject code that is executed upon object construction, which occurs during the
    deserialization process.
    - Exploit mass assignment by including fields that are not normally a part of the serialized
    data but are read in during deserialization.

    Consider safer alternatives such as serializing data in the JSON format. Ensure any format
    chosen allows
    the application to specify exactly which object types are allowed to be deserialized.

    To protect against mass assignment, only allow deserialization of the specific fields that are
    required. If this is not easily done, consider creating an intermediary type that
    can be serialized with only the necessary fields exposed.

    Example JSON deserializer using an intermediary type that is validated against a schema to
    ensure
    it is safe from mass assignment:
    ```
    import jsonschema

    # Create a schema to validate our user-supplied input against
    # an intermediary object
    intermediary_schema = {
        "type" : "object",
        "properties" :  {
            "name": {"type" : "string"}
        },
        "required": ["name"],
        # Protect against random properties being added to the object
        "additionalProperties": False,
    }
    # If a user attempted to add "'is_admin': True" it would cause a validation error
    intermediary_object = {'name': 'test user'}

    try:
        # Validate the user supplied intermediary object against our schema
        jsonschema.validate(instance=intermediary_object, schema=intermediary_schema)
        user_object = {'user':
            {
                # Assign the deserialized data from intermediary object
                'name': intermediary_object['name'],
                # Add in protected data in object definition (or set it from a class constructor)
                'is_admin': False,
            }
        }
        # Work with the user_object
    except jsonschema.exceptions.ValidationError as ex:
        # Gracefully handle validation errors
        # ...
    ```

    For more details on deserialization attacks in general, see OWASP's guide:
    - https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html
  metadata:
    cwe: CWE-502
    owasp: A8:2017-Insecure Deserialization
    category: security
    shortDescription: Deserialization of untrusted data
    primary_identifier: bandit.B301-2
    secondary_identifiers:
    - name: Bandit Test ID B301
      type: bandit_test_id
      value: B301
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.bandit.B301-2
    shortlink: https://sg.run/d0gZ
    semgrep.dev:
      rule:
        rule_id: pKUwGl
        version_id: qkT21nz
        url: https://semgrep.dev/playground/r/qkT21nz/gitlab.bandit.B301-2
        origin: community
  pattern: cPickle.$FUNC(...)
  severity: WARNING
- id: gitlab.bandit.B301-3
  languages:
  - python
  message: |
    The application was found using `dill` which is vulnerable to deserialization attacks.
    Deserialization attacks exploit the process of reading serialized data and turning it back
    into an object. By constructing malicious objects and serializing them, an adversary may
    attempt to:

    - Inject code that is executed upon object construction, which occurs during the
    deserialization process.
    - Exploit mass assignment by including fields that are not normally a part of the serialized
    data but are read in during deserialization.

    Consider safer alternatives such as serializing data in the JSON format. Ensure any format
    chosen allows
    the application to specify exactly which object types are allowed to be deserialized.

    To protect against mass assignment, only allow deserialization of the specific fields that are
    required. If this is not easily done, consider creating an intermediary type that
    can be serialized with only the necessary fields exposed.

    Example JSON deserializer using an intermediary type that is validated against a schema to
    ensure
    it is safe from mass assignment:
    ```
    import jsonschema

    # Create a schema to validate our user-supplied input against
    # an intermediary object
    intermediary_schema = {
        "type" : "object",
        "properties" :  {
            "name": {"type" : "string"}
        },
        "required": ["name"],
        # Protect against random properties being added to the object
        "additionalProperties": False,
    }
    # If a user attempted to add "'is_admin': True" it would cause a validation error
    intermediary_object = {'name': 'test user'}

    try:
        # Validate the user supplied intermediary object against our schema
        jsonschema.validate(instance=intermediary_object, schema=intermediary_schema)
        user_object = {'user':
            {
                # Assign the deserialized data from intermediary object
                'name': intermediary_object['name'],
                # Add in protected data in object definition (or set it from a class constructor)
                'is_admin': False,
            }
        }
        # Work with the user_object
    except jsonschema.exceptions.ValidationError as ex:
        # Gracefully handle validation errors
        # ...
    ```

    For more details on deserialization attacks in general, see OWASP's guide:
    - https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html
  metadata:
    cwe: CWE-502
    owasp: A8:2017-Insecure Deserialization
    category: security
    shortDescription: Deserialization of untrusted data
    primary_identifier: bandit.B301-3
    secondary_identifiers:
    - name: Bandit Test ID B301
      type: bandit_test_id
      value: B301
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.bandit.B301-3
    shortlink: https://sg.run/dgZ0
    semgrep.dev:
      rule:
        rule_id: j2UqZR
        version_id: l4T4rOA
        url: https://semgrep.dev/playground/r/l4T4rOA/gitlab.bandit.B301-3
        origin: community
  pattern-either:
  - pattern: dill.$FUNC(...)
  severity: WARNING
- id: gitlab.bandit.B301-4
  languages:
  - python
  message: |
    The application was found using `shelve` which is vulnerable to deserialization attacks as
    it calls `pickle` internally.
    Deserialization attacks exploit the process of reading serialized data and turning it back
    into an object. By constructing malicious objects and serializing them, an adversary may
    attempt to:

    - Inject code that is executed upon object construction, which occurs during the
    deserialization process.
    - Exploit mass assignment by including fields that are not normally a part of the serialized
    data but are read in during deserialization.

    Consider safer alternatives such as serializing data in the JSON format. Ensure any format
    chosen allows
    the application to specify exactly which object types are allowed to be deserialized.

    To protect against mass assignment, only allow deserialization of the specific fields that are
    required. If this is not easily done, consider creating an intermediary type that
    can be serialized with only the necessary fields exposed.

    Example JSON deserializer using an intermediary type that is validated against a schema to
    ensure
    it is safe from mass assignment:
    ```
    import jsonschema

    # Create a schema to validate our user-supplied input against
    # an intermediary object
    intermediary_schema = {
        "type" : "object",
        "properties" :  {
            "name": {"type" : "string"}
        },
        "required": ["name"],
        # Protect against random properties being added to the object
        "additionalProperties": False,
    }
    # If a user attempted to add "'is_admin': True" it would cause a validation error
    intermediary_object = {'name': 'test user'}

    try:
        # Validate the user supplied intermediary object against our schema
        jsonschema.validate(instance=intermediary_object, schema=intermediary_schema)
        user_object = {'user':
            {
                # Assign the deserialized data from intermediary object
                'name': intermediary_object['name'],
                # Add in protected data in object definition (or set it from a class constructor)
                'is_admin': False,
            }
        }
        # Work with the user_object
    except jsonschema.exceptions.ValidationError as ex:
        # Gracefully handle validation errors
        # ...
    ```

    For more details on deserialization attacks in general, see OWASP's guide:
    - https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html
  metadata:
    cwe: CWE-502
    owasp: A8:2017-Insecure Deserialization
    category: security
    shortDescription: Deserialization of untrusted data
    primary_identifier: bandit.B301-4
    secondary_identifiers:
    - name: Bandit Test ID B301
      type: bandit_test_id
      value: B301
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.bandit.B301-4
    shortlink: https://sg.run/Zer4
    semgrep.dev:
      rule:
        rule_id: 10UZxd
        version_id: 5PTdPDj
        url: https://semgrep.dev/playground/r/5PTdPDj/gitlab.bandit.B301-4
        origin: community
  pattern-either:
  - pattern: shelve.$FUNC(...)
  severity: WARNING
- id: gitlab.bandit.B302
  languages:
  - python
  message: |
    The application was found using `dill` which is vulnerable to deserialization attacks.
    Deserialization attacks exploit the process of reading serialized data and turning it back
    into an object. By constructing malicious objects and serializing them, an adversary may
    attempt to:

    - Inject code that is executed upon object construction, which occurs during the
    deserialization process.
    - Exploit mass assignment by including fields that are not normally a part of the serialized
    data but are read in during deserialization.

    Consider safer alternatives such as serializing data in the JSON format. Ensure any format
    chosen allows
    the application to specify exactly which object types are allowed to be deserialized.

    To protect against mass assignment, only allow deserialization of the specific fields that are
    required. If this is not easily done, consider creating an intermediary type that
    can be serialized with only the necessary fields exposed.

    Example JSON deserializer using an intermediary type that is validated against a schema to
    ensure
    it is safe from mass assignment:
    ```
    import jsonschema

    # Create a schema to validate our user-supplied input against
    # an intermediary object
    intermediary_schema = {
        "type" : "object",
        "properties" :  {
            "name": {"type" : "string"}
        },
        "required": ["name"],
        # Protect against random properties being added to the object
        "additionalProperties": False,
    }
    # If a user attempted to add "'is_admin': True" it would cause a validation error
    intermediary_object = {'name': 'test user'}

    try:
        # Validate the user supplied intermediary object against our schema
        jsonschema.validate(instance=intermediary_object, schema=intermediary_schema)
        user_object = {'user':
            {
                # Assign the deserialized data from intermediary object
                'name': intermediary_object['name'],
                # Add in protected data in object definition (or set it from a class constructor)
                'is_admin': False,
            }
        }
        # Work with the user_object
    except jsonschema.exceptions.ValidationError as ex:
        # Gracefully handle validation errors
        # ...
    ```

    For more details on deserialization attacks in general, see OWASP's guide:
    - https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html
  metadata:
    cwe: CWE-502
    owasp: A8:2017-Insecure Deserialization
    category: security
    shortDescription: Deserialization of untrusted data
    primary_identifier: bandit.B302
    secondary_identifiers:
    - name: Bandit Test ID B302
      type: bandit_test_id
      value: B302
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.bandit.B302
    shortlink: https://sg.run/ZkeD
    semgrep.dev:
      rule:
        rule_id: 2ZUK4W
        version_id: YDTp601
        url: https://semgrep.dev/playground/r/YDTp601/gitlab.bandit.B302
        origin: community
  pattern-either:
  - pattern: marshal.dump(...)
  - pattern: marshal.dumps(...)
  - pattern: marshal.load(...)
  - pattern: marshal.loads(...)
  severity: WARNING
- id: gitlab.bandit.B303-1
  languages:
  - python
  message: |
    The application was found using an insecure or risky digest or signature algorithm. MD2, MD4,
     MD5  and SHA1 hash algorithms have been found to be vulnerable to producing collisions.

    This means
    that two different values, when hashed, can lead to the same hash value. If the application is
    trying
    to use these hash methods for storing passwords, then it is recommended to switch to a
    password hashing
    algorithm such as Argon2id or PBKDF2.

    Note that the `Crypto` and `Cryptodome` Python packages are no longer recommended for
    new applications, instead consider using the [cryptography](https://cryptography.io/) package.

    Example of creating a SHA-384 hash using the `cryptography` package:
    ```
    from cryptography.hazmat.primitives import hashes
    # Create a SHA384 digest
    digest = hashes.Hash(hashes.SHA384())
    # Update the digest with some initial data
    digest.update(b"some data to hash")
    # Add more data to the digest
    digest.update(b"some more data")
    # Finalize the digest as bytes
    result = digest.finalize()
    ```

    For more information on secure password storage see OWASP:
    - https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html

    For more information on the cryptography module see:
    - https://cryptography.io/en/latest/
  metadata:
    cwe: CWE-327
    owasp: A3:2017-Sensitive Data Exposure
    category: security
    shortDescription: Use of a broken or risky cryptographic algorithm
    primary_identifier: bandit.B303-1
    secondary_identifiers:
    - name: Bandit Test ID B303
      type: bandit_test_id
      value: B303
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.bandit.B303-1
    shortlink: https://sg.run/nkkX
    semgrep.dev:
      rule:
        rule_id: X5U77W
        version_id: DkT6903
        url: https://semgrep.dev/playground/r/DkT6903/gitlab.bandit.B303-1
        origin: community
  pattern: hashlib.md5(...)
  severity: WARNING
- id: gitlab.bandit.B303-2
  languages:
  - python
  message: |
    The application was found using an insecure or risky digest or signature algorithm. MD2, MD4,
     MD5  and SHA1 hash algorithms have been found to be vulnerable to producing collisions.

    This means
    that two different values, when hashed, can lead to the same hash value. If the application is
    trying
    to use these hash methods for storing passwords, then it is recommended to switch to a
    password hashing
    algorithm such as Argon2id or PBKDF2.

    Note that the `Crypto` and `Cryptodome` Python packages are no longer recommended for
    new applications, instead consider using the [cryptography](https://cryptography.io/) package.

    Example of creating a SHA-384 hash using the `cryptography` package:
    ```
    from cryptography.hazmat.primitives import hashes
    # Create a SHA384 digest
    digest = hashes.Hash(hashes.SHA384())
    # Update the digest with some initial data
    digest.update(b"some data to hash")
    # Add more data to the digest
    digest.update(b"some more data")
    # Finalize the digest as bytes
    result = digest.finalize()
    ```

    For more information on secure password storage see OWASP:
    - https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html

    For more information on the cryptography module see:
    - https://cryptography.io/en/latest/
  metadata:
    cwe: CWE-327
    owasp: A3:2017-Sensitive Data Exposure
    category: security
    shortDescription: Use of a broken or risky cryptographic algorithm
    primary_identifier: bandit.B303-2
    secondary_identifiers:
    - name: Bandit Test ID B303
      type: bandit_test_id
      value: B303
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.bandit.B303-2
    shortlink: https://sg.run/EOOw
    semgrep.dev:
      rule:
        rule_id: j2URRg
        version_id: WrTWlpg
        url: https://semgrep.dev/playground/r/WrTWlpg/gitlab.bandit.B303-2
        origin: community
  pattern: hashlib.sha1(...)
  severity: WARNING
- id: gitlab.bandit.B303-8
  languages:
  - python
  message: |
    The application was found using an insecure or risky digest or signature algorithm. MD2, MD5
    and SHA1 hash algorithms have been found to be vulnerable to producing collisions.

    This means
    that two different values, when hashed, can lead to the same hash value. If the application is
    trying
    to use these hash methods for storing passwords, then it is recommended to switch to a
    password hashing
    algorithm such as Argon2id or PBKDF2.
    It is strongly recommended that a standard digest algorithm be chosen instead as implementing
    a custom algorithm is prone to error.

    Example of creating a SHA-384 hash using the `cryptography` package:
    ```
    from cryptography.hazmat.primitives import hashes
    # Create a SHA384 digest
    digest = hashes.Hash(hashes.SHA384())
    # Update the digest with some initial data
    digest.update(b"some data to hash")
    # Add more data to the digest
    digest.update(b"some more data")
    # Finalize the digest as bytes
    result = digest.finalize()
    ```

    For more information on secure password storage see OWASP:
    - https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html

    For more information on the cryptography module see:
    - https://cryptography.io/en/latest/
  metadata:
    cwe: CWE-327
    owasp: A3:2017-Sensitive Data Exposure
    category: security
    shortDescription: Use of a broken or risky cryptographic algorithm
    primary_identifier: bandit.B303-8
    secondary_identifiers:
    - name: Bandit Test ID B303
      type: bandit_test_id
      value: B303
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.bandit.B303-8
    shortlink: https://sg.run/L88r
    semgrep.dev:
      rule:
        rule_id: 9AUkko
        version_id: ExTjpDQ
        url: https://semgrep.dev/playground/r/ExTjpDQ/gitlab.bandit.B303-8
        origin: community
  pattern: cryptography.hazmat.primitives.hashes.SHA1(...)
  severity: WARNING
- id: gitlab.bandit.B304-1
  languages:
  - python
  message: |
    The application was found using an insecure or risky digest or signature algorithm. MD2, MD5
    and SHA1 hash algorithms have been found to be vulnerable to producing collisions.

    This means
    that two different values, when hashed, can lead to the same hash value. If the application is
    trying
    to use these hash methods for storing passwords, then it is recommended to switch to a
    password hashing
    algorithm such as Argon2id or PBKDF2.

    Note that the `Crypto` and `Cryptodome` Python packages are no longer recommended for
    new applications, instead consider using the [cryptography](https://cryptography.io/) package.

    Example of creating a SHA-384 hash using the `cryptography` package:
    ```
    from cryptography.hazmat.primitives import hashes
    # Create a SHA384 digest
    digest = hashes.Hash(hashes.SHA384())
    # Update the digest with some initial data
    digest.update(b"some data to hash")
    # Add more data to the digest
    digest.update(b"some more data")
    # Finalize the digest as bytes
    result = digest.finalize()
    ```

    For more information on secure password storage see OWASP:
    - https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html

    For more information on the cryptography module see:
    - https://cryptography.io/en/latest/
  metadata:
    cwe: CWE-327
    owasp: A3:2017-Sensitive Data Exposure
    category: security
    shortDescription: Use of a broken or risky cryptographic algorithm
    primary_identifier: bandit.B304-1
    secondary_identifiers:
    - name: Bandit Test ID B304
      type: bandit_test_id
      value: B304
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.bandit.B304-1
    shortlink: https://sg.run/8RRy
    semgrep.dev:
      rule:
        rule_id: yyUyyn
        version_id: A8T9r7L
        url: https://semgrep.dev/playground/r/A8T9r7L/gitlab.bandit.B304-1
        origin: community
  patterns:
  - pattern-either:
    - pattern: Crypto.Hash.MD2.new(...)
    - pattern: Cryptodome.Hash.MD2.new (...)
  severity: WARNING
- id: gitlab.bandit.B304-10
  languages:
  - python
  message: |
    DES, TripleDES, RC2 and RC4 are all considered broken or insecure cryptographic algorithms.
    Newer algorithms apply message integrity to validate ciphertext has not been tampered
    with. Consider using `ChaCha20Poly1305` instead as it is easier and faster than the
    alternatives such as `AES-256-GCM`.

    For older applications that don't have support for `ChaCha20Poly1305`,
    `AES-256-GCM` is recommended, however it has many drawbacks:
    - Slower than `ChaCha20Poly1305`.
    - Catastrophic failure if nonce values are reused.

    Example using `ChaCha20Poly1305`:
    ```
    import os
    # Import ChaCha20Poly1305 from cryptography
    from cryptography.hazmat.primitives.ciphers.aead import ChaCha20Poly1305
    # Our plaintext to encrypt
    plain_text = b"Secret text to encrypt"
    # We do not require authenticated but unencrypted data, so set to None
    aad = None
    # Generate a secure key
    key = ChaCha20Poly1305.generate_key()
    # Create a new ChaCha20Poly1305 instance with our secure key
    chacha = ChaCha20Poly1305(key)
    # Note: nonce values _must_ be regenerated every time they are used.
    nonce = os.urandom(12)
    # Encrypt our plaintext
    cipher_text = chacha.encrypt(nonce, plain_text, aad)
    # Decrypt the plain text using the nonce and cipher_text
    chacha.decrypt(nonce, cipher_text, aad)
    ```

    Example using `AESGCM`:
    ```
    import os
    # Import AESGCM from cryptography
    from cryptography.hazmat.primitives.ciphers.aead import AESGCM
    # Our plaintext to encrypt
    plain_text = b"Secret text to encrypt"
    # We do not require authenticated but unencrypted data, so set to None
    aad = None
    # Generate a secure key
    key = AESGCM.generate_key(bit_length=128)
    # Create a new AESGCM instance with our secure key
    aesgcm = AESGCM(key)
    # Note: nonce values _must_ be regenerated every time they are used.
    nonce = os.urandom(12)
    # Encrypt our plaintext
    cipher_text = aesgcm.encrypt(nonce, plain_text, aad)
    # Decrypt the plain text using the nonce and cipher_text
    aesgcm.decrypt(nonce, cipher_text, aad)
    ```

    For more information on the cryptography module see:
    - https://cryptography.io/en/latest/
  metadata:
    cwe: CWE-327
    owasp: A3:2017-Sensitive Data Exposure
    category: security
    shortDescription: Use of a broken or risky cryptographic algorithm
    primary_identifier: bandit.B304-10
    secondary_identifiers:
    - name: Bandit Test ID B304
      type: bandit_test_id
      value: B304
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.bandit.B304-10
    shortlink: https://sg.run/4PPl
    semgrep.dev:
      rule:
        rule_id: kxU886
        version_id: 5PTdPD7
        url: https://semgrep.dev/playground/r/5PTdPD7/gitlab.bandit.B304-10
        origin: community
  pattern: cryptography.hazmat.primitives.ciphers.algorithms.ARC4(...)
  severity: WARNING
- id: gitlab.bandit.B304-11
  languages:
  - python
  message: |
    The Blowfish encryption algorithm was meant as a drop-in replacement for DES and was created in
    1993. Smaller key sizes may make the ciphertext vulnerable to [birthday
    attacks](https://en.wikipedia.org/wiki/Birthday_attack). While no known attacks against
    Blowfish
    exist, it should never be used to encrypt files over 4GB in size. If possible consider
    using ChaCha20Poly1305 or AES-GCM instead of Blowfish.

    For older applications that don't have support for `ChaCha20Poly1305`, `AES-256-GCM` is
    recommended, however it has many drawbacks:
      - Slower than `ChaCha20Poly1305`.
      - Catastrophic failure if nonce values are reused.

    Example using `ChaCha20Poly1305`:
    ```
    import os
    # Import ChaCha20Poly1305 from cryptography
    from cryptography.hazmat.primitives.ciphers.aead import ChaCha20Poly1305
    # Our plaintext to encrypt
    plain_text = b"Secret text to encrypt"
    # We do not require authenticated but unencrypted data, so set to None
    aad = None
    # Generate a secure key
    key = ChaCha20Poly1305.generate_key()
    # Create a new ChaCha20Poly1305 instance with our secure key
    chacha = ChaCha20Poly1305(key)
    # Note: nonce values _must_ be regenerated every time they are used.
    nonce = os.urandom(12)
    # Encrypt our plaintext
    cipher_text = chacha.encrypt(nonce, plain_text, aad)
    # Decrypt the plain text using the nonce and cipher_text
    chacha.decrypt(nonce, cipher_text, aad)
    ```

    Example using `AESGCM`:
    ```
    import os
    # Import AESGCM from cryptography
    from cryptography.hazmat.primitives.ciphers.aead import AESGCM
    # Our plaintext to encrypt
    plain_text = b"Secret text to encrypt"
    # We do not require authenticated but unencrypted data, so set to None
    aad = None
    # Generate a secure key
    key = AESGCM.generate_key(bit_length=128)
    # Create a new AESGCM instance with our secure key
    aesgcm = AESGCM(key)
    # Note: nonce values _must_ be regenerated every time they are used.
    nonce = os.urandom(12)
    # Encrypt our plaintext
    cipher_text = aesgcm.encrypt(nonce, plain_text, aad)
    # Decrypt the plain text using the nonce and cipher_text
    aesgcm.decrypt(nonce, cipher_text, aad)
    ```

    For more information on the cryptography module see:
    - https://cryptography.io/en/latest/
  metadata:
    cwe: CWE-327
    owasp: A3:2017-Sensitive Data Exposure
    category: security
    shortDescription: Use of a broken or risky cryptographic algorithm
    primary_identifier: bandit.B304-11
    secondary_identifiers:
    - name: Bandit Test ID B304
      type: bandit_test_id
      value: B304
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.bandit.B304-11
    shortlink: https://sg.run/P88Y
    semgrep.dev:
      rule:
        rule_id: wdUGGA
        version_id: GxTvxEY
        url: https://semgrep.dev/playground/r/GxTvxEY/gitlab.bandit.B304-11
        origin: community
  pattern: cryptography.hazmat.primitives.ciphers.algorithms.Blowfish(...)
  severity: WARNING
- id: gitlab.bandit.B304-2
  languages:
  - python
  message: |
    The application was found using an insecure or risky digest or signature algorithm. MD2, MD4,
     MD5  and SHA1 hash algorithms have been found to be vulnerable to producing collisions.

    This means
    that two different values, when hashed, can lead to the same hash value. If the application is
    trying
    to use these hash methods for storing passwords, then it is recommended to switch to a
    password hashing
    algorithm such as Argon2id or PBKDF2.

    Note that the `Crypto` and `Cryptodome` Python packages are no longer recommended for
    new applications, instead consider using the [cryptography](https://cryptography.io/) package.

    Example of creating a SHA-384 hash using the `cryptography` package:
    ```
    from cryptography.hazmat.primitives import hashes
    # Create a SHA384 digest
    digest = hashes.Hash(hashes.SHA384())
    # Update the digest with some initial data
    digest.update(b"some data to hash")
    # Add more data to the digest
    digest.update(b"some more data")
    # Finalize the digest as bytes
    result = digest.finalize()
    ```

    For more information on secure password storage see OWASP:
    - https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html

    For more information on the cryptography module see:
    - https://cryptography.io/en/latest/
  metadata:
    cwe: CWE-327
    owasp: A3:2017-Sensitive Data Exposure
    category: security
    shortDescription: Use of a broken or risky cryptographic algorithm
    primary_identifier: bandit.B304-2
    secondary_identifiers:
    - name: Bandit Test ID B304
      type: bandit_test_id
      value: B304
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.bandit.B304-2
    shortlink: https://sg.run/grrJ
    semgrep.dev:
      rule:
        rule_id: r6U99k
        version_id: BjTXD0G
        url: https://semgrep.dev/playground/r/BjTXD0G/gitlab.bandit.B304-2
        origin: community
  patterns:
  - pattern-either:
    - pattern: Crypto.Hash.MD4.new(...)
    - pattern: Cryptodome.Hash.MD4.new (...)
  severity: WARNING
- id: gitlab.bandit.B304-3
  languages:
  - python
  message: |
    The application was found using an insecure or risky digest or signature algorithm. MD5
    and SHA1 hash algorithms have been found to be vulnerable to producing collisions.

    This means
    that two different values, when hashed, can lead to the same hash value. If the application is
    trying
    to use these hash methods for storing passwords, then it is recommended to switch to a
    password hashing
    algorithm such as Argon2id or PBKDF2.
    It is strongly recommended that a standard digest algorithm be chosen instead as implementing
    a custom algorithm is prone to errors.

    Note that the `Crypto` and `Cryptodome` Python packages are no longer recommended for
    new applications, instead consider using the [cryptography](https://cryptography.io/) package.

    Example of creating a SHA-384 hash using the `cryptography` package:
    ```
    from cryptography.hazmat.primitives import hashes
    # Create a SHA384 digest
    digest = hashes.Hash(hashes.SHA384())
    # Update the digest with some initial data
    digest.update(b"some data to hash")
    # Add more data to the digest
    digest.update(b"some more data")
    # Finalize the digest as bytes
    result = digest.finalize()
    ```

    For more information on secure password storage see OWASP:
    - https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html

    For more information on the cryptography module see:
    - https://cryptography.io/en/latest/
  metadata:
    cwe: CWE-327
    owasp: A3:2017-Sensitive Data Exposure
    category: security
    shortDescription: Use of a broken or risky cryptographic algorithm
    primary_identifier: bandit.B304-3
    secondary_identifiers:
    - name: Bandit Test ID B304
      type: bandit_test_id
      value: B304
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.bandit.B304-3
    shortlink: https://sg.run/Q444
    semgrep.dev:
      rule:
        rule_id: bwUNNN
        version_id: PkTJWrR
        url: https://semgrep.dev/playground/r/PkTJWrR/gitlab.bandit.B304-3
        origin: community
  patterns:
  - pattern-either:
    - pattern: Crypto.Hash.MD5.new(...)
    - pattern: Cryptodome.Hash.MD5.new (...)
  severity: WARNING
- id: gitlab.bandit.B304-4
  languages:
  - python
  message: |
    The application was found using an insecure or risky digest or signature algorithm. MD5
    and SHA1 hash algorithms have been found to be vulnerable to producing collisions.

    This means
    that two different values, when hashed, can lead to the same hash value. If the application is
    trying
    to use these hash methods for storing passwords, then it is recommended to switch to a
    password hashing
    algorithm such as Argon2id or PBKDF2.
    It is strongly recommended that a standard digest algorithm be chosen instead as implementing
    a custom algorithm is prone to errors.

    Note that the `Crypto` and `Cryptodome` Python packages are no longer recommended for
    new applications, instead consider using the [cryptography](https://cryptography.io/) package.

    Example of creating a SHA-384 hash using the `cryptography` package:
    ```
    from cryptography.hazmat.primitives import hashes
    # Create a SHA384 digest
    digest = hashes.Hash(hashes.SHA384())
    # Update the digest with some initial data
    digest.update(b"some data to hash")
    # Add more data to the digest
    digest.update(b"some more data")
    # Finalize the digest as bytes
    result = digest.finalize()
    ```

    For more information on secure password storage see OWASP:
    - https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html

    For more information on the cryptography module see:
    - https://cryptography.io/en/latest/
  metadata:
    cwe: CWE-327
    owasp: A3:2017-Sensitive Data Exposure
    category: security
    shortDescription: Use of a broken or risky cryptographic algorithm
    primary_identifier: bandit.B304-4
    secondary_identifiers:
    - name: Bandit Test ID B304
      type: bandit_test_id
      value: B304
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.bandit.B304-4
    shortlink: https://sg.run/344r
    semgrep.dev:
      rule:
        rule_id: NbUYYN
        version_id: JdTN3rk
        url: https://semgrep.dev/playground/r/JdTN3rk/gitlab.bandit.B304-4
        origin: community
  patterns:
  - pattern-either:
    - pattern: Crypto.Hash.SHA.new(...)
    - pattern: Cryptodome.Hash.SHA.new (...)
  severity: WARNING
- id: gitlab.bandit.B304-5
  languages:
  - python
  message: |
    DES, TripleDES, RC2 and RC4 are all considered broken or insecure cryptographic algorithms.
    Newer algorithms apply message integrity to validate ciphertext has not been tampered
    with. Consider using `ChaCha20Poly1305` instead as it is easier and faster than the
    alternatives such as `AES-256-GCM`.

    For older applications that don't have support for `ChaCha20Poly1305`,
    `AES-256-GCM` is recommended, however it has many drawbacks:
    - Slower than `ChaCha20Poly1305`.
    - Catastrophic failure if nonce values are reused.

    Note that the `Crypto` and `Cryptodome` Python packages are no longer recommended for
    new applications, instead consider using the [cryptography](https://cryptography.io/) package.

    Example using `ChaCha20Poly1305`:
    ```
    import os
    # Import ChaCha20Poly1305 from cryptography
    from cryptography.hazmat.primitives.ciphers.aead import ChaCha20Poly1305
    # Our plaintext to encrypt
    plain_text = b"Secret text to encrypt"
    # We do not require authenticated but unencrypted data, so set to None
    aad = None
    # Generate a secure key
    key = ChaCha20Poly1305.generate_key()
    # Create a new ChaCha20Poly1305 instance with our secure key
    chacha = ChaCha20Poly1305(key)
    # Note: nonce values _must_ be regenerated every time they are used.
    nonce = os.urandom(12)
    # Encrypt our plaintext
    cipher_text = chacha.encrypt(nonce, plain_text, aad)
    # Decrypt the plain text using the nonce and cipher_text
    chacha.decrypt(nonce, cipher_text, aad)
    ```

    Example using `AESGCM`:
    ```
    import os
    # Import AESGCM from cryptography
    from cryptography.hazmat.primitives.ciphers.aead import AESGCM
    # Our plaintext to encrypt
    plain_text = b"Secret text to encrypt"
    # We do not require authenticated but unencrypted data, so set to None
    aad = None
    # Generate a secure key
    key = AESGCM.generate_key(bit_length=128)
    # Create a new AESGCM instance with our secure key
    aesgcm = AESGCM(key)
    # Note: nonce values _must_ be regenerated every time they are used.
    nonce = os.urandom(12)
    # Encrypt our plaintext
    cipher_text = aesgcm.encrypt(nonce, plain_text, aad)
    # Decrypt the plain text using the nonce and cipher_text
    aesgcm.decrypt(nonce, cipher_text, aad)
    ```

    For more information on the cryptography module see:
    - https://cryptography.io/en/latest/
  metadata:
    cwe: CWE-327
    owasp: A3:2017-Sensitive Data Exposure
    category: security
    shortDescription: Use of a broken or risky cryptographic algorithm
    primary_identifier: bandit.B304-5
    secondary_identifiers:
    - name: Bandit Test ID B304
      type: bandit_test_id
      value: B304
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.bandit.B304-5
    shortlink: https://sg.run/8nvQ
    semgrep.dev:
      rule:
        rule_id: NbUAOd
        version_id: 8KTQqkG
        url: https://semgrep.dev/playground/r/8KTQqkG/gitlab.bandit.B304-5
        origin: community
  patterns:
  - pattern-either:
    - pattern: Cryptodome.Cipher.ARC2.new(...)
    - pattern: Crypto.Cipher.ARC2.new
  severity: WARNING
- id: gitlab.bandit.B304-6
  languages:
  - python
  message: |
    DES, TripleDES, RC2 and RC4 are all considered broken or insecure cryptographic algorithms.
    Newer algorithms apply message integrity to validate ciphertext has not been tampered
    with. Consider using `ChaCha20Poly1305` instead as it is easier and faster than the
    alternatives such as `AES-256-GCM`.

    For older applications that don't have support for `ChaCha20Poly1305`,
    `AES-256-GCM` is recommended, however it has many drawbacks:
    - Slower than `ChaCha20Poly1305`.
    - Catastrophic failure if nonce values are reused.

    Note that the `Crypto` and `Cryptodome` Python packages are no longer recommended for
    new applications, instead consider using the [cryptography](https://cryptography.io/) package.

    Example using `ChaCha20Poly1305`:
    ```
    import os
    # Import ChaCha20Poly1305 from cryptography
    from cryptography.hazmat.primitives.ciphers.aead import ChaCha20Poly1305
    # Our plaintext to encrypt
    plain_text = b"Secret text to encrypt"
    # We do not require authenticated but unencrypted data, so set to None
    aad = None
    # Generate a secure key
    key = ChaCha20Poly1305.generate_key()
    # Create a new ChaCha20Poly1305 instance with our secure key
    chacha = ChaCha20Poly1305(key)
    # Note: nonce values _must_ be regenerated every time they are used.
    nonce = os.urandom(12)
    # Encrypt our plaintext
    cipher_text = chacha.encrypt(nonce, plain_text, aad)
    # Decrypt the plain text using the nonce and cipher_text
    chacha.decrypt(nonce, cipher_text, aad)
    ```

    Example using `AESGCM`:
    ```
    import os
    # Import AESGCM from cryptography
    from cryptography.hazmat.primitives.ciphers.aead import AESGCM
    # Our plaintext to encrypt
    plain_text = b"Secret text to encrypt"
    # We do not require authenticated but unencrypted data, so set to None
    aad = None
    # Generate a secure key
    key = AESGCM.generate_key(bit_length=128)
    # Create a new AESGCM instance with our secure key
    aesgcm = AESGCM(key)
    # Note: nonce values _must_ be regenerated every time they are used.
    nonce = os.urandom(12)
    # Encrypt our plaintext
    cipher_text = aesgcm.encrypt(nonce, plain_text, aad)
    # Decrypt the plain text using the nonce and cipher_text
    aesgcm.decrypt(nonce, cipher_text, aad)
    ```

    For more information on the cryptography module see:
    - https://cryptography.io/en/latest/
  metadata:
    cwe: CWE-327
    owasp: A3:2017-Sensitive Data Exposure
    category: security
    shortDescription: Use of a broken or risky cryptographic algorithm
    primary_identifier: bandit.B304-6
    secondary_identifiers:
    - name: Bandit Test ID B304
      type: bandit_test_id
      value: B304
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.bandit.B304-6
    shortlink: https://sg.run/gJ75
    semgrep.dev:
      rule:
        rule_id: kxURAL
        version_id: gET3A2k
        url: https://semgrep.dev/playground/r/gET3A2k/gitlab.bandit.B304-6
        origin: community
  patterns:
  - pattern-either:
    - pattern: Cryptodome.Cipher.ARC4.new(...)
    - pattern: Crypto.Cipher.ARC4.new(...)
  severity: WARNING
- id: gitlab.bandit.B304-7
  languages:
  - python
  message: |
    The Blowfish encryption algorithm was meant as a drop-in replacement for DES and was created in
    1993. Smaller key sizes may make the ciphertext vulnerable to [birthday
    attacks](https://en.wikipedia.org/wiki/Birthday_attack). While no known attacks against
    Blowfish
    exist, it should never be used to encrypt files over 4GB in size. If possible consider
    using ChaCha20Poly1305 or AES-GCM instead of Blowfish.

    For older applications that don't have support for `ChaCha20Poly1305`, `AES-256-GCM` is
    recommended, however it has many drawbacks:
      - Slower than `ChaCha20Poly1305`.
      - Catastrophic failure if nonce values are reused.

    Note that the `Crypto` and `Cryptodome` Python packages are no longer recommended for
    new applications, instead consider using the [cryptography](https://cryptography.io/) package.

    Example using `ChaCha20Poly1305`:
    ```
    import os
    # Import ChaCha20Poly1305 from cryptography
    from cryptography.hazmat.primitives.ciphers.aead import ChaCha20Poly1305
    # Our plaintext to encrypt
    plain_text = b"Secret text to encrypt"
    # We do not require authenticated but unencrypted data, so set to None
    aad = None
    # Generate a secure key
    key = ChaCha20Poly1305.generate_key()
    # Create a new ChaCha20Poly1305 instance with our secure key
    chacha = ChaCha20Poly1305(key)
    # Note: nonce values _must_ be regenerated every time they are used.
    nonce = os.urandom(12)
    # Encrypt our plaintext
    cipher_text = chacha.encrypt(nonce, plain_text, aad)
    # Decrypt the plain text using the nonce and cipher_text
    chacha.decrypt(nonce, cipher_text, aad)
    ```

    Example using `AESGCM`:
    ```
    import os
    # Import AESGCM from cryptography
    from cryptography.hazmat.primitives.ciphers.aead import AESGCM
    # Our plaintext to encrypt
    plain_text = b"Secret text to encrypt"
    # We do not require authenticated but unencrypted data, so set to None
    aad = None
    # Generate a secure key
    key = AESGCM.generate_key(bit_length=128)
    # Create a new AESGCM instance with our secure key
    aesgcm = AESGCM(key)
    # Note: nonce values _must_ be regenerated every time they are used.
    nonce = os.urandom(12)
    # Encrypt our plaintext
    cipher_text = aesgcm.encrypt(nonce, plain_text, aad)
    # Decrypt the plain text using the nonce and cipher_text
    aesgcm.decrypt(nonce, cipher_text, aad)
    ```

    For more information on the cryptography module see:
    - https://cryptography.io/en/latest/
  metadata:
    cwe: CWE-327
    owasp: A3:2017-Sensitive Data Exposure
    category: security
    shortDescription: Use of a broken or risky cryptographic algorithm
    primary_identifier: bandit.B304-7
    secondary_identifiers:
    - name: Bandit Test ID B304
      type: bandit_test_id
      value: B304
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.bandit.B304-7
    shortlink: https://sg.run/Q8oq
    semgrep.dev:
      rule:
        rule_id: wdU82R
        version_id: 7ZTg19v
        url: https://semgrep.dev/playground/r/7ZTg19v/gitlab.bandit.B304-7
        origin: community
  patterns:
  - pattern-either:
    - pattern: Cryptodome.Cipher.Blowfish.new(...)
    - pattern: Crypto.Cipher.Blowfish.new(...)
  severity: WARNING
- id: gitlab.bandit.B304-8
  languages:
  - python
  message: |
    DES, TripleDES, RC2 and RC4 are all considered broken or insecure cryptographic algorithms.
    Newer algorithms apply message integrity to validate ciphertext has not been tampered
    with. Consider using `ChaCha20Poly1305` instead as it is easier and faster than the
    alternatives such as `AES-256-GCM`.

    For older applications that don't have support for `ChaCha20Poly1305`,
    `AES-256-GCM` is recommended, however it has many drawbacks:
    - Slower than `ChaCha20Poly1305`.
    - Catastrophic failure if nonce values are reused.

    Note that the `Crypto` and `Cryptodome` Python packages are no longer recommended for
    new applications, instead consider using the [cryptography](https://cryptography.io/) package.

    Example using `ChaCha20Poly1305`:
    ```
    import os
    # Import ChaCha20Poly1305 from cryptography
    from cryptography.hazmat.primitives.ciphers.aead import ChaCha20Poly1305
    # Our plaintext to encrypt
    plain_text = b"Secret text to encrypt"
    # We do not require authenticated but unencrypted data, so set to None
    aad = None
    # Generate a secure key
    key = ChaCha20Poly1305.generate_key()
    # Create a new ChaCha20Poly1305 instance with our secure key
    chacha = ChaCha20Poly1305(key)
    # Note: nonce values _must_ be regenerated every time they are used.
    nonce = os.urandom(12)
    # Encrypt our plaintext
    cipher_text = chacha.encrypt(nonce, plain_text, aad)
    # Decrypt the plain text using the nonce and cipher_text
    chacha.decrypt(nonce, cipher_text, aad)
    ```

    Example using `AESGCM`:
    ```
    import os
    # Import AESGCM from cryptography
    from cryptography.hazmat.primitives.ciphers.aead import AESGCM
    # Our plaintext to encrypt
    plain_text = b"Secret text to encrypt"
    # We do not require authenticated but unencrypted data, so set to None
    aad = None
    # Generate a secure key
    key = AESGCM.generate_key(bit_length=128)
    # Create a new AESGCM instance with our secure key
    aesgcm = AESGCM(key)
    # Note: nonce values _must_ be regenerated every time they are used.
    nonce = os.urandom(12)
    # Encrypt our plaintext
    cipher_text = aesgcm.encrypt(nonce, plain_text, aad)
    # Decrypt the plain text using the nonce and cipher_text
    aesgcm.decrypt(nonce, cipher_text, aad)
    ```

    For more information on the cryptography module see:
    - https://cryptography.io/en/latest/
  metadata:
    cwe: CWE-327
    owasp: A3:2017-Sensitive Data Exposure
    category: security
    shortDescription: Use of a broken or risky cryptographic algorithm
    primary_identifier: bandit.B304-8
    secondary_identifiers:
    - name: Bandit Test ID B304
      type: bandit_test_id
      value: B304
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.bandit.B304-8
    shortlink: https://sg.run/3AkW
    semgrep.dev:
      rule:
        rule_id: x8UWB8
        version_id: LjTq2bP
        url: https://semgrep.dev/playground/r/LjTq2bP/gitlab.bandit.B304-8
        origin: community
  patterns:
  - pattern-either:
    - pattern: Cryptodome.Cipher.DES.new(...)
    - pattern: Crypto.Cipher.DES.new(...)
  severity: WARNING
- id: gitlab.bandit.B304-9
  languages:
  - python
  message: |
    The application was found using the `xor` algorithm, which can be trivially decoded.
    Newer algorithms apply message integrity to validate ciphertext has not been tampered
    with. Consider using `ChaCha20Poly1305` instead as it is easier and faster than the
    alternatives such as `AES-256-GCM`.

    For older applications that don't have support for `ChaCha20Poly1305`,
    `AES-256-GCM` is recommended, however it has many drawbacks:
    - Slower than `ChaCha20Poly1305`.
    - Catastrophic failure if nonce values are reused.

    Note that the `Crypto` and `Cryptodome` Python packages are no longer recommended for
    new applications, instead consider using the [cryptography](https://cryptography.io/) package.

    Example using `ChaCha20Poly1305`:
    ```
    import os
    # Import ChaCha20Poly1305 from cryptography
    from cryptography.hazmat.primitives.ciphers.aead import ChaCha20Poly1305
    # Our plaintext to encrypt
    plain_text = b"Secret text to encrypt"
    # We do not require authenticated but unencrypted data, so set to None
    aad = None
    # Generate a secure key
    key = ChaCha20Poly1305.generate_key()
    # Create a new ChaCha20Poly1305 instance with our secure key
    chacha = ChaCha20Poly1305(key)
    # Note: nonce values _must_ be regenerated every time they are used.
    nonce = os.urandom(12)
    # Encrypt our plaintext
    cipher_text = chacha.encrypt(nonce, plain_text, aad)
    # Decrypt the plain text using the nonce and cipher_text
    chacha.decrypt(nonce, cipher_text, aad)
    ```

    Example using `AESGCM`:
    ```
    import os
    # Import AESGCM from cryptography
    from cryptography.hazmat.primitives.ciphers.aead import AESGCM
    # Our plaintext to encrypt
    plain_text = b"Secret text to encrypt"
    # We do not require authenticated but unencrypted data, so set to None
    aad = None
    # Generate a secure key
    key = AESGCM.generate_key(bit_length=128)
    # Create a new AESGCM instance with our secure key
    aesgcm = AESGCM(key)
    # Note: nonce values _must_ be regenerated every time they are used.
    nonce = os.urandom(12)
    # Encrypt our plaintext
    cipher_text = aesgcm.encrypt(nonce, plain_text, aad)
    # Decrypt the plain text using the nonce and cipher_text
    aesgcm.decrypt(nonce, cipher_text, aad)
    ```

    For more information on the cryptography module see:
    - https://cryptography.io/en/latest/
  metadata:
    cwe: CWE-327
    owasp: A3:2017-Sensitive Data Exposure
    category: security
    shortDescription: Use of a broken or risky cryptographic algorithm
    primary_identifier: bandit.B304-9
    secondary_identifiers:
    - name: Bandit Test ID B304
      type: bandit_test_id
      value: B304
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.bandit.B304-9
    shortlink: https://sg.run/4yw9
    semgrep.dev:
      rule:
        rule_id: OrUG0Q
        version_id: QkTW7rZ
        url: https://semgrep.dev/playground/r/QkTW7rZ/gitlab.bandit.B304-9
        origin: community
  patterns:
  - pattern-either:
    - pattern: Cryptodome.Cipher.XOR.new(...)
    - pattern: Crypto.Cipher.XOR.new(...)
  severity: WARNING
- id: gitlab.bandit.B305
  languages:
  - python
  message: |
    Cryptographic algorithms provide many different modes of operation, only some of which provide
    message integrity. Without message integrity it could be possible for an adversary to attempt
    to tamper with the ciphertext which could lead to compromising the encryption key. Newer
    algorithms
    apply message integrity to validate ciphertext has not been tampered with.

    Instead of using an algorithm that requires configuring a cipher mode, an algorithm
    that has built-in message integrity should be used. Consider using `ChaCha20Poly1305` or
    `AES-256-GCM` instead.

    For older applications that don't have support for `ChaCha20Poly1305`, `AES-256-GCM` is
    recommended, however it has many drawbacks:
      - Slower than `ChaCha20Poly1305`.
      - Catastrophic failure if nonce values are reused.

    Example using `ChaCha20Poly1305`:
    ```
    import os
    # Import ChaCha20Poly1305 from cryptography
    from cryptography.hazmat.primitives.ciphers.aead import ChaCha20Poly1305
    # Our plaintext to encrypt
    plain_text = b"Secret text to encrypt"
    # We do not require authenticated but unencrypted data, so set to None
    aad = None
    # Generate a secure key
    key = ChaCha20Poly1305.generate_key()
    # Create a new ChaCha20Poly1305 instance with our secure key
    chacha = ChaCha20Poly1305(key)
    # Note: nonce values _must_ be regenerated every time they are used.
    nonce = os.urandom(12)
    # Encrypt our plaintext
    cipher_text = chacha.encrypt(nonce, plain_text, aad)
    # Decrypt the plain text using the nonce and cipher_text
    chacha.decrypt(nonce, cipher_text, aad)
    ```

    Example using `AESGCM`:
    ```
    import os
    # Import AESGCM from cryptography
    from cryptography.hazmat.primitives.ciphers.aead import AESGCM
    # Our plaintext to encrypt
    plain_text = b"Secret text to encrypt"
    # We do not require authenticated but unencrypted data, so set to None
    aad = None
    # Generate a secure key
    key = AESGCM.generate_key(bit_length=128)
    # Create a new AESGCM instance with our secure key
    aesgcm = AESGCM(key)
    # Note: nonce values _must_ be regenerated every time they are used.
    nonce = os.urandom(12)
    # Encrypt our plaintext
    cipher_text = aesgcm.encrypt(nonce, plain_text, aad)
    # Decrypt the plain text using the nonce and cipher_text
    aesgcm.decrypt(nonce, cipher_text, aad)
    ```

    For more information on the cryptography module see:
    - https://cryptography.io/en/latest/
  metadata:
    cwe: CWE-327
    owasp: A3:2017-Sensitive Data Exposure
    category: security
    shortDescription: Use of a broken or risky cryptographic algorithm
    primary_identifier: bandit.B305
    secondary_identifiers:
    - name: Bandit Test ID B305
      type: bandit_test_id
      value: B305
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.bandit.B305
    shortlink: https://sg.run/5JJA
    semgrep.dev:
      rule:
        rule_id: OrUDDX
        version_id: ZRTQ7P5
        url: https://semgrep.dev/playground/r/ZRTQ7P5/gitlab.bandit.B305
        origin: community
  pattern: cryptography.hazmat.primitives.ciphers.modes.ECB(...)
  severity: WARNING
- id: gitlab.bandit.B306
  languages:
  - python
  message: |
    The application was found creating temporary files with the insecure `mktemp` method.
    Depending on how the application uses this temporary file, an attacker may be able to create
    symlinks that point to other files prior to the application creating or writing
    to the target file, leading to unintended files being created or overwritten.

    To remediate this issue consider using `tempfile.TemporaryFile` instead.

    Example using `tempfile.TemporaryFile` to write a file:
    ```
    import tempfile

    # Open a new temporary file using a context manager
    with tempfile.TemporaryFile() as fp:
        # Write some data to the temporary file
        fp.write(b'Some data')
        # Seek back to beginning of file
        fp.seek(0)
        # Read it
        data = fp.read()
    # File is automatically closed/removed once we exit the with context
    ```

    For more information on alternative tempfile functions see:
    - https://docs.python.org/3/library/tempfile.html
  metadata:
    cwe: CWE-377
    category: security
    owasp: A3:2017-Sensitive Data Exposure
    shortDescription: Insecure temporary file
    primary_identifier: bandit.B306
    secondary_identifiers:
    - name: Bandit Test ID B306
      type: bandit_test_id
      value: B306
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.bandit.B306
    shortlink: https://sg.run/Pp6v
    semgrep.dev:
      rule:
        rule_id: eqUvdb
        version_id: nWTx8Nk
        url: https://semgrep.dev/playground/r/nWTx8Nk/gitlab.bandit.B306
        origin: community
  pattern: tempfile.mktemp(...)
  severity: ERROR
- id: gitlab.bandit.B307
  languages:
  - python
  message: |
    The application was found calling the `eval` function with a non-literal variable. If the
    variable comes from user-supplied input, an adversary could compromise the entire system by
    executing arbitrary python code.

    To remediate this issue, remove all calls to `eval` and consider alternative methods for
    executing
    the necessary business logic. There is almost no safe method of calling `eval` with
    user-supplied input.

    If the application only needs to convert strings into objects, consider using `json.loads`.
    In some cases `ast.literal_eval` is recommended, but this should be avoided as it can still
    suffer from other issues such as the ability for malicious code to crash the python
    interpreter or application.

    Example using `json.loads`` to load in arbitrary data to create data structures:
    ```
    # User supplied data as a blob of JSON
    user_supplied_data = """{"user": "test", "metadata": [1,2,3]}"""
    # Load the JSON
    user_object = json.loads(user_supplied_data)
    # Manually add protected properties _after_ loading, never before
    user_object["is_admin"] = False
    # Work with the object
    ```
  metadata:
    cwe: CWE-95
    owasp: A1:2017-Injection
    category: security
    shortDescription: Improper neutralization of directives in dynamically evaluated
      code ('Eval Injection')
    primary_identifier: bandit.B307
    secondary_identifiers:
    - name: Bandit Test ID B307
      type: bandit_test_id
      value: B307
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.bandit.B307
    shortlink: https://sg.run/J3WP
    semgrep.dev:
      rule:
        rule_id: v8U5kd
        version_id: WrTWlpn
        url: https://semgrep.dev/playground/r/WrTWlpn/gitlab.bandit.B307
        origin: community
  patterns:
  - pattern: eval(...)
  severity: WARNING
- id: gitlab.bandit.B311
  languages:
  - python
  message: |
    Depending on the context, generating weak random numbers may expose cryptographic functions,
    which rely on these numbers, to be exploitable. When generating numbers for sensitive values
    such as tokens, nonces, and cryptographic keys, it is recommended that the `secrets` module
    be used instead.

    Example using the secrets module:
    ```
    import secrets

    # Generate a secure random 64 byte array
    random_bytes = secrets.token_bytes(64)
    print(random_bytes)

    # Generate a secure random 64 byte array as a hex string
    random_bytes_hex = secrets.token_hex(64)

    # Generate a secure random 64 byte array base64 encoded for use in URLs
    random_string = secrets.token_urlsafe(64)
    ```

    For more information on the `secrets` module see:
    - https://docs.python.org/3/library/secrets.html
  metadata:
    cwe: CWE-330
    owasp: A3:2017-Sensitive Data Exposure
    category: security
    shortDescription: Use of insufficiently random values
    primary_identifier: bandit.B311
    secondary_identifiers:
    - name: Bandit Test ID B311
      type: bandit_test_id
      value: B311
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.bandit.B311
    shortlink: https://sg.run/B4PR
    semgrep.dev:
      rule:
        rule_id: 7KUe7J
        version_id: yeTRBgy
        url: https://semgrep.dev/playground/r/yeTRBgy/gitlab.bandit.B311
        origin: community
  pattern-either:
  - pattern: random.random(...)
  - pattern: random.randrange(...)
  - pattern: random.randint(...)
  - pattern: random.choice(...)
  - pattern: random.uniform(...)
  - pattern: random.triangular(...)
  severity: INFO
- id: gitlab.bandit.B313
  languages:
  - python
  message: |
    The application was found using the `xml.etree` package for processing XML.
    Pythons default xml processors suffer from various XML parsing vulnerabilities
    and care must be taken when handling XML data. Additionally, depending on the
    version of Python, more critical vulnerabilities such as eXternal XML Entity
    injection maybe exploitable.

    The `etree` package suffers from the following security risks as of Python 3.7.1:
    * Billion laughs / exponential entity expansion - May allow an adversary to cause
      a Denial of Service (DoS) against the application parsing arbitrary XML.
    * Quadratic blowup entity expansion - Similar to above, but requires a larger input
      to cause the Denial of Service.

    To remediate the above issues, consider using the
    [defusedxml](https://pypi.org/project/defusedxml/)
    library when processing untrusted XML.

    Example parsing an XML document using defusedxml:
    ```
    from defusedxml.ElementTree import parse

    # Parse the inventory.xml file
    et = parse('inventory.xml')
    # Get the root element
    root = et.getroot()
    # Work with the root element
    # ...
    ```

    For more information on the various XML parsers and their vulnerabilities please see:
    - https://docs.python.org/3/library/xml.html#xml-vulnerabilities

    For more information on XML security see OWASP's guide:
    - https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html#python
  metadata:
    cwe: CWE-611
    owasp: A4:2017-XML External Entities (XXE)
    category: security
    shortDescription: Improper restriction of XML external entity reference
    primary_identifier: bandit.B313
    secondary_identifiers:
    - name: Bandit Test ID B313
      type: bandit_test_id
      value: B313
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.bandit.B313
    shortlink: https://sg.run/31Wr
    semgrep.dev:
      rule:
        rule_id: KxUOo7
        version_id: O9TN34D
        url: https://semgrep.dev/playground/r/O9TN34D/gitlab.bandit.B313
        origin: community
  pattern-either:
  - patterns:
    - pattern: xml.etree.cElementTree.fromstring(...)
    - pattern-not: xml.etree.cElementTree.fromstring("...")
  - pattern: xml.etree.cElementTree.parse(...)
  - pattern: xml.etree.cElementTree.iterparse(...)
  - pattern: xml.etree.cElementTree.XMLParser(...)
  severity: WARNING
- id: gitlab.bandit.B314
  languages:
  - python
  message: |
    The application was found using the `xml.etree` package for processing XML.
    Pythons default xml processors suffer from various XML parsing vulnerabilities
    and care must be taken when handling XML data. Additionally, depending on the
    version of Python, more critical vulnerabilities such as eXternal XML Entity
    injection maybe exploitable.

    The `etree` package suffers from the following security risks as of Python 3.7.1:
    * Billion laughs / exponential entity expansion - May allow an adversary to cause
      a Denial of Service (DoS) against the application parsing arbitrary XML.
    * Quadratic blowup entity expansion - Similar to above, but requires a larger input
      to cause the Denial of Service.

    To remediate the above issues, consider using the
    [defusedxml](https://pypi.org/project/defusedxml/)
    library when processing untrusted XML.

    Example parsing an XML document using defusedxml:
    ```
    from defusedxml.ElementTree import parse

    # Parse the inventory.xml file
    et = parse('inventory.xml')
    # Get the root element
    root = et.getroot()
    # Work with the root element
    # ...
    ```

    For more information on the various XML parsers and their vulnerabilities please see:
    - https://docs.python.org/3/library/xml.html#xml-vulnerabilities

    For more information on XML security see OWASP's guide:
    - https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html#python
  metadata:
    cwe: CWE-611
    owasp: A4:2017-XML External Entities (XXE)
    category: security
    shortDescription: Improper restriction of XML external entity reference
    primary_identifier: bandit.B314
    secondary_identifiers:
    - name: Bandit Test ID B314
      type: bandit_test_id
      value: B314
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.bandit.B314
    shortlink: https://sg.run/4g0l
    semgrep.dev:
      rule:
        rule_id: qNUKOW
        version_id: e1T08Ez
        url: https://semgrep.dev/playground/r/e1T08Ez/gitlab.bandit.B314
        origin: community
  pattern-either:
  - patterns:
    - pattern: xml.etree.ElementTree.fromstring(...)
    - pattern-not: xml.etree.ElementTree.fromstring("...")
  - pattern: xml.etree.ElementTree.parse(...)
  - pattern: xml.etree.ElementTree.iterparse(...)
  - pattern: xml.etree.ElementTree.XMLParser(...)
  severity: WARNING
- id: gitlab.bandit.B315
  languages:
  - python
  message: |
    The application was found using the `xml.sax.expatreader` package for processing XML. Python's
    default XML processors suffer from various XML parsing vulnerabilities
    and care must be taken when handling XML data. Additionally, depending on the
    version of Python, more critical vulnerabilities such as eXternal XML Entity
    injection maybe exploitable.

    The `xml.sax` package suffers from the following security risks as of Python 3.7.1:
    * Billion laughs / exponential entity expansion - May allow an adversary to cause
      a Denial of Service (DoS) against the application parsing arbitrary XML.
    * Quadratic blowup entity expansion - Similar to above, but requires a larger input
      to cause the Denial of Service.

    To remediate the above issues, consider using the
    [defusedxml](https://pypi.org/project/defusedxml/)
    library when processing untrusted XML.

    Example parsing an XML document using defusedxml:
    ```
    from defusedxml.ElementTree import parse

    # Parse the inventory.xml file
    et = parse('inventory.xml')
    # Get the root element
    root = et.getroot()
    # Work with the root element
    # ...
    ```

    For more information on the various XML parsers and their vulnerabilities please see:
    - https://docs.python.org/3/library/xml.html#xml-vulnerabilities

    For more information on XML security see OWASP's guide:
    - https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html#python
  metadata:
    cwe: CWE-611
    owasp: A4:2017-XML External Entities (XXE)
    category: security
    shortDescription: Improper restriction of XML external entity reference
    primary_identifier: bandit.B315
    secondary_identifiers:
    - name: Bandit Test ID B315
      type: bandit_test_id
      value: B315
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.bandit.B315
    shortlink: https://sg.run/5nKA
    semgrep.dev:
      rule:
        rule_id: JDUZkD
        version_id: ZRTQ5Be
        url: https://semgrep.dev/playground/r/ZRTQ5Be/gitlab.bandit.B315
        origin: community
  pattern-either:
  - pattern: xml.dom.expatreader.parse(...)
  - patterns:
    - pattern: xml.dom.expatreader.parseString(...)
    - pattern-not: xml.dom.expatreader.parseString("...")
  - pattern: xml.dom.expatreader.parseString(...)
  - pattern: xml.dom.expatreader.create_parser(...)
  severity: WARNING
- id: gitlab.bandit.B316
  languages:
  - python
  message: |
    The application was found using the `xml.dom.expatbuilder` which calls the `xml.dom.minidom`
    package for processing XML. Python's default XML processors suffer from various XML parsing
    vulnerabilities
    and care must be taken when handling XML data. Additionally, depending on the
    version of Python, more critical vulnerabilities such as eXternal XML Entity
    injection maybe exploitable.

    The `xml.dom.minidom` package suffers from the following security risks as of Python 3.7.1:
    * Billion laughs / exponential entity expansion - May allow an adversary to cause
      a Denial of Service (DoS) against the application parsing arbitrary XML.
    * Quadratic blowup entity expansion - Similar to above, but requires a larger input
      to cause the Denial of Service.

    To remediate the above issues, consider using the
    [defusedxml](https://pypi.org/project/defusedxml/)
    library when processing untrusted XML.

    Example parsing an XML document using defusedxml:
    ```
    from defusedxml.ElementTree import parse

    # Parse the inventory.xml file
    et = parse('inventory.xml')
    # Get the root element
    root = et.getroot()
    # Work with the root element
    # ...
    ```

    For more information on the various XML parsers and their vulnerabilities please see:
    - https://docs.python.org/3/library/xml.html#xml-vulnerabilities

    For more information on XML security see OWASP's guide:
    - https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html#python
  metadata:
    cwe: CWE-611
    owasp: A4:2017-XML External Entities (XXE)
    category: security
    shortDescription: Improper restriction of XML external entity reference
    primary_identifier: bandit.B316
    secondary_identifiers:
    - name: Bandit Test ID B316
      type: bandit_test_id
      value: B316
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.bandit.B316
    shortlink: https://sg.run/Jp8w
    semgrep.dev:
      rule:
        rule_id: PeUnzj
        version_id: d6TrjnK
        url: https://semgrep.dev/playground/r/d6TrjnK/gitlab.bandit.B316
        origin: community
  pattern-either:
  - patterns:
    - pattern: xml.dom.expatbuilder.parse(...)
    - pattern-not: xml.dom.expatbuilder.parse("...")
  - pattern: xml.dom.expatbuilder.parseString(...)
  severity: WARNING
- id: gitlab.bandit.B317
  languages:
  - python
  message: |
    The application was found using the `xml.sax` package for processing XML.
    Python's default XML processors suffer from various XML parsing vulnerabilities
    and care must be taken when handling XML data. Additionally, depending on the
    version of Python, more critical vulnerabilities such as eXternal XML Entity
    injection maybe exploitable.

    The `xml.sax` package suffers from the following security risks as of Python 3.7.1:
    * Billion laughs / exponential entity expansion - May allow an adversary to cause
      a Denial of Service (DoS) against the application parsing arbitrary XML.
    * Quadratic blowup entity expansion - Similar to above, but requires a larger input
      to cause the Denial of Service.

    To remediate the above issues, consider using the
    [defusedxml](https://pypi.org/project/defusedxml/)
    library when processing untrusted XML.

    Example parsing an XML document using defusedxml:
    ```
    from defusedxml.ElementTree import parse

    # Parse the inventory.xml file
    et = parse('inventory.xml')
    # Get the root element
    root = et.getroot()
    # Work with the root element
    # ...
    ```

    For more information on the various XML parsers and their vulnerabilities please see:
    - https://docs.python.org/3/library/xml.html#xml-vulnerabilities

    For more information on XML security see OWASP's guide:
    - https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html#python
  metadata:
    cwe: CWE-611
    owasp: A4:2017-XML External Entities (XXE)
    category: security
    shortDescription: Improper restriction of XML external entity reference
    primary_identifier: bandit.B317
    secondary_identifiers:
    - name: Bandit Test ID B317
      type: bandit_test_id
      value: B317
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.bandit.B317
    shortlink: https://sg.run/RPPO
    semgrep.dev:
      rule:
        rule_id: v8Ujj8
        version_id: 7ZTgQ5n
        url: https://semgrep.dev/playground/r/7ZTgQ5n/gitlab.bandit.B317
        origin: community
  pattern-either:
  - pattern: xml.sax.parse(...)
  - patterns:
    - pattern: xml.sax.parseString(...)
    - pattern-not: xml.sax.parseString("...")
  - pattern: xml.sax.make_parser(...)
  severity: WARNING
- id: gitlab.bandit.B318
  languages:
  - python
  message: |
    The application was found using the `xml.dom.minidom` package for processing XML. Python's
    default XML processors suffer from various XML parsing vulnerabilities
    and care must be taken when handling XML data. Additionally, depending on the
    version of Python, more critical vulnerabilities such as eXternal XML Entity
    injection maybe exploitable.

    The `xml.dom.minidom` package suffers from the following security risks as of Python 3.7.1:
    * Billion laughs / exponential entity expansion - May allow an adversary to cause
      a Denial of Service (DoS) against the application parsing arbitrary XML.
    * Quadratic blowup entity expansion - Similar to above, but requires a larger input
      to cause the Denial of Service.

    To remediate the above issues, consider using the
    [defusedxml](https://pypi.org/project/defusedxml/)
    library when processing untrusted XML.

    Example parsing an XML document using defusedxml:
    ```
    from defusedxml.ElementTree import parse

    # Parse the inventory.xml file
    et = parse('inventory.xml')
    # Get the root element
    root = et.getroot()
    # Work with the root element
    # ...
    ```

    For more information on the various XML parsers and their vulnerabilities please see:
    - https://docs.python.org/3/library/xml.html#xml-vulnerabilities

    For more information on XML security see OWASP's guide:
    - https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html#python
  metadata:
    cwe: CWE-611
    owasp: A4:2017-XML External Entities (XXE)
    category: security
    shortDescription: Improper restriction of XML external entity reference
    primary_identifier: bandit.B318
    secondary_identifiers:
    - name: Bandit Test ID B318
      type: bandit_test_id
      value: B318
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.bandit.B318
    shortlink: https://sg.run/01Av
    semgrep.dev:
      rule:
        rule_id: WAU68J
        version_id: nWTxzdp
        url: https://semgrep.dev/playground/r/nWTxzdp/gitlab.bandit.B318
        origin: community
  pattern-either:
  - patterns:
    - pattern: xml.dom.minidom.parseString(...)
    - pattern-not: xml.dom.minidom.parseString("...")
  - pattern: xml.dom.minidom.parse(...)
  severity: WARNING
- id: gitlab.bandit.B319
  languages:
  - python
  message: |
    The application was found using the `xml.dom.pulldom` package for processing XML. Python's
    default XML processors suffer from various XML parsing vulnerabilities
    and care must be taken when handling XML data. Additionally, depending on the
    version of Python, more critical vulnerabilities such as eXternal XML Entity
    injection maybe exploitable.

    The `xml.dom.pulldom` package suffers from the following security risks as of Python 3.7.1:
    * Billion laughs / exponential entity expansion - May allow an adversary to cause
      a Denial of Service (DoS) against the application parsing arbitrary XML.
    * Quadratic blowup entity expansion - Similar to above, but requires a larger input
      to cause the Denial of Service.

    To remediate the above issues, consider using the
    [defusedxml](https://pypi.org/project/defusedxml/)
    library when processing untrusted XML.

    Example parsing an XML document using defusedxml:
    ```
    from defusedxml.ElementTree import parse

    # Parse the inventory.xml file
    et = parse('inventory.xml')
    # Get the root element
    root = et.getroot()
    # Work with the root element
    # ...
    ```

    For more information on the various XML parsers and their vulnerabilities please see:
    - https://docs.python.org/3/library/xml.html#xml-vulnerabilities

    For more information on XML security see OWASP's guide:
    - https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html#python
  metadata:
    cwe: CWE-611
    owasp: A4:2017-XML External Entities (XXE)
    category: security
    shortDescription: Improper Restriction of XML External Entity Reference
    primary_identifier: bandit.B319
    secondary_identifiers:
    - name: Bandit Test ID B319
      type: bandit_test_id
      value: B319
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.bandit.B319
    shortlink: https://sg.run/K2L7
    semgrep.dev:
      rule:
        rule_id: 0oU6o9
        version_id: ExTj2dN
        url: https://semgrep.dev/playground/r/ExTj2dN/gitlab.bandit.B319
        origin: community
  pattern-either:
  - patterns:
    - pattern: xml.dom.pulldom.parseString(...)
    - pattern-not: xml.dom.pulldom.parseString("...")
  - pattern: xml.dom.pulldom.parse(...)
  severity: WARNING
- id: gitlab.bandit.B320
  languages:
  - python
  message: |
    The application was found using the `lxml.etree` package for processing XML.
    Python's default XML processors suffer from various XML parsing vulnerabilities
    and care must be taken when handling XML data. Additionally, depending on the
    version of Python, more critical vulnerabilities such as eXternal XML Entity
    injection maybe exploitable.

    The `etree` package suffers from the following security risks as of Python 3.7.1:
    * Billion laughs / exponential entity expansion - May allow an adversary to cause
      a Denial of Service (DoS) against the application parsing arbitrary XML.
    * Quadratic blowup entity expansion - Similar to above, but requires a larger input
      to cause the Denial of Service.

    To remediate the above issues, consider using the
    [defusedxml](https://pypi.org/project/defusedxml/)
    library when processing untrusted XML.

    Example parsing an XML document using defusedxml:
    ```
    from defusedxml.ElementTree import parse

    # Parse the inventory.xml file
    et = parse('inventory.xml')
    # Get the root element
    root = et.getroot()
    # Work with the root element
    # ...
    ```

    For more information on the various XML parsers and their vulnerabilities please see:
    - https://docs.python.org/3/library/xml.html#xml-vulnerabilities

    For more information on XML security see OWASP's guide:
    - https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html#python
  metadata:
    cwe: CWE-611
    owasp: A4:2017-XML External Entities (XXE)
    category: security
    shortDescription: Improper restriction of XML external entity reference
    primary_identifier: bandit.B320
    secondary_identifiers:
    - name: Bandit Test ID B320
      type: bandit_test_id
      value: B320
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.bandit.B320
    shortlink: https://sg.run/PGLY
    semgrep.dev:
      rule:
        rule_id: lBUNZy
        version_id: vdTYnD4
        url: https://semgrep.dev/playground/r/vdTYnD4/gitlab.bandit.B320
        origin: community
  pattern-either:
  - pattern: lxml.etree.parse(...)
  - patterns:
    - pattern: lxml.etree.fromstring(...)
    - pattern-not: lxml.etree.fromstring("...")
  - pattern: lxml.etree.RestrictedElement(...)
  - pattern: lxml.etree.GlobalParserTLS(...)
  - pattern: lxml.etree.getDefaultParser(...)
  - pattern: lxml.etree.check_docinfo(...)
  severity: WARNING
- id: gitlab.bandit.B323
  languages:
  - python
  message: |
    The application was found creating a SSL context using the `_create_unverified_context`.
    This effectively disables the validation of server certificates.

    This allows for an adversary who is in between the application and the target host to intercept
    potentially sensitive information or transmit malicious data.

    To remediate this issue remove the call to `_create_unverified_context` and either create a
    default
    context using `ssl.create_default_context` or create a context with TLS 1.3.

    Example creating a TLS 1.3 client socket connection by using a newer version of Python
    (3.11.4) and
    the SSL module:
    ```
    import ssl
    import socket

    # Create our initial socket
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
        # Connect the socket
        sock.connect(('www.example.org', 443))

        # Create a new SSLContext with protocol set to ssl.PROTOCOL_TLS_CLIENT
        # This will auto-select the highest grade TLS protocol version (1.3)
        context = ssl.SSLContext(protocol=ssl.PROTOCOL_TLS_CLIENT)
        # Load our a certificates for server certificate authentication
        context.load_verify_locations('cert.pem')
        # Create our TLS socket, and validate the server hostname matches
        with context.wrap_socket(sock, server_hostname="www.example.org") as tls_sock:
            # Send some bytes over the socket (HTTP request in this case)\
            data = bytes('GET / HTTP/1.1\r\nHost: example.org\r\n\r\n', 'utf-8')
            sent_bytes = tls_sock.send(data)
            # Validate number of sent bytes
            # ...
            # Read the response
            resp = tls_sock.recv()
            # Work with the response
            # ...
    ```

    Unverified SSL context detected. This will permit insecure connections without `verifyingSSL`
    certificates. Use `ssl.create_default_context()` instead.
  metadata:
    cwe: CWE-295
    owasp: A3:2017-Sensitive Data Exposure
    category: security
    shortDescription: Improper certificate validation
    primary_identifier: bandit.B323
    secondary_identifiers:
    - name: Bandit Test ID B323
      type: bandit_test_id
      value: B323
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.bandit.B323
    shortlink: https://sg.run/BLLW
    semgrep.dev:
      rule:
        rule_id: ZqUgg2
        version_id: vdTYpQX
        url: https://semgrep.dev/playground/r/vdTYpQX/gitlab.bandit.B323
        origin: community
  pattern: ssl._create_unverified_context(...)
  severity: ERROR
- id: gitlab.bandit.B324
  languages:
  - python
  message: |
    The application was found using an insecure or risky digest or signature algorithm. MD2, MD4,
    MD5  and SHA1 hash algorithms have been found to be vulnerable to producing collisions.

    This means
    that two different values, when hashed, can lead to the same hash value. If the application is
    trying
    to use these hash methods for storing passwords, then it is recommended to switch to a
    password hashing
    algorithm such as Argon2id or PBKDF2.
    It is strongly recommended that a standard digest algorithm be chosen instead as implementing
    a custom algorithm is prone to errors.

    Example using `hashlib.sha384()` to create a SHA384 hash:
    ```
    import hashlib
    # Create a SHA384 digest
    digest = hashlib.sha384()
    # Update the digest with some initial data
    digest.update(b"some data to hash")
    # Add more data to the digest
    digest.update(b"some more data")
    # Finalize the digest as bytes
    digest.digest()
    ```
  metadata:
    cwe: CWE-327
    owasp: A3:2017-Sensitive Data Exposure
    category: security
    shortDescription: Use of a broken or risky cryptographic algorithm
    primary_identifier: bandit.B324
    secondary_identifiers:
    - name: Bandit Test ID B324
      type: bandit_test_id
      value: B324
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.bandit.B324
    shortlink: https://sg.run/Wg1E
    semgrep.dev:
      rule:
        rule_id: 8GUE2O
        version_id: 0bTL7b0
        url: https://semgrep.dev/playground/r/0bTL7b0/gitlab.bandit.B324
        origin: community
  patterns:
  - pattern-either:
    - pattern: hashlib.new("=~/[M|m][D|d][4|5]/", ...)
    - pattern: hashlib.new(..., name="=~/[M|m][D|d][4|5]/", ...)
    - pattern: hashlib.new('sha1')
    - pattern: hashlib.new(..., name='SHA1')
    - pattern: hashlib.new('sha', string='test')
    - pattern: hashlib.new(name='SHA', string='test')
  severity: WARNING
- id: gitlab.bandit.B401
  languages:
  - python
  message: |
    The application was found using a telnet library. As telnet does not provide encryption, it is
    strongly recommended that communications use a more secure transport such as
    SSH.

    The [paramiko](https://www.paramiko.org/) library can be used to initiate SSH connections.

    Example using `paramiko` SSH client:
    ```
    import paramiko
    import scp

    # Create an SSH client
    with paramiko.SSHClient() as ssh:
        # Load the system host keys so we can confirm the
        # host we are connecting to is legitimate
        ssh.load_system_host_keys('/home/appuser/.ssh/known_hosts')

        # Connect to the remote host using our SSH private key
        ssh.connect(hostname='example.org',
                    port=22,
                    username='appuser',
                    key_filename='/home/appuser/.ssh/private_key')
        # Work with the connection
    ```

    For more information on the paramiko module see:
    - https://www.paramiko.org/
  metadata:
    cwe: CWE-319
    category: security
    owasp: A3:2017-Sensitive Data Exposure
    shortDescription: Cleartext transmission of sensitive information
    primary_identifier: bandit.B401
    secondary_identifiers:
    - name: Bandit Test ID B401
      type: bandit_test_id
      value: B401
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.bandit.B401
    shortlink: https://sg.run/0nrw
    semgrep.dev:
      rule:
        rule_id: gxUW4o
        version_id: d6TrQg8
        url: https://semgrep.dev/playground/r/d6TrQg8/gitlab.bandit.B401
        origin: community
  patterns:
  - pattern: import telnetlib
  severity: ERROR
- id: gitlab.bandit.B413
  languages:
  - python
  message: |
    The application was detected importing `pycrypto`. This package has been deprecated as it
    contains
    security vulnerabilities.

    To remediate this issue, consider using the [cryptography](https://cryptography.io/)
    package instead.
  metadata:
    cwe: CWE-1104
    owasp: A9:2017-Using Components with Known Vulnerabilities
    category: security
    shortDescription: Use of unmaintained third party components
    primary_identifier: bandit.B413
    secondary_identifiers:
    - name: Bandit Test ID B413
      type: bandit_test_id
      value: B413
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.bandit.B413
    shortlink: https://sg.run/okGX
    semgrep.dev:
      rule:
        rule_id: 5rU45b
        version_id: K3Tvzq9
        url: https://semgrep.dev/playground/r/K3Tvzq9/gitlab.bandit.B413
        origin: community
  pattern-either:
  - pattern: import pycryto
  - pattern: import Crypto.Cipher
  - pattern: import Crypto.Hash
  - pattern: import Crypto.IO
  - pattern: import Crypto.Protocol
  - pattern: import Crypto.PublicKey
  - pattern: import Crypto.Random
  - pattern: import Crypto.Signature
  - pattern: import Crypto.Util
  severity: ERROR
- id: gitlab.bandit.B501
  languages:
  - python
  message: |
    The application was found using the `requests` module without configuring a timeout value for
    connections. The `verify=False` argument has been set, which effectively disables the
    validation
    of server certificates.

    This allows for an adversary who is in between the application and the target host to intercept
    potentially sensitive information or transmit malicious data.

    To remediate this issue either remove the `verify=False` argument, or set `verify=True`to each
    `requests` call.

    Example verifying server certificates for an HTTP GET request:
    ```
    # Issue a GET request to https://example.com with a timeout of 10 seconds and verify the
    # server certificate explicitly.
    response = requests.get('https://example.com', timeout=10, verify=True)
    # Work with the response object
    # ...
    ```

    For more information on using the requests module see:
    - https://requests.readthedocs.io/en/latest/api/
  metadata:
    cwe: CWE-295
    owasp: A3:2017-Sensitive Data Exposure
    category: security
    shortDescription: Improper certificate validation
    primary_identifier: bandit.B501
    secondary_identifiers:
    - name: Bandit Test ID B501
      type: bandit_test_id
      value: B501
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.bandit.B501
    shortlink: https://sg.run/zk6n
    semgrep.dev:
      rule:
        rule_id: GdU0wd
        version_id: xyTKArZ
        url: https://semgrep.dev/playground/r/xyTKArZ/gitlab.bandit.B501
        origin: community
  patterns:
  - pattern-either:
    - pattern: requests.put(..., verify=False, ...)
    - pattern: requests.patch(..., verify=False, ...)
    - pattern: requests.delete(..., verify=False, ...)
    - pattern: requests.head(..., verify=False, ...)
    - pattern: requests.options(..., verify=False, ...)
    - pattern: requests.request(..., verify=False, ...)
    - pattern: requests.get(..., verify=False, ...)
    - pattern: requests.post(..., verify=False, ...)
  severity: ERROR
- id: gitlab.bandit.B505-1
  languages:
  - python
  message: |
    The application is generating an RSA key that is less than the recommended 2048 bits.
    The National Institute of Standards and Technology (NIST) deprecated signing Digital
    Certificates that contained RSA Public Keys of 1024 bits in December 2010. While
    1024-bit RSA keys have not been factored yet, advances in compute may make it possible
    in the near future.

    Consider upgrading to the newer asymmetric algorithm such as `X25519` which handles
    the complexities of generating key pairs and choosing correct key sizes for you:
    ```
    from cryptography.hazmat.primitives.asymmetric.x25519 import X25519PrivateKey

    # Generate a private key for use in the exchange.
    private_key = X25519PrivateKey.generate()
    # Work with private key/exchange with a peer's
    # public key to created a shared and derived key
    # ...
    ```

    Otherwise use a key size greater than 2048 when generating RSA keys:
    ```
    from cryptography.hazmat.primitives.asymmetric import rsa
    # Generate a private key of 4096 bits
    private_key = rsa.generate_private_key(
        # do not change the exponent value from 65537
        public_exponent=65537,
        key_size=4096,
    )
    # Work with the private key to sign/encrypt data
    # ...
    ```

    For more information on using the cryptography module see:
    - https://cryptography.io/en/latest
  metadata:
    cwe: CWE-326
    owasp: A3:2017-Sensitive Data Exposure
    category: security
    shortDescription: Inadequate encryption strength
    primary_identifier: bandit.B505-1
    secondary_identifiers:
    - name: Bandit Test ID B505
      type: bandit_test_id
      value: B505
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.bandit.B505-1
    shortlink: https://sg.run/XL9j
    semgrep.dev:
      rule:
        rule_id: BYUBYZ
        version_id: 3ZTkpAQ
        url: https://semgrep.dev/playground/r/3ZTkpAQ/gitlab.bandit.B505-1
        origin: community
  patterns:
  - pattern-either:
    - pattern: 'cryptography.hazmat.primitives.asymmetric.rsa.generate_private_key(...,key_size=$SIZE,...)

        '
    - pattern: 'cryptography.hazmat.primitives.asymmetric.rsa.generate_private_key($EXP,
        $SIZE,...)

        '
    - pattern: 'cryptography.hazmat.primitives.asymmetric.rsa.generate_private_key($SIZE,
        ...)

        '
    - pattern: 'cryptography.hazmat.primitives.asymmetric.dsa.generate_private_key(...,key_size=$SIZE,...)

        '
    - pattern: 'cryptography.hazmat.primitives.asymmetric.dsa.generate_private_key($EXP,
        $SIZE, ...)

        '
    - pattern: cryptography.hazmat.primitives.asymmetric.dsa.generate_private_key($SIZE,...)
    - pattern: Crypto.PublicKey.RSA.generate($SIZE, ...)
    - pattern: Crypto.PublicKey.DSA.generate($SIZE, ...)
    - pattern: Cryptodome.PublicKey.DSA.generate($SIZE, ...)
    - pattern: Cryptodome.PublicKey.RSA.generate($SIZE, ...)
    - pattern: Crypto.PublicKey.DSA.generate(bits=$SIZE, ...)
    - pattern: Cryptodome.PublicKey.DSA.generate(bits=$SIZE, ...)
    - pattern: pycrypto_rsa.generate(bits=$SIZE, ...)
    - pattern: pycrypto_dsa.generate(bits=$SIZE, ...)
    - pattern: pycryptodomex_rsa.generate(bits=$SIZE, ...)
    - pattern: pycryptodomex_rsa.generate($SIZE, ...)
    - pattern: pycryptodomex_dsa.generate(bits=$SIZE, ...)
    - pattern: pycryptodomex_dsa.generate($SIZE, ...)
  - metavariable-comparison:
      comparison: "$SIZE < 2048"
      metavariable: "$SIZE"
  severity: ERROR
- id: gitlab.bandit.B505-2
  languages:
  - python
  message: |
    The application was found using an insufficient curve size for the Elliptical
    Cryptography (EC) asymmetric algorithm. NIST recommends using a key size of
    224 or greater.

    To remediate this issue, replace the current key size with `ec.SECP384R1`,

    Example using `ec.SECP384R1`:
    ```
    from cryptography.hazmat.primitives.asymmetric import ec
    # Generate an EC private key using SECP384R1
    private_key = ec.generate_private_key(
        ec.SECP384R1()
    )
    # Work with/sign data using the key
    # ...
    ```

    For more information on the cryptography module's EC section see:
    - https://cryptography.io/en/latest/hazmat/primitives/asymmetric/ec/
  metadata:
    cwe: CWE-326
    owasp: A3:2017-Sensitive Data Exposure
    category: security
    shortDescription: Inadequate encryption strength
    primary_identifier: bandit.B505-2
    secondary_identifiers:
    - name: Bandit Test ID B505
      type: bandit_test_id
      value: B505
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.bandit.B505-2
    shortlink: https://sg.run/jNgP
    semgrep.dev:
      rule:
        rule_id: DbUW8j
        version_id: 44TRAP6
        url: https://semgrep.dev/playground/r/44TRAP6/gitlab.bandit.B505-2
        origin: community
  patterns:
  - pattern-inside: cryptography.hazmat.primitives.asymmetric.ec.generate_private_key(...)
  - pattern: cryptography.hazmat.primitives.asymmetric.ec.$SIZE
  - metavariable-pattern:
      metavariable: "$SIZE"
      pattern-either:
      - pattern: SECP192R1
      - pattern: SECT163K1
      - pattern: SECT163R2
  - focus-metavariable: "$SIZE"
  severity: ERROR
- id: gitlab.bandit.B506
  languages:
  - python
  message: |
    The application was found using an unsafe version of `yaml` load which is vulnerable to
    deserialization attacks. Deserialization attacks exploit the process of reading serialized
    data and turning it back
    into an object. By constructing malicious objects and serializing them, an adversary may
    attempt to:

    - Inject code that is executed upon object construction, which occurs during the
    deserialization process.
    - Exploit mass assignment by including fields that are not normally a part of the serialized
    data but are read in during deserialization.

    To remediate this issue, use `safe_load()` or call `yaml.load()` with the `Loader` argument
    set to
    `yaml.SafeLoader`.

    Example loading YAML using `safe_load`:
    ```
    import yaml

    # Use safe_load to load data into an intermediary object
    intermediary_object = yaml.safe_load("""user:
        name: 'test user'"""
    )
    # Create our real object, copying over only the necessary fields
    user_object = {'user': {
            # Assign the deserialized data from intermediary object
            'name': intermediary_object['user']['name'],
            # Add in protected data in object definition (or set it from a class constructor)
            'is_admin': False,
        }
    }
    # Work with user_object
    # ...
    ```

    For more details on deserialization attacks in general, see OWASP's guide:
    - https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html
  metadata:
    cwe: CWE-502
    owasp: A8:2017-Insecure Deserialization
    category: security
    shortDescription: Deserialization of untrusted data
    primary_identifier: bandit.B506
    secondary_identifiers:
    - name: Bandit Test ID B506
      type: bandit_test_id
      value: B506
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.bandit.B506
    shortlink: https://sg.run/1nb1
    semgrep.dev:
      rule:
        rule_id: WAUZx1
        version_id: GxTvxEN
        url: https://semgrep.dev/playground/r/GxTvxEN/gitlab.bandit.B506
        origin: community
  patterns:
  - pattern-inside: |
      import yaml
      ...
  - pattern-not-inside: |
      from ruamel.yaml import YAML
      ...
  - pattern-either:
    - pattern: yaml.unsafe_load(...)
    - pattern: yaml.$LD(..., Loader=yaml.$LOADER, ...)
    - pattern: yaml.$LD($DATA)
  - metavariable-regex:
      metavariable: "$LOADER"
      regex: "(Loader|UnsafeLoader|CLoader|FullLoader)"
  - metavariable-regex:
      metavariable: "$LD"
      regex: "(load|load_all)"
  severity: ERROR
- id: gitlab.bandit.B507
  languages:
  - python
  message: |
    The application was found to ignore host keys. Host keys are important as
    they provide assurance that the client can prove that the host is trusted.
    By ignoring these host keys, it is impossible for the client to validate the
    connection is to a trusted host.

    To remediate this issue, remove the call to `set_missing_host_key_policy(...)` which
    sets the host key policy. Instead, load key files using either `load_system_host_keys`
    or `load_host_keys` to only allow known good hosts. By not setting a host key policy
    for unknown hosts, `paramiko`'s default policy is to use `RejectPolicy`.

    Example configuration connecting to a known, trusted host, and not allowing connections
    to unknown hosts:
    ```
    import paramiko

    # Create an SSH client
    with paramiko.SSHClient() as ssh:
        # Load the system host keys so we can confirm the
        # host we are connecting to is legitimate
        ssh.load_system_host_keys('/home/appuser/.ssh/known_hosts')

        # Connect to the remote host using our SSH private key
        ssh.connect(hostname='example.org',
                    port=22,
                    username='appuser',
                    key_filename='/home/appuser/.ssh/private_key')
    ```

    For more information on `set_missing_host_key_policy` see:
    - https://docs.paramiko.org/en/stable/api/client.html#paramiko.client.SSHClient.set_missing_host_key_policy
  metadata:
    cwe: CWE-322
    category: security
    owasp: A5:2017-Broken Access Control
    shortDescription: Key exchange without entity authentication
    primary_identifier: bandit.B507
    secondary_identifiers:
    - name: Bandit Test ID B507
      type: bandit_test_id
      value: B507
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.bandit.B507
    shortlink: https://sg.run/WOO4
    semgrep.dev:
      rule:
        rule_id: EwUQQv
        version_id: xyTKn9W
        url: https://semgrep.dev/playground/r/xyTKn9W/gitlab.bandit.B507
        origin: community
  patterns:
  - pattern-inside: |
      $CLIENT = paramiko.client.SSHClient(...)
      ...
      $CLIENT.set_missing_host_key_policy(...)
  - pattern-either:
    - pattern: paramiko.client.AutoAddPolicy
    - pattern: paramiko.client.WarningPolicy
  severity: ERROR
- id: gitlab.bandit.B508
  languages:
  - python
  message: |
    Pysnmp was detected using versions SNMPv1 or SNMPv2. SNPMv1 and SNMPv2 are insecure
    and should no longer be used as they do not offer encryption.

    If possible, query SNMP devices using SNMPv3 instead.

    Example querying a device using SNMPv3 with SHA-AES:
    ```
    from pysnmp.hlapi import *
    # Create the snpm iterator
    iterator = getCmd(
        SnmpEngine(),
        # Configure using SHA AES
        UsmUserData('usr-sha-aes', 'authkey1', 'privkey1',
                    authProtocol=USM_AUTH_HMAC96_SHA,
                    privProtocol=USM_PRIV_CFB128_AES),
        UdpTransportTarget(('demo.snmplabs.com', 161)),
        ContextData(),
        ObjectType(ObjectIdentity('SNMPv2-MIB', 'sysDescr', 0))
    )
    ```

    For more information on using SNMPv3 with `Pysnmp` see:
    - https://pysnmp.readthedocs.io/en/latest/examples/hlapi/v3arch/asyncore/sync/manager/cmdgen/snmp-versions.html#snmpv3-auth-sha-privacy-aes128
  metadata:
    cwe: CWE-319
    category: security
    shortDescription: Cleartext transmission of sensitive information
    primary_identifier: bandit.B508
    secondary_identifiers:
    - name: Bandit Test ID B508
      type: bandit_test_id
      value: B508
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.bandit.B508
    shortlink: https://sg.run/RpEK
    semgrep.dev:
      rule:
        rule_id: ZqUR1w
        version_id: kbTdkrj
        url: https://semgrep.dev/playground/r/kbTdkrj/gitlab.bandit.B508
        origin: community
  pattern-either:
  - pattern: pysnmp.hlapi.CommunityData(..., mpModel=0, ...)
  - pattern: pysnmp.hlapi.CommunityData(..., mpModel=1, ...)
  severity: WARNING
- id: gitlab.bandit.B509
  languages:
  - python
  message: |
    Pysnmp was detected using SNMPv3 without authentication or encryption protections enabled.
    When calling `UsmUserData`, the first argument should be in the format of
    `usr-<authtype>-<encryption type>`.

    To remediate this issue, the `UsmUserData` should be configured with `usr-sha-aes` for
    SHA authentication and AES encryption.

    Example querying a device using SNMPv3 with SHA-AES:
    ```
    from pysnmp.hlapi import *
    # Create the snpm iterator
    iterator = getCmd(
        SnmpEngine(),
        # Configure using SHA AES
        UsmUserData('usr-sha-aes', 'authkey1', 'privkey1',
                    authProtocol=USM_AUTH_HMAC96_SHA,
                    privProtocol=USM_PRIV_CFB128_AES),
        UdpTransportTarget(('demo.snmplabs.com', 161)),
        ContextData(),
        ObjectType(ObjectIdentity('SNMPv2-MIB', 'sysDescr', 0))
    )
    ```

    For more information on using SNMPv3 with `Pysnmp` see:
    - https://pysnmp.readthedocs.io/en/latest/examples/hlapi/v3arch/asyncore/sync/manager/cmdgen/snmp-versions.html#snmpv3-auth-sha-privacy-aes128
  metadata:
    cwe: CWE-319
    category: security
    shortDescription: Cleartext Transmission of Sensitive Information
    primary_identifier: bandit.B509
    secondary_identifiers:
    - name: Bandit Test ID B509
      type: bandit_test_id
      value: B509
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.bandit.B509
    shortlink: https://sg.run/A3O4
    semgrep.dev:
      rule:
        rule_id: nJUDAe
        version_id: w8T9J4J
        url: https://semgrep.dev/playground/r/w8T9J4J/gitlab.bandit.B509
        origin: community
  pattern-either:
  - pattern: pysnmp.hlapi.UsmUserData($ARG1, $ARG2)
  - pattern: pysnmp.hlapi.UsmUserData($ARG1)
  - pattern: pysnmp.hlapi.UsmUserData(...,'noAuthNoPriv',...)
  - pattern: pysnmp.hlapi.UsmUserData(...,'authNoPriv',...)
  severity: WARNING
- id: gitlab.bandit.B608
  languages:
  - python
  message: |
    SQL Injection is a critical vulnerability that can lead to data or system compromise. By
    dynamically generating SQL query strings, user input may be able to influence the logic of
    the SQL statement. This could lead to an adversary accessing information they should
    not have access to, or in some circumstances, being able to execute OS functionality or code.

    Replace all dynamically generated SQL queries with parameterized queries. In situations where
    dynamic queries must be created, never use direct user input, but instead use a map or
    dictionary of valid values and resolve them using a user supplied key.

    For example, some database drivers do not allow parameterized queries for `>` or `<` comparison
    operators. In these cases, do not use a user supplied `>` or `<` value, but rather have the
    user
    supply a `gt` or `lt` value. The alphabetical values are then used to look up the `>` and `<`
    values to be used in the construction of the dynamic query. The same goes for other queries
    where
    column or table names are required but cannot be parameterized.

    Example using `PreparedStatement` queries:
    ```
    import sqlite3

    # Create a new database (in memory)
    con = sqlite3.connect(":memory:")
    # Get a cursor from the connection
    cur = con.cursor()
    # Create a tuple of the value to be used in the parameterized query
    params = ('user-input',)
    # execute the statement, passing in the params for the value
    cur.execute("select name from sqlite_master where name = ?", params)
    # work with the result
    result = cur.fetchall()
    ```

    For more information on SQL Injection see OWASP:
    https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html
  metadata:
    cwe: CWE-89
    owasp: A1:2017-Injection
    category: security
    shortDescription: Improper neutralization of special elements used in an SQL Command
      ('SQL Injection')
    primary_identifier: bandit.B608
    secondary_identifiers:
    - name: Bandit Test ID B608
      type: bandit_test_id
      value: B608
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.bandit.B608
    shortlink: https://sg.run/xYry
    semgrep.dev:
      rule:
        rule_id: zdUyPj
        version_id: kbTdjPO
        url: https://semgrep.dev/playground/r/kbTdjPO/gitlab.bandit.B608
        origin: community
  patterns:
  - pattern-either:
    - pattern: $DB.execute("..." % ...)
    - pattern: $DB.execute("...".format(...))
    - pattern: $DB.execute(f"...")
    - pattern: $DB.execute("..." + $V + "...")
    - patterns:
      - pattern-either:
        - pattern-inside: |
            ...
            $SQL = "..." % ...
            ...
        - pattern-inside: |
            ...
            $SQL = $SQL + "..." % ...
            ...
        - pattern-inside: |
            ...
            $SQL = "...".format(...)
            ...
        - pattern-inside: |
            ...
            $SQL = f"...{$X}..."
            ...
      - pattern: "$DB.execute($SQL)"
  severity: WARNING
- id: gitlab.bandit.B610
  languages:
  - python
  message: |
    SQL Injection is a critical vulnerability that can lead to data or system compromise. By
    dynamically generating SQL query strings, user input may be able to influence the logic of
    the SQL statement. This could lead to an adversary accessing information they should
    not have access to, or in some circumstances, being able to execute OS functionality or code.

    Replace all dynamically generated SQL queries with parameterized queries. In situations where
    dynamic queries must be created, never use direct user input, but instead use a map or
    dictionary of valid values and resolve them using a user supplied key.

    For example, some database drivers do not allow parameterized queries for `>` or `<` comparison
    operators. In these cases, do not use a user supplied `>` or `<` value, but rather have the
    user
    supply a `gt` or `lt` value. The alphabetical values are then used to look up the `>` and `<`
    values to be used in the construction of the dynamic query. The same goes for other queries
    where
    column or table names are required but cannot be parameterized.

    The `QuerySet.extra` API method will be deprecated as it a source of SQL Injection
    vulnerabilities and other problems. This method is especially risky as callers
    will need to do their own escaping of any parameters that come from user-supplied
    information.

    To remediate this issue, do not use `extra` but use other `QuerySet` methods to achieve
    the same goals. If for some reason this is not feasible, consider using the `RawSQL` method
    and making sure that all arguments, including user-supplied ones, are only used in
    `params`


    While not recommended due to [potential SQL
    Injection](https://docs.djangoproject.com/en/4.2/ref/models/expressions/#raw-sql-expressions),
    below is an example using `RawSQL`,
    passing in user-supplied data as a `param` which will escape the input:
    ```
    # If dealing with integer based user input, restrict the values to integers only using the
    # path configuration: path('<int:user_supplied_id>/someview/', views.some_view,
    name='someview'),

    # views.py
    def some_view(request, user_supplied_id):
      # Never use string interpolation in the `sql` parameter.
      # Never quote the `%s` string format such as `... where id='%s'` as this could lead to SQL
    Injection.
      # Pass the user supplied data only in the `params` parameter.
      for obj in DBObject.objects.all().annotate(
          val=RawSQL(sql="select id from some_secondary_table where id=%s",
    params=[user_supplied_id])):
        # Work with the results from the query
        # ...
    ```

    For more information on QuerySet see:
    - https://docs.djangoproject.com/en/4.2/ref/models/querysets/#queryset-api

    For more information on SQL Injection see OWASP:
    - https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html
  metadata:
    cwe: CWE-89
    owasp: A1:2017-Injection
    category: security
    shortDescription: Improper neutralization of special elements used in an SQL Command
      ('SQL Injection')
    primary_identifier: bandit.B610
    secondary_identifiers:
    - name: Bandit Test ID B610
      type: bandit_test_id
      value: B610
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.bandit.B610
    shortlink: https://sg.run/O1wk
    semgrep.dev:
      rule:
        rule_id: pKUG96
        version_id: RGTDQGy
        url: https://semgrep.dev/playground/r/RGTDQGy/gitlab.bandit.B610
        origin: community
  patterns:
  - pattern: "$X.objects. ... .extra(..., $K = $V, ...)"
  - pattern-not-inside: |
      $V = ['...']
      ...
  - metavariable-pattern:
      metavariable: "$V"
      patterns:
      - pattern: "$V"
      - pattern-not: "[..., '...', ...]"
      - pattern-not: "{..., '...': '...', ...}"
      - pattern-not: '"..."'
      - pattern-not: '[..., "..." % "...", ...]'
      - pattern-not: '{..., $L: "..." % "...", ...}'
      - pattern-not: '{..., $L: "...".format("..."), ...}'
      - pattern-not: '[..., "...".format("..."), ...]'
  severity: WARNING
- id: gitlab.bandit.B611
  languages:
  - python
  message: |
    SQL Injection is a critical vulnerability that can lead to data or system compromise. By
    dynamically generating SQL query strings, user input may be able to influence the logic of
    the SQL statement. This could lead to an adversary accessing information they should
    not have access to, or in some circumstances, being able to execute OS functionality or code.

    Replace all dynamically generated SQL queries with parameterized queries. In situations where
    dynamic queries must be created, never use direct user input, but instead use a map or
    dictionary of valid values and resolve them using a user supplied key.

    For example, some database drivers do not allow parameterized queries for `>` or `<` comparison
    operators. In these cases, do not use a user supplied `>` or `<` value, but rather have the
    user
    supply a `gt` or `lt` value. The alphabetical values are then used to look up the `>` and `<`
    values to be used in the construction of the dynamic query. The same goes for other queries
    where
    column or table names are required but cannot be parameterized.

    To remediate this issue, do not use `raw` or `RawSQL` but use other `QuerySet` methods to
    achieve
    the same goals. If for some reason this is not feasible, ensure calls including user-supplied
    data
    pass it in to the `params` parameter of the `RawSQL` method.

    While not recommended due to [potential SQL
    Injection](https://docs.djangoproject.com/en/4.2/ref/models/expressions/#raw-sql-expressions),
    below is an example using `RawSQL`,
    passing in user-supplied data as a `param` which will escape the input:
    ```
    # If dealing with integer based user input, restrict the values to integers only using the
    # path configuration: path('<int:user_supplied_id>/someview/', views.some_view,
    name='someview'),

    # views.py
    def some_view(request, user_supplied_id):
      # Never use string interpolation in the `sql` parameter.
      # Never quote the `%s` string format such as `... where id='%s'` as this could lead to SQL
    Injection.
      # Pass the user supplied data only in the `params` parameter.
      for obj in DBObject.objects.all().annotate(
          val=RawSQL(sql="select id from some_secondary_table where id=%s",
    params=[user_supplied_id])):
        # Work with the results from the query
        # ...
    ```

    For more information on QuerySet see:
    - https://docs.djangoproject.com/en/4.2/ref/models/querysets/#queryset-api

    For more information on SQL Injection see OWASP:
    - https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html
  metadata:
    cwe: CWE-89
    owasp: A1:2017-Injection
    category: security
    shortDescription: Improper neutralization of special elements used in an SQL Command
      ('SQL Injection')
    primary_identifier: bandit.B611
    secondary_identifiers:
    - name: Bandit Test ID B611
      type: bandit_test_id
      value: B611
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.bandit.B611
    shortlink: https://sg.run/e4xL
    semgrep.dev:
      rule:
        rule_id: 2ZU4Wb
        version_id: A8T9r7w
        url: https://semgrep.dev/playground/r/A8T9r7w/gitlab.bandit.B611
        origin: community
  patterns:
  - pattern-either:
    - pattern: "$MODEL.objects.raw($QUERY, ...)"
    - pattern: django.db.models.expressions.RawSQL(...)
  severity: ERROR
- id: gitlab.bandit.B612
  languages:
  - python
  message: |
    The application was found calling the `logging.config.listen`` function, which provides the
    ability to listen for
    external configuration files over a socket server. This listen socket parses part of the
    configuration and calls
    `eval` on the supplied configuration file. A local user, or an adversary who is able to
    exploit
    a Server Side Request Forgery (SSRF) attack to communicate over localhost, would be able to
    execute arbitrary
    code by passing in a logging config that contains python code.

    To remediate the issue, remove the call to `logging.config.listen` method.

    For more information on the listen functionality see:
    - https://docs.python.org/3/library/logging.config.html#logging.config.listen
  metadata:
    cwe: CWE-94
    shortDescription: Improper control of generation of code ('Code Injection')
    category: security
    primary_identifier: bandit.B612
    secondary_identifiers:
    - name: Bandit Test ID B612
      type: bandit_test_id
      value: B612
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.bandit.B612
    shortlink: https://sg.run/GBEn
    semgrep.dev:
      rule:
        rule_id: d8UN2B
        version_id: 9lTdo7O
        url: https://semgrep.dev/playground/r/9lTdo7O/gitlab.bandit.B612
        origin: community
  patterns:
  - pattern: logging.config.listen(...)
  severity: WARNING
- id: gitlab.bandit.B701
  languages:
  - python
  message: |
    The application was found using Jinja2 `Environment` without autoescaping enabled. If using in
    the context of HTML this could lead to Cross-Site Scripting (XSS) attacks when rendering with
    user-supplied input.

    Unfortunately, Jinja2 does not support context-aware escaping, meaning it is insufficient to
    protect against
    XSS for the various web contexts. It is important to encode the data depending on the specific
    context
    it
    is used in. There are at least six context types:

    - Inside HTML tags `<div>context 1</div>`
    - Inside attributes: `<div class="context 2"></div>`
    - Inside event attributes `<button onclick="context 3">button</button>`
    - Inside script blocks: `<script>var x = "context 4"</script>`
    - Unsafe element HTML assignment: `element.innerHTML = "context 5"`
    - Inside URLs: `<iframe src="context 6"></iframe><a href="context 6">link</a>`

    Script blocks alone have multiple ways they need to be encoded. Extra care must be taken if
    user input
    is ever output inside of script tags.

    User input that is displayed within the application must be encoded, sanitized or validated
    to ensure it cannot be treated as HTML or executed as Javascript code. Care must also be
    taken
    to not mix server-side templating with client-side templating, as the server-side templating
    will
    not encode things like {{ 7*7 }} which may execute client-side templating features.

    It is _NOT_ advised to encode user input prior to inserting into a data store. The data will
    need to be
    encoded depending on context of where it is output. It is much safer to force the displaying
    system to
    handle the encoding and not attempt to guess how it should be encoded.

    To handle different contexts, one approach would be to write custom Jinja2 filters. Below is
    an example
    that escapes or encodes links and potentially malicious script, note this does not include
    other contexts
    such as CSS or attributes:
    ```
    from jinja2 import Environment, select_autoescape, FileSystemLoader
    from jinja2 import pass_eval_context
    from markupsafe import Markup, escape

    @pass_eval_context
    def escape_link(eval_ctx, value):
        bad_link = "#JinjatmplZ"
        # Block any values that start with // as that could be used to inject
        # links to third party pages see:
    https://en.wikipedia.org/wiki/Wikipedia:Protocol-relative_URL
        if value.startswith('//'):
            return bad_link

        # Only allow relative links
        # if you want to allow links that start with http or ws replace with below:
        # if not value.startswith('/'): and not value.startswith('http') and not
    value.startswith('ws')
        if not value.startswith('/'):
            return bad_link

        # Alternatively, you could only call escape if autoescape is true
        # if eval_ctx.autoescape:
        #    return escape(value)
        # else
        #    return value

        return escape(value)

    # Create a replacement table
    js_replacement = str.maketrans({
            '\0':    "\\u0000",
            '\t': "\\t",
            '\n': "\\n",
            '\v': "\\u000b",
            '\f': "\\f`",
            '\r': "\\r",
            '"':  "\\u0022",
            '`':  "\\u0060",
            '&':  "\\u0026",
            '\'': "\\u0027",
            '+':  "\\u002b",
            '/':  "\\/",
            '<':  "\\u003c",
            '>':  "\\u003e",
            '\\': "\\\\",
            '(': "\\u0028",
            ')': "\\u0029",
        })

    @pass_eval_context
    def escape_js(eval_ctx, value):
        """
        Escape the input for use in <script> context, USE WITH CAUTION
        It is strongly recommended to _never_ pass user-supplied input to
        the JavaScript context. This may still be unsafe depending where
        used, it does not consider characters used  in regular expressions
        for example.
        """

        #if eval_ctx.autoescape:
        #    value = escape(value)
        # Escape by default
        value = escape(value)
        # Translate any potential characters using our translation table
        return value.translate(js_replacement)

    # Create our environment, setting autoescape to use the default
    # select_autoescape function
    env = Environment(
        loader=FileSystemLoader(os.getcwd()+"/template"),
        autoescape=select_autoescape,
    )
    # Add an escape link filter to be used in our template
    env.filters["escape_link"] = escape_link
    env.filters["escape_js"] = escape_js
    # Load our template file
    template = env.get_template("mytemplate.html")
    # Render with different variables which call our filters
    print(template.render(
        html_context="<img src=x onerror=alert(1)>",
        link_context="/# onclick=alert(1)<script>alert(1)</script>",
        script_context="alert(1);alert`1`",)
    )

    # Sample template:
    """
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <title>My Webpage</title>
    </head>
    <body>
        <h1>My Webpage</h1>
        {{ html_context }}
        <a href="{{ link_context | escape_link }}">link</a>
        <script>{{ script_context | escape_js }}</script>
    </body>
    </html>
    """
    ```

    For more information on autoescape see:
    - https://jinja.palletsprojects.com/en/3.1.x/api/#autoescaping

    For more information on XSS see OWASP:
    - https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html
  metadata:
    cwe: CWE-116
    owasp: A7:2017-Cross-Site Scripting (XSS)
    category: security
    shortDescription: Improper encoding or escaping of output
    primary_identifier: bandit.B701
    secondary_identifiers:
    - name: Bandit Test ID B701
      type: bandit_test_id
      value: B701
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.bandit.B701
    shortlink: https://sg.run/v0j0
    semgrep.dev:
      rule:
        rule_id: X5UZBZ
        version_id: NdT3k5g
        url: https://semgrep.dev/playground/r/NdT3k5g/gitlab.bandit.B701
        origin: community
  patterns:
  - pattern-not: jinja2.Environment(..., autoescape=True, ...)
  - pattern-not: jinja2.Environment(..., autoescape=jinja2.select_autoescape(...),
      ...)
  - pattern: jinja2.Environment(...)
  severity: WARNING
- id: gitlab.bandit.B702
  languages:
  - python
  message: |
    The application was found using mako templates without `default_filters` being passed to the
    `Template` or `TemplateLookup` constructors. If using in the context of HTML, this could lead
    to Cross-Site Scripting (XSS) attacks when rendering with
    user-supplied input.

    Unfortunately, Jinja2 does not support context-aware escaping, meaning it is insufficient to
    protect against
    XSS for the various web contexts. It is important to encode the data depending on the specific
    context
    it
    is used in. There are at least six context types:

    - Inside HTML tags `<div>context 1</div>`
    - Inside attributes: `<div class="context 2"></div>`
    - Inside event attributes `<button onclick="context 3">button</button>`
    - Inside script blocks: `<script>var x = "context 4"</script>`
    - Unsafe element HTML assignment: `element.innerHTML = "context 5"`
    - Inside URLs: `<iframe src="context 6"></iframe><a href="context 6">link</a>`

    Script blocks alone have multiple ways they need to be encoded. Extra care must be taken if
    user input
    is ever output inside of script tags.

    User input that is displayed within the application must be encoded, sanitized or validated
    to ensure it cannot be treated as HTML or executed as Javascript code. Care must also be
    taken
    to not mix server-side templating with client-side templating, as the server-side templating
    will
    not encode things like {{ 7*7 }} which may execute client-side templating features.

    It is _NOT_ advised to encode user input prior to inserting into a data store. The data will
    need to be
    encoded depending on context of where it is output. It is much safer to force the displaying
    system to
    handle the encoding and not attempt to guess how it should be encoded.

    To handle different contexts, one approach would be to write custom mako filters. Below is
    an example
    that escapes or encodes links and potentially malicious script, note this does not include
    other contexts
    such as CSS or attributes:
    ```
    # filters.py module:

    def escape_link(value):
        bad_link = "#JinjatmplZ"
        # Block any values that start with // as that could be used to inject
        # links to third party pages see:
    https://en.wikipedia.org/wiki/Wikipedia:Protocol-relative_URL
        if value.startswith('//'):
            return bad_link

        # Only allow relative links
        # if you want to allow links that start with http or ws replace with below:
        # if not value.startswith('/'): and not value.startswith('http') and not
    value.startswith('ws')
        if not value.startswith('/'):
            return bad_link

        return value

    # Create a replacement table
    js_replacement = str.maketrans({
        '\0':    "\\u0000",
        '\t': "\\t",
        '\n': "\\n",
        '\v': "\\u000b",
        '\f': "\\f`",
        '\r': "\\r",
        '"':  "\\u0022",
        '`':  "\\u0060",
        '&':  "\\u0026",
        '\'': "\\u0027",
        '+':  "\\u002b",
        '/':  "\\/",
        '<':  "\\u003c",
        '>':  "\\u003e",
        '\\': "\\\\",
        '(': "\\u0028",
        ')': "\\u0029",
    })

    def escape_js(value):
        # Escape the input for use in <script> context, USE WITH CAUTION
        # It is strongly recommended to never pass user-supplied input to
        # the JavaScript context.

        # Translate any potential characters using our translation table
        return value.translate(js_replacement)

    #####################################################################
    # main module:                                                      #
    #####################################################################
    from mako.template import Template
    # Define our template, note the calls to our custom filters depending
    # on context
    template_text = """
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <title>My Webpage</title>
    </head>
    <body>
        <h1>My Webpage</h1>
        ${html_context}
        <a href="${link_context | escape_link}">link</a>
        <script>${script_context | escape_js}</script>
    </body>
    </html>
    """
    # Load our template with default filters and our imported filters for
    # usage in template files
    t = Template(template_text,
                # By default enable the html filter with 'h'
                default_filters=['h'],
                # Import our custom filters
                imports=["from filters import escape_link, escape_js"])

    # Render our template
    print(t.render(html_context="<img src=x onerror=alert(1)>",
        link_context="/# onclick=alert(1)<script>alert(1)</script>",
        script_context="alert(1)<img src=x onerror=alert(1)>",)
    )
    ```
  metadata:
    cwe: CWE-79
    category: security
    owasp: A7:2017-Cross-Site Scripting (XSS)
    shortDescription: Improper neutralization of input during web page generation
      ('Cross-site Scripting')
    primary_identifier: bandit.B702
    secondary_identifiers:
    - name: Bandit Test ID B702
      type: bandit_test_id
      value: B702
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.bandit.B702
    shortlink: https://sg.run/K887
    semgrep.dev:
      rule:
        rule_id: L1Urrl
        version_id: DkT6900
        url: https://semgrep.dev/playground/r/DkT6900/gitlab.bandit.B702
        origin: community
  pattern: mako.template.Template(...)
  severity: WARNING
- id: gitlab.eslint.detect-buffer-noassert
  languages:
  - javascript
  - typescript
  pattern-either:
  - pattern: "$OBJ.readUInt8(..., true)"
  - pattern: "$OBJ.readUInt16LE(..., true)"
  - pattern: "$OBJ.readUInt16BE(..., true)"
  - pattern: "$OBJ.readUInt32LE(..., true)"
  - pattern: "$OBJ.readUInt32BE(..., true)"
  - pattern: "$OBJ.readInt8(..., true)"
  - pattern: "$OBJ.readInt16LE(..., true)"
  - pattern: "$OBJ.readInt16BE(..., true)"
  - pattern: "$OBJ.readInt32LE(..., true)"
  - pattern: "$OBJ.readInt32BE(..., true)"
  - pattern: "$OBJ.readFloatLE(..., true)"
  - pattern: "$OBJ.readFloatBE(..., true)"
  - pattern: "$OBJ.readDoubleLE(..., true)"
  - pattern: "$OBJ.readDoubleBE(..., true)"
  - pattern: "$OBJ.writeUInt8(..., true)"
  - pattern: "$OBJ.writeUInt16LE(..., true)"
  - pattern: "$OBJ.writeUInt16BE(..., true)"
  - pattern: "$OBJ.writeUInt32LE(..., true)"
  - pattern: "$OBJ.writeUInt32BE(..., true)"
  - pattern: "$OBJ.writeInt8(..., true)"
  - pattern: "$OBJ.writeInt16LE(..., true)"
  - pattern: "$OBJ.writeInt16BE(..., true)"
  - pattern: "$OBJ.writeInt32LE(..., true)"
  - pattern: "$OBJ.writeInt32BE(..., true)"
  - pattern: "$OBJ.writeFloatLE(..., true)"
  - pattern: "$OBJ.writeFloatBE(..., true)"
  - pattern: "$OBJ.writeDoubleLE(..., true)"
  - pattern: "$OBJ.writeDoubleBE(..., true)"
  severity: WARNING
  message: |
    The application was found using `noAssert` when calling the Buffer API. The `noAssert`
    argument has
    been deprecated since Node 10. Calling the Buffer API with this argument allows the offset
    specified to
    be beyond the end of the buffer. This could result in writing or reading beyond the end of the
    buffer and
    cause a segmentation fault, leading to the application crashing.

    To remediate this issue, remove the `true` argument when calling any of the Buffer read or
    write methods.
    The application should still handle `RangeError` exception cases where the offset is beyond
    the end of the
    buffer.

    Example reading from a Buffer without the `noAssert` argument and gracefully handling errors:
    ```
    // Create a new buffer
    const buf = Buffer.from([1, 2, 3, 4]);
    try {
        // Read a single byte from it, starting at offset 1
        const b = buf.readInt8(1);
        // Work with b
    } catch (e) {
        if (e instanceof RangeError) {
            console.log('Invalid offset: %s', e.message);
        }
        // handle other errors
    }
    ```
  metadata:
    shortDescription: Improper restriction of operations within the bounds of a memory
      buffer
    cwe: CWE-119
    category: security
    source-rule-url: https://github.com/nodesecurity/eslint-plugin-security/blob/master/rules/detect-buffer-noassert.js
    primary_identifier: eslint.detect-buffer-noassert
    secondary_identifiers:
    - name: ESLint rule ID/detect-buffer-noassert
      type: eslint_rule_id
      value: detect-buffer-noassert
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.eslint.detect-buffer-noassert
    shortlink: https://sg.run/E5WB
    semgrep.dev:
      rule:
        rule_id: yyUvwN
        version_id: JdTN3RE
        url: https://semgrep.dev/playground/r/JdTN3RE/gitlab.eslint.detect-buffer-noassert
        origin: community
- id: gitlab.eslint.detect-child-process
  languages:
  - javascript
  - typescript
  patterns:
  - pattern: child_process.exec(...)
  - pattern-not: child_process.exec('...')
  severity: WARNING
  message: |
    OS command injection is a critical vulnerability that can lead to a full system
    compromise as it may allow an adversary to pass in arbitrary commands or arguments
    to be executed.

    User input should never be used in constructing commands or command arguments
    to functions which execute OS commands. This includes filenames supplied by
    user uploads or downloads.

    Ensure your application does not:

    - Use user-supplied information in the process name to execute.
    - Use user-supplied information in an OS command execution function which does
    not escape shell meta-characters.
    - Use user-supplied information in arguments to OS commands.

    The application should have a hardcoded set of arguments that are to be passed
    to OS commands. If filenames are being passed to these functions, it is
    recommended that a hash of the filename be used instead, or some other unique
    identifier. It is strongly recommended that a native library that implements
    the same functionality be used instead of using OS system commands, due to the
    risk of unknown attacks against third-party commands.

    When specifying the OS command, ensure the application uses the full path
    information, otherwise the OS may attempt to look up which process to execute
    and could be vulnerable to untrusted search path vulnerabilities (CWE-426).

    Example of safely executing an OS command:
    ```
    const child_process = require('child_process');
    const fs = require('fs');
    const crypto = require('node:crypto');
    const { mkdtempSync } = require('node:fs');

    function executeCommand(userFileData) {
        // Create a temporary directory, preferably in an application directory
        // that only the application has access to.
        const fileDir = mkdtempSync('/tmp/tmpdir-');
        // Generate a random filename, do not use user input
        const filePath = fileDir + path.sep + crypto.randomUUID();
        // Write the user-supplied data to the temporary file.
        fs.writeFileSync(filePath, userFileData);
        // Execute a program with a hardcoded path to the binary
        child_process.exec(`/bin/cat ${filePath}`, (error, stdout, stderr) => {
            // Delete the temporary directory and file if no longer needed
            fs.rmSync(fileDir, { recursive: true, force: true });
            if (error) {
              console.error(`exec error: ${error}`);
              return;
            }
            console.log(`stdout: ${stdout}`);
            console.error(`stderr: ${stderr}`);
        });
    }
    ```

    For more information on OS command injection, see OWASP's guide:
    https://cheatsheetseries.owasp.org/cheatsheets/OS_Command_Injection_Defense_Cheat_Sheet.html

    Detected non-literal calls to child_process.exec(). This could lead to a command
    injection vulnerability.
  metadata:
    cwe: CWE-95
    owasp: A1:2017-Injection
    shortDescription: Improper Neutralization of Directives in Dynamically Evaluated
      Code ('Eval Injection')
    category: security
    source-rule-url: https://github.com/nodesecurity/eslint-plugin-security/blob/master/rules/detect-child-process.js
    primary_identifier: eslint.detect-child-process
    secondary_identifiers:
    - name: ESLint rule ID/detect-child-process
      type: eslint_rule_id
      value: detect-child-process
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.eslint.detect-child-process
    shortlink: https://sg.run/nqRr
    semgrep.dev:
      rule:
        rule_id: 9AUODZ
        version_id: BjTXDL3
        url: https://semgrep.dev/playground/r/BjTXDL3/gitlab.eslint.detect-child-process
        origin: community
- id: gitlab.eslint.detect-disable-mustache-escape
  languages:
  - javascript
  - typescript
  pattern: "$OBJ.escapeMarkup = false"
  severity: WARNING
  message: |
    Markup escaping disabled. This can be used with some template engines to escape
    disabling of HTML entities, which can lead to XSS attacks.
  metadata:
    cwe: CWE-79
    owasp: A7:2017-Cross-Site Scripting (XSS)
    category: security
    shortDescription: Improper neutralization of input during web page generation
      (XSS)
    source-rule-url: https://github.com/nodesecurity/eslint-plugin-security/blob/master/rules/detect-disable-mustache-escape.js
    primary_identifier: eslint.detect-disable-mustache-escape
    secondary_identifiers:
    - name: ESLint rule ID/detect-disable-mustache-escape
      type: eslint_rule_id
      value: detect-disable-mustache-escape
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.eslint.detect-disable-mustache-escape
    shortlink: https://sg.run/Jjjo
    semgrep.dev:
      rule:
        rule_id: QrUppL
        version_id: YDTp6b3
        url: https://semgrep.dev/playground/r/YDTp6b3/gitlab.eslint.detect-disable-mustache-escape
        origin: community
- id: gitlab.eslint.detect-eval-with-expression
  languages:
  - javascript
  - typescript
  patterns:
  - pattern: eval($OBJ)
  - pattern-not: eval("...")
  severity: WARNING
  message: |
    The application was found calling the `eval` function with a non-literal variable. If the
    variable comes from user-supplied input, an adversary could attempt to execute arbitrary
    JavaScript
    code. This could lead to a full system compromise in Node applications or Cross-site Scripting
    (XSS) in web applications.

    To remediate this issue, remove all calls to `eval` and consider alternative methods for
    executing
    the necessary business logic. There is almost no safe method of calling `eval` with
    user-supplied input.
    Instead, consider alternative methods such as using property accessors to dynamically access
    values.

    Example using property accessors to dynamically access an object's property:
    ```
    // Define an object
    const obj = {key1: 'value1', key2: 'value2'};
    // Get key dynamically from user input
    const key = getUserInput();
    // Check if the key exists in our object and return it, or a default empty string
    const value = (obj.hasOwnProperty(key)) ? obj[key] : '';
    // Work with the value
    ```

    For more information on why not to use `eval`, and alternatives see:
    - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval#never_use_eval!
  metadata:
    cwe: CWE-95
    owasp: A1:2017-Injection
    shortDescription: Improper neutralization of directives in dynamically evaluated
      code ('Eval Injection')
    category: security
    source-rule-url: https://github.com/nodesecurity/eslint-plugin-security/blob/master/rules/detect-eval-with-expression.js
    primary_identifier: eslint.detect-eval-with-expression
    secondary_identifiers:
    - name: ESLint rule ID/detect-eval-with-expression
      type: eslint_rule_id
      value: detect-eval-with-expression
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.eslint.detect-eval-with-expression
    shortlink: https://sg.run/ZeD4
    semgrep.dev:
      rule:
        rule_id: 10UZgd
        version_id: LjTqyxk
        url: https://semgrep.dev/playground/r/LjTqyxk/gitlab.eslint.detect-eval-with-expression
        origin: community
- id: gitlab.eslint.detect-new-buffer
  languages:
  - javascript
  - typescript
  patterns:
  - patterns:
    - pattern-not-inside: |-
        require("safe-buffer")
        ...
    - pattern-not-inside: |-
        import { Buffer } from "safe-buffer"
        ...
    - pattern-inside: function $FUNC(..., $X, ...) { ... }
    - pattern: new Buffer($X,...)
  - pattern-not: 'new Buffer("...",...)

      '
  - pattern-not: 'new Buffer([...] , ...)

      '
  message: |
    The application was found calling  the `new Buffer` constructor which has been deprecated
    since Node 8.
    By passing in a non-literal value, an adversary could allocate large amounts of memory.

    Other issues also exist with the `Buffer` constructor:
    - Older versions would return uninitialized memory, which could contain sensitive information
    - Unable to easily determine what a Buffer contained if passed a non-literal value

    To remediate this issue, use `Buffer.alloc` or `Buffer.from` instead to allocate a new
    `Buffer`.

    Example using `Buffer.alloc` instead of `new Buffer(...)`:
    ```
    // Create a new buffer using Buffer.from
    const buf = Buffer.from([1, 2, 3, 4]);
    // Work with buf
    ```

    For more information on migrating to `Buffer.from()`/`Buffer.alloc()` see:
    - https://nodejs.org/en/docs/guides/buffer-constructor-deprecation
  metadata:
    shortDescription: Allocation of resources without limits or throttling
    cwe: CWE-770
    category: security
    source-rule-url: https://github.com/eslint-community/eslint-plugin-security/blob/main/rules/detect-new-buffer.js
    primary_identifier: eslint.detect-new-buffer
    secondary_identifiers:
    - name: ESLint rule ID/detect-new-buffer
      type: eslint_rule_id
      value: detect-new-buffer
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.eslint.detect-new-buffer
    shortlink: https://sg.run/BJ85
    semgrep.dev:
      rule:
        rule_id: EwU5PB
        version_id: 5PTdPGj
        url: https://semgrep.dev/playground/r/5PTdPGj/gitlab.eslint.detect-new-buffer
        origin: community
  severity: WARNING
- id: gitlab.eslint.detect-non-literal-fs-filename
  languages:
  - typescript
  - javascript
  patterns:
  - pattern-either:
    - pattern-inside: |
        import $MOD from $IMP
        ...
    - pattern-inside: |
        $MOD = require($IMP)
        ...
  - metavariable-comparison:
      metavariable: "$IMP"
      comparison: "$IMP in ['fs', 'node:fs', 'fs/promises', 'node:fs/promises', 'fs-extra']"
  - pattern-not: $MOD.appendFile("...", ...)
  - pattern-not: $MOD.appendFileSync("...", ...)
  - pattern-not: $MOD.chmod("...", ...)
  - pattern-not: $MOD.chmodSync("...", ...)
  - pattern-not: $MOD.chown("...", ...)
  - pattern-not: $MOD.chownSync("...", ...)
  - pattern-not: $MOD.createReadStream("...", ...)
  - pattern-not: $MOD.createWriteStream("...", ...)
  - pattern-not: $MOD.exists("...", ...)
  - pattern-not: $MOD.existsSync("...", ...)
  - pattern-not: $MOD.lchmod("...", ...)
  - pattern-not: $MOD.lchmodSync("...", ...)
  - pattern-not: $MOD.lchown("...", ...)
  - pattern-not: $MOD.lchownSync("...", ...)
  - pattern-not: $MOD.link("...", "...", ...)
  - pattern-not: $MOD.linkSync("...", "...", ...)
  - pattern-not: $MOD.lstat("...", ...)
  - pattern-not: $MOD.lstatSync("...", ...)
  - pattern-not: $MOD.mkdir("...", ...)
  - pattern-not: $MOD.mkdirSync("...", ...)
  - pattern-not: $MOD.open("...", ...)
  - pattern-not: $MOD.openSync("...", ...)
  - pattern-not: $MOD.readdir("...", ...)
  - pattern-not: $MOD.readdirSync("...", ...)
  - pattern-not: $MOD.readFile("...", ...)
  - pattern-not: $MOD.readFileSync("...", ...)
  - pattern-not: $MOD.readlink("...", ...)
  - pattern-not: $MOD.readlinkSync("...", ...)
  - pattern-not: $MOD.realpath("...", ...)
  - pattern-not: $MOD.realpathSync("...", ...)
  - pattern-not: $MOD.rename("...", "...", ...)
  - pattern-not: $MOD.renameSync("...", "...", ...)
  - pattern-not: $MOD.rmdir("...", ...)
  - pattern-not: $MOD.rmdirSync("...", ...)
  - pattern-not: $MOD.stat("...", ...)
  - pattern-not: $MOD.statSync("...", ...)
  - pattern-not: $MOD.symlink("...", "...", ...)
  - pattern-not: $MOD.symlinkSync("...", "...", ...)
  - pattern-not: $MOD.truncate("...", ...)
  - pattern-not: $MOD.truncateSync("...", ...)
  - pattern-not: $MOD.unlink("...", ...)
  - pattern-not: $MOD.unlinkSync("...", ...)
  - pattern-not: $MOD.unwatchFile("...", ...)
  - pattern-not: $MOD.utimes("...", ...)
  - pattern-not: $MOD.utimesSync("...", ...)
  - pattern-not: $MOD.watch("...", ...)
  - pattern-not: $MOD.watchFile("...", ...)
  - pattern-not: $MOD.writeFile("...", ...)
  - pattern-not: $MOD.writeFileSync("...", ...)
  - pattern-either:
    - pattern: "$MOD.appendFile(...)"
    - pattern: "$MOD.appendFileSync(...)"
    - pattern: "$MOD.chmod(...)"
    - pattern: "$MOD.chmodSync(...)"
    - pattern: "$MOD.chown(...)"
    - pattern: "$MOD.chownSync(...)"
    - pattern: "$MOD.createReadStream(...)"
    - pattern: "$MOD.createWriteStream(...)"
    - pattern: "$MOD.exists(...)"
    - pattern: "$MOD.existsSync(...)"
    - pattern: "$MOD.lchmod(...)"
    - pattern: "$MOD.lchmodSync(...)"
    - pattern: "$MOD.lchown(...)"
    - pattern: "$MOD.lchownSync(...)"
    - pattern: "$MOD.link(...)"
    - pattern: "$MOD.linkSync(...)"
    - pattern: "$MOD.lstat(...)"
    - pattern: "$MOD.lstatSync(...)"
    - pattern: "$MOD.mkdir(...)"
    - pattern: "$MOD.mkdirSync(...)"
    - pattern: "$MOD.open(...)"
    - pattern: "$MOD.openSync(...)"
    - pattern: "$MOD.readdir(...)"
    - pattern: "$MOD.readdirSync(...)"
    - pattern: "$MOD.readFile(...)"
    - pattern: "$MOD.readFileSync(...)"
    - pattern: "$MOD.readlink(...)"
    - pattern: "$MOD.readlinkSync(...)"
    - pattern: "$MOD.realpath(...)"
    - pattern: "$MOD.realpathSync(...)"
    - pattern: "$MOD.rename(...)"
    - pattern: "$MOD.renameSync(...)"
    - pattern: "$MOD.rmdir(...)"
    - pattern: "$MOD.rmdirSync(...)"
    - pattern: "$MOD.stat(...)"
    - pattern: "$MOD.statSync(...)"
    - pattern: "$MOD.symlink(...)"
    - pattern: "$MOD.symlinkSync(...)"
    - pattern: "$MOD.truncate(...)"
    - pattern: "$MOD.truncateSync(...)"
    - pattern: "$MOD.unlink(...)"
    - pattern: "$MOD.unlinkSync(...)"
    - pattern: "$MOD.unwatchFile(...)"
    - pattern: "$MOD.utimes(...)"
    - pattern: "$MOD.utimesSync(...)"
    - pattern: "$MOD.watch(...)"
    - pattern: "$MOD.watchFile(...)"
    - pattern: "$MOD.writeFile(...)"
    - pattern: "$MOD.writeFileSync(...)"
  severity: WARNING
  message: |
    The application dynamically constructs file or path information. If the path
    information comes from user-supplied input, it could be abused to read sensitive files,
    access other users' data, or aid in exploitation to gain further system access.

    User input should never be used in constructing paths or files for interacting
    with the filesystem. This includes filenames supplied by user uploads or downloads.
    If possible, consider hashing user input or using unique values and
    use `path.normalize` to resolve and validate the path information
    prior to processing any file functionality.

    Example using `path.normalize` and not allowing direct user input:
    ```
    // User input, saved only as a reference
    // id is a randomly generated UUID to be used as the filename
    const userData = {userFilename: userSuppliedFilename, id: crypto.randomUUID()};
    // Restrict all file processing to this directory only
    const basePath = '/app/restricted/';

    // Create the full path, but only use our random generated id as the filename
    const joinedPath = path.join(basePath, userData.id);
    // Normalize path, removing any '..'
    const fullPath = path.normalize(joinedPath);
    // Verify the fullPath is contained within our basePath
    if (!fullPath.startsWith(basePath)) {
        console.log("Invalid path specified!");
    }
    // Process / work with file
    // ...
    ```

    For more information on path traversal issues see OWASP:
    https://owasp.org/www-community/attacks/Path_Traversal
  metadata:
    cwe: CWE-22
    shortDescription: Improper limitation of a pathname to a restricted directory
      ('Path Traversal')
    category: security
    primary_identifier: eslint.detect-non-literal-fs-filename
    secondary_identifiers:
    - name: ESLint rule ID/detect-non-literal-fs-filename
      type: eslint_rule_id
      value: detect-non-literal-fs-filename
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.eslint.detect-non-literal-fs-filename
    shortlink: https://sg.run/L09Y
    semgrep.dev:
      rule:
        rule_id: bwUO0X
        version_id: DkT69y0
        url: https://semgrep.dev/playground/r/DkT69y0/gitlab.eslint.detect-non-literal-fs-filename
        origin: community
- id: gitlab.eslint.detect-non-literal-regexp
  languages:
  - javascript
  - typescript
  message: |
    The `RegExp` constructor was called with a non-literal variable. If an adversary were able to
    supply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)
    against the application. In Node applications, this could cause the entire application to no
    longer
    be responsive to other users' requests.

    To remediate this issue, never allow user-supplied regular expressions. Instead, the regular
    expression should be
    hardcoded. If this is not possible, consider using an alternative regular expression engine
    such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative that does not
    support backtracking, which is what leads to ReDoS.

    Example using re2 which does not support backtracking (Note: it is still recommended to
    never use user-supplied input):
    ```
    // Import the re2 module
    const RE2 = require('re2');

    function match(userSuppliedRegex, userInput) {
        // Create a RE2 object with the user supplied regex, this is relatively safe
        // due to RE2 not supporting backtracking which can be abused to cause long running
        // queries
        var re = new RE2(userSuppliedRegex);
        // Execute the regular expression against some userInput
        var result = re.exec(userInput);
        // Work with the result
    }
    ```

    For more information on Regular Expression DoS see:
    - https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS
  metadata:
    cwe: CWE-185
    shortDescription: Incorrect regular expression
    category: security
    primary_identifier: eslint.detect-non-literal-regexp
    secondary_identifiers:
    - name: ESLint rule ID/detect-non-literal-regexp
      type: eslint_rule_id
      value: detect-non-literal-regexp
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.eslint.detect-non-literal-regexp
    shortlink: https://sg.run/70yQ
    semgrep.dev:
      rule:
        rule_id: r6UkPj
        version_id: RGTDQxy
        url: https://semgrep.dev/playground/r/RGTDQxy/gitlab.eslint.detect-non-literal-regexp
        origin: community
  patterns:
  - pattern: 'new RegExp(...)

      '
  - pattern-not: 'new RegExp("...", ...)

      '
  severity: WARNING
- id: gitlab.eslint.detect-non-literal-require
  languages:
  - javascript
  - typescript
  patterns:
  - pattern: require($OBJ)
  - pattern-not: require('...')
  severity: WARNING
  message: |
    The application was found to dynamically import a module by calling `require` using a
    non-literal string. An adversary might be able to read the first line of
    arbitrary files. If they had write access to the file system, they may also be able to
    execute arbitrary code.

    To remediate this issue, use a hardcoded string literal when calling `require`. Never call it
    it with dynamically created variables or user-supplied data.
  metadata:
    cwe: CWE-95
    owasp: A1:2017-Injection
    shortDescription: Improper neutralization of directives in dynamically evaluated
      code ('Eval Injection')
    category: security
    source-rule-url: https://github.com/nodesecurity/eslint-plugin-security/blob/master/rules/detect-non-literal-require.js
    primary_identifier: eslint.detect-non-literal-require
    secondary_identifiers:
    - name: ESLint rule ID/detect-non-literal-require
      type: eslint_rule_id
      value: detect-non-literal-require
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.eslint.detect-non-literal-require
    shortlink: https://sg.run/5JJ6
    semgrep.dev:
      rule:
        rule_id: 3qUEE5
        version_id: qkT21wZ
        url: https://semgrep.dev/playground/r/qkT21wZ/gitlab.eslint.detect-non-literal-require
        origin: community
- id: gitlab.eslint.detect-possible-timing-attacks
  languages:
  - javascript
  patterns:
  - pattern-not: if ($Z == null) { ... };
  - pattern-not: if ($Z === null) { ... };
  - pattern-not: if ($Z != null) { ... };
  - pattern-not: if ($Z !== null) { ... };
  - pattern-not: if ($Q != undefined) { ... };
  - pattern-not: if ($Q !== undefined) { ... };
  - pattern-not: if ($Q == undefined) { ... };
  - pattern-not: if ($Q === undefined) { ... };
  - pattern-not: return $Y == null;
  - pattern-not: return $Y === null;
  - pattern-not: return $Y != null;
  - pattern-not: return $Y !== null;
  - pattern-not: return $Y == undefined;
  - pattern-not: return $Y === undefined;
  - pattern-not: return $Y != undefined;
  - pattern-not: return $Y !== undefined;
  - pattern-either:
    - pattern: |
        if (password == $X) {
            ...
        }
    - pattern: |
        if ($X == password) {
            ...
        }
    - pattern: |
        if (password === $X) {
            ...
        }
    - pattern: |
        if ($X === password) {
            ...
        }
    - pattern: |
        if (pass == $X) {
            ...
        }
    - pattern: |
        if ($X == pass) {
            ...
        }
    - pattern: |
        if (pass === $X) {
            ...
        }
    - pattern: |
        if ($X === pass) {
            ...
        }
    - pattern: |
        if (secret == $X) {
            ...
        }
    - pattern: |
        if ($X == secret) {
            ...
        }
    - pattern: |
        if (secret === $X) {
            ...
        }
    - pattern: |
        if ($X === secret) {
            ...
        }
    - pattern: |
        if (api == $X) {
            ...
        }
    - pattern: |
        if ($X == api) {
            ...
        }
    - pattern: |
        if (api === $X) {
            ...
        }
    - pattern: |
        if ($X === api) {
            ...
        }
    - pattern: |
        if (apiKey == $X) {
            ...
        }
    - pattern: |
        if ($X == apiKey) {
            ...
        }
    - pattern: |
        if (apiKey === $X) {
            ...
        }
    - pattern: |
        if ($X === apiKey) {
            ...
        }
    - pattern: |
        if (apiSecret == $X) {
            ...
        }
    - pattern: |
        if ($X == apiSecret) {
            ...
        }
    - pattern: |
        if (apiSecret === $X) {
            ...
        }
    - pattern: |
        if ($X === apiSecret) {
            ...
        }
    - pattern: |
        if (token == $X) {
            ...
        }
    - pattern: |
        if ($X == token) {
            ...
        }
    - pattern: |
        if (token === $X) {
            ...
        }
    - pattern: |
        if ($X === token) {
            ...
        }
    - pattern: |
        if (hash == $X) {
            ...
        }
    - pattern: |
        if ($X == hash) {
            ...
        }
    - pattern: |
        if (hash === $X) {
            ...
        }
    - pattern: |
        if ($X === hash) {
            ...
        }
    - pattern: |
        if (auth_token == $X) {
            ...
        }
    - pattern: |
        if ($X == auth_token) {
            ...
        }
    - pattern: |
        if (auth_token === $X) {
            ...
        }
    - pattern: |
        if ($X === auth_token) {
            ...
        }
    - pattern: |
        if (password != $X) {
            ...
        }
    - pattern: |
        if ($X != password) {
            ...
        }
    - pattern: |
        if (password !== $X) {
            ...
        }
    - pattern: |
        if ($X !== password) {
            ...
        }
    - pattern: |
        if (pass != $X) {
            ...
        }
    - pattern: |
        if ($X != pass) {
            ...
        }
    - pattern: |
        if (pass !== $X) {
            ...
        }
    - pattern: |
        if ($X !== pass) {
            ...
        }
    - pattern: |
        if (secret != $X) {
            ...
        }
    - pattern: |
        if ($X != secret) {
            ...
        }
    - pattern: |
        if (secret !== $X) {
            ...
        }
    - pattern: |
        if ($X !== secret) {
            ...
        }
    - pattern: |
        if (api != $X) {
            ...
        }
    - pattern: |
        if ($X != api) {
            ...
        }
    - pattern: |
        if (api !== $X) {
            ...
        }
    - pattern: |
        if ($X !== api) {
            ...
        }
    - pattern: |
        if (apiKey != $X) {
            ...
        }
    - pattern: |
        if ($X != apiKey) {
            ...
        }
    - pattern: |
        if (apiKey !== $X) {
            ...
        }
    - pattern: |
        if ($X !== apiKey) {
            ...
        }
    - pattern: |
        if (apiSecret != $X) {
            ...
        }
    - pattern: |
        if ($X != apiSecret) {
            ...
        }
    - pattern: |
        if (apiSecret !== $X) {
            ...
        }
    - pattern: |
        if ($X !== apiSecret) {
            ...
        }
    - pattern: |
        if (token != $X) {
            ...
        }
    - pattern: |
        if ($X != token) {
            ...
        }
    - pattern: |
        if (token !== $X) {
            ...
        }
    - pattern: |
        if ($X !== token) {
            ...
        }
    - pattern: |
        if (hash != $X) {
            ...
        }
    - pattern: |
        if ($X != hash) {
            ...
        }
    - pattern: |
        if (hash !== $X) {
            ...
        }
    - pattern: |
        if ($X !== hash) {
            ...
        }
    - pattern: |
        if (auth_token != $X) {
            ...
        }
    - pattern: |
        if ($X != auth_token) {
            ...
        }
    - pattern: |
        if (auth_token !== $X) {
            ...
        }
    - pattern: |
        if ($X !== auth_token) {
            ...
        }
    - pattern: 'return $X === auth_token;

        '
    - pattern: 'return auth_token === $X;

        '
    - pattern: 'return $X === token;

        '
    - pattern: 'return token === $X;

        '
    - pattern: 'return $X === hash;

        '
    - pattern: 'return hash === $X;

        '
    - pattern: 'return $X === password;

        '
    - pattern: 'return password === $X;

        '
    - pattern: 'return $X === pass;

        '
    - pattern: 'return pass === $X;

        '
    - pattern: 'return $X === apiKey;

        '
    - pattern: 'return apiKey === $X;

        '
    - pattern: 'return $X === apiSecret;

        '
    - pattern: 'return apiSecret === $X;

        '
    - pattern: 'return $X === api_key;

        '
    - pattern: 'return api_key === $X;

        '
    - pattern: 'return $X === api_secret;

        '
    - pattern: 'return api_secret === $X;

        '
    - pattern: 'return $X === secret;

        '
    - pattern: 'return secret === $X;

        '
    - pattern: 'return $X === api;

        '
    - pattern: 'return api === $X;

        '
    - pattern: 'return $X == auth_token;

        '
    - pattern: 'return auth_token == $X;

        '
    - pattern: 'return $X == token;

        '
    - pattern: 'return token == $X;

        '
    - pattern: 'return $X == hash;

        '
    - pattern: 'return hash == $X;

        '
    - pattern: 'return $X == password;

        '
    - pattern: 'return password == $X;

        '
    - pattern: 'return $X == pass;

        '
    - pattern: 'return pass == $X;

        '
    - pattern: 'return $X == apiKey;

        '
    - pattern: 'return apiKey == $X;

        '
    - pattern: 'return $X == apiSecret;

        '
    - pattern: 'return apiSecret == $X;

        '
    - pattern: 'return $X == api_key;

        '
    - pattern: 'return api_key == $X;

        '
    - pattern: 'return $X == api_secret;

        '
    - pattern: 'return api_secret == $X;

        '
    - pattern: 'return $X == secret;

        '
    - pattern: 'return secret == $X;

        '
    - pattern: 'return $X == api;

        '
    - pattern: 'return api == $X;

        '
    - pattern: 'return $X !== auth_token;

        '
    - pattern: 'return auth_token !== $X;

        '
    - pattern: 'return $X !== token;

        '
    - pattern: 'return token !== $X;

        '
    - pattern: 'return $X !== hash;

        '
    - pattern: 'return hash !== $X;

        '
    - pattern: 'return $X !== password;

        '
    - pattern: 'return password !== $X;

        '
    - pattern: 'return $X !== pass;

        '
    - pattern: 'return pass !== $X;

        '
    - pattern: 'return $X !== apiKey;

        '
    - pattern: 'return apiKey !== $X;

        '
    - pattern: 'return $X !== apiSecret;

        '
    - pattern: 'return apiSecret !== $X;

        '
    - pattern: 'return $X !== api_key;

        '
    - pattern: 'return api_key !== $X;

        '
    - pattern: 'return $X !== api_secret;

        '
    - pattern: 'return api_secret !== $X;

        '
    - pattern: 'return $X !== secret;

        '
    - pattern: 'return secret !== $X;

        '
    - pattern: 'return $X !== api;

        '
    - pattern: 'return api !== $X;

        '
    - pattern: 'return $X != auth_token;

        '
    - pattern: 'return auth_token != $X;

        '
    - pattern: 'return $X != token;

        '
    - pattern: 'return token != $X;

        '
    - pattern: 'return $X != hash;

        '
    - pattern: 'return hash != $X;

        '
    - pattern: 'return $X != password;

        '
    - pattern: 'return password != $X;

        '
    - pattern: 'return $X != pass;

        '
    - pattern: 'return pass != $X;

        '
    - pattern: 'return $X != apiKey;

        '
    - pattern: 'return apiKey != $X;

        '
    - pattern: 'return $X != apiSecret;

        '
    - pattern: 'return apiSecret != $X;

        '
    - pattern: 'return $X != api_key;

        '
    - pattern: 'return api_key != $X;

        '
    - pattern: 'return $X != api_secret;

        '
    - pattern: 'return api_secret != $X;

        '
    - pattern: 'return $X != secret;

        '
    - pattern: 'return secret != $X;

        '
    - pattern: 'return $X != api;

        '
    - pattern: 'return api != $X;

        '
  severity: WARNING
  message: |
    The application was found executing string comparisons using one of `===`, `!==`, `==` or `!=`
    against security sensitive values. String comparisons like this are not constant time, meaning
    the
    first character found not to match in the two strings will immediately exit the conditional
    statement.
    This allows an adversary to calculate or observe small timing differences depending on the
    strings
    passed to this comparison. This potentially allows an adversary the ability to brute force a
    string
    that will match the expected value by monitoring different character values.

    To remediate this issue, use the `crypto.timingSafeEqual` method when comparing strings.

    Example using `crypto.timingSafeEqual` to safely compare strings:
    ```
    function constantTimeIsPasswordEqual(userInput) {
        // Retrieve the password from a secure data store such as a KMS or Hashicorp's vault.
        const password = getPasswordFromSecureDataStore();
        // Use crypto timingSafeEqual to ensure the comparison is done in constant time.
        return crypto.timingSafeEqual(Buffer.from(userInput, 'utf-8'), Buffer.from(password,
    'utf-8'));
    }
    ```

    For more information on constant time comparison see:
    - https://nodejs.org/api/crypto.html#crypto_crypto_timingsafeequal_a_b
  metadata:
    cwe: CWE-208
    shortDescription: Observable timing discrepancy
    category: security
    primary_identifier: eslint.detect-possible-timing-attacks
    secondary_identifiers:
    - name: ESLint rule ID/detect-possible-timing-attacks
      type: eslint_rule_id
      value: detect-possible-timing-attacks
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.eslint.detect-possible-timing-attacks
    shortlink: https://sg.run/GwwB
    semgrep.dev:
      rule:
        rule_id: 4bU22N
        version_id: l4T4rD7
        url: https://semgrep.dev/playground/r/l4T4rD7/gitlab.eslint.detect-possible-timing-attacks
        origin: community
- id: gitlab.eslint.detect-pseudoRandomBytes
  languages:
  - javascript
  - typescript
  pattern: crypto.pseudoRandomBytes
  severity: WARNING
  message: |
    Depending on the context, generating weak random numbers may expose cryptographic functions,
    which rely on these numbers, to be exploitable. When generating numbers for sensitive values
    such as tokens, nonces, and cryptographic keys, it is recommended that the `randomBytes` method
    of the `crypto` module be used instead of `pseudoRandomBytes`.

    Example using `randomBytes`:
    ```
    // Generate 256 bytes of random data
    const randomBytes = crypto.randomBytes(256);
    ```

    For more information on JavaScript Cryptography see:
    https://nodejs.org/api/crypto.html#cryptorandombytessize-callback
  metadata:
    cwe: CWE-338
    shortDescription: Use of cryptographically weak pseudo-random number generator
      (PRNG)
    category: security
    source-rule-url: https://github.com/nodesecurity/eslint-plugin-security/blob/master/rules/detect-pseudoRandomBytes.js
    primary_identifier: eslint.detect-pseudoRandomBytes
    secondary_identifiers:
    - name: ESLint rule ID/detect-pseudoRandomBytes
      type: eslint_rule_id
      value: detect-pseudoRandomBytes
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.eslint.detect-pseudoRandomBytes
    shortlink: https://sg.run/P88N
    semgrep.dev:
      rule:
        rule_id: gxUYYL
        version_id: WrTWlnn
        url: https://semgrep.dev/playground/r/WrTWlnn/gitlab.eslint.detect-pseudoRandomBytes
        origin: community
- id: gitlab.eslint.react-dangerouslysetinnerhtml
  languages:
  - typescript
  - javascript
  pattern-either:
  - pattern: "<$X dangerouslySetInnerHTML=... />\n"
  - pattern: "{dangerouslySetInnerHTML: ...}\n"
  severity: WARNING
  message: |
    The application was found calling `dangerouslySetInnerHTML` which may lead to Cross Site
    Scripting (XSS). By default, React components will encode the data properly before rendering.
    Calling `dangerouslySetInnerHTML` disables this encoding and allows raw markup
    and JavaScript to be executed.

    XSS is an attack which exploits a web application or system to treat
    user input as markup or script code. It is important to encode the data, depending on the
    specific context it is used in. There are at least six context types:

    - Inside HTML tags `<div>context 1</div>`
    - Inside attributes: `<div class="context 2"></div>`
    - Inside event attributes `<button onclick="context 3">button</button>`
    - Inside script blocks: `<script>var x = "context 4"</script>`
    - Unsafe element HTML assignment: `element.innerHTML = "context 5"`
    - Inside URLs: `<iframe src="context 6"></iframe><a href="context 6">link</a>`

    Script blocks alone have multiple ways they need to be encoded. Extra care must be taken if
    user input
    is ever output inside of script tags.

    User input that is displayed within the application must be encoded, sanitized or validated
    to ensure it cannot be treated as HTML or executed as Javascript code. Care must also be
    taken
    to not mix server-side templating with client-side templating, as the server-side templating
    will
    not encode things like {{ 7*7 }} which may execute client-side templating features.

    It is _NOT_ advised to encode user input prior to inserting into a data store. The data will
    need to be
    encoded depending on context of where it is output. It is much safer to force the displaying
    system to
    handle the encoding and not attempt to guess how it should be encoded.

    Remove the call to `dangerouslySetInnerHTML` or ensure that the data used in this call does
    not come from user-supplied input.

    For more information on dangerously setting inner HTML see:
    - https://react.dev/reference/react-dom/components/common#dangerously-setting-the-inner-html
  metadata:
    cwe: CWE-79
    owasp: A7:2017-Cross-Site Scripting (XSS)
    shortDescription: Improper neutralization of input during web page generation
      ('Cross-site Scripting')
    category: security
    primary_identifier: eslint.react-dangerouslysetinnerhtml
    secondary_identifiers:
    - name: ESLint rule ID/react-dangerouslysetinnerhtml
      type: eslint_rule_id
      value: react-dangerouslysetinnerhtml
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.eslint.react-dangerouslysetinnerhtml
    shortlink: https://sg.run/Awwg
    semgrep.dev:
      rule:
        rule_id: JDUQQY
        version_id: 0bTL73z
        url: https://semgrep.dev/playground/r/0bTL73z/gitlab.eslint.react-dangerouslysetinnerhtml
        origin: community
- id: gitlab.find_sec_bugs.BAD_HEXA_CONVERSION-1
  languages:
  - java
  message: |
    The application is using `Integer.toHexString` on a digest array buffer which
    may lead to an incorrect version of values.

    Consider using the `HexFormat` object introduced in Java 17. For older Java applications
    consider using the `javax.xml.bind.DatatypeConverter`.

    Example using `HexFormat` to create a human-readable string:
    ```
    // Create a MessageDigest using the SHA-384 algorithm
    MessageDigest sha384Digest = MessageDigest.getInstance("SHA-384");
    // Call update with your data
    sha384Digest.update("some input".getBytes(StandardCharsets.UTF_8));
    // Only call digest once all data has been fed into the update sha384digest instance
    byte[] output = sha384Digest.digest();
    // Create a JDK 17 HexFormat object
    HexFormat hex = HexFormat.of();
    // Use formatHex on the byte array to create a string (note that alphabet characters are
    lowercase)
    String hexString = hex.formatHex(output);
    ```

    For more information on DatatypeConverter see:
    https://docs.oracle.com/javase/9/docs/api/javax/xml/bind/DatatypeConverter.html#printHexBinary-byte:A-
  metadata:
    shortDescription: Incorrect type conversion or cast
    cwe: CWE-704
    category: security
    confidence: HIGH
    primary_identifier: find_sec_bugs.BAD_HEXA_CONVERSION-1
    secondary_identifiers:
    - name: Find Security Bugs-BAD_HEXA_CONVERSION
      type: find_sec_bugs_type
      value: BAD_HEXA_CONVERSION
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.BAD_HEXA_CONVERSION-1
    shortlink: https://sg.run/kD4K
    semgrep.dev:
      rule:
        rule_id: 2ZUd06
        version_id: 9lTdow6
        url: https://semgrep.dev/playground/r/9lTdow6/gitlab.find_sec_bugs.BAD_HEXA_CONVERSION-1
        origin: community
  patterns:
  - pattern: |
      $B_ARR = (java.security.MessageDigest $MD).digest(...);
      ...
      for(...) {
        ...
        Integer.toHexString(...);
      }
  severity: WARNING
- id: gitlab.find_sec_bugs.BLOWFISH_KEY_SIZE-1
  languages:
  - java
  patterns:
  - pattern-inside: |
      $KEYGEN = javax.crypto.KeyGenerator.getInstance("Blowfish", ...);
      ...
      $KEYGEN.init($KEY_SIZE);
  - metavariable-comparison:
      comparison: "$KEY_SIZE < 128"
      metavariable: "$KEY_SIZE"
  message: |
    The Blowfish encryption algorithm was meant as a drop-in replacement for DES and was created in
    1993. Smaller key sizes may make the ciphertext vulnerable to [birthday
    attacks](https://en.wikipedia.org/wiki/Birthday_attack). While no known attacks against
    Blowfish
    exist, it should never be used to encrypt files over 4GB in size. If possible consider
    using AES as the instance of `KeyGenerator` instead of Blowfish.

    To remediate the small key size, pass a value such as 256 to the `KeyGenerator.init(keySize)`
    method.

    Example setting a larger key size and changing to `KeyGenerator` to AES:
    ```
    public static void aesKeyGenerator() throws java.security.NoSuchAlgorithmException {
        // Use the AES algorithm for key generation
        KeyGenerator keyGenerator = KeyGenerator.getInstance("AES");

        // Set the key size here
        keyGenerator.init(256);

        // get the raw bytes of the key
        byte[] key = keyGenerator.generateKey().getEncoded();

        // pass the key bytes to create a SecretKeySpec
        SecretKeySpec secretKeySpec = new SecretKeySpec(key, "AES");
    }
    ```

    Example setting a larger key size for Blowfish:
    ```
    public static void blowFishKeyGenerator() throws java.security.NoSuchAlgorithmException {
        // Use the Blowfish algorithm for key generation
        KeyGenerator keyGenerator = KeyGenerator.getInstance("Blowfish");

        // Set the key size here
        keyGenerator.init(256);

        // get the raw bytes of the key
        byte[] key = keyGenerator.generateKey().getEncoded();

        // pass the key bytes to create a SecretKeySpec
        SecretKeySpec secretKeySpec = new SecretKeySpec(key, "Blowfish");
    }
    ```

    For more information on Java Cryptography see:
    https://docs.oracle.com/en/java/javase/15/security/java-cryptography-architecture-jca-reference-guide.html
  severity: WARNING
  metadata:
    category: security
    shortDescription: Inadequate encryption strength
    cwe: CWE-326
    technology:
    - java
    primary_identifier: find_sec_bugs.BLOWFISH_KEY_SIZE-1
    secondary_identifiers:
    - name: Find Security Bugs-BLOWFISH_KEY_SIZE
      type: find_sec_bugs_type
      value: BLOWFISH_KEY_SIZE
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.BLOWFISH_KEY_SIZE-1
    shortlink: https://sg.run/NjB1
    semgrep.dev:
      rule:
        rule_id: 2ZUd1P
        version_id: rxTyoKw
        url: https://semgrep.dev/playground/r/rxTyoKw/gitlab.find_sec_bugs.BLOWFISH_KEY_SIZE-1
        origin: community
- id: gitlab.find_sec_bugs.CIPHER_INTEGRITY-1
  languages:
  - java
  patterns:
  - pattern-inside: javax.crypto.Cipher.getInstance("...")
  - pattern-either:
    - pattern-regex: "(/CBC/PKCS5Padding)"
    - pattern-regex: "(AES|DES(ede)?)(/ECB/*)"
  - pattern-not-regex: ".*/(CCM|CWC|OCB|EAX|GCM)/.*"
  - pattern-not-regex: "^(RSA)/.*"
  - pattern-not-regex: "^(ECIES)$"
  message: |
    Cryptographic algorithms provide many different modes of operation, only some of which provide
    message integrity. Without message integrity it could be possible for an adversary to attempt
    to tamper with the ciphertext which could lead to compromising the encryption key. Newer
    algorithms
    apply message integrity to validate ciphertext has not been tampered with.

    Instead of using an algorithm that requires configuring a cipher mode, an algorithm
    that has built-in message integrity should be used. Consider using `ChaCha20Poly1305` or
    `AES-256-GCM` instead.

    For older applications that don't have support for `ChaCha20Poly1305`, `AES-256-GCM` is
    recommended, however it has many drawbacks:
      - Slower than `ChaCha20Poly1305`.
      - Catastrophic failure if nonce values are reused.

    Example using `ChaCha20Poly1305`:
    ```
    public encrypt() throws Exception {
        chaChaEncryption("Secret text to encrypt".getBytes(StandardCharsets.UTF_8));
    }

    public SecureRandom getSecureRandomDRBG() throws NoSuchAlgorithmException {
    // Use DRBG according to
    http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-90Ar1.pdf
        return SecureRandom.getInstance("DRBG",
                // Security strength in bits (default is 128)
                DrbgParameters.instantiation(256,
                    // Set prediction resistance and re-seeding
                    DrbgParameters.Capability.PR_AND_RESEED,
                    // Set the personalization string (optional, not necessary)
                    "some_personalization_string".getBytes()
                )
        );
    }

    public Cipher getChaCha20Poly1305(int mode, byte[] ivKey, byte[] secretKey) throws
    NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException,
    InvalidAlgorithmParameterException  {
        // Get a DRBG random number generator instance
        SecureRandom random = getSecureRandomDRBG();
        // Create a ChaCha20-Poly1305 cipher instance
        Cipher chaChaCipher = Cipher.getInstance("ChaCha20-Poly1305/None/NoPadding");
        // Create our parameterSpec using our ivKey
        AlgorithmParameterSpec parameterSpec = new IvParameterSpec(ivKey);
        // Create a SecretKeySpec using our secretKey
        SecretKeySpec secretKeySpec = new SecretKeySpec(secretKey, "ChaCha20");
        // Initialize and return the cipher for the provided mode
        chaChaCipher.init(mode, secretKeySpec, parameterSpec, random);
        return chaChaCipher;
    }

    public void chaChaEncryption(byte[] plainText) throws NoSuchAlgorithmException,
    NoSuchPaddingException, InvalidKeyException, InvalidAlgorithmParameterException {
        // Get a DRBG random number generator instance
        SecureRandom random = getSecureRandomDRBG();
        // Create secretKey
        byte[] secretKey = new byte[32];
        random.nextBytes(secretKey);
        // Create an IV Key
        byte[] ivKey = new byte[12];
        random.nextBytes(ivKey);

        // Create a chaCha encryption cipher instance
        Cipher chaChaEncryptor = getChaCha20Poly1305(Cipher.ENCRYPT_MODE, ivKey, secretKey);

        // Encrypt the text using ChaCha20Poly1305
        byte[] cipherText = null;
        try {
            cipherText = chaChaEncryptor.doFinal(plainText);
        } catch (IllegalBlockSizeException | BadPaddingException e) {
            System.out.println("failed to encrypt text");
            return;
        }
        System.out.println("encrypted: " + Base64.getEncoder().encodeToString(cipherText));

         // Create a chaCha decryption cipher instance
        Cipher chaChaDecryptor = getChaCha20Poly1305(Cipher.DECRYPT_MODE, ivKey, secretKey);

        // Decrypt the text
        byte[] decryptedText = null;
        try {
            decryptedText = chaChaDecryptor.doFinal(cipherText);
        } catch (IllegalBlockSizeException | BadPaddingException e) {
            System.out.println("failed to decrypt text");
            return;
        }
        System.out.println("decrypted: " + new String(decryptedText, StandardCharsets.UTF_8));
    }
    ```

    For more information on Java Cryptography see:
    https://docs.oracle.com/en/java/javase/15/security/java-cryptography-architecture-jca-reference-guide.html
  severity: ERROR
  metadata:
    shortDescription: Use of a broken or risky cryptographic algorithm
    category: security
    cwe: CWE-327
    technology:
    - java
    primary_identifier: find_sec_bugs.CIPHER_INTEGRITY-1
    secondary_identifiers:
    - name: Find Security Bugs-CIPHER_INTEGRITY
      type: find_sec_bugs_type
      value: CIPHER_INTEGRITY
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.CIPHER_INTEGRITY-1
    shortlink: https://sg.run/O4Db
    semgrep.dev:
      rule:
        rule_id: 9AUAzy
        version_id: w8T9zoK
        url: https://semgrep.dev/playground/r/w8T9zoK/gitlab.find_sec_bugs.CIPHER_INTEGRITY-1
        origin: community
- id: gitlab.find_sec_bugs.COMMAND_INJECTION-1
  languages:
  - java
  pattern-either:
  - patterns:
    - pattern-inside: |
        $FUNC(...,String $PARAM, ...) {
          ...
        }
    - pattern-either:
      - pattern: "(Runtime $R).exec(<...$PARAM...>,...);"
      - patterns:
        - pattern-either:
          - pattern: |
              $CMDARR = new String[]{"$SHELL",...,<...$PARAM...>,...};
              ...
              (Runtime $R).exec($CMDARR,...);
          - pattern: |
              String[] $CMDARR = {"$SHELL",...,<...$PARAM...>,...};
              ...
              (Runtime $R).exec($CMDARR,...);
          - pattern: (Runtime $R).exec(new String[]{"$SHELL",...,<...$PARAM...>,...},
              ...);
          - pattern: (Runtime $R).exec(java.util.String.format("...", ...,<...$PARAM...>,...));
          - pattern: "(Runtime $R).exec((String $A) + (String $B));"
        - metavariable-regex:
            metavariable: "$SHELL"
            regex: "(/.../)?(sh|bash|ksh|csh|tcsh|zsh)$"
    - pattern-not: (Runtime $R).exec("...","...","...",...);
    - pattern-not: '(Runtime $R).exec(new String[]{"...","...","...",...},...);

        '
  - patterns:
    - pattern-inside: |
        $FUNC(...,String $PARAM, ...) {
          ...
        }
    - pattern-either:
      - pattern: "(ProcessBuilder $PB).command(<...$PARAM...>,...);"
      - patterns:
        - pattern-inside: "$VAL = <...$PARAM...>; ..."
        - pattern: "(ProcessBuilder $PB).command(<...$VAL...>,...);"
      - patterns:
        - pattern-either:
          - pattern: (ProcessBuilder $PB).command("$SHELL",...,<...$PARAM...>,...);
          - pattern: |
              $CMDARR = java.util.Arrays.asList("$SHELL",...,<...$PARAM...>,...);
              ...
              (ProcessBuilder $PB).command($CMDARR,...);
          - pattern: (ProcessBuilder $PB).command(java.util.Arrays.asList("$SHELL",...,<...$PARAM...>,...),...);
          - pattern: (ProcessBuilder $PB).command(java.util.String.format("...", ...,<...$PARAM...>,...));
          - pattern: "(ProcessBuilder $PB).command((String $A) + (String $B));"
        - metavariable-regex:
            metavariable: "$SHELL"
            regex: "(/.../)?(sh|bash|ksh|csh|tcsh|zsh)$"
    - pattern-not: (ProcessBuilder $PB).command("...","...","...",...);
    - pattern-not: '(ProcessBuilder $PB).command(java.util.Arrays.asList("...","...","...",...));

        '
  message: |
    OS command injection is a critical vulnerability that can lead to a full system
    compromise as it may allow an adversary to pass in arbitrary commands or arguments
    to be executed.

    User input should never be used in constructing commands or command arguments
    to functions which execute OS commands. This includes filenames supplied by
    user uploads or downloads.

    Ensure your application does not:

    - Use user-supplied information in the process name to execute.
    - Use user-supplied information in an OS command execution function which does
    not escape shell meta-characters.
    - Use user-supplied information in arguments to OS commands.

    The application should have a hardcoded set of arguments that are to be passed
    to OS commands. If filenames are being passed to these functions, it is
    recommended that a hash of the filename be used instead, or some other unique
    identifier. It is strongly recommended that a native library that implements
    the same functionality be used instead of using OS system commands, due to the
    risk of unknown attacks against third party commands.

    When specifying the OS command, ensure the application uses the full path
    information, otherwise the OS may attempt to look up which process to execute
    and could be vulnerable to untrusted search path vulnerabilities (CWE-426).

    Example of safely executing an OS command:
    ```
    public static void executeCommand(String userFileData) throws java.io.IOException {
        // Generate a random filename, do not use user input
        String fileName = UUID.randomUUID().toString();
        // Create a Buffered/FileWriter
        BufferedWriter writer = new BufferedWriter(new FileWriter(fileName));
        // Write the user content to our random file
        writer.write(userFileData);
        // Close the file to flush contents
        writer.close();
        // Create the process builder with a hardcoded path to the binary, and our randomly
    generated filename
        ProcessBuilder processBuilder = new ProcessBuilder("/opt/app/path", fileName);
        // Start the process
        Process process = processBuilder.start();
        // Handle/redirect output of process here
        // ...
    }
    ```

    For more information on OS command injection, see OWASP's guide:
    https://cheatsheetseries.owasp.org/cheatsheets/OS_Command_Injection_Defense_Cheat_Sheet.html
  severity: WARNING
  metadata:
    shortDescription: Improper neutralization of special elements used in an OS command
      ('OS Command Injection')
    category: security
    cwe: CWE-78
    technology:
    - java
    primary_identifier: find_sec_bugs.COMMAND_INJECTION-1
    secondary_identifiers:
    - name: Find Security Bugs-COMMAND_INJECTION
      type: find_sec_bugs_type
      value: COMMAND_INJECTION
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.COMMAND_INJECTION-1
    shortlink: https://sg.run/WDoz
    semgrep.dev:
      rule:
        rule_id: PeUjYP
        version_id: WrTWlKn
        url: https://semgrep.dev/playground/r/WrTWlKn/gitlab.find_sec_bugs.COMMAND_INJECTION-1
        origin: community
- id: gitlab.find_sec_bugs.CRLF_INJECTION_LOGS-1
  languages:
  - java
  patterns:
  - pattern-either:
    - pattern: |
        $TAINTED = (HttpServletRequest $REQ).getParameter(...);
        ...
        $LOGGER.$METHOD(...,$TAINTED,...);
    - pattern: |
        $TAINTED = (HttpServletRequest $REQ).getParameter(...);
        ...
        $VAR = String.Format(..., $TAINTED,...);
        ...
        $LOGGER.$METHOD(...,$VAR,...);
    - pattern: |
        $TAINTED = (HttpServletRequest $REQ).getParameter(...);
        ...
        $LOGGER.$METHOD(...,String.Format(..., $TAINTED,...),...);
    - pattern: |
        $TAINTED = (HttpServletRequest $REQ).getParameter(...);
        ...
        $VAR = ... + $TAINTED + ...;
        ...
        $LOGGER.$METHOD(...,$VAR,...);
    - pattern: |
        $TAINTED = (HttpServletRequest $REQ).getParameter(...);
        ...
        $LOGGER.$METHOD(...,... + $TAINTED + ...,...);
  - metavariable-regex:
      metavariable: "$METHOD"
      regex: "(log|logp|logrb|entering|exiting|fine|finer|finest|info|debug|trace|warn|warning|config|error|severe)"
  - metavariable-pattern:
      metavariable: "$LOGGER"
      pattern-either:
      - pattern: "(Logger $LOG)"
      - pattern: org.pmw.tinylog.Logger
      - pattern: org.apache.log4j.Logger
      - pattern: org.apache.logging.log4j.Logger
      - pattern: org.slf4j.Logger
      - pattern: org.apache.commons.logging.Log
      - pattern: java.util.logging.Logger
  message: |
    The application was found to take data from user input and output it into a logger method.
    When data from
    an untrusted source is sent to a logger without validation, an attacker could forge log
    entries
    or include malicious content. If the log file is processed automatically, the attacker can
    render the file unusable by corrupting the format of the file or injecting unexpected
    characters. An attacker may also inject code or other commands into the log file and take
    advantage of a vulnerability in the log processing utility (e.g. command injection or XSS).

    To mitigate this issue, encode values that come from user input with a package such as
    [Apache Commons Text](https://commons.apache.org/proper/commons-text/) to escape the input:
    ```
    public String escapeValue(String value) {
      return StringEscapeUtils.escapeJava(value);
    }
    ```

    For more information on log injection see OWASP:
    https://owasp.org/www-community/attacks/Log_Injection
  severity: ERROR
  metadata:
    shortDescription: Improper neutralization of CRLF sequences ('CRLF Injection')
    category: security
    cwe: CWE-93
    technology:
    - java
    primary_identifier: find_sec_bugs.CRLF_INJECTION_LOGS-1
    secondary_identifiers:
    - name: Find Security Bugs-CRLF_INJECTION_LOGS
      type: find_sec_bugs_type
      value: CRLF_INJECTION_LOGS
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.CRLF_INJECTION_LOGS-1
    shortlink: https://sg.run/De7W
    semgrep.dev:
      rule:
        rule_id: 4bUeor
        version_id: DkT69b0
        url: https://semgrep.dev/playground/r/DkT69b0/gitlab.find_sec_bugs.CRLF_INJECTION_LOGS-1
        origin: community
- id: gitlab.find_sec_bugs.CUSTOM_INJECTION-1
  languages:
  - java
  patterns:
  - pattern-either:
    - pattern: |
        $QUERY = ... + $VAR + ...;
        ...
        $ST.executeQuery($QUERY);
    - pattern: |
        $QUERY = ... + $VAR ;
        ...
        $ST.executeQuery($QUERY);
    - pattern: |
        $QUERY = String.format("...",...,$VAR,...);
        ...
        $ST.executeQuery($QUERY);
    - pattern: "$ST.executeQuery((StringBuilder $SB).toString());"
    - pattern: "$ST.executeQuery(... + $VAR + ...);"
    - pattern: "$ST.executeQuery(... + $VAR);"
    - pattern: $ST.executeQuery(...,String.format("...",...,$VAR,...), ...);
  - metavariable-pattern:
      metavariable: "$ST"
      pattern-either:
      - pattern: "(java.sql.Statement $ST)"
      - pattern: "(org.apache.turbine.om.peer.BasePeer $ST)"
  message: |
    SQL Injection is a critical vulnerability that can lead to data or system compromise. By
    dynamically generating SQL query strings, user input may be able to influence the logic of
    the SQL statement. This could lead to an adversary accessing information they should
    not have access to, or in some circumstances, being able to execute OS functionality or code.

    Replace all dynamically generated SQL queries with parameterized queries. In situations where
    dynamic queries must be created, never use direct user input, but instead use a map or
    dictionary of valid values and resolve them using a user-supplied key.

    For example, some database drivers do not allow parameterized queries for `>` or `<` comparison
    operators. In these cases, do not use a user supplied `>` or `<` value, but rather have the
    user
    supply a `gt` or `lt` value. The alphabetical values are then used to look up the `>` and `<`
    values to be used in the construction of the dynamic query. The same goes for other queries
    where
    column or table names are required but cannot be parameterized.

    Example using `PreparedStatement` queries:
    ```
    // Some userInput
    String userInput = "someUserInput";
    // Your connection string
    String url = "...";
    // Get a connection from the DB via the DriverManager
    Connection conn = DriverManager.getConnection(url);
    // Create a prepared statement
    PreparedStatement st = conn.prepareStatement("SELECT name FROM table where name=?");
    // Set each parameters value by the index (starting from 1)
    st.setString(1, userInput);
    // Execute query and get the result set
    ResultSet rs = st.executeQuery();
    // Iterate over results
    while (rs.next()) {
        // Get result for this row at the provided column number (starting from 1)
        String result = rs.getString(1);
        // ...
    }
    // Close the ResultSet
    rs.close();
    // Close the PreparedStatement
    st.close();
    ```

    For more information on SQL Injection see OWASP:
    https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html
  severity: WARNING
  metadata:
    shortDescription: Improper neutralization of special elements used in an SQL command
      ('SQL Injection')
    category: security
    cwe: CWE-89
    technology:
    - java
    primary_identifier: find_sec_bugs.CUSTOM_INJECTION-1
    secondary_identifiers:
    - name: Find Security Bugs-CUSTOM_INJECTION
      type: find_sec_bugs_type
      value: CUSTOM_INJECTION
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.CUSTOM_INJECTION-1
    shortlink: https://sg.run/0WpJ
    semgrep.dev:
      rule:
        rule_id: JDUoqr
        version_id: 0bTL7zz
        url: https://semgrep.dev/playground/r/0bTL7zz/gitlab.find_sec_bugs.CUSTOM_INJECTION-1
        origin: community
- id: gitlab.find_sec_bugs.CUSTOM_MESSAGE_DIGEST-1
  languages:
  - java
  patterns:
  - pattern: |
      class $CLAZZ extends java.security.MessageDigest {
        ...
      }
  message: |
    The application was found implementing a custom `java.security.MessageDigest`. It is
    strongly recommended that a standard Digest algorithm be chosen instead as implementing
    a digest by hand is error-prone. The National Institute of Standards and
    Technology (NIST) recommends the use of SHA-224, SHA-256, SHA-384, SHA-512, SHA-512/224, or
    SHA-512/256.

    Example of creating a SHA-384 hash:
    ```
    // Create a MessageDigest using the SHA-384 algorithm
    MessageDigest sha384Digest = MessageDigest.getInstance("SHA-384");
    // Call update with your data
    sha384Digest.update(input);
    // Only call digest once all data has been fed into the update sha384digest instance
    byte[] output = sha384Digest.digest();
    // output base64 encoded version of the hash
    System.out.println("hash: " + Base64.getEncoder().encodeToString(output));
    ```
  severity: WARNING
  metadata:
    shortDescription: Use of a broken or risky cryptographic algorithm
    category: security
    cwe: CWE-327
    technology:
    - java
    primary_identifier: find_sec_bugs.CUSTOM_MESSAGE_DIGEST-1
    secondary_identifiers:
    - name: Find Security Bugs-CUSTOM_MESSAGE_DIGEST
      type: find_sec_bugs_type
      value: CUSTOM_MESSAGE_DIGEST
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.CUSTOM_MESSAGE_DIGEST-1
    shortlink: https://sg.run/vpAR
    semgrep.dev:
      rule:
        rule_id: r6Ujx4
        version_id: O9TNnxd
        url: https://semgrep.dev/playground/r/O9TNnxd/gitlab.find_sec_bugs.CUSTOM_MESSAGE_DIGEST-1
        origin: community
- id: gitlab.find_sec_bugs.DANGEROUS_PERMISSION_COMBINATION-1
  pattern-either:
  - pattern: |
      $RUNVAR = new RuntimePermission("createClassLoader");
      ...
      (PermissionCollection $PC).add($RUNVAR);
  - pattern: |
      $REFVAR = new ReflectPermission("suppressAccessChecks");
      ...
      (PermissionCollection $PC).add($REFVAR);
  - pattern: (PermissionCollection $PC).add(new ReflectPermission("suppressAccessChecks"))
  - pattern: (PermissionCollection $PC).add(new RuntimePermission("createClassLoader"))
  languages:
  - java
  message: |
    The application was found to permit the `RuntimePermission` of `createClassLoader`,
    `ReflectPermission` of `suppressAccessChecks`, or both.

    By granting the `RuntimePermission` of `createClassLoader`, a compromised application
    could instantiate their own class loaders and load arbitrary classes.

    By granting the `ReflectPermission` of `suppressAccessChecks` an application will no longer
    check Java language access checks on fields and methods of a class. This will effectively
    grant access to protected and private members.

    For more information on `RuntimePermission` see:
    https://docs.oracle.com/javase/8/docs/api/java/lang/RuntimePermission.html

    For more information on `ReflectPermission` see:
    https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/ReflectPermission.html
  metadata:
    shortDescription: Improper privilege management
    category: security
    cwe: CWE-269
    confidence: HIGH
    primary_identifier: find_sec_bugs.DANGEROUS_PERMISSION_COMBINATION-1
    secondary_identifiers:
    - name: Find Security Bugs-DANGEROUS_PERMISSION_COMBINATION
      type: find_sec_bugs_type
      value: DANGEROUS_PERMISSION_COMBINATION
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.DANGEROUS_PERMISSION_COMBINATION-1
    shortlink: https://sg.run/2kN5
    semgrep.dev:
      rule:
        rule_id: 0oUpO1
        version_id: YDTp67l
        url: https://semgrep.dev/playground/r/YDTp67l/gitlab.find_sec_bugs.DANGEROUS_PERMISSION_COMBINATION-1
        origin: community
  severity: WARNING
- id: gitlab.find_sec_bugs.DES_USAGE-1
  languages:
  - java
  patterns:
  - pattern-inside: javax.crypto.Cipher.getInstance("$ALG")
  - metavariable-regex:
      metavariable: "$ALG"
      regex: "^(DES)/.*"
  message: |
    DES, TripleDES and RC2 are all considered broken or insecure cryptographic algorithms.
    Newer algorithms  apply message integrity to validate ciphertext has not been tampered
    with. Consider using `ChaCha20Poly1305` instead as it is easier and faster than the
    alternatives such as `AES-256-GCM`.

    For older applications that don't have support for `ChaCha20Poly1305`,
    `AES-256-GCM` is recommended, however it has many drawbacks:
    - Slower than `ChaCha20Poly1305`.
    - Catastrophic failure if nonce values are reused.

    Example using `ChaCha20Poly1305`:
    ```
    public encrypt() throws Exception {
        chaChaEncryption("Secret text to encrypt".getBytes(StandardCharsets.UTF_8));
    }

    public SecureRandom getSecureRandomDRBG() throws NoSuchAlgorithmException {
        // Use DRBG according to
    http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-90Ar1.pdf
        return SecureRandom.getInstance("DRBG",
                // Security strength in bits (default is 128)
                DrbgParameters.instantiation(256,
                    // Set prediction resistance and re-seeding
                    DrbgParameters.Capability.PR_AND_RESEED,
                    // Set the personalization string (optional, not necessary)
                    "some_personalization_string".getBytes()
                )
        );
    }

    public Cipher getChaCha20Poly1305(int mode, byte[] ivKey, byte[] secretKey) throws
    NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException,
    InvalidAlgorithmParameterException  {
        // Get a DRBG random number generator instance
        SecureRandom random = getSecureRandomDRBG();
        // Create a ChaCha20-Poly1305 cipher instance
        Cipher chaChaCipher = Cipher.getInstance("ChaCha20-Poly1305/None/NoPadding");
        // Create our parameterSpec using our ivKey
        AlgorithmParameterSpec parameterSpec = new IvParameterSpec(ivKey);
        // Create a SecretKeySpec using our secretKey
        SecretKeySpec secretKeySpec = new SecretKeySpec(secretKey, "ChaCha20");
        // Initialize and return the cipher for the provided mode
        chaChaCipher.init(mode, secretKeySpec, parameterSpec, random);
        return chaChaCipher;
    }

    public void chaChaEncryption(byte[] plainText) throws NoSuchAlgorithmException,
    NoSuchPaddingException, InvalidKeyException, InvalidAlgorithmParameterException {
        // Get a DRBG random number generator instance
        SecureRandom random = getSecureRandomDRBG();
        // Create secretKey
        byte[] secretKey = new byte[32];
        random.nextBytes(secretKey);
        // Create an IV Key
        byte[] ivKey = new byte[12];
        random.nextBytes(ivKey);

        // Create a chaCha encryption cipher instance
        Cipher chaChaEncryptor = getChaCha20Poly1305(Cipher.ENCRYPT_MODE, ivKey, secretKey);

        // Encrypt the text using ChaCha20Poly1305
        byte[] cipherText = null;
        try {
            cipherText = chaChaEncryptor.doFinal(plainText);
        } catch (IllegalBlockSizeException | BadPaddingException e) {
            System.out.println("failed to encrypt text");
            return;
        }
        System.out.println("encrypted: " + Base64.getEncoder().encodeToString(cipherText));

         // Create a chaCha decryption cipher instance
        Cipher chaChaDecryptor = getChaCha20Poly1305(Cipher.DECRYPT_MODE, ivKey, secretKey);

        // Decrypt the text
        byte[] decryptedText = null;
        try {
            decryptedText = chaChaDecryptor.doFinal(cipherText);
        } catch (IllegalBlockSizeException | BadPaddingException e) {
            System.out.println("failed to decrypt text");
            return;
        }
        System.out.println("decrypted: " + new String(decryptedText, StandardCharsets.UTF_8));
    }
    ```

    For more information on Java Cryptography see:
    https://docs.oracle.com/en/java/javase/15/security/java-cryptography-architecture-jca-reference-guide.html
  severity: WARNING
  metadata:
    shortDescription: Inadequate encryption strength
    category: security
    cwe: CWE-326
    technology:
    - java
    primary_identifier: find_sec_bugs.DES_USAGE-1
    secondary_identifiers:
    - name: Find Security Bugs-DES_USAGE
      type: find_sec_bugs_type
      value: DES_USAGE
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.DES_USAGE-1
    shortlink: https://sg.run/kDnz
    semgrep.dev:
      rule:
        rule_id: X5UAPg
        version_id: bZTbK3z
        url: https://semgrep.dev/playground/r/bZTbK3z/gitlab.find_sec_bugs.DES_USAGE-1
        origin: community
- id: gitlab.find_sec_bugs.DMI_CONSTANT_DB_PASSWORD-1.HARD_CODE_PASSWORD-3
  languages:
  - java
  patterns:
  - pattern: java.sql.DriverManager.getConnection($URI, $USR, "...");
  message: |
    A potential hard-coded password was identified in a database connection string.
    Passwords should not be stored directly in code
    but loaded from secure locations such as a Key Management System (KMS).

    The purpose of using a Key Management System is so access can be audited and keys easily
    rotated
    in the event of a breach. By hardcoding passwords, it will be extremely difficult to determine
    when or if, a key is compromised.

    The recommendation on which KMS to use depends on the environment the application is running
    in:

    - For Google Cloud Platform consider [Cloud Key Management](https://cloud.google.com/kms/docs)
    - For Amazon Web Services consider [AWS Key Management](https://aws.amazon.com/kms/)
    - For on premise or other alternatives to cloud providers, consider [Hashicorp's
    Vault](https://www.vaultproject.io/)
    - For other cloud providers, please see their documentation
  severity: WARNING
  metadata:
    shortDescription: Use of hard-coded password
    category: security
    cwe: CWE-259
    technology:
    - java
    primary_identifier: find_sec_bugs.DMI_CONSTANT_DB_PASSWORD-1.HARD_CODE_PASSWORD-3
    secondary_identifiers:
    - name: Find Security Bugs-DMI_CONSTANT_DB_PASSWORD
      type: find_sec_bugs_type
      value: DMI_CONSTANT_DB_PASSWORD
    - name: Find Security Bugs-HARD_CODE_PASSWORD
      type: find_sec_bugs_type
      value: HARD_CODE_PASSWORD
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.DMI_CONSTANT_DB_PASSWORD-1.HARD_CODE_PASSWORD-3
    shortlink: https://sg.run/qZAx
    semgrep.dev:
      rule:
        rule_id: 5rUN5O
        version_id: K3TvzXY
        url: https://semgrep.dev/playground/r/K3TvzXY/gitlab.find_sec_bugs.DMI_CONSTANT_DB_PASSWORD-1.HARD_CODE_PASSWORD-3
        origin: community
- id: gitlab.find_sec_bugs.DMI_EMPTY_DB_PASSWORD-1.HARD_CODE_PASSWORD-2
  languages:
  - java
  patterns:
  - pattern: java.sql.DriverManager.getConnection($URI, $USR, "");
  message: |
    The application does not provide authentication when communicating a database
    server. It is strongly recommended that the database server be configured with
    authentication and restrict what queries users can execute.

    Please see your database server's documentation on how to configure a password.

    Additionally, passwords should not be stored directly in code
    but loaded from secure locations such as a Key Management System (KMS).

    The purpose of using a Key Management System is so access can be audited and keys easily
    rotated
    in the event of a breach. By hardcoding passwords, it will be extremely difficult to determine
    when or if, a key is compromised.

    The recommendation on which KMS to use depends on the environment the application is running
    in:

    - For Google Cloud Platform consider [Cloud Key Management](https://cloud.google.com/kms/docs)
    - For Amazon Web Services consider [AWS Key Management](https://aws.amazon.com/kms/)
    - For on premise or other alternatives to cloud providers, consider [Hashicorp's
    Vault](https://www.vaultproject.io/)
    - For other cloud providers, please see their documentation
  severity: WARNING
  metadata:
    shortDescription: Missing authentication for critical function (database)
    category: security
    cwe: CWE-306
    technology:
    - java
    primary_identifier: find_sec_bugs.DMI_EMPTY_DB_PASSWORD-1.HARD_CODE_PASSWORD-2
    secondary_identifiers:
    - name: Find Security Bugs-DMI_EMPTY_DB_PASSWORD
      type: find_sec_bugs_type
      value: DMI_EMPTY_DB_PASSWORD
    - name: Find Security Bugs-HARD_CODE_PASSWORD
      type: find_sec_bugs_type
      value: HARD_CODE_PASSWORD
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.DMI_EMPTY_DB_PASSWORD-1.HARD_CODE_PASSWORD-2
    shortlink: https://sg.run/lW3j
    semgrep.dev:
      rule:
        rule_id: GdUow0
        version_id: qkT21yX
        url: https://semgrep.dev/playground/r/qkT21yX/gitlab.find_sec_bugs.DMI_EMPTY_DB_PASSWORD-1.HARD_CODE_PASSWORD-2
        origin: community
- id: gitlab.find_sec_bugs.ECB_MODE-1
  languages:
  - java
  patterns:
  - pattern-inside: javax.crypto.Cipher.getInstance("...")
  - pattern-regex: "(AES|DES(ede)?)(/ECB/*)"
  message: |
    Cryptographic algorithms provide many different modes of operation, only some of which provide
    message integrity. Without message integrity it could be possible for an adversary to attempt
    to tamper with the ciphertext which could lead to compromising the encryption key. Newer
    algorithms
    apply message integrity to validate ciphertext has not been tampered with.

    Instead of using an algorithm that requires configuring a cipher mode, an algorithm
    that has built-in message integrity should be used. Consider using `ChaCha20Poly1305` or
    `AES-256-GCM` instead.

    For older applications that don't have support for `ChaCha20Poly1305`, `AES-256-GCM` is
    recommended, however it has many drawbacks:
      - Slower than `ChaCha20Poly1305`.
      - Catastrophic failure if nonce values are reused.

    Example using `ChaCha20Poly1305`:
    ```
    public encrypt() throws Exception {
        chaChaEncryption("Secret text to encrypt".getBytes(StandardCharsets.UTF_8));
    }

    public SecureRandom getSecureRandomDRBG() throws NoSuchAlgorithmException {
        // Use DRBG according to
    http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-90Ar1.pdf
        return SecureRandom.getInstance("DRBG",
                // Security strength in bits (default is 128)
                DrbgParameters.instantiation(256,
                    // Set prediction resistance and re-seeding
                    DrbgParameters.Capability.PR_AND_RESEED,
                    // Set the personalization string (optional, not necessary)
                    "some_personalization_string".getBytes()
                )
        );
    }

    public Cipher getChaCha20Poly1305(int mode, byte[] ivKey, byte[] secretKey) throws
    NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException,
    InvalidAlgorithmParameterException  {
        // Get a DRBG random number generator instance
        SecureRandom random = getSecureRandomDRBG();
        // Create a ChaCha20-Poly1305 cipher instance
        Cipher chaChaCipher = Cipher.getInstance("ChaCha20-Poly1305/None/NoPadding");
        // Create our parameterSpec using our ivKey
        AlgorithmParameterSpec parameterSpec = new IvParameterSpec(ivKey);
        // Create a SecretKeySpec using our secretKey
        SecretKeySpec secretKeySpec = new SecretKeySpec(secretKey, "ChaCha20");
        // Initialize and return the cipher for the provided mode
        chaChaCipher.init(mode, secretKeySpec, parameterSpec, random);
        return chaChaCipher;
    }

    public void chaChaEncryption(byte[] plainText) throws NoSuchAlgorithmException,
    NoSuchPaddingException, InvalidKeyException, InvalidAlgorithmParameterException {
        // Get a DRBG random number generator instance
        SecureRandom random = getSecureRandomDRBG();
        // Create secretKey
        byte[] secretKey = new byte[32];
        random.nextBytes(secretKey);
        // Create an IV Key
        byte[] ivKey = new byte[12];
        random.nextBytes(ivKey);

        // Create a chaCha encryption cipher instance
        Cipher chaChaEncryptor = getChaCha20Poly1305(Cipher.ENCRYPT_MODE, ivKey, secretKey);

        // Encrypt the text using ChaCha20Poly1305
        byte[] cipherText = null;
        try {
            cipherText = chaChaEncryptor.doFinal(plainText);
        } catch (IllegalBlockSizeException | BadPaddingException e) {
            System.out.println("failed to encrypt text");
            return;
        }
        System.out.println("encrypted: " + Base64.getEncoder().encodeToString(cipherText));

         // Create a chaCha decryption cipher instance
        Cipher chaChaDecryptor = getChaCha20Poly1305(Cipher.DECRYPT_MODE, ivKey, secretKey);

        // Decrypt the text
        byte[] decryptedText = null;
        try {
            decryptedText = chaChaDecryptor.doFinal(cipherText);
        } catch (IllegalBlockSizeException | BadPaddingException e) {
            System.out.println("failed to decrypt text");
            return;
        }
        System.out.println("decrypted: " + new String(decryptedText, StandardCharsets.UTF_8));
    }
    ```

    For more information on Java Cryptography see:
    https://docs.oracle.com/en/java/javase/15/security/java-cryptography-architecture-jca-reference-guide.html
  severity: ERROR
  metadata:
    shortDescription: Use of a broken or risky cryptographic algorithm
    category: security
    cwe: CWE-327
    technology:
    - java
    primary_identifier: find_sec_bugs.ECB_MODE-1
    secondary_identifiers:
    - name: Find Security Bugs-ECB_MODE
      type: find_sec_bugs_type
      value: ECB_MODE
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.ECB_MODE-1
    shortlink: https://sg.run/xPDP
    semgrep.dev:
      rule:
        rule_id: 10U4j4
        version_id: kbTdjGO
        url: https://semgrep.dev/playground/r/kbTdjGO/gitlab.find_sec_bugs.ECB_MODE-1
        origin: community
- id: gitlab.find_sec_bugs.EL_INJECTION-1
  languages:
  - java
  message: |
    An expression is built with a dynamic value. The source of the value(s) should be verified to
    avoid that unfiltered values fall into this risky code evaluation.
  metadata:
    category: security
    cwe: CWE-94
    shortDescription: Improper Control of Generation of Code ('Code Injection')
    technology:
    - java
    primary_identifier: find_sec_bugs.EL_INJECTION-1
    secondary_identifiers:
    - name: Find Security Bugs-EL_INJECTION
      type: find_sec_bugs_type
      value: EL_INJECTION
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.EL_INJECTION-1
    shortlink: https://sg.run/4k1E
    semgrep.dev:
      rule:
        rule_id: GdUo2e
        version_id: qkT217Z
        url: https://semgrep.dev/playground/r/qkT217Z/gitlab.find_sec_bugs.EL_INJECTION-1
        origin: community
  patterns:
  - pattern-inside: |
      $FUNC(..., String $EXPR, ...) {
        ...
        ELContext $CTX = ...;
        ...
      }
  - pattern-either:
    - pattern: "(ExpressionFactory $EXP).createValueExpression((ELContext $CTX), $EXPR,
        ...)"
    - pattern: "(ExpressionFactory $EXP).createMethodExpression((ELContext $CTX),
        $EXPR, ...)"
  severity: WARNING
- id: gitlab.find_sec_bugs.EXTERNAL_CONFIG_CONTROL-1
  languages:
  - java
  patterns:
  - pattern: |
      $TAINTED = (HttpServletRequest $REQ).getParameter(...);
      ...
      (java.sql.Connection $CONN).setCatalog($TAINTED);
  message: |
    The application was found using user-supplied input in a `java.sql.Connection`'s
    `setCatalog` call. This could allow an adversary to supply a different database for the
    lifetime of the connection. Allowing external control of system settings can disrupt service
    or cause an application to behave in unexpected, and potentially malicious ways. Most likely
    this would only cause an error by providing a nonexistent catalog name.

    It is recommended to not use user-supplied input when selecting the database for an
    applications
    database connection.
  severity: WARNING
  metadata:
    shortDescription: External control of system or configuration setting
    category: security
    cwe: CWE-15
    technology:
    - java
    primary_identifier: find_sec_bugs.EXTERNAL_CONFIG_CONTROL-1
    secondary_identifiers:
    - name: Find Security Bugs-EXTERNAL_CONFIG_CONTROL
      type: find_sec_bugs_type
      value: EXTERNAL_CONFIG_CONTROL
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.EXTERNAL_CONFIG_CONTROL-1
    shortlink: https://sg.run/dPZY
    semgrep.dev:
      rule:
        rule_id: r6UjYJ
        version_id: w8T9zLg
        url: https://semgrep.dev/playground/r/w8T9zLg/gitlab.find_sec_bugs.EXTERNAL_CONFIG_CONTROL-1
        origin: community
- id: gitlab.find_sec_bugs.FILE_UPLOAD_FILENAME-1
  languages:
  - java
  message: |
    The filename provided by the FileUpload API can be tampered with by the client to reference
    unauthorized files. The provided filename should be properly validated to ensure it's properly
    structured, contains no unauthorized path characters (e.g., / \), and refers to an authorized
    file.
  metadata:
    category: security
    cwe: CWE-22
    shortDescription: Improper Limitation of a Pathname to a Restricted Directory
      ('Path Traversal')
    technology:
    - java
    primary_identifier: find_sec_bugs.FILE_UPLOAD_FILENAME-1
    secondary_identifiers:
    - name: Find Security Bugs-FILE_UPLOAD_FILENAME
      type: find_sec_bugs_type
      value: FILE_UPLOAD_FILENAME
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.FILE_UPLOAD_FILENAME-1
    shortlink: https://sg.run/5Z9l
    semgrep.dev:
      rule:
        rule_id: L1Uz0W
        version_id: 5PTdP1j
        url: https://semgrep.dev/playground/r/5PTdP1j/gitlab.find_sec_bugs.FILE_UPLOAD_FILENAME-1
        origin: community
  patterns:
  - pattern-inside: |
      $FUNC(..., HttpServletRequest $REQ, ... ) {
        ...
        $FILES = (ServletFileUpload $SFU).parseRequest($REQ);
        ...
      }
  - pattern-inside: |
      for(FileItem $ITEM : $FILES) {
        ...
      }
  - pattern: "$ITEM.getName()"
  severity: ERROR
- id: gitlab.find_sec_bugs.FORMAT_STRING_MANIPULATION-1
  languages:
  - java
  patterns:
  - pattern-either:
    - patterns:
      - pattern-inside: |
          String $INPUT = (HttpServletRequest $REQ).getParameter(...);
          ...
      - pattern-inside: |
          String $FORMAT_STR = ... + $INPUT;
          ...
    - patterns:
      - pattern-inside: |
          String $INPUT = (HttpServletRequest $REQ).getParameter(...);
          ...
      - pattern-inside: |
          String $FORMAT_STR = ... + $INPUT + ...;
          ...
    - pattern-inside: |
        String $FORMAT_STR = ... + (HttpServletRequest $REQ).getParameter(...) + ...;
        ...
    - pattern-inside: |
        String $FORMAT_STR = ... + (HttpServletRequest $REQ).getParameter(...);
        ...
  - pattern-either:
    - pattern: String.format($FORMAT_STR, ...);
    - pattern: String.format(java.util.Locale.$LOCALE, $FORMAT_STR, ...);
    - pattern: "(java.util.Formatter $F).format($FORMAT_STR, ...);"
    - pattern: "(java.util.Formatter $F).format(java.util.Locale.$LOCALE, $FORMAT_STR,
        ...);"
    - pattern: "(java.io.PrintStream $F).printf($FORMAT_STR, ...);"
    - pattern: "(java.io.PrintStream $F).printf(java.util.Locale.$LOCALE, $FORMAT_STR,
        ...);"
    - pattern: "(java.io.PrintStream $F).format($FORMAT_STR, ...);"
    - pattern: "(java.io.PrintStream $F).format(java.util.Locale.$LOCALE, $FORMAT_STR,
        ...);"
    - pattern: System.out.printf($FORMAT_STR, ...);
    - pattern: System.out.printf(java.util.Locale.$LOCALE, $FORMAT_STR, ...);
    - pattern: System.out.format($FORMAT_STR, ...);
    - pattern: System.out.format(java.util.Locale.$LOCALE, $FORMAT_STR, ...);
  message: |
    The application allows user input to control format string parameters. By passing invalid
    format
    string specifiers an adversary could cause the application to throw exceptions or possibly
    leak
    internal information depending on application logic.

    Never allow user-supplied input to be used to create a format string. Replace all format
    string
    arguments with hardcoded format strings containing the necessary specifiers.

    Example of using `String.format` safely:
    ```
    // Get untrusted user input
    String userInput = request.getParameter("someInput");
    // Ensure that user input is not included in the first argument to String.format
    String.format("Hardcoded string expecting a string: %s", userInput);
    // ...
    ```
  metadata:
    shortDescription: Use of externally-controlled format string
    cwe: CWE-134
    category: security
    confidence: HIGH
    primary_identifier: find_sec_bugs.FORMAT_STRING_MANIPULATION-1
    secondary_identifiers:
    - name: Find Security Bugs-FORMAT_STRING_MANIPULATION
      type: find_sec_bugs_type
      value: FORMAT_STRING_MANIPULATION
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.FORMAT_STRING_MANIPULATION-1
    shortlink: https://sg.run/w4q0
    semgrep.dev:
      rule:
        rule_id: X5UA3o
        version_id: yeTRBr5
        url: https://semgrep.dev/playground/r/yeTRBr5/gitlab.find_sec_bugs.FORMAT_STRING_MANIPULATION-1
        origin: community
  severity: ERROR
- id: gitlab.find_sec_bugs.HARD_CODE_KEY-1
  pattern-either:
  - patterns:
    - pattern-not-inside: |
        $FUNC(...,byte[] $KEY_BYTES, ...) {
            ...
        }
    - pattern-either:
      - pattern: new DESKeySpec((byte[] $KEY_BYTES));
      - pattern: new DESedeKeySpec((byte[] $KEY_BYTES));
      - pattern: new KerberosKey(..., (byte[] $KEY_BYTES), ..., ...);
      - pattern: new SecretKeySpec((byte[] $KEY_BYTES), ...);
      - pattern: new X509EncodedKeySpec((byte[] $KEY_BYTES));
      - pattern: new PKCS8EncodedKeySpec((byte[] $KEY_BYTES));
      - pattern: new KeyRep(...,(byte[] $KEY_BYTES));
      - pattern: new KerberosTicket(...,(byte[] $KEY_BYTES),...);
    - metavariable-pattern:
        metavariable: "$KEY_BYTES"
        patterns:
        - pattern-not-regex: "(null)"
  - patterns:
    - pattern-not-inside: |
        $FUNC(..., BigInteger $PRIVATE_KEY, ...) {
            ...
        }
    - pattern-either:
      - pattern: new DSAPrivateKeySpec((BigInteger $PRIVATE_KEY), ...);
      - pattern: new DSAPublicKeySpec((BigInteger $PRIVATE_KEY), ...);
      - pattern: new DHPrivateKeySpec((BigInteger $PRIVATE_KEY), ...);
      - pattern: new DHPublicKeySpec((BigInteger $PRIVATE_KEY), ...);
      - pattern: new ECPrivateKeySpec((BigInteger $PRIVATE_KEY), ...);
      - pattern: new RSAPrivateKeySpec((BigInteger $PRIVATE_KEY), ...);
      - pattern: new RSAMultiPrimePrivateCrtKeySpec((BigInteger $PRIVATE_KEY), ...);
      - pattern: new RSAPrivateCrtKeySpec((BigInteger $PRIVATE_KEY), ...);
      - pattern: new RSAPublicKeySpec((BigInteger $PRIVATE_KEY), ...);
    - metavariable-pattern:
        metavariable: "$PRIVATE_KEY"
        patterns:
        - pattern-not-regex: "(null)"
  message: |
    Cryptographic keys should not be kept in the source code. The source code can be widely shared
    in an enterprise environment, and is certainly shared in open source. To be managed safely,
    passwords and secret keys should be stored in separate configuration files or keystores.
  languages:
  - java
  severity: ERROR
  metadata:
    category: security
    cwe: 'CWE-321: Use of Hard-coded Cryptographic Key'
    technology:
    - java
    license: MIT
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.HARD_CODE_KEY-1
    shortlink: https://sg.run/Y4yX
    semgrep.dev:
      rule:
        rule_id: ReU2vo
        version_id: rxT4Zk
        url: https://semgrep.dev/playground/r/rxT4Zk/gitlab.find_sec_bugs.HARD_CODE_KEY-1
        origin: community
- id: gitlab.find_sec_bugs.HARD_CODE_KEY-2
  patterns:
  - pattern-either:
    - pattern: String $VAR = "...";
    - pattern: byte[] $VAR = {...};
    - pattern: byte[] $VAR = new byte[]{...};
    - pattern: char[] $VAR = {...};
    - pattern: char[] $VAR = new char[]{...};
  - metavariable-regex:
      metavariable: "$VAR"
      regex: "(?i).*(pass|pwd|psw|secret|key|cipher|crypt|des|aes|mac|private|sign|cert).*"
  message: |
    Cryptographic keys should not be kept in the source code. The source code can be widely shared
    in an enterprise environment, and is certainly shared in open source. To be managed safely,
    passwords and secret keys should be stored in separate configuration files or keystores.
  languages:
  - java
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-321: Use of Hard-coded Cryptographic Key'
    technology:
    - java
    license: MIT
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.HARD_CODE_KEY-2
    shortlink: https://sg.run/obGN
    semgrep.dev:
      rule:
        rule_id: BYUKYz
        version_id: NdTo8N
        url: https://semgrep.dev/playground/r/NdTo8N/gitlab.find_sec_bugs.HARD_CODE_KEY-2
        origin: community
- id: gitlab.find_sec_bugs.HARD_CODE_KEY-3
  patterns:
  - pattern: String $VAR = "$VAL";
  - metavariable-regex:
      metavariable: "$VAL"
      regex: "(?i).*(password|motdepasse|heslo|adgangskode|wachtwoord|salasana|passwort|passord|senha|geslo|clave|losenord|clave|parola|secret|pwd).*"
  message: |
    Cryptographic keys should not be kept in the source code. The source code can be widely shared
    in an enterprise environment, and is certainly shared in open source. To be managed safely,
    passwords and secret keys should be stored in separate configuration files or keystores.
  languages:
  - java
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-321: Use of Hard-coded Cryptographic Key'
    technology:
    - java
    license: MIT
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.HARD_CODE_KEY-3
    shortlink: https://sg.run/z561
    semgrep.dev:
      rule:
        rule_id: DbU28G
        version_id: kbTLq6
        url: https://semgrep.dev/playground/r/kbTLq6/gitlab.find_sec_bugs.HARD_CODE_KEY-3
        origin: community
- id: gitlab.find_sec_bugs.HARD_CODE_KEY-4
  patterns:
  - pattern-not-inside: |
      $FUNC(..., $VAR_NAME, ...) {
          ...
      }
  - pattern-either:
    - pattern: "(String $VAR_NAME).equals(...)"
    - pattern: "(String $OTHER).equals((String $VAR_NAME))"
    - pattern: java.util.Arrays.equals(...,(String $VAR_NAME),...)
    - pattern: "(byte[] $VAR_NAME).equals(...)"
    - pattern: "(byte[] $OTHER).equals((byte[] $VAR_NAME))"
    - pattern: java.util.Arrays.equals(...,(byte[] $VAR_NAME),...)
    - pattern: java.lang.Byte.comapre(...,(byte[] $VAR_NAME),...)
    - pattern: "(char[] $VAR_NAME).equals(...)"
    - pattern: "(char[] $OTHER).equals((char[] $VAR_NAME))"
    - pattern: java.util.Arrays.equals(...,(char[] $VAR_NAME),...)
  - metavariable-regex:
      metavariable: "$VAR_NAME"
      regex: "(?i).*(pass|pwd|psw|secret|key|cipher|crypt|des|aes|mac|private|sign|cert).*"
  message: |
    Cryptographic keys should not be kept in the source code. The source code can be widely shared
    in an enterprise environment, and is certainly shared in open source. To be managed safely,
    passwords and secret keys should be stored in separate configuration files or keystores.
  languages:
  - java
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-321: Use of Hard-coded Cryptographic Key'
    technology:
    - java
    license: MIT
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.HARD_CODE_KEY-4
    shortlink: https://sg.run/6kO6
    semgrep.dev:
      rule:
        rule_id: AbUNYQ
        version_id: bZT9qN
        url: https://semgrep.dev/playground/r/bZT9qN/gitlab.find_sec_bugs.HARD_CODE_KEY-4
        origin: community
- id: gitlab.find_sec_bugs.HARD_CODE_PASSWORD-1
  languages:
  - java
  patterns:
  - pattern-either:
    - pattern-inside: |
        char[] $PWD = ...;
        ...
    - pattern-inside: |
        String $PWD = ...;
        ...
    - pattern-inside: |
        public class $CLAZZ {
        final char[] $PWD = ...;
          ...
        }
    - pattern-inside: |
        public class $CLAZZ {
        final String $PWD = ...;
          ...
        }
    - pattern-inside: |
        $S = new SymmetricEncryptionConfig(...);
        ...
  - pattern-either:
    - pattern: (java.security.KeyStore $KS).load(..., "...")
    - pattern: (java.security.KeyStore $KS).load(..., "...".$FOO(...))
    - pattern: "(java.security.KeyStore $KS).load(..., $PWD)"
    - pattern: "(java.security.KeyStore $KS).load(..., $PWD.$FOO(...))"
    - pattern: KeyManagerFactory.getInstance(...).init(..., $PWD);
    - pattern: KeyManagerFactory.getInstance(...).init(..., $PWD.$FOO(...));
    - pattern: KeyManagerFactory.getInstance(...).init(..., "...");
    - pattern: KeyManagerFactory.getInstance(...).init(..., "...".$FOO(...));
    - pattern: (java.security.KeyStore $KS).getInstance(...).load(..., "...")
    - pattern: (java.security.KeyStore $KS).getInstance(...).load(..., "...".$FOO(...))
    - pattern: "(java.security.KeyStore $KS).getInstance(...).load(..., $PWD)"
    - pattern: "(java.security.KeyStore $KS).getInstance(...).load(..., $PWD.$FOO(...))"
    - pattern: KeyStore.getInstance(...).load(..., "...");
    - pattern: KeyStore.getInstance(...).load(..., "...".$FOO(...));
    - pattern: KeyStore.getInstance(...).load(..., $PWD);
    - pattern: KeyStore.getInstance(...).load(..., $PWD.$FOO(...));
    - pattern: new PBEKeySpec("...", ...)
    - pattern: new PBEKeySpec("...".$FOO(...), ...)
    - pattern: new PBEKeySpec($PWD, ...)
    - pattern: new PBEKeySpec($PWD.$FOO(...), ...)
    - pattern: new PasswordAuthentication("...", "...")
    - pattern: new PasswordAuthentication("...", "...".$FOO(...))
    - pattern: new PasswordAuthentication("...", $PWD)
    - pattern: new PasswordAuthentication("...", $PWD.$FOO(...))
    - pattern: (PasswordCallback $CB).setPassword("...")
    - pattern: (PasswordCallback $CB).setPassword("...".$FOO(...))
    - pattern: "(PasswordCallback $CB).setPassword($PWD)"
    - pattern: "(PasswordCallback $CB).setPassword($PWD.$FOO(...))"
    - pattern: new KeyStore.PasswordProtection("...")
    - pattern: new KeyStore.PasswordProtection("...".$FOO(...))
    - pattern: new KeyStore.PasswordProtection($PWD)
    - pattern: new KeyStore.PasswordProtection($PWD.$FOO(...))
    - pattern: new KerberosKey(...,"...",...);
    - pattern: new KerberosKey(...,"...".$FOO(...),...);
    - pattern: new KerberosKey(...,$PWD,...);
    - pattern: new KerberosKey(...,$PWD.$FOO(...),...);
    - pattern: "(javax.net.ssl.KeyManagerFactory $KMF).init(..., $PWD);"
    - pattern: (javax.net.ssl.KeyManagerFactory $KMF).init(..., "...");
    - pattern: (javax.net.ssl.KeyManagerFactory $KMF).init(..., "...".$FOO(...));
    - pattern: "(javax.net.ssl.KeyManagerFactory $KMF).init(..., $PWD.$FOO(...));"
    - pattern: (java.sql.DriverManager).getConnection(..., "...");
    - pattern: (java.sql.DriverManager).getConnection(..., "...".$FOO(...));
    - pattern: "(java.sql.DriverManager).getConnection(..., $PWD);"
    - pattern: "(java.sql.DriverManager).getConnection(..., $PWD.$FOO(...));"
    - pattern: (javax.net.ssl.KeyManagerFactory $KMF).init(..., "...");
    - pattern: (javax.net.ssl.KeyManagerFactory $KMF).init(..., "...".$FOO(...));
    - pattern: "(javax.net.ssl.KeyManagerFactory $KMF).init(..., $PWD);"
    - pattern: "(javax.net.ssl.KeyManagerFactory $KMF).init(..., $PWD.$FOO(...));"
    - pattern: io.vertx.ext.web.handler.CSRFHandler.create(..., "...");
    - pattern: io.vertx.ext.web.handler.CSRFHandler.create(..., "...".$FOO(...));
    - pattern: io.vertx.ext.web.handler.CSRFHandler.create(..., $PWD);
    - pattern: io.vertx.ext.web.handler.CSRFHandler.create(..., $PWD.$FOO(...));
    - pattern: "$S.setPassword($PWD);"
    - pattern: "$S.setPassword($PWD.$FOO(...));"
    - pattern: $S.setPassword("...");
  - metavariable-regex:
      metavariable: "$PWD"
      regex: "(?i).*(pass|pwd|psw|secret|key|cipher|crypt|des|aes|mac|private|sign|cert).*"
  message: |
    A potential hard-coded password was identified in a hard-coded string.
    Passwords should not be stored directly in code
    but loaded from secure locations such as a Key Management System (KMS).

    The purpose of using a Key Management System is so access can be audited and keys easily
    rotated
    in the event of a breach. By hardcoding passwords, it will be extremely difficult to determine
    when or if, a key is compromised.

    The recommendation on which KMS to use depends on the environment the application is running
    in:

    - For Google Cloud Platform consider [Cloud Key Management](https://cloud.google.com/kms/docs)
    - For Amazon Web Services consider [AWS Key Management](https://aws.amazon.com/kms/)
    - For on premise or other alternatives to cloud providers, consider [Hashicorp's
    Vault](https://www.vaultproject.io/)
    - For other cloud providers, please see their documentation
  severity: ERROR
  metadata:
    shortDescription: Use of hard-coded password
    category: security
    cwe: CWE-259
    technology:
    - java
    primary_identifier: find_sec_bugs.HARD_CODE_PASSWORD-1
    secondary_identifiers:
    - name: Find Security Bugs-HARD_CODE_PASSWORD
      type: find_sec_bugs_type
      value: HARD_CODE_PASSWORD
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.HARD_CODE_PASSWORD-1
    shortlink: https://sg.run/pNRN
    semgrep.dev:
      rule:
        rule_id: WAUYxY
        version_id: A8T9W2J
        url: https://semgrep.dev/playground/r/A8T9W2J/gitlab.find_sec_bugs.HARD_CODE_PASSWORD-1
        origin: community
- id: gitlab.find_sec_bugs.HAZELCAST_SYMMETRIC_ENCRYPTION-1
  languages:
  - java
  patterns:
  - pattern: new com.hazelcast.config.SymmetricEncryptionConfig()
  message: |
    The network communications for Hazelcast is configured to use a deprecated symmetric cipher.
    Consider using TLS/SSL when establishing communications across the Hazelcast cluster.

    For more information on configuring TLS/SSL for Hazelcast see:
    https://docs.hazelcast.com/imdg/4.2/security/tls-ssl
  severity: WARNING
  metadata:
    shortDescription: Inadequate encryption strength
    category: security
    cwe: CWE-326
    technology:
    - java
    primary_identifier: find_sec_bugs.HAZELCAST_SYMMETRIC_ENCRYPTION-1
    secondary_identifiers:
    - name: Find Security Bugs-HAZELCAST_SYMMETRIC_ENCRYPTION
      type: find_sec_bugs_type
      value: HAZELCAST_SYMMETRIC_ENCRYPTION
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.HAZELCAST_SYMMETRIC_ENCRYPTION-1
    shortlink: https://sg.run/ZP2L
    semgrep.dev:
      rule:
        rule_id: NbUe1Z
        version_id: vdTYp6X
        url: https://semgrep.dev/playground/r/vdTYp6X/gitlab.find_sec_bugs.HAZELCAST_SYMMETRIC_ENCRYPTION-1
        origin: community
- id: gitlab.find_sec_bugs.HRS_REQUEST_PARAMETER_TO_HTTP_HEADER-1
  languages:
  - java
  mode: taint
  pattern-sanitizers:
  - patterns:
    - pattern-inside: |
        $STR.replaceAll("$REPLACE_CHAR", "$REPLACER");
        ...
    - pattern: "$STR"
    - metavariable-regex:
        metavariable: "$REPLACER"
        regex: ".*^(CRLF).*"
    - metavariable-regex:
        metavariable: "$REPLACE_CHAR"
        regex: "(*CRLF)"
  - pattern: org.apache.commons.text.StringEscapeUtils.unescapeJava(...);
  pattern-sinks:
  - pattern: (javax.servlet.http.HttpServletResponse $RES).setHeader("$KEY", ...);
  - pattern: (javax.servlet.http.HttpServletResponse $RES).addHeader("$KEY", ...);
  - pattern: (javax.servlet.http.HttpServletResponseWrapper $WRP).setHeader("$KEY",
      ...);
  - pattern: (javax.servlet.http.HttpServletResponseWrapper $WRP).addHeader("$KEY",
      ...);
  pattern-sources:
  - pattern: "(javax.servlet.http.HttpServletRequest $REQ).getParameter(...);"
  message: |
    HTTP Response Splitting is a vulnerability where Carriage Return (CR `\r`) and Line Feed (LF
    `\n`)
    characters are introduced into an HTTP header from user-supplied input. By injecting the
    `\r\n`
    character sequence, an adversary could potentially modify how the response is interpreted by
    the
    client or any down stream caching services. This could allow an adversary to poison the cache
    data or execute Cross-Site Scripting (XSS) attacks.

    Some Java application servers such as [Apache Tomcat](https://tomcat.apache.org/) will
    automatically encode
    characters from being set in response headers as a space `0x20` character. If your application
    server does
    not automatically provide this functionality, user-supplied input that is used in header keys
    or values must be
    validated.

    Example of validating headers to only allow valid characters:
    ```
    // throws an IllegalArgumentException if the provided value contains invalid characters
    public void validateHeader(String value) throws IllegalArgumentException {
        char[] chars = value.toCharArray();

        // iterate over every character
        for (int i = 0; i < chars.length; i++) {
            char c = chars[i];

            // check for any characters below 0x21 as well as: '"' ',' ';' '\' and 0x7f.
            if (c < 0x21 || c == '"' || c == ',' || c == ';' || c == '\\' || c == 0x7f) {
                throw new IllegalArgumentException("Invalid character in cookie detected:
    {0}".format(Integer.toString(c)));
            }
        }
    }
    ```

    Alternatively, you could use a string escape package such as
    [Apache Commons Text](https://commons.apache.org/proper/commons-text/) to escape the input:
    ```
    public String escapeValue(String value) {
      return StringEscapeUtils.escapeJava(value);
    }
    ```

    For more information on response splitting attacks see OWASP:
    https://owasp.org/www-community/attacks/HTTP_Response_Splitting
  severity: ERROR
  metadata:
    shortDescription: Improper neutralization of CRLF sequences in HTTP headers ('HTTP
      Response Splitting')
    category: security
    cwe: CWE-113
    technology:
    - java
    primary_identifier: find_sec_bugs.HRS_REQUEST_PARAMETER_TO_HTTP_HEADER-1
    secondary_identifiers:
    - name: Find Security Bugs-HRS_REQUEST_PARAMETER_TO_HTTP_HEADER
      type: find_sec_bugs_type
      value: HRS_REQUEST_PARAMETER_TO_HTTP_HEADER
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.HRS_REQUEST_PARAMETER_TO_HTTP_HEADER-1
    shortlink: https://sg.run/93NR
    semgrep.dev:
      rule:
        rule_id: 6JUye5
        version_id: jQTg656
        url: https://semgrep.dev/playground/r/jQTg656/gitlab.find_sec_bugs.HRS_REQUEST_PARAMETER_TO_HTTP_HEADER-1
        origin: community
- id: gitlab.find_sec_bugs.HTTPONLY_COOKIE-1
  languages:
  - java
  pattern-either:
  - patterns:
    - pattern: |
        javax.servlet.http.Cookie $C = new Cookie(..., ...);
        ...
        (HttpServletResponse $RESP).addCookie($C);
    - pattern-not-inside: |
        javax.servlet.http.Cookie $C = new Cookie(..., ...);
        ...
        $C.setHttpOnly(true);
        ...
        (HttpServletResponse $RESP).addCookie($C);
  - pattern: "(javax.servlet.http.Cookie $C).setHttpOnly(false);"
  message: |
    The `HttpOnly` attribute when set to `true` protects the cookie value from being accessed by
    client side JavaScript such
    as reading the `document.cookie` values. By enabling this protection, a website that is
    vulnerable to
    Cross-Site Scripting (XSS) will be able to block malicious scripts from accessing the cookie
    value from JavaScript.

    Example of protecting a `Cookie`:
    ```
    // Create an HttpOnly cookie.
    Cookie someCookie = new Cookie("SomeCookieName", "SomeValue");
    // Set HttpOnly flag to true
    someCookie.setHttpOnly(true);
    ```

    For more information see:
    https://jakarta.ee/specifications/servlet/4.0/apidocs/javax/servlet/http/cookie#setHttpOnly-boolean-

    Session cookies should be configured with the following security directives:

    - [HTTPOnly](https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies#restrict_access_to_cookies)
    - [Secure](https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies#restrict_access_to_cookies)
    - [SameSite](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite)
  severity: WARNING
  metadata:
    shortDescription: Sensitive cookie without 'HttpOnly' flag
    category: security
    cwe: CWE-1004
    technology:
    - java
    primary_identifier: find_sec_bugs.HTTPONLY_COOKIE-1
    secondary_identifiers:
    - name: Find Security Bugs-HTTPONLY_COOKIE
      type: find_sec_bugs_type
      value: HTTPONLY_COOKIE
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.HTTPONLY_COOKIE-1
    shortlink: https://sg.run/z5B0
    semgrep.dev:
      rule:
        rule_id: WAUYRb
        version_id: 8KTQjWN
        url: https://semgrep.dev/playground/r/8KTQjWN/gitlab.find_sec_bugs.HTTPONLY_COOKIE-1
        origin: community
- id: gitlab.find_sec_bugs.HTTP_PARAMETER_POLLUTION-1
  languages:
  - java
  mode: taint
  pattern-sources:
  - pattern: "(HttpServletRequest $REQ).getParameter(...)"
  pattern-sanitizers:
  - pattern: java.net.URLEncoder.encode(...)
  - pattern: com.google.common.net.UrlEscapers.urlPathSegmentEscaper().escape(...)
  pattern-sinks:
  - pattern: new org.apache.http.client.methods.HttpGet(...)
  - pattern: new org.apache.commons.httpclient.methods.GetMethod(...)
  - pattern: "(org.apache.commons.httpclient.methods.GetMethod $GM).setQueryString(...)"
  message: |
    The application was found including unvalidated user input into a URL, which could lead to
    HTTP Parameter Pollution (HPP) or worse, Server Side Request Forgery (SSRF). This could
    allow an adversary to override the value of a URL or a request parameter.  HTTP Parameter
    Pollution
    (HPP) attacks consist of injecting encoded query string delimiters into other existing
    parameters. If a web
    application does not properly sanitize the user input, an adversary may modify the logic of
    these
    requests to other applications.

    To remediate this issue, never allow user input directly into creation of a URL or URL
    parameter. Consider
    using a map to look up user-supplied information and return exact values to be used in the
    generation of
    requests.

    Example using a map to look up a key to be used in a HTTP request:
    ```
    HashMap<String, String> lookupTable = new HashMap<>();
    lookupTable.put("key1", "value1");
    lookupTable.put("key2", "value2");
    String userInput = request.getParameter("key");

    // Create a CloseableHttpClient, ideally any requests issued should be done
    // out-of-band from the servlet request itself (such as using a separate thread/scheduler
    system)
    try (final CloseableHttpClient httpClient = HttpClients.createDefault()) {
        // Lookup the value from our user input from our lookupTable
        String value = lookupTable.getOrDefault(userInput, "value1");
        // Construct the url, with the hardcoded url and only pass in the value from the
    lookupTable,
        // not direct user input
        final HttpGet httpget = new HttpGet("https://example.com/getId?key="+value);
        // Execute the request
        CloseableHttpResponse clientResponse = httpClient.execute(httpget);
        // Read the response
        byte[] responseData = clientResponse.getEntity().getContent().readAllBytes();
        // Handle the response
        // ...
    }
    ```

    If using a map is not possible, the user-supplied input must be encoded prior to use, and
    never allow full
    URLs:
    ```
    // Get user input
    String userInput = request.getParameter("key");
    // Encode the string using java.net.URLEncoder with the UTF-8 character set
    String encodedString = java.net.URLEncoder.encode(userInput, StandardCharsets.UTF_8);
    // Create a CloseableHttpClient, ideally any requests issued should be done
    // out-of-band from the servlet request itself (such as using a separate thread/scheduler
    system)
    try (final CloseableHttpClient httpClient = HttpClients.createDefault()) {
      // Construct the url, with the hardcoded url and only pass in the encoded value, never a
    full URL
      final HttpGet httpget = new HttpGet("https://example.com/getId?key="+encodedString);
      // Execute the request
      CloseableHttpResponse clientResponse = httpClient.execute(httpget);
      // Read the response
      byte[] responseData = clientResponse.getEntity().getContent().readAllBytes();
      // handle the response
    }
    ```

    For more information on SSRF see OWASP:
    https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html

    For more information on HTTP Parameter Pollution see:
    https://en.wikipedia.org/wiki/HTTP_parameter_pollution
  severity: ERROR
  metadata:
    shortDescription: Improper neutralization of argument delimiters in a command
      ('Argument Injection')
    category: security
    cwe: CWE-88
    technology:
    - java
    primary_identifier: find_sec_bugs.HTTP_PARAMETER_POLLUTION-1
    secondary_identifiers:
    - name: Find Security Bugs-HTTP_PARAMETER_POLLUTION
      type: find_sec_bugs_type
      value: HTTP_PARAMETER_POLLUTION
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.HTTP_PARAMETER_POLLUTION-1
    shortlink: https://sg.run/Jw5Q
    semgrep.dev:
      rule:
        rule_id: AbUNR4
        version_id: YDTp6e3
        url: https://semgrep.dev/playground/r/YDTp6e3/gitlab.find_sec_bugs.HTTP_PARAMETER_POLLUTION-1
        origin: community
- id: gitlab.find_sec_bugs.HTTP_RESPONSE_SPLITTING-1
  languages:
  - java
  mode: taint
  pattern-sanitizers:
  - patterns:
    - pattern-inside: |
        $STR.replaceAll("$REPLACE_CHAR", "$REPLACER");
        ...
    - pattern: "$STR"
    - metavariable-regex:
        metavariable: "$REPLACER"
        regex: ".*^(CRLF).*"
    - metavariable-regex:
        metavariable: "$REPLACE_CHAR"
        regex: "(*CRLF)"
  - pattern: org.apache.commons.text.StringEscapeUtils.unescapeJava(...);
  pattern-sinks:
  - pattern: new javax.servlet.http.Cookie("$KEY", ...);
  - patterns:
    - pattern-inside: |
        $C = new javax.servlet.http.Cookie("$KEY", ...);
        ...
    - pattern: "$C.setValue(...);"
  pattern-sources:
  - pattern: "(javax.servlet.http.HttpServletRequest $REQ).getParameter(...);"
  message: |
    HTTP Response Splitting is a vulnerability where Carriage Return (CR `\r`) and Line Feed (LF
    `\n`)
    characters are introduced into an HTTP header from user-supplied input. By injecting the
    `\r\n`
    character sequence, an adversary could potentially modify how the response is interpreted by
    the
    client or any downstream caching services. This could allow an adversary to poison the cache
    data or execute Cross-Site Scripting (XSS) attacks.

    Some Java application servers such as [Apache Tomcat](https://tomcat.apache.org/) will
    disallow `\r\n`
    characters from being set in cookies. If your application server does not automatically
    provide this
    functionality, user-supplied input that is used in cookie keys or values must be validated.

    Example of validating cookies to only allow valid characters:
    ```
    // throws an IllegalArgumentException if the provided value contains invalid characters
    public void validateRfc6265CookieValue(String value) throws IllegalArgumentException {
        char[] chars = value.toCharArray();

        // iterate over every character
        for (int i = 0; i < chars.length; i++) {
            char c = chars[i];

            // check for any characters below 0x21 as well as: '"' ',' ';' '\' and 0x7f.
            if (c < 0x21 || c == '"' || c == ',' || c == ';' || c == '\\' || c == 0x7f) {
                throw new IllegalArgumentException("Invalid character in cookie detected:
    {0}".format(Integer.toString(c)));
            }
        }
    }
    ```

    Alternatively, you could use a string escape package such as
    [Apache Commons Text](https://commons.apache.org/proper/commons-text/) to escape the input:
    ```
    public String escapeValue(String value) {
      return StringEscapeUtils.escapeJava(value);
    }
    ```

    For more information on response splitting attacks see OWASP:
    https://owasp.org/www-community/attacks/HTTP_Response_Splitting
  severity: WARNING
  metadata:
    shortDescription: Improper neutralization of CRLF sequences in HTTP headers ('HTTP
      Response Splitting')
    category: security
    cwe: CWE-113
    technology:
    - java
    primary_identifier: find_sec_bugs.HTTP_RESPONSE_SPLITTING-1
    secondary_identifiers:
    - name: Find Security Bugs-HTTP_RESPONSE_SPLITTING
      type: find_sec_bugs_type
      value: HTTP_RESPONSE_SPLITTING
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.HTTP_RESPONSE_SPLITTING-1
    shortlink: https://sg.run/jBZ2
    semgrep.dev:
      rule:
        rule_id: lBUX54
        version_id: 2KTzQ2z
        url: https://semgrep.dev/playground/r/2KTzQ2z/gitlab.find_sec_bugs.HTTP_RESPONSE_SPLITTING-1
        origin: community
- id: gitlab.find_sec_bugs.INSECURE_COOKIE-1
  languages:
  - java
  pattern-either:
  - patterns:
    - pattern: |
        javax.servlet.http.Cookie $C = new Cookie(..., ...);
        ...
        (HttpServletResponse $RESP).addCookie($C);
    - pattern-not-inside: |
        javax.servlet.http.Cookie $C = new Cookie(..., ...);
        ...
        $C.setSecure(true);
        ...
        (HttpServletResponse $RESP).addCookie($C);
  - pattern: "(javax.servlet.http.Cookie $C).setSecure(false);"
  message: |
    The `Secure` attribute when set to `true` protects the cookie value from being being
    transmitted over clear text
    communication paths such as HTTP. By enabling this protection, the cookie will only be sent
    over HTTPS.

    Example of protecting a `Cookie`:
    ```
    // Create an Secure cookie.
    Cookie someCookie = new Cookie("SomeCookieName", "SomeValue");
    // Set Secure flag to true
    someCookie.setSecure(true);
    ```

    For more information see:
    https://jakarta.ee/specifications/servlet/4.0/apidocs/javax/servlet/http/cookie#setSecure-boolean-

    Session cookies should be configured with the following security directives:

    - [HTTPOnly](https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies#restrict_access_to_cookies)
    - [SameSite](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite)
    - [Secure](https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies#restrict_access_to_cookies)
  severity: WARNING
  metadata:
    shortDescription: Sensitive cookie in HTTPS session without 'Secure' attribute
    category: security
    cwe: CWE-614
    technology:
    - java
    primary_identifier: find_sec_bugs.INSECURE_COOKIE-1
    secondary_identifiers:
    - name: Find Security Bugs-INSECURE_COOKIE
      type: find_sec_bugs_type
      value: INSECURE_COOKIE
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.INSECURE_COOKIE-1
    shortlink: https://sg.run/pNER
    semgrep.dev:
      rule:
        rule_id: 0oUp4O
        version_id: gET31Lr
        url: https://semgrep.dev/playground/r/gET31Lr/gitlab.find_sec_bugs.INSECURE_COOKIE-1
        origin: community
- id: gitlab.find_sec_bugs.INSECURE_SMTP_SSL-1
  languages:
  - java
  patterns:
  - pattern-either:
    - pattern-inside: |
        $E = new org.apache.commons.mail.SimpleEmail(...);
        ...
    - pattern-inside: |
        $E = new org.apache.commons.mail.Email(...);
        ...
    - pattern-inside: |
        $E = new org.apache.commons.mail.MultiPartEmail(...);
        ...
    - pattern-inside: |
        $E = new org.apache.commons.mail.HtmlEmail(...);
        ...
    - pattern-inside: |
        $E = new org.apache.commons.mail.ImageHtmlEmail(...);
        ...
  - pattern-not: |
      $E.setSSLOnConnect(true);
      ...
      $E.setSSLCheckServerIdentity(true);
  message: |
    The Apache commons mail client by default does not enable TLS server identity.
    This allows for an adversary who is in between the application and the target host to intercept
    potentially sensitive information or transmit malicious data.

    Enable checking server identity by calling `Email.setSSLCheckServerIdentity(true)`

    Example email client that enables TLS and server identity:
    ```
    // Create an email client
    Email email = new SimpleEmail();
    // Configure the email hostname
    email.setHostName("smtp.mail.example.com");
    // Set the port
    email.setSmtpPort(465);
    // Securely retrieve username and password values
    String username = getUserNameFromKMSorSecretStore();
    String password = getPasswordFromKMSorSecretStore();
    // Configure the Authenticator
    DefaultAuthenticator auth = new DefaultAuthenticator(username, password);
    // Set the authenticator
    email.setAuthenticator(auth);
    // Ensure we use SSL on connect
    email.setSSLOnConnect(true);
    // Ensure we validate server identity
    email.setSSLCheckServerIdentity(true);
    // configure the rest of the email
    email.setFrom("x@example.com");
    email.setSubject("TestMail");
    email.setMsg("This is a test mail ... :-)");
    email.addTo("y@example.com");
    email.send();
    ```
  metadata:
    shortDescription: Improper validation of certificate with host mismatch
    category: security
    cwe: CWE-297
    primary_identifier: find_sec_bugs.INSECURE_SMTP_SSL-1
    secondary_identifiers:
    - name: Find Security Bugs-INSECURE_SMTP_SSL
      type: find_sec_bugs_type
      value: INSECURE_SMTP_SSL
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.INSECURE_SMTP_SSL-1
    shortlink: https://sg.run/rNB0
    semgrep.dev:
      rule:
        rule_id: oqUKxo
        version_id: X0TQwq4
        url: https://semgrep.dev/playground/r/X0TQwq4/gitlab.find_sec_bugs.INSECURE_SMTP_SSL-1
        origin: community
  severity: ERROR
- id: gitlab.find_sec_bugs.LDAP_ANONYMOUS-1
  languages:
  - java
  patterns:
  - pattern-inside: |
      import javax.naming.Context;
      ...
  - pattern: $ENV.put(Context.SECURITY_AUTHENTICATION, "none");
  message: |
    The application does not provide authentication when communicating an LDAP
    server. It is strongly recommended that the LDAP server be configured with
    authentication and restrict what queries users can execute.

    Example code that authenticates with a remote LDAP server and encodes any
    user-supplied input:
    ```
    // Create a properties to hold the ldap connection details
    Properties props = new Properties();
    // Use the com.sun.jndi.ldap.LdapCtxFactory factory provider
    props.put(Context.INITIAL_CONTEXT_FACTORY, "com.sun.jndi.ldap.LdapCtxFactory");
    // The LDAP server URL
    props.put(Context.PROVIDER_URL, "ldap://ldap.example.org:3889");
    // User details for the connection
    props.put(Context.SECURITY_PRINCIPAL, "cn=admin,dc=example,dc=org");
    // LDAP account password
    String ldapAccountPassword = getAccountPasswordFromSecureStoreOrKMS();
    // Pass in the LDAP password
    props.put(Context.SECURITY_CREDENTIALS, ldapAccountPassword);

    // Create the LDAPContext
    InitialDirContext ldapContext = new InitialDirContext(props);
    // Example using SUBTREE_SCOPE SearchControls
    SearchControls searchControls = new SearchControls();
    searchControls.setSearchScope(SearchControls.SUBTREE_SCOPE);

    // Get user input for query
    String userQuery = someUserInput;
    // Use searchArguments to hold the user-supplied input
    Object[] searchArguments = new Object[]{userQuery};
    // Hardcode the BaseDN, use the {0} format specifier to use the searchArguments array value,
    and pass in the search controls.
    // searchArguments automatically encode
    NamingEnumeration answer = ldapContext.search("dc=example,dc=org", "(cn={0})",
    searchArguments, searchControls);
    // Process the response answer
    while (answer.hasMoreElements()) {
      ...
    }
    ```

    For information on enabling authentication, please see your LDAP server's
    documentation.

    For more information on LDAP Injection see OWASP:
    https://cheatsheetseries.owasp.org/cheatsheets/LDAP_Injection_Prevention_Cheat_Sheet.html
  metadata:
    shortDescription: Missing authentication for critical function (LDAP)
    category: security
    cwe: CWE-306
    primary_identifier: find_sec_bugs.LDAP_ANONYMOUS-1
    secondary_identifiers:
    - name: Find Security Bugs-LDAP_ANONYMOUS
      type: find_sec_bugs_type
      value: LDAP_ANONYMOUS
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.LDAP_ANONYMOUS-1
    shortlink: https://sg.run/0Wrb
    semgrep.dev:
      rule:
        rule_id: PeUjLD
        version_id: WrTWlwo
        url: https://semgrep.dev/playground/r/WrTWlwo/gitlab.find_sec_bugs.LDAP_ANONYMOUS-1
        origin: community
  severity: WARNING
- id: gitlab.find_sec_bugs.LDAP_INJECTION-1
  languages:
  - java
  mode: taint
  pattern-sinks:
  - pattern: javax.naming.ldap.LdapName(...)
  - pattern: "(javax.naming.directory.Context $C).lookup(...)"
  - pattern: "(javax.naming.Context $C).lookup(...)"
  - patterns:
    - pattern-inside: "(java.util.Properties $P).put($KEY, $VAL)"
    - pattern-not-inside: |
        $FUNC(..., $VAL, ...) {
          ...
        }
    - pattern: "$VAL"
  - patterns:
    - pattern-inside: "(com.unboundid.ldap.sdk.LDAPConnection $C).search($QUERY, ...)"
    - pattern: "$QUERY"
  - patterns:
    - pattern-either:
      - pattern: "$CTX.lookup(...)"
      - patterns:
        - pattern-inside: "$CTX.search($QUERY, ...)"
        - pattern: "$QUERY"
      - patterns:
        - pattern-inside: "$CTX.search($NAME, $FILTER, ...)"
        - pattern: "$FILTER"
    - metavariable-pattern:
        metavariable: "$CTX"
        pattern-either:
        - pattern: "(javax.naming.directory.DirContext $C)"
        - pattern: "(javax.naming.directory.InitialDirContext $IDC)"
        - pattern: "(javax.naming.ldap.LdapContext $LC)"
        - pattern: "(javax.naming.event.EventDirContext $EDC)"
        - pattern: "(com.sun.jndi.ldap.LdapCtx $LC)"
  - patterns:
    - pattern-either:
      - patterns:
        - pattern-inside: "$CTX.list($QUERY, ...)"
        - pattern: "$QUERY"
      - patterns:
        - pattern-inside: "$CTX.lookup($QUERY, ...)"
        - pattern: "$QUERY"
      - patterns:
        - pattern-inside: "$CTX.search($QUERY, ...)"
        - pattern: "$QUERY"
      - patterns:
        - pattern-inside: "$CTX.search($NAME, $FILTER, ...)"
        - pattern: "$FILTER"
    - metavariable-pattern:
        metavariable: "$CTX"
        pattern-either:
        - pattern: "(org.springframework.ldap.core.LdapTemplate $LT)"
        - pattern: "(org.springframework.ldap.core.LdapOperations $LO)"
  pattern-sources:
  - patterns:
    - pattern-inside: |
        $FUNC(..., $VAR, ...) {
          ...
        }
    - pattern: "$VAR"
  - patterns:
    - pattern-inside: |
        $FUNC(..., $X, ...) {
          ...
          $VAR = ... + $X;
          ...
        }
    - pattern: "$VAR"
  message: |
    LDAP injection attacks exploit LDAP queries to influence how data is returned by
    the LDAP server.

    Later versions of Java's `InitialDirContext.search` introduced a four argument method, one of
    which is the `filterArg` parameter. The `filterArg` will be automatically encoded when
    querying
    the LDAP server. If this method signature is not available, the application must encode the
    LDAP strings manually.

    More details on the four argument `search` method can be found here:
    https://docs.oracle.com/en/java/javase/20/docs/api/java.naming/javax/naming/directory/InitialDirContext.html#search(javax.naming.Name,java.lang.String,java.lang.Object[],javax.naming.directory.SearchControls)

    To encode the string manually, it is recommended that all input passed to LDAP querying
    systems
    encode the following values:

    - Any occurrence of the null character must be escaped as “\00”.
    - Any occurrence of the open parenthesis character must be escaped as “\28”.
    - Any occurrence of the close parenthesis character must be escaped as “\29”.
    - Any occurrence of the asterisk character must be escaped as “\2a”.
    - Any occurrence of the backslash character must be escaped as “\5c”.

    Example function that safely encodes user-supplied input to be used in an LDAP query.
    ```
    public static String encodeLDAPString(String input) {
      // Note the \ character is replaced first
      CharSequence[] chars = new CharSequence[] { "\\", "\0", "(", ")", "*" };
      CharSequence[] encoded = new CharSequence[] { "\\5c", "\\00", "\\28", "\\29", "\\2a" };
      // Iterate over each character sequence, replacing the raw value with an encoded version of
    it
      for (int i = 0; i < chars.length; i++)
      {
          // re-assign to input
          input = input.replace(chars[i], encoded[i]);
      }
      // return our modified input string
      return input;
    }
    ```

    Example code that using the `filterArgs` parameter which automatically encodes for us:
    ```
    // Create a properties to hold the ldap connection details
    Properties props = new Properties();
    // Use the com.sun.jndi.ldap.LdapCtxFactory factory provider
    props.put(Context.INITIAL_CONTEXT_FACTORY, "com.sun.jndi.ldap.LdapCtxFactory");
    // The LDAP server URL
    props.put(Context.PROVIDER_URL, "ldap://ldap.example.org:3889");
    // User details for the connection
    props.put(Context.SECURITY_PRINCIPAL, "cn=admin,dc=example,dc=org");
    // LDAP account password
    String ldapAccountPassword = getAccountPasswordFromSecureStoreOrKMS();
    // Pass in the LDAP password
    props.put(Context.SECURITY_CREDENTIALS, ldapAccountPassword);

    // Create the LDAPContext
    InitialDirContext ldapContext = new InitialDirContext(props);
    // Example using SUBTREE_SCOPE SearchControls
    SearchControls searchControls = new SearchControls();
    searchControls.setSearchScope(SearchControls.SUBTREE_SCOPE);

    // Get user input for query
    String userQuery = someUserInput;
    // Use searchArguments to hold the user-supplied input
    Object[] searchArguments = new Object[]{userQuery};
    // Hardcode the BaseDN, use the {0} format specifier to use the searchArguments array value,
    and pass in the search controls.
    // searchArguments automatically encode
    NamingEnumeration answer = ldapContext.search("dc=example,dc=org", "(cn={0})",
    searchArguments, searchControls);
    // Process the response answer
    while (answer.hasMoreElements()) {
      ...
    }
    ```

    For more information on LDAP Injection see OWASP:
    https://cheatsheetseries.owasp.org/cheatsheets/LDAP_Injection_Prevention_Cheat_Sheet.html
  severity: WARNING
  metadata:
    shortDescription: Improper neutralization of special elements used in an LDAP
      query ('LDAP Injection')
    category: security
    cwe: CWE-90
    technology:
    - java
    primary_identifier: find_sec_bugs.LDAP_INJECTION-1
    secondary_identifiers:
    - name: Find Security Bugs-LDAP_INJECTION
      type: find_sec_bugs_type
      value: LDAP_INJECTION
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.LDAP_INJECTION-1
    shortlink: https://sg.run/5Z93
    semgrep.dev:
      rule:
        rule_id: BYUKEw
        version_id: JdTN3xq
        url: https://semgrep.dev/playground/r/JdTN3xq/gitlab.find_sec_bugs.LDAP_INJECTION-1
        origin: community
- id: gitlab.find_sec_bugs.MALICIOUS_XSLT-1
  languages:
  - java
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - patterns:
        - pattern-inside: |
            $FUNC(...,String $VAR, ...) {
              ...
            }
        - pattern-either:
          - pattern: new FileInputStream(<... $VAR ...>);
          - pattern: getClass().getResourceAsStream(<... $VAR ...>)
      - patterns:
        - pattern-inside: |
            class $CLZ {
              String $X = "...";
              ...
            }
        - pattern-inside: |
            $FUNC(...,String $Y, ...) {
              ...
            }
        - pattern-either:
          - pattern: new FileInputStream($X + $Y);
          - pattern: getClass().getResourceAsStream($X + $Y)
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern-inside: "(javax.xml.transform.TransformerFactory $T).newTransformer($SRC,
          ...)"
      - pattern-inside: "(javax.xml.transform.Transformer $T).transform($SRC, ...)"
    - pattern: "$SRC"
  message: |
    The application performs XSLT translation with potentially malicious input. An adversary who
    is able to influence the
    loaded
    XSL document could call XSL functions or exploit External XML Entity (XXE) attacks that allow
    file
    retrieval or force the parser to connect to arbitrary servers to exfiltrate files. It is
    strongly
    recommended that an alternative approach is used to work with XML data.

    For increased security, never process user-supplied XSL style sheets. If XSLT processing is
    absolutely
    necessary, ensure that `FEATURE_SECURE_PROCESSING` is enabled prior to processing the XSLT
    file:
    ```
    // Create a new TransformerFactory instance
    TransformerFactory transformerFactory = TransformerFactory.newInstance();
    // Enable the FEATURE_SECURE_PROCESSING feature
    transformerFactory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);
    // Read in the XML Source
    Source xmlSource = new StreamSource(new FileInputStream("hardcoded.xml"));
    // Read in the XSL template file
    Source xslSource = new StreamSource(new FileInputStream("hardcoded.xsl"));
    /// Create the transformer object to do the transformation
    Transformer transformer = transformerFactory.newTransformer(xslSource);
    // Create a Result object for output
    Result result = new StreamResult(System.out);
    // Execute the transformation process
    transformer.transform(xmlSource, result);
    ```

    For more information on XML security see OWASP's guide:
    https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html#java

    For more information on the secure processing feature see:
    - https://xml.apache.org/xalan-j/features.html#secureprocessing
  metadata:
    shortDescription: Improper neutralization of special elements in output used by
      a downstream component ('Injection')
    category: security
    cwe: CWE-74
    primary_identifier: find_sec_bugs.MALICIOUS_XSLT-1
    secondary_identifiers:
    - name: Find Security Bugs-MALICIOUS_XSLT
      type: find_sec_bugs_type
      value: MALICIOUS_XSLT
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.MALICIOUS_XSLT-1
    shortlink: https://sg.run/L2KJ
    semgrep.dev:
      rule:
        rule_id: x8UdB6
        version_id: d6TrQW1
        url: https://semgrep.dev/playground/r/d6TrQW1/gitlab.find_sec_bugs.MALICIOUS_XSLT-1
        origin: community
  severity: WARNING
- id: gitlab.find_sec_bugs.MODIFICATION_AFTER_VALIDATION-1
  languages:
  - java
  patterns:
  - pattern: |
      (java.util.regex.Pattern $Y).matcher($VAR);
      ...
      $VAR.$METHOD(...);
  - metavariable-regex:
      metavariable: "$METHOD"
      regex: "(replace)"
  message: |+
    The application was found matching a variable during a regular expression
    pattern match, and then calling string modification functions after validation has occurred.
    This is usually indicative of a poor input validation strategy as an adversary may attempt to
    exploit the removal of characters.

    For example a common mistake in attempting to remove path characters to protect against path
    traversal is to match '../' and then remove any matches. However, if an adversary were to
    include in their input: '....//' then the `replace`  method would replace the first `../` but
    cause the leading `..` and trailing `/` to join into the final string of `../`, effectively
    bypassing the check.

    To remediate this issue always perform string modifications before any validation of a string.
    It is strongly recommended that strings be encoded instead of replaced or removed prior to
    validation.


    Example replaces `..` before validation. Do note this is still not a recommended method for
    protecting against directory traversal, always use randomly generated IDs or filenames instead:
    ```
    // This is ONLY for demonstration purpose, never use untrusted input
    // in paths, always use randomly generated filenames or IDs.
    String input = "test../....//dir";
    // Use replaceAll _not_ replace
    input = input.replaceAll("\\.\\.", "");
    // Input would be test///dir at this point
    // Create a pattern to match on
    Pattern pattern = Pattern.compile("\\.\\.");
    // Create a matcher
    Matcher match = pattern.matcher(input);
    // Call find to see if .. is still in our string
    if (match.find()) {
        throw new Exception(".. detected");
    }
    // Use the input (but do not modify the string)
    System.out.println(input + " safe");
    ```

    For more information see Carnegie Mellon University's Secure Coding Guide:
    https://wiki.sei.cmu.edu/confluence/display/java/IDS11-J.+Perform+any+string+modifications+before+validation

  metadata:
    shortDescription: Collapse of data into unsafe value
    category: security
    cwe: CWE-182
    confidence: HIGH
    primary_identifier: find_sec_bugs.MODIFICATION_AFTER_VALIDATION-1
    secondary_identifiers:
    - name: Find Security Bugs-MODIFICATION_AFTER_VALIDATION
      type: find_sec_bugs_type
      value: MODIFICATION_AFTER_VALIDATION
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.MODIFICATION_AFTER_VALIDATION-1
    shortlink: https://sg.run/O4Yp
    semgrep.dev:
      rule:
        rule_id: 10U4xJ
        version_id: bZTbKdx
        url: https://semgrep.dev/playground/r/bZTbKdx/gitlab.find_sec_bugs.MODIFICATION_AFTER_VALIDATION-1
        origin: community
  severity: WARNING
- id: gitlab.find_sec_bugs.NORMALIZATION_AFTER_VALIDATION-1
  patterns:
  - pattern: |
      $Y = java.util.regex.Pattern.compile("[<>]");
      ...
      $Y.matcher($VAR);
      ...
      java.text.Normalizer.normalize($VAR, ...);
  languages:
  - java
  message: |
    The application was found matching a variable during a regular expression
    pattern match, and then calling a Unicode normalize function after validation has occurred.
    This is usually indicative of a poor input validation strategy as an adversary may attempt to
    exploit the normalization process.

    To remediate this issue, always perform Unicode normalization before any validation of a
    string.

    Example of normalizing a string before validation:
    ```
    // User input possibly containing malicious unicode
    String userInput = "\uFE64" + "tag" + "\uFE65";
    // Normalize the input
    userInput = Normalizer.normalize(userInput, Normalizer.Form.NFKC);
    // Compile our regex pattern looking for < or > charcters
    Pattern pattern = Pattern.compile("[<>]");
    // Create a matcher from the userInput
    Matcher matcher = pattern.matcher(userInput);
    // See if the matcher matches
    if (matcher.find()) {
        // It did so throw an error
        throw new Exception("found banned characters in input");
    }
    ```

    For more information see Carnegie Mellon University's Secure Coding Guide:
    https://wiki.sei.cmu.edu/confluence/display/java/IDS01-J.+Normalize+strings+before+validating+them
  metadata:
    shortDescription: 'Incorrect behavior order: validate before canonicalize'
    category: security
    cwe: CWE-180
    confidence: HIGH
    primary_identifier: find_sec_bugs.NORMALIZATION_AFTER_VALIDATION-1
    secondary_identifiers:
    - name: Find Security Bugs-NORMALIZATION_AFTER_VALIDATION
      type: find_sec_bugs_type
      value: NORMALIZATION_AFTER_VALIDATION
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.NORMALIZATION_AFTER_VALIDATION-1
    shortlink: https://sg.run/eJnl
    semgrep.dev:
      rule:
        rule_id: 9AUAKN
        version_id: NdT39jE
        url: https://semgrep.dev/playground/r/NdT39jE/gitlab.find_sec_bugs.NORMALIZATION_AFTER_VALIDATION-1
        origin: community
  severity: WARNING
- id: gitlab.find_sec_bugs.NULL_CIPHER-1
  languages:
  - java
  pattern: new javax.crypto.NullCipher()
  message: |
    The application was found creating a `NullCipher` instance. `NullCipher` implements the
    `Cipher` interface by returning ciphertext identical to the supplied plaintext. This means
    any data passed to the `doFinal(...)` or `update(...)` methods will not actually encrypt
    the input.

    Remove the NullCipher reference and replace with a legitimate `Cipher` instance such as
    `ChaCha20-Poly1305`

    Example using `ChaCha20Poly1305`:
    ```
    public encrypt() throws Exception {
        chaChaEncryption("Secret text to encrypt".getBytes(StandardCharsets.UTF_8));
    }

    public SecureRandom getSecureRandomDRBG() throws NoSuchAlgorithmException {
        // Use DRBG according to
    http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-90Ar1.pdf
        return SecureRandom.getInstance("DRBG",
                // Security strength in bits (default is 128)
                DrbgParameters.instantiation(256,
                    // Set prediction resistance and re-seeding
                    DrbgParameters.Capability.PR_AND_RESEED,
                    // Set the personalization string (optional, not necessary)
                    "some_personalization_string".getBytes()
                )
        );
    }

    public Cipher getChaCha20Poly1305(int mode, byte[] ivKey, byte[] secretKey) throws
    NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException,
    InvalidAlgorithmParameterException  {
        // Get a DRBG random number generator instance
        SecureRandom random = getSecureRandomDRBG();
        // Create a ChaCha20-Poly1305 cipher instance
        Cipher chaChaCipher = Cipher.getInstance("ChaCha20-Poly1305/None/NoPadding");
        // Create our parameterSpec using our ivKey
        AlgorithmParameterSpec parameterSpec = new IvParameterSpec(ivKey);
        // Create a SecretKeySpec using our secretKey
        SecretKeySpec secretKeySpec = new SecretKeySpec(secretKey, "ChaCha20");
        // Initialize and return the cipher for the provided mode
        chaChaCipher.init(mode, secretKeySpec, parameterSpec, random);
        return chaChaCipher;
    }

    public void chaChaEncryption(byte[] plainText) throws NoSuchAlgorithmException,
    NoSuchPaddingException, InvalidKeyException, InvalidAlgorithmParameterException {
        // Get a DRBG random number generator instance
        SecureRandom random = getSecureRandomDRBG();
        // Create secretKey
        byte[] secretKey = new byte[32];
        random.nextBytes(secretKey);
        // Create an IV Key
        byte[] ivKey = new byte[12];
        random.nextBytes(ivKey);

        // Create a chaCha encryption cipher instance
        Cipher chaChaEncryptor = getChaCha20Poly1305(Cipher.ENCRYPT_MODE, ivKey, secretKey);

        // Encrypt the text using ChaCha20Poly1305
        byte[] cipherText = null;
        try {
            cipherText = chaChaEncryptor.doFinal(plainText);
        } catch (IllegalBlockSizeException | BadPaddingException e) {
            System.out.println("failed to encrypt text");
            return;
        }
        System.out.println("encrypted: " + Base64.getEncoder().encodeToString(cipherText));

         // Create a chaCha decryption cipher instance
        Cipher chaChaDecryptor = getChaCha20Poly1305(Cipher.DECRYPT_MODE, ivKey, secretKey);

        // Decrypt the text
        byte[] decryptedText = null;
        try {
            decryptedText = chaChaDecryptor.doFinal(cipherText);
        } catch (IllegalBlockSizeException | BadPaddingException e) {
            System.out.println("failed to decrypt text");
            return;
        }
        System.out.println("decrypted: " + new String(decryptedText, StandardCharsets.UTF_8));
    }
    ```

    For more information on Java Cryptography see:
    https://docs.oracle.com/en/java/javase/15/security/java-cryptography-architecture-jca-reference-guide.html
  severity: WARNING
  metadata:
    shortDescription: Use of a broken or risky cryptographic algorithm
    category: security
    cwe: CWE-327
    technology:
    - java
    primary_identifier: find_sec_bugs.NULL_CIPHER-1
    secondary_identifiers:
    - name: Find Security Bugs-NULL_CIPHER
      type: find_sec_bugs_type
      value: NULL_CIPHER
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.NULL_CIPHER-1
    shortlink: https://sg.run/EzLo
    semgrep.dev:
      rule:
        rule_id: wdUk3N
        version_id: ZRTQ7Ax
        url: https://semgrep.dev/playground/r/ZRTQ7Ax/gitlab.find_sec_bugs.NULL_CIPHER-1
        origin: community
- id: gitlab.find_sec_bugs.OGNL_INJECTION-1
  languages:
  - java
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-inside: |
        $FUNC(..., $VAR, ...) {
          ...
        }
    - metavariable-pattern:
        metavariable: "$VAR"
        pattern-either:
        - pattern: "(String $S)"
        - pattern: "(Map<String, ?> $M)"
        - pattern: "(Map<String, String> $M)"
        - pattern: "(Map<String, Object> $M)"
    - pattern: "$VAR"
  pattern-sinks:
  - patterns:
    - pattern-inside: com.opensymphony.xwork2.util.TextParseUtil.translateVariables($VAL,
        ...)
    - pattern: "$VAL"
  - patterns:
    - pattern-inside: com.opensymphony.xwork2.util.TextParseUtil.translateVariablesCollection($VAL,
        ...)
    - pattern: "$VAL"
  - pattern: com.opensymphony.xwork2.util.TextParseUtil.shallBeIncluded(...)
  - pattern: com.opensymphony.xwork2.util.TextParseUtil.commaDelimitedStringToSet(...)
  - patterns:
    - pattern-inside: "(com.opensymphony.xwork2.util.TextParser $P).evaluate($VAR,
        $VAL, ...)"
    - pattern: "$VAL"
  - patterns:
    - pattern-inside: "(com.opensymphony.xwork2.util.OgnlTextParser $P).evaluate($VAR,
        $VAL, ...)"
    - pattern: "$VAL"
  - pattern: "(com.opensymphony.xwork2.ognl.OgnlReflectionProvider $P).getGetMethod($CLZ,
      ...)"
  - pattern: "(com.opensymphony.xwork2.ognl.OgnlReflectionProvider $P).getSetMethod($CLZ,
      ...)"
  - pattern: "(com.opensymphony.xwork2.ognl.OgnlReflectionProvider $P).getField($CLZ,
      ...)"
  - patterns:
    - pattern-inside: "(com.opensymphony.xwork2.ognl.OgnlReflectionProvider $P).setProperties($MAP,
        ...)"
    - pattern: "$MAP"
  - patterns:
    - pattern-inside: "(com.opensymphony.xwork2.ognl.OgnlReflectionProvider $P).setProperty($VAL,
        ...)"
    - pattern: "$VAL"
  - patterns:
    - pattern-inside: "(com.opensymphony.xwork2.ognl.OgnlReflectionProvider $P).getValue($VAL,
        ...)"
    - pattern: "$VAL"
  - patterns:
    - pattern-inside: "(com.opensymphony.xwork2.ognl.OgnlReflectionProvider $P).setValue($VAL,
        ...)"
    - pattern: "$VAL"
  - pattern: "(com.opensymphony.xwork2.util.reflection.ReflectionProvider $P).getGetMethod($CLZ,
      ...)"
  - pattern: "(com.opensymphony.xwork2.util.reflection.ReflectionProvider $P).getSetMethod($CLZ,
      ...)"
  - pattern: "(com.opensymphony.xwork2.util.reflection.ReflectionProvider $P).getField($CLZ,
      ...)"
  - patterns:
    - pattern-inside: "(com.opensymphony.xwork2.util.reflection.ReflectionProvider
        $P).setProperties($MAP, ...)"
    - pattern: "$MAP"
  - patterns:
    - pattern-inside: "(com.opensymphony.xwork2.util.reflection.ReflectionProvider
        $P).setProperty($VAR, ...)"
    - pattern: "$VAR"
  - patterns:
    - pattern-inside: "(com.opensymphony.xwork2.util.reflection.ReflectionProvider
        $P).getValue($VAR, ...)"
    - pattern: "$VAR"
  - patterns:
    - pattern-inside: "(com.opensymphony.xwork2.util.reflection.ReflectionProvider
        $P).setValue($VAR, ...)"
    - pattern: "$VAR"
  - patterns:
    - pattern-inside: "(com.opensymphony.xwork2.ognl.OgnlUtil $P).setProperties($MAP,
        ...)"
    - pattern: "$MAP"
  - patterns:
    - pattern-inside: "(com.opensymphony.xwork2.ognl.OgnlUtil $P).setProperty($VAR,
        ...)"
    - pattern: "$VAR"
  - patterns:
    - pattern-inside: "(com.opensymphony.xwork2.ognl.OgnlUtil $P).getValue($VAR, ...)"
    - pattern: "$VAR"
  - patterns:
    - pattern-inside: "(com.opensymphony.xwork2.ognl.OgnlUtil $P).setValue($VAR, ...)"
    - pattern: "$VAR"
  - patterns:
    - pattern-inside: "(com.opensymphony.xwork2.ognl.OgnlUtil $P).callMethod($VAR,
        ...)"
    - pattern: "$VAR"
  - patterns:
    - pattern-inside: "(com.opensymphony.xwork2.ognl.OgnlUtil $P).compile($VAR, ...)"
    - pattern: "$VAR"
  - pattern: "(org.apache.struts2.util.VelocityStrutsUtil $P).evaluate(...)"
  - pattern: org.apache.struts2.util.StrutsUtil.findString(...)
  - pattern: org.apache.struts2.util.StrutsUtil.findValue(..., $VAL)
  - pattern: org.apache.struts2.util.StrutsUtil.getText(...)
  - pattern: org.apache.struts2.util.StrutsUtil.translateVariables(...)
  - patterns:
    - pattern-inside: org.apache.struts2.util.StrutsUtil.makeSelectList($VAR, ...)
    - pattern: "$VAR"
  - patterns:
    - pattern-inside: "(org.apache.struts2.views.jsp.ui.OgnlTool $T).findValue($VAR,
        ...)"
    - pattern: "$VAR"
  - pattern: "(com.opensymphony.xwork2.util.ValueStack $V).findString(...)"
  - patterns:
    - pattern-inside: "(com.opensymphony.xwork2.util.ValueStack $V).findValue($VAR,
        ...)"
    - pattern: "$VAR"
  - patterns:
    - pattern-inside: "(com.opensymphony.xwork2.util.ValueStack $V).setValue($VAR,
        ...)"
    - pattern: "$VAR"
  - patterns:
    - pattern-inside: "(com.opensymphony.xwork2.util.ValueStack $V).setParameter($VAR,
        ...)"
    - pattern: "$VAR"
  message: |
    The Object Graph Navigation Language (OGNL) is an expression language that allows access to
    Java objects and properties stored in an ActionContext. Usage of these low-level
    functions is discouraged because they can effectively execute strings as code, leading to
    remote code execution vulnerabilities. Consider using struts tags when processing
    user-supplied input and templates.

    Much like the Struts security guide recommending to not use raw `${}` EL expressions,
    do not call or use the following OGNL packages with user-supplied input:

    - `com.opensymphony.xwork2.ognl`
    - `com.opensymphony.xwork2.util`
    - `com.opensymphony.xwork2.util.reflection`
    - `org.apache.struts2.util.StrutsUtil`

    For more information on Struts2 security see:
    https://struts.apache.org/security/#do-not-use-incoming-untrusted-user-input-in-forced-expression-evaluation
  severity: WARNING
  metadata:
    shortDescription: Expression injection (OGNL)
    category: security
    cwe: CWE-917
    technology:
    - java
    primary_identifier: find_sec_bugs.OGNL_INJECTION-1
    secondary_identifiers:
    - name: Find Security Bugs-OGNL_INJECTION
      type: find_sec_bugs_type
      value: OGNL_INJECTION
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.OGNL_INJECTION-1
    shortlink: https://sg.run/Gb4n
    semgrep.dev:
      rule:
        rule_id: DbU2QO
        version_id: 5PTdP15
        url: https://semgrep.dev/playground/r/5PTdP15/gitlab.find_sec_bugs.OGNL_INJECTION-1
        origin: community
- id: gitlab.find_sec_bugs.OVERLY_PERMISSIVE_FILE_PERMISSION-1
  languages:
  - java
  patterns:
  - pattern-either:
    - pattern: java.nio.file.Files.setPosixFilePermissions(..., java.nio.file.attribute.PosixFilePermissions.fromString("$PERM_STRING"));
    - pattern: |
        $PERMISSIONS = java.nio.file.attribute.PosixFilePermissions.fromString("$PERM_STRING");
        ...
        java.nio.file.Files.setPosixFilePermissions(..., $PERMISSIONS);
  - metavariable-regex:
      metavariable: "$PERM_STRING"
      regex: "[rwx-]{6}[rwx]{1,}"
  message: |
    The application was found setting file permissions to overly permissive values. Consider
    using the following values if the application user is the only process to access
    the file:

    - `r--` - read only access to the file
    - `w--` - write only access to the file
    - `rw-` - read/write access to the file

    Example setting read/write permissions for only the owner of a `Path`:
    ```
    // Get a reference to the path
    Path path = Paths.get("/tmp/somefile");
    // Create a PosixFilePermission set from java.nio.file.attribute
    Set<PosixFilePermission> permissions =
    java.nio.file.attribute.PosixFilePermissions.fromString("rw-------");
    // Set the permissions
    java.nio.file.Files.setPosixFilePermissions(path, permissions);
    ```

    For all other values please see:
    https://en.wikipedia.org/wiki/File-system_permissions#Symbolic_notation
  metadata:
    shortDescription: Incorrect permission assignment for critical resource
    cwe: CWE-732
    owasp: A6:2017-Security Misconfiguration
    category: security
    confidence: HIGH
    primary_identifier: find_sec_bugs.OVERLY_PERMISSIVE_FILE_PERMISSION-1
    secondary_identifiers:
    - name: Find Security Bugs-OVERLY_PERMISSIVE_FILE_PERMISSION
      type: find_sec_bugs_type
      value: OVERLY_PERMISSIVE_FILE_PERMISSION
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.OVERLY_PERMISSIVE_FILE_PERMISSION-1
    shortlink: https://sg.run/XW9A
    semgrep.dev:
      rule:
        rule_id: KxUwyj
        version_id: 6xTv5oy
        url: https://semgrep.dev/playground/r/6xTv5oy/gitlab.find_sec_bugs.OVERLY_PERMISSIVE_FILE_PERMISSION-1
        origin: community
  severity: WARNING
- id: gitlab.find_sec_bugs.PADDING_ORACLE-1
  languages:
  - java
  patterns:
  - pattern-inside: javax.crypto.Cipher.getInstance("...")
  - pattern-regex: "(/CBC/PKCS5Padding)"
  - pattern-not-regex: "^(RSA)/.*"
  - pattern-not-regex: "^(ECIES)$"
  message: |
    Cryptographic block ciphers can be configured to pad individual blocks if there is not enough
    input data to match the size of the block. This specific mode of CBC used in combination with
    PKCS5Padding is susceptible to padding oracle attacks. An adversary could potentially decrypt
    the message if the system exposed the difference between plaintext with invalid padding or
    valid padding. The distinction between valid and invalid padding is usually revealed through
    distinct error messages being returned for each condition.

    Consider switching to a more secure cipher that doesn't require padding and builds in message
    authentication integrity directly into the algorithm.

    Consider using `ChaCha20Poly1305` or
    `AES-256-GCM` instead.

    For older applications that don't have support for `ChaCha20Poly1305`, `AES-256-GCM` is
    recommended, however it has many drawbacks:
      - Slower than `ChaCha20Poly1305`.
      - Catastrophic failure if nonce values are reused.

    Example using `ChaCha20Poly1305`:
    ```
    public encrypt() throws Exception {
        chaChaEncryption("Secret text to encrypt".getBytes(StandardCharsets.UTF_8));
    }

    public SecureRandom getSecureRandomDRBG() throws NoSuchAlgorithmException {
        // Use DRBG according to
    http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-90Ar1.pdf
        return SecureRandom.getInstance("DRBG",
                // Security strength in bits (default is 128)
                DrbgParameters.instantiation(256,
                    // Set prediction resistance and re-seeding
                    DrbgParameters.Capability.PR_AND_RESEED,
                    // Set the personalization string (optional, not necessary)
                    "some_personalization_string".getBytes()
                )
        );
    }

    public Cipher getChaCha20Poly1305(int mode, byte[] ivKey, byte[] secretKey) throws
    NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException,
    InvalidAlgorithmParameterException  {
        // Get a DRBG random number generator instance
        SecureRandom random = getSecureRandomDRBG();
        // Create a ChaCha20-Poly1305 cipher instance
        Cipher chaChaCipher = Cipher.getInstance("ChaCha20-Poly1305/None/NoPadding");
        // Create our parameterSpec using our ivKey
        AlgorithmParameterSpec parameterSpec = new IvParameterSpec(ivKey);
        // Create a SecretKeySpec using our secretKey
        SecretKeySpec secretKeySpec = new SecretKeySpec(secretKey, "ChaCha20");
        // Initialize and return the cipher for the provided mode
        chaChaCipher.init(mode, secretKeySpec, parameterSpec, random);
        return chaChaCipher;
    }

    public void chaChaEncryption(byte[] plainText) throws NoSuchAlgorithmException,
    NoSuchPaddingException, InvalidKeyException, InvalidAlgorithmParameterException {
        // Get a DRBG random number generator instance
        SecureRandom random = getSecureRandomDRBG();
        // Create secretKey
        byte[] secretKey = new byte[32];
        random.nextBytes(secretKey);
        // Create an IV Key
        byte[] ivKey = new byte[12];
        random.nextBytes(ivKey);

        // Create a chaCha encryption cipher instance
        Cipher chaChaEncryptor = getChaCha20Poly1305(Cipher.ENCRYPT_MODE, ivKey, secretKey);

        // Encrypt the text using ChaCha20Poly1305
        byte[] cipherText = null;
        try {
            cipherText = chaChaEncryptor.doFinal(plainText);
        } catch (IllegalBlockSizeException | BadPaddingException e) {
            System.out.println("failed to encrypt text");
            return;
        }
        System.out.println("encrypted: " + Base64.getEncoder().encodeToString(cipherText));

         // Create a chaCha decryption cipher instance
        Cipher chaChaDecryptor = getChaCha20Poly1305(Cipher.DECRYPT_MODE, ivKey, secretKey);

        // Decrypt the text
        byte[] decryptedText = null;
        try {
            decryptedText = chaChaDecryptor.doFinal(cipherText);
        } catch (IllegalBlockSizeException | BadPaddingException e) {
            System.out.println("failed to decrypt text");
            return;
        }
        System.out.println("decrypted: " + new String(decryptedText, StandardCharsets.UTF_8));
    }
    ```

    For more information on padding oracle attacks see:
    https://en.wikipedia.org/wiki/Padding_oracle_attack

    For more information on Java Cryptography see:
    https://docs.oracle.com/en/java/javase/15/security/java-cryptography-architecture-jca-reference-guide.html
  severity: ERROR
  metadata:
    shortDescription: Use of a broken or risky cryptographic algorithm
    category: security
    cwe: CWE-327
    technology:
    - java
    primary_identifier: find_sec_bugs.PADDING_ORACLE-1
    secondary_identifiers:
    - name: Find Security Bugs-PADDING_ORACLE
      type: find_sec_bugs_type
      value: PADDING_ORACLE
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.PADDING_ORACLE-1
    shortlink: https://sg.run/eJ3E
    semgrep.dev:
      rule:
        rule_id: yyUDX2
        version_id: xyTKAzZ
        url: https://semgrep.dev/playground/r/xyTKAzZ/gitlab.find_sec_bugs.PADDING_ORACLE-1
        origin: community
- id: gitlab.find_sec_bugs.PERMISSIVE_CORS-2
  languages:
  - java
  mode: taint
  pattern-sources:
  - pattern: "(HttpServletRequest $REQ).getParamater(...)"
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern: (HttpServletResponse $RES).setHeader("$HEADER", ...)
      - pattern: (HttpServletResponse $RES).addHeader("$HEADER", ...)
    - metavariable-regex:
        metavariable: "$HEADER"
        regex: "(?i)(Access-Control-Allow-Origin)"
  message: |
    This application potentially allows user-supplied input into the value of the
    `Access-Control-Allow-Origin` response header. This header is part of the
    [Cross-Origin Resource Sharing](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) CORS
    specification. By allowing user input to specify which domains can communicate with this
    server,
    an adversary could exploit a weakness in this server to force clients to send credentials (such
    as session
    identifiers) to the adversary's server.

    For the above attack to work, the application would need to suffer from an additional
    vulnerability,
    such as Cross-Site Scripting (XSS).

    To remediate this issue, do not use user-supplied information when calling
    `HttpServletResponse.setHeader` or `HttpServletResponse.addHeader`
    for the `Access-Control-Allow-Origin` header's value. Instead, hardcode the allowed domain(s)
    and reference them in a lookup
    table:
    Example allowing dynamic but safe domains in `Access-Control-Allow-Origin`:

    ```
      // this data should be in the class constructor or taken from a trusted datasource
      Map<String, String> allowedDomains = new HashMap();
      allowedDomains.put("sub1", "sub1.example.com");
      allowedDomains.put("sub2", "sub2.example.com");

      // extract the allowedDomain parameters value as a key to look up which domain to provide
    via the allowedDomains map
      // if not found, sets sub1 as the default
      String headerValue = allowedDomains.getOrDefault(request.getParameter("allowedDomain"),
    allowedDomains.get("sub1"));

      // add the header with our trusted sub1.example.com or sub2.example.com domains.
      response.addHeader("Access-Control-Allow-Origin", headerValue);
    }
    ```

    For more information on `Access-Control-Allow-Origin` see:
    https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Origin
  severity: ERROR
  metadata:
    shortDescription: Permissive cross-domain policy with untrusted domains
    cwe: CWE-942
    category: security
    technology:
    - java
    primary_identifier: find_sec_bugs.PERMISSIVE_CORS-2
    secondary_identifiers:
    - name: Find Security Bugs-PERMISSIVE_CORS
      type: find_sec_bugs_type
      value: PERMISSIVE_CORS
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.PERMISSIVE_CORS-2
    shortlink: https://sg.run/bWNr
    semgrep.dev:
      rule:
        rule_id: pKUbrw
        version_id: yeTRBpy
        url: https://semgrep.dev/playground/r/yeTRBpy/gitlab.find_sec_bugs.PERMISSIVE_CORS-2
        origin: community
- id: gitlab.find_sec_bugs.PREDICTABLE_RANDOM-1
  languages:
  - java
  patterns:
  - pattern-either:
    - pattern: |
        java.util.Random $R = new java.util.Random();
        ...
        $R.$METHOD();
    - pattern: "(java.util.Random $R).$METHOD()"
    - pattern: new java.util.Random().$METHOD()
    - pattern: org.apache.commons.lang.math.RandomUtils.$METHOD()
    - pattern: org.apache.commons.lang.RandomStringUtils.$METHOD(...)
  - metavariable-regex:
      metavariable: "$METHOD"
      regex: "^(next|random)"
  message: |
    Depending on the context, generating weak random numbers may expose cryptographic functions
    which rely on these numbers, to be exploitable. When generating numbers for sensitive values
    such as tokens, nonces, and cryptographic keys, it is recommended that the `DRBG` instance
    of `SecureRandom` be used.

    Example using `DRBG` with `SecureRandom`:
    ```
    public SecureRandom getSecureRandomDRBG() throws NoSuchAlgorithmException {
    // Use DRBG according to
    http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-90Ar1.pdf
        return SecureRandom.getInstance("DRBG",
                // Security strength in bits (default is 128)
                DrbgParameters.instantiation(256,
                    // Set prediction resistance and re-seeding
                    DrbgParameters.Capability.PR_AND_RESEED,
                    // Set the personalization string (optional, not necessary)
                    "some_personalization_string".getBytes()
                )
        );
    }
    ```

    For more information on Java Cryptography see:
    https://docs.oracle.com/en/java/javase/15/security/java-cryptography-architecture-jca-reference-guide.html
  severity: WARNING
  metadata:
    shortDescription: Use of insufficiently random values
    category: security
    cwe: CWE-330
    technology:
    - java
    primary_identifier: find_sec_bugs.PREDICTABLE_RANDOM-1
    secondary_identifiers:
    - name: Find Security Bugs-PREDICTABLE_RANDOM
      type: find_sec_bugs_type
      value: PREDICTABLE_RANDOM
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.PREDICTABLE_RANDOM-1
    shortlink: https://sg.run/1kbD
    semgrep.dev:
      rule:
        rule_id: lBUXPJ
        version_id: zyTKAZ8
        url: https://semgrep.dev/playground/r/zyTKAZ8/gitlab.find_sec_bugs.PREDICTABLE_RANDOM-1
        origin: community
- id: gitlab.find_sec_bugs.PT_ABSOLUTE_PATH_TRAVERSAL-1
  languages:
  - java
  mode: taint
  pattern-sanitizers:
  - pattern: org.apache.commons.io.FilenameUtils.getName(...)
  pattern-sinks:
  - patterns:
    - pattern-inside: "$U = new java.net.URI($VAR)\n"
    - pattern-either:
      - pattern-inside: new java.io.File($U)
      - pattern-inside: java.nio.file.Paths.get($U)
    - pattern: "$VAR"
  - patterns:
    - pattern-inside: new java.io.RandomAccessFile($INPUT,...)
    - pattern: "$INPUT"
  - pattern: new java.io.FileReader(...)
  - pattern: new javax.activation.FileDataSource(...)
  - pattern: new java.io.FileInputStream(...)
  - pattern: new java.io.File(...)
  - pattern: java.nio.file.Paths.get(...)
  - pattern: java.io.File.createTempFile(...)
  - pattern: java.io.File.createTempDirectory(...)
  - pattern: java.nio.file.Files.createTempFile(...)
  - pattern: java.nio.file.Files.createTempDirectory(...)
  - patterns:
    - pattern: "$SRC.$METHOD(...)"
    - metavariable-pattern:
        metavariable: "$SRC"
        pattern-either:
        - pattern: getClass()
        - pattern: getClass().getClassLoader()
        - pattern: "(ClassLoader $C)"
        - pattern: "(Class $C)"
        - pattern: "$CLZ.getClassLoader()"
    - metavariable-pattern:
        metavariable: "$METHOD"
        pattern-either:
        - pattern: getResourceAsStream
        - pattern: getResource
  - patterns:
    - pattern-inside: new java.io.FileWriter($PATH, ...)
    - pattern: "$PATH"
  - patterns:
    - pattern-inside: new java.io.FileOutputStream($PATH, ...)
    - pattern: "$PATH"
  pattern-sources:
  - pattern: "(HttpServletRequest $REQ).getParameter(...)"
  - patterns:
    - pattern-inside: "$FUNC(..., @RequestParam $TYPE $REQ, ...) {...}"
    - focus-metavariable: "$REQ"
  message: |
    The application dynamically constructs file or path information. If the path
    information comes from user input, it could be abused to read sensitive files,
    access other users' data, or aid in exploitation to gain further system access.

    User input should never be used in constructing paths or files for interacting
    with the filesystem. This includes filenames supplied by user uploads or downloads.
    If possible, consider hashing user input or replacing it with unique values and
    use `Path.resolve` to resolve and validate the path information
    prior to processing any file functionality.

    Example using `Path.resolve` and not allowing direct user input:
    ```
    // Class to store our user data along with a randomly generated file name
    public static class UserData {
        private String userFileNameUnsafe;
        private String fileName;
        public UserData(String userFileName) {
            this.userFileNameUnsafe = userFileName;
            // Generate a random ID for the filename
            this.fileName = UUID.randomUUID().toString();
        }
        public String getUserFileNameUnsafe() { return userFileNameUnsafe; };
        public String getFileName() { return fileName; };
    }

    public static void main(String[] args) throws Exception {
        // User input, saved only as a reference
        UserData userData = new UserData("..\\test.txt");
        // Restrict all file processing to this directory only
        String base = "/var/app/restricted";
        Path basePath = Paths.get(base);
        // Resolve the full path, but only use our random generated filename
        Path fullPath = basePath.resolve(userData.getFileName());
        // verify the path is contained within our basePath
        if (!fullPath.startsWith(base)) {
            throw new Exception("Invalid path specified!");
        }
        // process / work with file
    }
    ```

    For more information on path traversal issues see OWASP:
    https://owasp.org/www-community/attacks/Path_Traversal
  severity: WARNING
  metadata:
    shortDescription: Improper limitation of a pathname to a restricted directory
      ('Path Traversal')
    category: security
    cwe: CWE-22
    technology:
    - java
    primary_identifier: find_sec_bugs.PT_ABSOLUTE_PATH_TRAVERSAL-1
    secondary_identifiers:
    - name: Find Security Bugs-PT_ABSOLUTE_PATH_TRAVERSAL
      type: find_sec_bugs_type
      value: PT_ABSOLUTE_PATH_TRAVERSAL
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.PT_ABSOLUTE_PATH_TRAVERSAL-1
    shortlink: https://sg.run/Ben5
    semgrep.dev:
      rule:
        rule_id: KxUwlN
        version_id: A8T9r29
        url: https://semgrep.dev/playground/r/A8T9r29/gitlab.find_sec_bugs.PT_ABSOLUTE_PATH_TRAVERSAL-1
        origin: community
- id: gitlab.find_sec_bugs.REQUESTDISPATCHER_FILE_DISCLOSURE-1.STRUTS_FILE_DISCLOSURE-1.SPRING_FILE_DISCLOSURE-1
  languages:
  - java
  mode: taint
  pattern-sinks:
  - patterns:
    - pattern: new org.springframework.web.servlet.ModelAndView($FST);
    - pattern: "$FST"
  - patterns:
    - pattern: new org.springframework.web.servlet.ModelAndView($FST, $SND);
    - pattern: "$FST"
  - patterns:
    - pattern: new org.springframework.web.servlet.ModelAndView($FST, $SND, $TRD);
    - pattern: "$FST"
  - patterns:
    - pattern: new org.apache.struts.action.ActionForward($FST)
    - pattern: "$FST"
  - patterns:
    - pattern: new org.apache.struts.action.ActionForward($FST, $SND)
    - pattern: "$FST"
  - patterns:
    - pattern: new org.apache.struts.action.ActionForward($FST, $SND, $TRD)
    - pattern: "$SND"
  - patterns:
    - pattern: new org.apache.struts.action.ActionForward($FST, $SND, $TRD)
    - pattern: "$TRD"
  - patterns:
    - pattern-inside: |
        $ACTION = new org.apache.struts.action.ActionForward();
        ...
    - pattern: "$ACTION.setPath(...)"
  - patterns:
    - pattern-inside: |
        $MVC = new org.springframework.web.servlet.ModelAndView();
        ...
    - pattern: "$MVC.setViewName(...);"
  - patterns:
    - pattern-inside: |
        $REQ = $HTTP.getRequestDispatcher(...);
        ...
    - pattern-either:
      - pattern: "$REQ.include($FST, $SND)"
      - pattern: "$REQ.forward($FST, $SND)"
  pattern-sources:
  - pattern: "(javax.servlet.http.HttpServletRequest $VAR).getParameter(...)"
  message: |
    The `org.springframework.web.servlet.ModelAndView` class and
    `HttpRequest.getRequestDispatcher()`'s `include` and `forward` methods may
    potentially allow access to restricted files if called with user-supplied input.

    For Spring MVC, the ModelAndView class looks up a view by name to resolve a `.jsp`
    file. If this view name comes from user-supplied input, it could be abused to attempt
    to return a JSP view that the user should not have access to.

    The `HttpRequest.getRequestDispatcher()`'s `include` and `forward` methods will return
    any file that is resolvable within the web application context. This includes the `web.xml`
    file, any compiled classes, `jsp` files, and additional JAR or WAR libraries that are
    accessible.

    Never pass user-supplied input directly to any of these methods. Use a lookup table or
    hardcode
    which views or paths the user should be directed to. Another option is to use a simple HTTP
    redirect by returning an empty response body with a 301 status code and a `Location` redirect
    header. In Java servlets, this can be done by using the `response.sendRedirect(...)` method.

    Example using a lookup table to resolve a view from a Spring MVC application:
    ```
    @RequestMapping(value="/mvc", method=RequestMethod.GET)
    public ModelAndView mvc(HttpServletRequest request, HttpServletResponse response, Model model)
     {
      // Create a look up table or pull from a data source
      HashMap<String, String> lookupTable = new HashMap<>();
      lookupTable.put("key1", "view1");
      lookupTable.put("key2", "view2");
      // Get user input
      String userInput = request.getParameter("key");
      // Look up view from the user input
      String viewValue = lookupTable.getOrDefault(userInput, userInput);
      // return the new model and view
      return new ModelAndView(viewValue);
    }
    ```

    Example using a redirect instead of a `RequestDispatcher`:
    ```
    // Create a look up table or pull from a data source
    HashMap<String, String> lookupTable = new HashMap<>();
    lookupTable.put("key1", "/Resource1");
    lookupTable.put("key2", "/Resource2");
    // Get user input
    String userInput = request.getParameter("key");
    // Look up resource to redirect to from the user input
    String redirectValue = lookupTable.getOrDefault(userInput, "/Resource1");
    // Redirect the user
    response.sendRedirect(redirectValue);
    ```
  metadata:
    shortDescription: Files or directories accessible to external parties
    category: security
    cwe: CWE-552
    primary_identifier: find_sec_bugs.REQUESTDISPATCHER_FILE_DISCLOSURE-1.STRUTS_FILE_DISCLOSURE-1.SPRING_FILE_DISCLOSURE-1
    secondary_identifiers:
    - name: Find Security Bugs-REQUESTDISPATCHER_FILE_DISCLOSURE
      type: find_sec_bugs_type
      value: REQUESTDISPATCHER_FILE_DISCLOSURE
    - name: Find Security Bugs-STRUTS_FILE_DISCLOSURE
      type: find_sec_bugs_type
      value: STRUTS_FILE_DISCLOSURE
    - name: Find Security Bugs-SPRING_FILE_DISCLOSURE
      type: find_sec_bugs_type
      value: SPRING_FILE_DISCLOSURE
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.REQUESTDISPATCHER_FILE_DISCLOSURE-1.STRUTS_FILE_DISCLOSURE-1.SPRING_FILE_DISCLOSURE-1
    shortlink: https://sg.run/PPWq
    semgrep.dev:
      rule:
        rule_id: ReU2bl
        version_id: l4T4rR7
        url: https://semgrep.dev/playground/r/l4T4rR7/gitlab.find_sec_bugs.REQUESTDISPATCHER_FILE_DISCLOSURE-1.STRUTS_FILE_DISCLOSURE-1.SPRING_FILE_DISCLOSURE-1
        origin: community
  severity: ERROR
- id: gitlab.find_sec_bugs.RSA_KEY_SIZE-1
  languages:
  - java
  patterns:
  - pattern-either:
    - patterns:
      - pattern-inside: |
          $GEN = KeyPairGenerator.getInstance($ALG, ...);
          ...
      - pattern-either:
        - pattern: "$VAR.initialize($SIZE, ...);"
        - pattern: new java.security.spec.RSAKeyGenParameterSpec($SIZE,...);
      - metavariable-comparison:
          comparison: "$SIZE < 2048"
          metavariable: "$SIZE"
      - metavariable-regex:
          metavariable: "$ALG"
          regex: '"(RSA|DSA)"'
  message: |
    The application is generating an RSA key that is less than the recommended 2048 bits.
    The National Institute of Standards and Technology (NIST) deprecated signing Digital
    Certificates that contained RSA Public Keys of 1024 bits in December 2010. While
    1024-bit RSA keys have not been factored yet, advances in compute may make it possible
    in the near future.

    Consider upgrading to the newer asymmetric algorithm such as `Ed25519` which handles
    the complexities of generating key pairs and choosing correct key sizes for you:
    ```
    public static KeyPair generateEd25519() throws NoSuchAlgorithmException {
        // Choose Ed25519 for KeyPairGenerator Instance
        KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance("Ed25519");
        // Generate a KeyPair and return
        return keyPairGenerator.generateKeyPair();
    }
    ```

    Otherwise use a key size greater than 2048 when generating RSA keys:
    ```
    public static KeyPair generateRSA() throws NoSuchAlgorithmException {
        // Choose RSA for KeyPairGenerator Instance
        KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance("RSA");
        // Initialize with 2048 key size
        keyPairGenerator.initialize(2048);
        // Generate a KeyPair and return
        return keyPairGenerator.generateKeyPair();
    }
    ```

    For more information on Ed25519 see: http://ed25519.cr.yp.to/

    For more information on Java Cryptography see:
    https://docs.oracle.com/en/java/javase/15/security/java-cryptography-architecture-jca-reference-guide.html
  metadata:
    shortDescription: Inadequate encryption strength
    category: security
    cwe: CWE-326
    primary_identifier: find_sec_bugs.RSA_KEY_SIZE-1
    secondary_identifiers:
    - name: Find Security Bugs-RSA_KEY_SIZE
      type: find_sec_bugs_type
      value: RSA_KEY_SIZE
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.RSA_KEY_SIZE-1
    shortlink: https://sg.run/nwLb
    semgrep.dev:
      rule:
        rule_id: kxUO7W
        version_id: d6TrQx8
        url: https://semgrep.dev/playground/r/d6TrQx8/gitlab.find_sec_bugs.RSA_KEY_SIZE-1
        origin: community
  severity: WARNING
- id: gitlab.find_sec_bugs.RSA_NO_PADDING-1
  languages:
  - java
  patterns:
  - pattern: javax.crypto.Cipher.getInstance($ALG,...);
  - metavariable-regex:
      metavariable: "$ALG"
      regex: ".*NoPadding.*"
  message: |
    The software uses the RSA algorithm but does not incorporate Optimal Asymmetric
    Encryption Padding (OAEP). By not enabling padding, the algorithm maybe vulnerable
    to [chosen plaintext attacks](https://en.wikipedia.org/wiki/Chosen-plaintext_attack).

    To enable OAEP mode, pass `RSA/ECB/OAEPWithSHA-256AndMGF1Padding` to the `Cipher.getInstance`
    method.

    Example encrypting and decrypting a message using RSA with OAEP:
    ```
    public static void encryptWithRSA() throws InvalidKeyException, NoSuchAlgorithmException,
    NoSuchPaddingException, IllegalBlockSizeException, BadPaddingException {
        // Generate an RSA Public and Private Key Pair
        KeyPair keyPair = generateRSAKeys();
        // Create a Cipher instance using RSA, ECB with OAEP
        Cipher rsaEncryptor = Cipher.getInstance("RSA/ECB/OAEPWithSHA-256AndMGF1Padding");
        // Initialize to ENCRYPT_MODE with the public key
        rsaEncryptor.init(Cipher.ENCRYPT_MODE, keyPair.getPublic());
        // Encrypt our secret message
        byte[] cipherText = rsaEncryptor.doFinal("Some secret
    message".getBytes(StandardCharsets.UTF_8));

        // Create a Cipher instance using RSA, ECB with OAEP
        Cipher rsaDecryptor = Cipher.getInstance("RSA/ECB/OAEPWithSHA-256AndMGF1Padding");
        // Initialize to DECRYPT_MODE with the private key
        rsaDecryptor.init(Cipher.DECRYPT_MODE, keyPair.getPrivate());
        // Decrypt the secret message
        byte[] plainText = rsaDecryptor.doFinal(cipherText);
        // Debug output
        System.out.println(new String(plainText));
    }
    ```
    More information on Optimal asymmetric encryption padding:
    https://en.wikipedia.org/wiki/Optimal_asymmetric_encryption_padding

    For more information on Java Cryptography see:
    https://docs.oracle.com/en/java/javase/15/security/java-cryptography-architecture-jca-reference-guide.html
  metadata:
    shortDescription: Use of RSA algorithm without OAEP
    category: security
    cwe: CWE-780
    primary_identifier: find_sec_bugs.RSA_NO_PADDING-1
    secondary_identifiers:
    - name: Find Security Bugs-RSA_NO_PADDING
      type: find_sec_bugs_type
      value: RSA_NO_PADDING
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.RSA_NO_PADDING-1
    shortlink: https://sg.run/7Qr4
    semgrep.dev:
      rule:
        rule_id: x8Ud4w
        version_id: nWTx8Lk
        url: https://semgrep.dev/playground/r/nWTx8Lk/gitlab.find_sec_bugs.RSA_NO_PADDING-1
        origin: community
  severity: WARNING
- id: gitlab.find_sec_bugs.SAML_IGNORE_COMMENTS-1
  languages:
  - java
  message: |
    SAML parses attestations as an XML document. By processing XML comments,
    comment fields can end up modifying the interpretation of input fields.
    This could allow an adversary to insert an XML comment to break up the attestation's
    username or other fields, allowing an attacker to bypass authorization or authentication
    checks.

    To remediate this issue, when using `org.opensaml.xml.parse.BasicParserPool` ensure
    `setIgnoreComments(true)` is called.

    For more information on how this issue can be exploited see:
    https://developer.okta.com/blog/2018/02/27/a-breakdown-of-the-new-saml-authentication-bypass-vulnerability

    For more information on SAML security see OWASP:
    https://cheatsheetseries.owasp.org/cheatsheets/SAML_Security_Cheat_Sheet.html
  metadata:
    shortDescription: Improper authentication
    cwe: CWE-287
    category: security
    primary_identifier: find_sec_bugs.SAML_IGNORE_COMMENTS-1
    secondary_identifiers:
    - name: Find Security Bugs-SAML_IGNORE_COMMENTS
      type: find_sec_bugs_type
      value: SAML_IGNORE_COMMENTS
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.SAML_IGNORE_COMMENTS-1
    shortlink: https://sg.run/EzGA
    semgrep.dev:
      rule:
        rule_id: kxUOAp
        version_id: e1T0LOo
        url: https://semgrep.dev/playground/r/e1T0LOo/gitlab.find_sec_bugs.SAML_IGNORE_COMMENTS-1
        origin: community
  pattern: "(BasicParserPool $POOL).setIgnoreComments(false);"
  severity: WARNING
- id: gitlab.find_sec_bugs.SCRIPT_ENGINE_INJECTION-1.SPEL_INJECTION-1.EL_INJECTION-2.SEAM_LOG_INJECTION-1
  languages:
  - java
  patterns:
  - pattern: "(javax.script.ScriptEngine $ENGINE).eval($ARG);"
  - pattern-not: (javax.script.ScriptEngine $ENGINE).eval("...");
  message: |
    The application executes an argument using a `ScriptEngine`'s `eval` method. This
    may allow for direct OS commands to be executed as it's possible to pass in strings
    such as `java.lang.Runtime.getRuntime().exec('/bin/sh ...');`.

    Never pass user-supplied input directly to the `eval` function. If possible hardcode all
    JavasScript code or use a lookup table to resolve user input to known values. If none of these
    techniques are possible, use `javax.script.Bindings` to pass input to the script engine.

    Example using `Binding` to safely pass in string values:
    ```
    // Get ECMAScript engine
    ScriptEngine engine = new ScriptEngineManager().getEngineByName("ECMAScript");

    // User input, consisting of first and last name
    String userFirstName = "John";
    String userLastName = "Snow";

    // Create bindings to pass into our script, forcing the values to be String.
    Bindings bindings = engine.createBindings();
    bindings.put("fname", new String(userFirstName));
    bindings.put("lname", new String(userLastName));

    // Example script that concatenates a greeting with the user-supplied input first/last name
    String script = "var greeting='Hello ';" +
    // fname and lname variables will be resolved by our bindings defined above
    "greeting += fname + ' ' + lname;" +
    // prints greeting
    "greeting";

    try {
      // Execute the script, passing in the bindings
      Object bindingsResult = engine.eval(script, bindings);
      // Work with result
      // ...
    } catch (ScriptException e) {
      // Handle exception
      e.printStackTrace();
    }
    ```
  severity: ERROR
  metadata:
    shortDescription: Improper control of generation of code ('Code Injection')
    category: security
    cwe: CWE-94
    primary_identifier: find_sec_bugs.SCRIPT_ENGINE_INJECTION-1.SPEL_INJECTION-1.EL_INJECTION-2.SEAM_LOG_INJECTION-1
    secondary_identifiers:
    - name: Find Security Bugs-SCRIPT_ENGINE_INJECTION
      type: find_sec_bugs_type
      value: SCRIPT_ENGINE_INJECTION
    - name: Find Security Bugs-SPEL_INJECTION
      type: find_sec_bugs_type
      value: SPEL_INJECTION
    - name: Find Security Bugs-EL_INJECTION
      type: find_sec_bugs_type
      value: EL_INJECTION
    - name: Find Security Bugs-SEAM_LOG_INJECTION
      type: find_sec_bugs_type
      value: SEAM_LOG_INJECTION
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.SCRIPT_ENGINE_INJECTION-1.SPEL_INJECTION-1.EL_INJECTION-2.SEAM_LOG_INJECTION-1
    shortlink: https://sg.run/93d4
    semgrep.dev:
      rule:
        rule_id: YGUYPE
        version_id: pZT16YL
        url: https://semgrep.dev/playground/r/pZT16YL/gitlab.find_sec_bugs.SCRIPT_ENGINE_INJECTION-1.SPEL_INJECTION-1.EL_INJECTION-2.SEAM_LOG_INJECTION-1
        origin: community
- id: gitlab.find_sec_bugs.SCRIPT_ENGINE_INJECTION-2
  languages:
  - java
  patterns:
  - pattern: "($PARSER $P).parseExpression($ARG);"
  - pattern-not: ($PARSER $P).parseExpression("...");
  - metavariable-pattern:
      metavariable: "$PARSER"
      pattern-either:
      - pattern: org.springframework.expression.spel.standard.SpelExpressionParser
      - pattern: org.springframework.expression.ExpressionParser
  message: |
    The application was found calling SpringFramework's `SpelExpressionParser.parseExpression`.
    Calling this method directly with user-supplied input may allow an adversary to
    execute arbitrary Java code including OS system commands.

    Never call `parseExpression` or `parseRaw` directly with user-supplied input. Consider
    alternate
    methods such as a lookup table to take user input and resolve hardcoded values.

    Later versions of SpringFramework introduced a `SimpleEvaluationContext` which can be
    used to access bound data when calling the `getValue` result of `parseExpression`. This
    `SimpleEvaluationContext` has a reduced set of functionality and can restrict data binding
    to read-only or read-write contexts. An adversary could still access public properties
    or fields on custom types that have been provided to the evaluation context. Use with caution.

    Example using `SimpleEvaluationContext` with a read-write data binding context:
    ```
    @RequestMapping(value="/spel", method=RequestMethod.POST)
    public String spel(@Validated User user, Model model)  {
      // Create the Expression Parser
      SpelExpressionParser parser = new SpelExpressionParser();
      // Parse the expression
      Expression parsedExpression = parser.parseExpression(model.getPossiblyUnsafeData());
      // Create the read-write data binding context
      SimpleEvaluationContext context = SimpleEvaluationContext.forReadWriteDataBinding().build();
      // Execute the expression, passing in the read-write context
      Object result = parsedExpression.getValue(context);
      // work with the result
      // ...
      return "user";
    }
    ```

    For more information on SimpleEvaluationContext see:
    https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/expression/spel/support/SimpleEvaluationContext.html
  severity: ERROR
  metadata:
    shortDescription: Improper neutralization of special elements used in an expression
      language statement ('Expression Language Injection')
    category: security
    cwe: CWE-917
    primary_identifier: find_sec_bugs.SCRIPT_ENGINE_INJECTION-2
    secondary_identifiers:
    - name: Find Security Bugs-SCRIPT_ENGINE_INJECTION
      type: find_sec_bugs_type
      value: SCRIPT_ENGINE_INJECTION
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.SCRIPT_ENGINE_INJECTION-2
    shortlink: https://sg.run/yJYr
    semgrep.dev:
      rule:
        rule_id: 6JUyKR
        version_id: 2KTzQjv
        url: https://semgrep.dev/playground/r/2KTzQjv/gitlab.find_sec_bugs.SCRIPT_ENGINE_INJECTION-2
        origin: community
- id: gitlab.find_sec_bugs.SMTP_HEADER_INJECTION-1
  languages:
  - java
  message: |
    The application was found calling `MimeMessage` methods without encoding
    new line characters. Much like HTTP, Simple Mail Transfer Protocol (SMTP) is a
    text based protocol that uses headers to convey additional directives for how
    email messages should be treated. An adversary could potentially cause email
    messages to be sent to unintended recipients by abusing the CC or BCC headers
    if they were able to inject them.

    To mitigate this issue, `\r\n` (CRLF) character sequences must be escaped
    or encoded prior to being used in any of the `MimeMessage` methods.

    Example that escapes values that come from user input with
    [Apache Commons Text](https://commons.apache.org/proper/commons-text/):
    ```
    // Create a MimeMessage with a javax.mail.Session
    Message message = new MimeMessage(session);
    // Set the from address
    message.setFrom(new InternetAddress("source@example.com"));
    // Set the to address
    message.setRecipients(Message.RecipientType.TO,new InternetAddress[] {new
    InternetAddress("destination@example.com")});
    // Example user input
    String subject = "potentially malicious data";
    String headerValue = "potentially malicious data";
    // Use Apache Commons Text StringEscapeUtils.escapeJava to encode \r\n to \\r\\n.
    message.setSubject(StringEscapeUtils.escapeJava(subject));
    // Use Apache Commons Text StringEscapeUtils.escapeJava to encode \r\n to \\r\\n.
    message.addHeader("HeaderName", StringEscapeUtils.escapeJava(header));
    // Use Apache Commons Text StringEscapeUtils.escapeJava to encode \r\n to \\r\\n.
    message.setDescription(StringEscapeUtils.escapeJava("some description"));
    // Use Apache Commons Text StringEscapeUtils.escapeJava to encode \r\n to \\r\\n.
    message.setDisposition(StringEscapeUtils.escapeJava("some disposition"));
    // Set the mail body text
    message.setText("Some email content.");
    // Send the message
    ```
  metadata:
    shortDescription: Improper neutralization of special elements used in a command
    category: security
    cwe: CWE-77
    primary_identifier: find_sec_bugs.SMTP_HEADER_INJECTION-1
    secondary_identifiers:
    - name: Find Security Bugs-SMTP_HEADER_INJECTION
      type: find_sec_bugs_type
      value: SMTP_HEADER_INJECTION
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.SMTP_HEADER_INJECTION-1
    shortlink: https://sg.run/bWve
    semgrep.dev:
      rule:
        rule_id: zdUGRr
        version_id: jQTg621
        url: https://semgrep.dev/playground/r/jQTg621/gitlab.find_sec_bugs.SMTP_HEADER_INJECTION-1
        origin: community
  patterns:
  - pattern-either:
    - patterns:
      - pattern-inside: |
          $M = new MimeMessage(...);
          ...
      - pattern: "$M.setSubject($ARG);"
      - pattern-not: $M.setSubject("...")
    - patterns:
      - pattern-inside: |
          $M = new MimeMessage(...);
          ...
      - pattern: "$M.addHeader($ARG1, $ARG2)"
      - pattern-not: $M.addHeader("...", "...")
    - patterns:
      - pattern-inside: |
          $M = new MimeMessage(...);
          ...
      - pattern: "$M.setDescription($ARG)"
      - pattern-not: $M.setDescription("...")
    - patterns:
      - pattern-inside: |
          $M = new MimeMessage(...);
          ...
      - pattern: "$M.setDisposition($ARG)"
      - pattern-not: $M.setDisposition("...")
  severity: ERROR
- id: gitlab.find_sec_bugs.SPRING_CSRF_PROTECTION_DISABLED-1
  languages:
  - java
  pattern-either:
  - pattern: "(org.springframework.security.config.annotation.web.builders.HttpSecurity
      $H). ... .csrf().disable();"
  - pattern: "(org.springframework.security.config.annotation.web.configurers.CsrfConfigurer<HttpSecurity>
      $C).disable();"
  message: |
    The application fails to protect against Cross-Site Request Forgery (CSRF)
    due to disabling Spring's CSRF protection features.

    The vulnerability can be exploited by an adversary creating a link or form on a third
    party site and tricking an authenticated victim to access them.

    To remediate this issue, remove the call to `HttpSecurity.csrf().disable()` or remove
    the custom `CsrfConfigurer`.

    For more information on CSRF protection in Spring see:
    https://docs.spring.io/spring-security/reference/servlet/exploits/csrf.html#servlet-csrf

    Additionally, consider setting all session cookies to have the `SameSite=Strict` attribute.
    It should be noted that this may impact usability when sharing links across other mediums.
    It is recommended that a two cookie based approach is taken, as outlined in the
    [Top level
    navigations](https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis-08#section-8.8.2)
    section
    of the SameSite RFC.

    For more information on CSRF see OWASP's guide:
    https://owasp.org/www-community/attacks/csrf
  metadata:
    shortDescription: Cross-Site Request Forgery (CSRF)
    category: security
    cwe: CWE-352
    primary_identifier: find_sec_bugs.SPRING_CSRF_PROTECTION_DISABLED-1
    secondary_identifiers:
    - name: Find Security Bugs-SPRING_CSRF_PROTECTION_DISABLED
      type: find_sec_bugs_type
      value: SPRING_CSRF_PROTECTION_DISABLED
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.SPRING_CSRF_PROTECTION_DISABLED-1
    shortlink: https://sg.run/DGLj
    semgrep.dev:
      rule:
        rule_id: 7KU6jz
        version_id: 8KTQqr0
        url: https://semgrep.dev/playground/r/8KTQqr0/gitlab.find_sec_bugs.SPRING_CSRF_PROTECTION_DISABLED-1
        origin: community
  severity: WARNING
- id: gitlab.find_sec_bugs.SQL_INJECTION_SPRING_JDBC-1.SQL_INJECTION_JPA-1.SQL_INJECTION_JDO-1.SQL_INJECTION_JDBC-1.SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE-1
  patterns:
  - pattern-not-inside: |
      final String $ARG = ...;
      ...
  - pattern-not-inside: |
      class $CLAZZ {
        ...
        final String $ARG = ...;
        ...
      }
  - pattern-either:
    - patterns:
      - pattern: "(javax.jdo.PersistenceManager $PM).newQuery($ARG)"
      - pattern-not: (javax.jdo.PersistenceManager $PM).newQuery("...")
    - patterns:
      - pattern: "(javax.jdo.PersistenceManager $PM).newQuery(..., $ARG)"
      - pattern-not: (javax.jdo.PersistenceManager $PM).newQuery(..., "...")
    - patterns:
      - pattern: "(javax.jdo.Query $Q).setFilter($ARG)"
      - pattern-not: (javax.jdo.Query $Q).setFilter("...")
    - patterns:
      - pattern: "(javax.jdo.Query $Q).setGrouping($ARG)"
      - pattern-not: (javax.jdo.Query $Q).setGrouping("...")
    - patterns:
      - pattern: "(javax.jdo.Query $Q).setGrouping($ARG)"
      - pattern-not: (javax.jdo.Query $Q).setGrouping("...")
    - patterns:
      - pattern: "(org.hibernate.criterion.Restrictions $H).sqlRestriction($ARG, ...)"
      - pattern-not: (org.hibernate.criterion.Restrictions $H).sqlRestriction("...",
          ...)
    - patterns:
      - pattern: "(org.hibernate.Session $S).createQuery((String $ARG), ...)"
      - pattern-not: (org.hibernate.Session $S).createQuery("...", ...)
    - patterns:
      - pattern: "(org.hibernate.Session $S).createSQLQuery($ARG, ...)"
      - pattern-not: (org.hibernate.Session $S).createSQLQuery("...", ...)
    - patterns:
      - pattern: "(java.sql.Statement $S).executeQuery($ARG, ...)"
      - pattern-not: (java.sql.Statement $S).createSQLQuery("...", ...)
    - patterns:
      - pattern: "(java.sql.Statement $S).execute($ARG, ...)"
      - pattern-not: (java.sql.Statement $S).execute("...", ...)
    - patterns:
      - pattern: "(java.sql.Statement $S).executeUpdate($ARG, ...)"
      - pattern-not: (java.sql.Statement $S).executeUpdate("...", ...)
    - patterns:
      - pattern: "(java.sql.Statement $S).executeLargeUpdate($ARG, ...)"
      - pattern-not: (java.sql.Statement $S).executeLargeUpdate("...", ...)
    - patterns:
      - pattern: "(java.sql.Statement $S).addBatch($ARG, ...)"
      - pattern-not: (java.sql.Statement $S).addBatch("...", ...)
    - patterns:
      - pattern: "(java.sql.PreparedStatement $S).executeQuery($ARG, ...)"
      - pattern-not: (java.sql.PreparedStatement $S).executeQuery("...", ...)
    - patterns:
      - pattern: "(java.sql.PreparedStatement $S).execute($ARG, ...)"
      - pattern-not: (java.sql.PreparedStatement $S).execute("...", ...)
    - patterns:
      - pattern: "(java.sql.PreparedStatement $S).executeUpdate($ARG, ...)"
      - pattern-not: (java.sql.PreparedStatement $S).executeUpdate("...", ...)
    - patterns:
      - pattern: "(java.sql.PreparedStatement $S).executeLargeUpdate($ARG, ...)"
      - pattern-not: (java.sql.PreparedStatement $S).executeLargeUpdate("...", ...)
    - patterns:
      - pattern: "(java.sql.PreparedStatement $S).addBatch($ARG, ...)"
      - pattern-not: (java.sql.PreparedStatement $S).addBatch("...", ...)
    - patterns:
      - pattern: "(java.sql.Connection $S).prepareCall($ARG, ...)"
      - pattern-not: (java.sql.Connection $S).prepareCall("...", ...)
    - patterns:
      - pattern: "(java.sql.Connection $S).prepareStatement($ARG, ...)"
      - pattern-not: (java.sql.Connection $S).prepareStatement("...", ...)
    - patterns:
      - pattern: "(java.sql.Connection $S).nativeSQL($ARG, ...)"
      - pattern-not: (java.sql.Connection $S).nativeSQL("...", ...)
    - patterns:
      - pattern: new org.springframework.jdbc.core.PreparedStatementCreatorFactory($ARG,
          ...)
      - pattern-not: new org.springframework.jdbc.core.PreparedStatementCreatorFactory("...",
          ...)
    - patterns:
      - pattern: "(org.springframework.jdbc.core.PreparedStatementCreatorFactory $F).newPreparedStatementCreator($ARG,
          ...)"
      - pattern-not: (org.springframework.jdbc.core.PreparedStatementCreatorFactory
          $F).newPreparedStatementCreator("...", ...)
    - patterns:
      - pattern: "(org.springframework.jdbc.core.JdbcOperations $O).batchUpdate($ARG,
          ...)"
      - pattern-not: (org.springframework.jdbc.core.JdbcOperations $O).batchUpdate("...",
          ...)
    - patterns:
      - pattern: "(org.springframework.jdbc.core.JdbcOperations $O).execute($ARG,
          ...)"
      - pattern-not: (org.springframework.jdbc.core.JdbcOperations $O).execute("...",
          ...)
    - patterns:
      - pattern: "(org.springframework.jdbc.core.JdbcOperations $O).query($ARG, ...)"
      - pattern-not: (org.springframework.jdbc.core.JdbcOperations $O).query("...",
          ...)
    - patterns:
      - pattern: "(org.springframework.jdbc.core.JdbcOperations $O).queryForList($ARG,
          ...)"
      - pattern-not: (org.springframework.jdbc.core.JdbcOperations $O).queryForList("...",
          ...)
    - patterns:
      - pattern: "(org.springframework.jdbc.core.JdbcOperations $O).queryForMap($ARG,
          ...)"
      - pattern-not: (org.springframework.jdbc.core.JdbcOperations $O).queryForMap("...",
          ...)
    - patterns:
      - pattern: "(org.springframework.jdbc.core.JdbcOperations $O).queryForObject($ARG,
          ...)"
      - pattern-not: (org.springframework.jdbc.core.JdbcOperations $O).queryForObject("...",
          ...)
    - patterns:
      - pattern: "(org.springframework.jdbc.core.JdbcOperations $O).queryForObject($ARG,
          ...)"
      - pattern-not: (org.springframework.jdbc.core.JdbcOperations $O).queryForObject("...",
          ...)
    - patterns:
      - pattern: "(org.springframework.jdbc.core.JdbcOperations $O).queryForRowSet($ARG,
          ...)"
      - pattern-not: (org.springframework.jdbc.core.JdbcOperations $O).queryForRowSet("...",
          ...)
    - patterns:
      - pattern: "(org.springframework.jdbc.core.JdbcOperations $O).queryForInt($ARG,
          ...)"
      - pattern-not: (org.springframework.jdbc.core.JdbcOperations $O).queryForInt("...",
          ...)
    - patterns:
      - pattern: "(org.springframework.jdbc.core.JdbcOperations $O).queryForLong($ARG,
          ...)"
      - pattern-not: (org.springframework.jdbc.core.JdbcOperations $O).queryForLong("...",
          ...)
    - patterns:
      - pattern: "(org.springframework.jdbc.core.JdbcOperations $O).udpate($ARG, ...)"
      - pattern-not: (org.springframework.jdbc.core.JdbcOperations $O).udpate("...",
          ...)
    - patterns:
      - pattern: "(org.springframework.jdbc.core.JdbcTemplate $O).batchUpdate($ARG,
          ...)"
      - pattern-not: (org.springframework.jdbc.core.JdbcTemplate $O).batchUpdate("...",
          ...)
    - patterns:
      - pattern: "(org.springframework.jdbc.core.JdbcTemplate $O).execute($ARG, ...)"
      - pattern-not: (org.springframework.jdbc.core.JdbcTemplate $O).execute("...",
          ...)
    - patterns:
      - pattern: "(org.springframework.jdbc.core.JdbcTemplate $O).query($ARG, ...)"
      - pattern-not: (org.springframework.jdbc.core.JdbcTemplate $O).query("...",
          ...)
    - patterns:
      - pattern: "(org.springframework.jdbc.core.JdbcTemplate $O).queryForList($ARG,
          ...)"
      - pattern-not: (org.springframework.jdbc.core.JdbcTemplate $O).queryForList("...",
          ...)
    - patterns:
      - pattern: "(org.springframework.jdbc.core.JdbcTemplate $O).queryForMap($ARG,
          ...)"
      - pattern-not: (org.springframework.jdbc.core.JdbcTemplate $O).queryForMap("...",
          ...)
    - patterns:
      - pattern: "(org.springframework.jdbc.core.JdbcTemplate $O).queryForObject($ARG,
          ...)"
      - pattern-not: (org.springframework.jdbc.core.JdbcTemplate $O).queryForObject("...",
          ...)
    - patterns:
      - pattern: "(org.springframework.jdbc.core.JdbcTemplate $O).queryForRowSet($ARG,
          ...)"
      - pattern-not: (org.springframework.jdbc.core.JdbcTemplate $O).queryForRowSet("...",
          ...)
    - patterns:
      - pattern: "(org.springframework.jdbc.core.JdbcTemplate $O).queryForInt($ARG,
          ...)"
      - pattern-not: (org.springframework.jdbc.core.JdbcTemplate $O).queryForInt("...",
          ...)
    - patterns:
      - pattern: "(org.springframework.jdbc.core.JdbcTemplate $O).queryForLong($ARG,
          ...)"
      - pattern-not: (org.springframework.jdbc.core.JdbcTemplate $O).queryForLong("...",
          ...)
    - patterns:
      - pattern: "(org.springframework.jdbc.core.JdbcTemplate $O).update($ARG, ...)"
      - pattern-not: (org.springframework.jdbc.core.JdbcTemplate $O).update("...",
          ...)
    - patterns:
      - pattern: "(io.vertx.sqlclient.SqlClient $O).query($ARG, ...)"
      - pattern-not: (io.vertx.sqlclient.SqlClient $O).query("...", ...)
    - patterns:
      - pattern: "(io.vertx.sqlclient.SqlClient $O).preparedQuery($ARG, ...)"
      - pattern-not: (io.vertx.sqlclient.SqlClient $O).preparedQuery("...", ...)
    - patterns:
      - pattern: "(io.vertx.sqlclient.SqlConnection $O).prepare($ARG, ...)"
      - pattern-not: (io.vertx.sqlclient.SqlConnection $O).prepare("...", ...)
    - patterns:
      - pattern: "(org.apache.turbine.om.peer.BasePeer $O).executeQuery($ARG, ...)"
      - pattern-not: (org.apache.turbine.om.peer.BasePeer $O).executeQuery("...",
          ...)
    - patterns:
      - pattern: "(org.apache.torque.util.BasePeer $O).executeQuery($ARG, ...)"
      - pattern-not: (org.apache.torque.util.BasePeer $O).executeQuery("...", ...)
    - patterns:
      - pattern: "(javax.persistence.EntityManager $O).createQuery($ARG, ...)"
      - pattern-not: (javax.persistence.EntityManager $O).createQuery("...", ...)
    - patterns:
      - pattern: "(javax.persistence.EntityManager $O).createNativeQuery($ARG, ...)"
      - pattern-not: (javax.persistence.EntityManager $O).createNativeQuery("...",
          ...)
  languages:
  - java
  message: |
    The input values included in SQL queries need to be passed in safely. Bind
    variables in prepared statements can be used to easily mitigate the risk of
    SQL injection.
  metadata:
    category: security
    cwe: 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    primary_identifier: find_sec_bugs.SQL_INJECTION_SPRING_JDBC-1.SQL_INJECTION_JPA-1.SQL_INJECTION_JDO-1.SQL_INJECTION_JDBC-1.SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE-1
    secondary_identifiers:
    - name: Find Security Bugs-SQL_INJECTION_SPRING_JDBC
      type: find_sec_bugs_type
      value: SQL_INJECTION_SPRING_JDBC
    - name: Find Security Bugs-SQL_INJECTION_JPA
      type: find_sec_bugs_type
      value: SQL_INJECTION_JPA
    - name: Find Security Bugs-SQL_INJECTION_JDO
      type: find_sec_bugs_type
      value: SQL_INJECTION_JDO
    - name: Find Security Bugs-SQL_INJECTION_JDBC
      type: find_sec_bugs_type
      value: SQL_INJECTION_JDBC
    - name: Find Security Bugs-SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE
      type: find_sec_bugs_type
      value: SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE
    license: MIT
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.SQL_INJECTION_SPRING_JDBC-1.SQL_INJECTION_JPA-1.SQL_INJECTION_JDO-1.SQL_INJECTION_JDBC-1.SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE-1
    shortlink: https://sg.run/WD1A
    semgrep.dev:
      rule:
        rule_id: lBUXP4
        version_id: YDT5zl
        url: https://semgrep.dev/playground/r/YDT5zl/gitlab.find_sec_bugs.SQL_INJECTION_SPRING_JDBC-1.SQL_INJECTION_JPA-1.SQL_INJECTION_JDO-1.SQL_INJECTION_JDBC-1.SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE-1
        origin: community
  severity: ERROR
- id: gitlab.find_sec_bugs.SQL_INJECTION_SPRING_JDBC-1.SQL_INJECTION_JPA-1.SQL_INJECTION_JDO-1.SQL_INJECTION_JDBC-1.SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE-1.SQL_INJECTION-1.SQL_INJECTION_HIBERNATE-1.SQL_INJECTION_VERTX-1.SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING-1
  languages:
  - java
  message: |
    SQL Injection is a critical vulnerability that can lead to data or system compromise. By
    dynamically generating SQL query strings, user input may be able to influence the logic of
    the SQL statement. This could lead to an adversary accessing information they should
    not have access to, or in some circumstances, being able to execute OS functionality or code.

    Replace all dynamically generated SQL queries with parameterized queries. In situations where
    dynamic queries must be created, never use direct user input, but instead use a map or
    dictionary of valid values and resolve them using a user supplied key.

    For example, some database drivers do not allow parameterized queries for `>` or `<` comparison
    operators. In these cases, do not use a user supplied `>` or `<` value, but rather have the
    user
    supply a `gt` or `lt` value. The alphabetical values are then used to look up the `>` and `<`
    values to be used in the construction of the dynamic query. The same goes for other queries
    where
    column or table names are required but cannot be parameterized.

    Example using `PreparedStatement` queries:
    ```
    // Some userInput
    String userInput = "someUserInput";
    // Your connection string
    String url = "...";
    // Get a connection from the DB via the DriverManager
    Connection conn = DriverManager.getConnection(url);
    // Create a prepared statement
    PreparedStatement st = conn.prepareStatement("SELECT name FROM table where name=?");
    // Set each parameters value by the index (starting from 1)
    st.setString(1, userInput);
    // Execute query and get the result set
    ResultSet rs = st.executeQuery();
    // Iterate over results
    while (rs.next()) {
        // Get result for this row at the provided column number (starting from 1)
        String result = rs.getString(1);
        // ...
    }
    // Close the ResultSet
    rs.close();
    // Close the PreparedStatement
    st.close();
    ```

    For more information on SQL Injection see OWASP:
    https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html
  metadata:
    shortDescription: Improper Neutralization of Special Elements used in an SQL Command
      ('SQL Injection')
    category: security
    cwe: CWE-89
    primary_identifier: find_sec_bugs.SQL_INJECTION_SPRING_JDBC-1.SQL_INJECTION_JPA-1.SQL_INJECTION_JDO-1.SQL_INJECTION_JDBC-1.SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE-1.SQL_INJECTION-1.SQL_INJECTION_HIBERNATE-1.SQL_INJECTION_VERTX-1.SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING-1
    secondary_identifiers:
    - name: Find Security Bugs-SQL_INJECTION_SPRING_JDBC
      type: find_sec_bugs_type
      value: SQL_INJECTION_SPRING_JDBC
    - name: Find Security Bugs-SQL_INJECTION_JPA
      type: find_sec_bugs_type
      value: SQL_INJECTION_JPA
    - name: Find Security Bugs-SQL_INJECTION_JDO
      type: find_sec_bugs_type
      value: SQL_INJECTION_JDO
    - name: Find Security Bugs-SQL_INJECTION_JDBC
      type: find_sec_bugs_type
      value: SQL_INJECTION_JDBC
    - name: Find Security Bugs-SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE
      type: find_sec_bugs_type
      value: SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE
    - name: Find Security Bugs-SQL_INJECTION
      type: find_sec_bugs_type
      value: SQL_INJECTION
    - name: Find Security Bugs-SQL_INJECTION_HIBERNATE
      type: find_sec_bugs_type
      value: SQL_INJECTION_HIBERNATE
    - name: Find Security Bugs-SQL_INJECTION_VERTX
      type: find_sec_bugs_type
      value: SQL_INJECTION_VERTX
    - name: Find Security Bugs-SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING
      type: find_sec_bugs_type
      value: SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.SQL_INJECTION_SPRING_JDBC-1.SQL_INJECTION_JPA-1.SQL_INJECTION_JDO-1.SQL_INJECTION_JDBC-1.SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE-1.SQL_INJECTION-1.SQL_INJECTION_HIBERNATE-1.SQL_INJECTION_VERTX-1.SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING-1
    shortlink: https://sg.run/W9PA
    semgrep.dev:
      rule:
        rule_id: L1Udoq
        version_id: DkT69j9
        url: https://semgrep.dev/playground/r/DkT69j9/gitlab.find_sec_bugs.SQL_INJECTION_SPRING_JDBC-1.SQL_INJECTION_JPA-1.SQL_INJECTION_JDO-1.SQL_INJECTION_JDBC-1.SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE-1.SQL_INJECTION-1.SQL_INJECTION_HIBERNATE-1.SQL_INJECTION_VERTX-1.SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING-1
        origin: community
  patterns:
  - pattern-not-inside: |
      final String $ARG = ...;
      ...
  - pattern-not-inside: |
      class $CLAZZ {
        ...
        final String $ARG = ...;
        ...
      }
  - pattern-either:
    - patterns:
      - pattern: "(javax.jdo.PersistenceManager $PM).newQuery($ARG)"
      - pattern-not: (javax.jdo.PersistenceManager $PM).newQuery("...")
    - patterns:
      - pattern: "(javax.jdo.PersistenceManager $PM).newQuery(..., $ARG)"
      - pattern-not: (javax.jdo.PersistenceManager $PM).newQuery(..., "...")
    - patterns:
      - pattern: "(javax.jdo.Query $Q).setFilter($ARG)"
      - pattern-not: (javax.jdo.Query $Q).setFilter("...")
    - patterns:
      - pattern: "(javax.jdo.Query $Q).setGrouping($ARG)"
      - pattern-not: (javax.jdo.Query $Q).setGrouping("...")
    - patterns:
      - pattern: "(javax.jdo.Query $Q).setGrouping($ARG)"
      - pattern-not: (javax.jdo.Query $Q).setGrouping("...")
    - patterns:
      - pattern: org.hibernate.criterion.Restrictions.sqlRestriction($ARG, ...)
      - pattern-not: org.hibernate.criterion.Restrictions.sqlRestriction("...", ...)
    - patterns:
      - pattern: "(org.hibernate.Session $S).createQuery((String $ARG), ...)"
      - pattern-not: (org.hibernate.Session $S).createQuery("...", ...)
    - patterns:
      - pattern: "(org.hibernate.Session $S).createSQLQuery($ARG, ...)"
      - pattern-not: (org.hibernate.Session $S).createSQLQuery("...", ...)
    - patterns:
      - pattern: "(java.sql.Statement $S).executeQuery($ARG, ...)"
      - pattern-not: (java.sql.Statement $S).createSQLQuery("...", ...)
    - patterns:
      - pattern: "(java.sql.Statement $S).execute($ARG, ...)"
      - pattern-not: (java.sql.Statement $S).execute("...", ...)
    - patterns:
      - pattern: "(java.sql.Statement $S).executeUpdate($ARG, ...)"
      - pattern-not: (java.sql.Statement $S).executeUpdate("...", ...)
    - patterns:
      - pattern: "(java.sql.Statement $S).executeLargeUpdate($ARG, ...)"
      - pattern-not: (java.sql.Statement $S).executeLargeUpdate("...", ...)
    - patterns:
      - pattern: "(java.sql.Statement $S).addBatch($ARG, ...)"
      - pattern-not: (java.sql.Statement $S).addBatch("...", ...)
    - patterns:
      - pattern: "(java.sql.PreparedStatement $S).executeQuery($ARG, ...)"
      - pattern-not: (java.sql.PreparedStatement $S).executeQuery("...", ...)
    - patterns:
      - pattern: "(java.sql.PreparedStatement $S).execute($ARG, ...)"
      - pattern-not: (java.sql.PreparedStatement $S).execute("...", ...)
    - patterns:
      - pattern: "(java.sql.PreparedStatement $S).executeUpdate($ARG, ...)"
      - pattern-not: (java.sql.PreparedStatement $S).executeUpdate("...", ...)
    - patterns:
      - pattern: "(java.sql.PreparedStatement $S).executeLargeUpdate($ARG, ...)"
      - pattern-not: (java.sql.PreparedStatement $S).executeLargeUpdate("...", ...)
    - patterns:
      - pattern: "(java.sql.PreparedStatement $S).addBatch($ARG, ...)"
      - pattern-not: (java.sql.PreparedStatement $S).addBatch("...", ...)
    - patterns:
      - pattern: "(java.sql.Connection $S).prepareCall($ARG, ...)"
      - pattern-not: (java.sql.Connection $S).prepareCall("...", ...)
    - patterns:
      - pattern: "(java.sql.Connection $S).prepareStatement($ARG, ...)"
      - pattern-not: (java.sql.Connection $S).prepareStatement("...", ...)
    - patterns:
      - pattern: "(java.sql.Connection $S).nativeSQL($ARG, ...)"
      - pattern-not: (java.sql.Connection $S).nativeSQL("...", ...)
    - patterns:
      - pattern: new org.springframework.jdbc.core.PreparedStatementCreatorFactory($ARG,
          ...)
      - pattern-not: new org.springframework.jdbc.core.PreparedStatementCreatorFactory("...",
          ...)
    - patterns:
      - pattern: "(org.springframework.jdbc.core.PreparedStatementCreatorFactory $F).newPreparedStatementCreator($ARG,
          ...)"
      - pattern-not: (org.springframework.jdbc.core.PreparedStatementCreatorFactory
          $F).newPreparedStatementCreator("...", ...)
    - patterns:
      - pattern: "(org.springframework.jdbc.core.JdbcOperations $O).batchUpdate($ARG,
          ...)"
      - pattern-not: (org.springframework.jdbc.core.JdbcOperations $O).batchUpdate("...",
          ...)
    - patterns:
      - pattern: "(org.springframework.jdbc.core.JdbcOperations $O).execute($ARG,
          ...)"
      - pattern-not: (org.springframework.jdbc.core.JdbcOperations $O).execute("...",
          ...)
    - patterns:
      - pattern: "(org.springframework.jdbc.core.JdbcOperations $O).query($ARG, ...)"
      - pattern-not: (org.springframework.jdbc.core.JdbcOperations $O).query("...",
          ...)
    - patterns:
      - pattern: "(org.springframework.jdbc.core.JdbcOperations $O).queryForList($ARG,
          ...)"
      - pattern-not: (org.springframework.jdbc.core.JdbcOperations $O).queryForList("...",
          ...)
    - patterns:
      - pattern: "(org.springframework.jdbc.core.JdbcOperations $O).queryForMap($ARG,
          ...)"
      - pattern-not: (org.springframework.jdbc.core.JdbcOperations $O).queryForMap("...",
          ...)
    - patterns:
      - pattern: "(org.springframework.jdbc.core.JdbcOperations $O).queryForObject($ARG,
          ...)"
      - pattern-not: (org.springframework.jdbc.core.JdbcOperations $O).queryForObject("...",
          ...)
    - patterns:
      - pattern: "(org.springframework.jdbc.core.JdbcOperations $O).queryForObject($ARG,
          ...)"
      - pattern-not: (org.springframework.jdbc.core.JdbcOperations $O).queryForObject("...",
          ...)
    - patterns:
      - pattern: "(org.springframework.jdbc.core.JdbcOperations $O).queryForRowSet($ARG,
          ...)"
      - pattern-not: (org.springframework.jdbc.core.JdbcOperations $O).queryForRowSet("...",
          ...)
    - patterns:
      - pattern: "(org.springframework.jdbc.core.JdbcOperations $O).queryForInt($ARG,
          ...)"
      - pattern-not: (org.springframework.jdbc.core.JdbcOperations $O).queryForInt("...",
          ...)
    - patterns:
      - pattern: "(org.springframework.jdbc.core.JdbcOperations $O).queryForLong($ARG,
          ...)"
      - pattern-not: (org.springframework.jdbc.core.JdbcOperations $O).queryForLong("...",
          ...)
    - patterns:
      - pattern: "(org.springframework.jdbc.core.JdbcOperations $O).udpate($ARG, ...)"
      - pattern-not: (org.springframework.jdbc.core.JdbcOperations $O).udpate("...",
          ...)
    - patterns:
      - pattern: "(org.springframework.jdbc.core.JdbcTemplate $O).batchUpdate($ARG,
          ...)"
      - pattern-not: (org.springframework.jdbc.core.JdbcTemplate $O).batchUpdate("...",
          ...)
    - patterns:
      - pattern: "(org.springframework.jdbc.core.JdbcTemplate $O).execute($ARG, ...)"
      - pattern-not: (org.springframework.jdbc.core.JdbcTemplate $O).execute("...",
          ...)
    - patterns:
      - pattern: "(org.springframework.jdbc.core.JdbcTemplate $O).query($ARG, ...)"
      - pattern-not: (org.springframework.jdbc.core.JdbcTemplate $O).query("...",
          ...)
    - patterns:
      - pattern: "(org.springframework.jdbc.core.JdbcTemplate $O).queryForList($ARG,
          ...)"
      - pattern-not: (org.springframework.jdbc.core.JdbcTemplate $O).queryForList("...",
          ...)
    - patterns:
      - pattern: "(org.springframework.jdbc.core.JdbcTemplate $O).queryForMap($ARG,
          ...)"
      - pattern-not: (org.springframework.jdbc.core.JdbcTemplate $O).queryForMap("...",
          ...)
    - patterns:
      - pattern: "(org.springframework.jdbc.core.JdbcTemplate $O).queryForObject($ARG,
          ...)"
      - pattern-not: (org.springframework.jdbc.core.JdbcTemplate $O).queryForObject("...",
          ...)
    - patterns:
      - pattern: "(org.springframework.jdbc.core.JdbcTemplate $O).queryForRowSet($ARG,
          ...)"
      - pattern-not: (org.springframework.jdbc.core.JdbcTemplate $O).queryForRowSet("...",
          ...)
    - patterns:
      - pattern: "(org.springframework.jdbc.core.JdbcTemplate $O).queryForInt($ARG,
          ...)"
      - pattern-not: (org.springframework.jdbc.core.JdbcTemplate $O).queryForInt("...",
          ...)
    - patterns:
      - pattern: "(org.springframework.jdbc.core.JdbcTemplate $O).queryForLong($ARG,
          ...)"
      - pattern-not: (org.springframework.jdbc.core.JdbcTemplate $O).queryForLong("...",
          ...)
    - patterns:
      - pattern: "(org.springframework.jdbc.core.JdbcTemplate $O).update($ARG, ...)"
      - pattern-not: (org.springframework.jdbc.core.JdbcTemplate $O).update("...",
          ...)
    - patterns:
      - pattern: "(io.vertx.sqlclient.SqlClient $O).query($ARG, ...)"
      - pattern-not: (io.vertx.sqlclient.SqlClient $O).query("...", ...)
    - patterns:
      - pattern: "(io.vertx.sqlclient.SqlClient $O).preparedQuery($ARG, ...)"
      - pattern-not: (io.vertx.sqlclient.SqlClient $O).preparedQuery("...", ...)
    - patterns:
      - pattern: "(io.vertx.sqlclient.SqlConnection $O).prepare($ARG, ...)"
      - pattern-not: (io.vertx.sqlclient.SqlConnection $O).prepare("...", ...)
    - patterns:
      - pattern: "(org.apache.turbine.om.peer.BasePeer $O).executeQuery($ARG, ...)"
      - pattern-not: (org.apache.turbine.om.peer.BasePeer $O).executeQuery("...",
          ...)
    - patterns:
      - pattern: "(org.apache.torque.util.BasePeer $O).executeQuery($ARG, ...)"
      - pattern-not: (org.apache.torque.util.BasePeer $O).executeQuery("...", ...)
    - patterns:
      - pattern: "(javax.persistence.EntityManager $O).createQuery($ARG, ...)"
      - pattern-not: (javax.persistence.EntityManager $O).createQuery("...", ...)
    - patterns:
      - pattern: "(javax.persistence.EntityManager $O).createNativeQuery($ARG, ...)"
      - pattern-not: (javax.persistence.EntityManager $O).createNativeQuery("...",
          ...)
  severity: ERROR
- id: gitlab.find_sec_bugs.SSL_CONTEXT-1
  languages:
  - java
  patterns:
  - pattern-either:
    - pattern: new org.apache.http.impl.client.DefaultHttpClient();
    - pattern: javax.net.ssl.SSLContext.getInstance("SSL");
  message: |
    The `org.apache.http.impl.client.DefaultHttpClient` and `javax.net.ssl.SSLContext.getInstance`
    object instances do not verify the hostnames upon connection.

    This allows for an adversary who is in between the application and the target host to intercept
    potentially sensitive information or transmit malicious data.

    Do not use the `org.apache.http.impl.client.DefaultHttpClient();` as it is deprecated. Instead
    use the new `java.net.http.HttpClient` that was introduced in Java 9.

    Example connecting to a host that will automatically do TLS validation:
    ```
    // Create a new java.net.http.HttpClient
    HttpClient httpClient = HttpClient.newHttpClient();
    // Create a HttpRequest builder
    HttpRequest request = HttpRequest.newBuilder()
            // Create a URI for a website which requires TLS
            .uri(URI.create("https://www.example.com/"))
            // Build the request
            .build();

    // Use the httpClient to send the request and use an HttpResponse.BodyHandlers String type
    HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());
    // Debug print
    System.out.println(response);
    ```
  metadata:
    shortDescription: Improper certificate validation
    category: security
    cwe: CWE-295
    primary_identifier: find_sec_bugs.SSL_CONTEXT-1
    secondary_identifiers:
    - name: Find Security Bugs-SSL_CONTEXT
      type: find_sec_bugs_type
      value: SSL_CONTEXT
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.SSL_CONTEXT-1
    shortlink: https://sg.run/8k34
    semgrep.dev:
      rule:
        rule_id: eqUZxA
        version_id: 7ZTg13Y
        url: https://semgrep.dev/playground/r/7ZTg13Y/gitlab.find_sec_bugs.SSL_CONTEXT-1
        origin: community
  severity: WARNING
- id: gitlab.find_sec_bugs.SSL_CONTEXT-2
  languages:
  - java
  patterns:
  - pattern-either:
    - pattern-inside: |
        import javax.net.ssl.*;
        ...
    - pattern-inside: |
        import javax.net.ssl.SSLContext;
        ...
  - pattern-either:
    - pattern-inside: 'SSLContext.getInstance("$UNSAFE_VERSION");

        '
    - pattern-inside: |
        SSLContext.getInstance(...);
        ...
        $ENGINE.setEnabledProtocols(new String[]{...,"$UNSAFE_VERSION",...});
  - pattern-not-inside: |
      $C = SSLContext.getInstance(...);
      ...
      $ENGINE.setEnabledProtocols(new String[]{...,"TLSv1.2",...});
  - pattern-not-inside: |
      $C = SSLContext.getInstance(...);
      ...
      $ENGINE.setEnabledProtocols(new String[]{...,"TLSv1.3",...});
  - pattern-not-inside: |
      $C = SSLContext.getInstance(...);
      ...
      $ENGINE.setEnabledProtocols(new String[]{...,"DTLSv1.2",...});
  - pattern-not-inside: |
      $C = SSLContext.getInstance(...);
      ...
      $ENGINE.setEnabledProtocols(new String[]{...,"DTLSv1.3",...});
  - metavariable-regex:
      metavariable: "$UNSAFE_VERSION"
      regex: "^(TLS|(D)?TLSv1.(0|1))$"
  message: |
    The application was found enabling insecure TLS protocol versions. When enabling protocol
    versions for an `SSLContext`, only the following versions should be allowed:
    - TLSv1.2
    - TLSv1.3
    - DTLSv1.2
    - DTLSv1.3

    To mitigate potential security risks, it is strongly advised to enforce TLS 1.2 as the minimum
    protocol version and disallow older versions such as TLS 1.0. Do note that newer versions of
    Java do not even support TLS 1.0 and will throw `NoSuchAlgorithmException`. Versions of TLS
    prior to 1.2 could expose the connection to downgrade attacks, where an adversary intercepts
    the
    connection and alters the requested protocol version to be a less secure one.

    In many scenarios, relying on the default system configuration does not meet compliance
    standards. This is due to the application being deployed across diverse systems with varying
    configurations and Java versions. While the default value may be secure on modern and
    up-to-date systems, it may not hold true for older systems. Consequently, it is highly
    recommended to explicitly define a secure configuration in all cases.

    Example configuring an SSLContext with TLSv1.2:
    ```
    // Create an SSLContext with TLSv1.2 explicitly
    SSLContext tlsContext = SSLContext.getInstance("TLSv1.2"); // or TLSv1.3, DTLSv1.2, DTLSv1.3

    // Alternatively, set the enabled protocols
    SSLContext serverSslContext = SSLContext.getInstance("TLS");
    SSLEngine serverEngine = serverSslContext.createSSLEngine();
    // Calling setEnabledProtocols will override the original context's configured protocol version
    serverEngine.setEnabledProtocols(new String[]{ "TLSv1.2" });
    ```

    For more information on `SSLContext` see:
    - https://docs.oracle.com/en/java/javase/11/docs/api/java.base/javax/net/ssl/SSLContext.html

    For more information on MiTM attacks see:
    - https://owasp.org/www-community/attacks/Manipulator-in-the-middle_attack
  metadata:
    shortDescription: Inadequate encryption strength
    category: security
    cwe: CWE-326
    primary_identifier: find_sec_bugs.SSL_CONTEXT-2
    secondary_identifiers:
    - name: Find Security Bugs-SSL_CONTEXT
      type: find_sec_bugs_type
      value: SSL_CONTEXT
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.SSL_CONTEXT-2
    shortlink: https://sg.run/0JlB
    semgrep.dev:
      rule:
        rule_id: x8UeYj
        version_id: LjTq2gx
        url: https://semgrep.dev/playground/r/LjTq2gx/gitlab.find_sec_bugs.SSL_CONTEXT-2
        origin: community
  severity: WARNING
- id: gitlab.find_sec_bugs.TDES_USAGE-1
  languages:
  - java
  patterns:
  - pattern-inside: javax.crypto.Cipher.getInstance("$ALG")
  - metavariable-regex:
      metavariable: "$ALG"
      regex: "^(DESede)/.*"
  message: |
    DES, TripleDES and RC2 are all considered broken or insecure cryptographic algorithms.
    Newer algorithms  apply message integrity to validate ciphertext has not been tampered
    with. Consider using `ChaCha20Poly1305` instead as it is easier and faster than the
    alternatives such as `AES-256-GCM`.

    For older applications that don't have support for `ChaCha20Poly1305`,
    `AES-256-GCM` is recommended, however it has many drawbacks:
    - Slower than `ChaCha20Poly1305`.
    - Catastrophic failure if nonce values are reused.

    Example using `ChaCha20Poly1305`:
    ```
    public encrypt() throws Exception {
        chaChaEncryption("Secret text to encrypt".getBytes(StandardCharsets.UTF_8));
    }

    public SecureRandom getSecureRandomDRBG() throws NoSuchAlgorithmException {
        // Use DRBG according to
    http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-90Ar1.pdf
        return SecureRandom.getInstance("DRBG",
                // Security strength in bits (default is 128)
                DrbgParameters.instantiation(256,
                    // Set prediction resistance and re-seeding
                    DrbgParameters.Capability.PR_AND_RESEED,
                    // Set the personalization string (optional, not necessary)
                    "some_personalization_string".getBytes()
                )
        );
    }

    public Cipher getChaCha20Poly1305(int mode, byte[] nonceKey, byte[] secretKey) throws
    NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException,
    InvalidAlgorithmParameterException  {
        // Get a DRBG random number generator instance
        SecureRandom random = getSecureRandomDRBG();
        // Create a ChaCha20-Poly1305 cipher instance
        Cipher chaChaCipher = Cipher.getInstance("ChaCha20-Poly1305/None/NoPadding");
        // Create our parameterSpec using our nonceKey
        AlgorithmParameterSpec parameterSpec = new IvParameterSpec(nonceKey);
        // Create a SecretKeySpec using our secretKey
        SecretKeySpec secretKeySpec = new SecretKeySpec(secretKey, "ChaCha20");
        // Initialize and return the cipher for the provided mode
        chaChaCipher.init(mode, secretKeySpec, parameterSpec, random);
        return chaChaCipher;
    }

    public void chaChaEncryption(byte[] plainText) throws NoSuchAlgorithmException,
    NoSuchPaddingException, InvalidKeyException, InvalidAlgorithmParameterException {
        // Get a DRBG random number generator instance
        SecureRandom random = getSecureRandomDRBG();
        // Create secretKey
        byte[] secretKey = new byte[32];
        random.nextBytes(secretKey);
        // Create an IV nonceKey
        byte[] nonceKey = new byte[12];
        random.nextBytes(nonceKey);
        // Create a chaCha encryption cipher instance
        Cipher chaChaEncryptor = getChaCha20Poly1305(Cipher.ENCRYPT_MODE, nonceKey, secretKey);
        // Encrypt the text using ChaCha20Poly1305
        byte[] cipherText = null;
        try {
            cipherText = chaChaEncryptor.doFinal(plainText);
        } catch (IllegalBlockSizeException | BadPaddingException e) {
            System.out.println("failed to encrypt text");
            return;
        }
        System.out.println("encrypted: " + Base64.getEncoder().encodeToString(cipherText));
        // Create a chaCha decryption cipher instance
        Cipher chaChaDecryptor = getChaCha20Poly1305(Cipher.DECRYPT_MODE, nonceKey, secretKey);
        // Decrypt the text
        byte[] decryptedText = null;
        try {
            decryptedText = chaChaDecryptor.doFinal(cipherText);
        } catch (IllegalBlockSizeException | BadPaddingException e) {
            System.out.println("failed to decrypt text");
            return;
        }
        System.out.println("decrypted: " + new String(decryptedText, StandardCharsets.UTF_8));
    }
    ```

    For more information on Java Cryptography see:
    https://docs.oracle.com/en/java/javase/15/security/java-cryptography-architecture-jca-reference-guide.html
  severity: WARNING
  metadata:
    shortDescription: Use of a broken or risky cryptographic algorithm
    category: security
    cwe: CWE-327
    technology:
    - java
    primary_identifier: find_sec_bugs.TDES_USAGE-1
    secondary_identifiers:
    - name: Find Security Bugs-TDES_USAGE
      type: find_sec_bugs_type
      value: TDES_USAGE
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.TDES_USAGE-1
    shortlink: https://sg.run/w4BX
    semgrep.dev:
      rule:
        rule_id: j2UwKr
        version_id: NdT39yB
        url: https://semgrep.dev/playground/r/NdT39yB/gitlab.find_sec_bugs.TDES_USAGE-1
        origin: community
- id: gitlab.find_sec_bugs.TEMPLATE_INJECTION_PEBBLE-1.TEMPLATE_INJECTION_FREEMARKER-1.TEMPLATE_INJECTION_VELOCITY-1
  languages:
  - java
  message: |
    The application may allow control over a template string. Providing user input directly in the
    template by
    dynamically creating template strings may allow an adversary to execute arbitrary Java code,
    including
    OS system commands.

    For Velocity, never call `evaluate` with user-supplied input in the template string. Use a
    `VelocityContext`
    object instead to data-bind user-supplied information as it will be treated as an underlying
    data type and not
    template code.

    Example using Apache Velocity's `VelocityContext` and escape tools to pass in user-supplied
    data to a template:
    ```
    // Create a tool manager
    ToolManager manager = new ToolManager(true);
    // Create a context from the tool manager
    Context context = manager.createContext();
    // For demonstration purposes, alternatively configure from a properties file
    context.put("esc", new EscapeTool());
    // For demonstration purposes, create an output buffer
    StringWriter stringWriter = new StringWriter();
    // Get userInput
    String userInput = "potentially malicious data";
    // Use the context to pass in the userInput value
    context.put("userInput", userInput);
    // Pass in the context, the output buffer, a logtag (demo), and the template with userInput
    // making sure to escape it if in the context of HTML.
    Velocity.evaluate(context, stringWriter, "demo", "Hello $esc.html($userInput)");
    // Work with the output buffer
    // ...
    ```

    For other templating engines, please see your framework's documentation.
  metadata:
    shortDescription: Improper control of generation of code ('Code Injection')
    category: security
    cwe: CWE-94
    primary_identifier: find_sec_bugs.TEMPLATE_INJECTION_PEBBLE-1.TEMPLATE_INJECTION_FREEMARKER-1.TEMPLATE_INJECTION_VELOCITY-1
    secondary_identifiers:
    - name: Find Security Bugs-TEMPLATE_INJECTION_PEBBLE
      type: find_sec_bugs_type
      value: TEMPLATE_INJECTION_PEBBLE
    - name: Find Security Bugs-TEMPLATE_INJECTION_FREEMARKER
      type: find_sec_bugs_type
      value: TEMPLATE_INJECTION_FREEMARKER
    - name: Find Security Bugs-TEMPLATE_INJECTION_VELOCITY
      type: find_sec_bugs_type
      value: TEMPLATE_INJECTION_VELOCITY
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.TEMPLATE_INJECTION_PEBBLE-1.TEMPLATE_INJECTION_FREEMARKER-1.TEMPLATE_INJECTION_VELOCITY-1
    shortlink: https://sg.run/vpK4
    semgrep.dev:
      rule:
        rule_id: yyUDL9
        version_id: kbTdjbQ
        url: https://semgrep.dev/playground/r/kbTdjbQ/gitlab.find_sec_bugs.TEMPLATE_INJECTION_PEBBLE-1.TEMPLATE_INJECTION_FREEMARKER-1.TEMPLATE_INJECTION_VELOCITY-1
        origin: community
  pattern-either:
  - patterns:
    - pattern: org.apache.velocity.app.Velocity.evaluate(..., $VAR)
    - pattern-not: org.apache.velocity.app.Velocity.evaluate(..., "...")
  - patterns:
    - pattern-not-inside: |
        $C = (freemarker.template.Configuration $CFG).getTemplate("...");
        ...
    - pattern-inside: |
        $C = (freemarker.template.Configuration $CFG).getTemplate($IN);
        ...
    - pattern: "$C.process(...)"
  - patterns:
    - pattern-inside: |
        import com.mitchellbosecke.pebble.PebbleEngine;
        ...
    - pattern-inside: |
        $C = $T.getTemplate($IN);
        ...
    - pattern-not-inside: |
        $C = $T.getTemplate("...");
        ...
    - pattern: "$C.evaluate(...)"
  severity: ERROR
- id: gitlab.find_sec_bugs.UNVALIDATED_REDIRECT-1.URL_REWRITING-1
  languages:
  - java
  message: |
    Unvalidated redirects occur when an application redirects a user to a
    destination URL specified by a user supplied parameter that is not validated.
    Such vulnerabilities can be used to facilitate phishing attacks.
  metadata:
    category: security
    cwe: CWE-601
    shortDescription: URL Redirection to Untrusted Site ('Open Redirect')
    primary_identifier: find_sec_bugs.UNVALIDATED_REDIRECT-1.URL_REWRITING-1
    secondary_identifiers:
    - name: Find Security Bugs-UNVALIDATED_REDIRECT
      type: find_sec_bugs_type
      value: UNVALIDATED_REDIRECT
    - name: Find Security Bugs-URL_REWRITING
      type: find_sec_bugs_type
      value: URL_REWRITING
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.UNVALIDATED_REDIRECT-1.URL_REWRITING-1
    shortlink: https://sg.run/PPWE
    semgrep.dev:
      rule:
        rule_id: EwU1nP
        version_id: PkTJW3l
        url: https://semgrep.dev/playground/r/PkTJW3l/gitlab.find_sec_bugs.UNVALIDATED_REDIRECT-1.URL_REWRITING-1
        origin: community
  patterns:
  - pattern-either:
    - patterns:
      - pattern: "(HttpServletResponse $REQ).sendRedirect(...)"
      - pattern-not: (HttpServletResponse $REQ).sendRedirect("...")
    - patterns:
      - pattern: "(HttpServletResponse $REQ).addHeader(...)"
      - pattern-not: (HttpServletResponse $REQ).addHeader("...", "...")
    - patterns:
      - pattern: "(HttpServletResponse $REQ).encodeURL(...)"
      - pattern-not: (HttpServletResponse $REQ).encodeURL("...")
    - patterns:
      - pattern: "(HttpServletResponse $REQ).encodeRedirectUrl(...)"
      - pattern-not: (HttpServletResponse $REQ).encodeRedirectUrl("...")
  severity: ERROR
- id: gitlab.find_sec_bugs.URLCONNECTION_SSRF_FD-1
  languages:
  - java
  message: |
    Server-Side-Request-Forgery (SSRF) exploits backend systems that initiate requests to third
    parties.
    If user input is used in constructing or sending these requests, an attacker could supply
    malicious
    data to force the request to other systems or modify request data to cause unwanted actions.

    Ensure user input is not used directly in constructing URLs or URIs when initiating requests
    to third party
    systems from back end systems. Care must also be taken when constructing payloads using user
    input. Where
    possible restrict to known URIs or payloads. Consider using a server-side map where keys are
    used to return
    URLs such as `https://site/goto?key=1` where `{key: 1, url: 'http://some.url/', key: 2, url:
    'http://...'}`.

    If you must use user-supplied input for requesting URLs, it is strongly recommended that the
    HTTP client
    chosen allows you to customize and block certain IP ranges at the network level. By blocking
    RFC 1918
    addresses or other network address ranges, you can limit the severity of a successful SSRF
    attack. Care must
    also be taken to block certain protocol or address formatting such as IPv6.

    If you cannot block address ranges at the client level, you may want to run the HTTP client
    as a protected
    user, or in a protected network where you can apply IP Table or firewall rules to block access
    to dangerous
    addresses. Finally, if none of the above protections are available, you could also run a
    custom HTTP proxy
    and force all requests through it to handle blocking dangerous addresses.

    Example using a map to look up a key to be used in a HTTP request:
    ```
    HashMap<String, String> lookupTable = new HashMap<>();
    lookupTable.put("key1", "https://example.com/");
    lookupTable.put("key2", "https://safeurl.com/");
    String userInput = request.getParameter("key");

    // Create a CloseableHttpClient, ideally any requests issued should be done
    // out-of-band from the servlet request itself (such as using a separate thread/scheduler
    system)
    try (final CloseableHttpClient httpClient = HttpClients.createDefault()) {
        // Lookup the value from our user input from our lookupTable
        String value = lookupTable.getOrDefault(userInput, "https://example.com/");
        // Construct the url, with the hardcoded url and only pass in the value from the
    lookupTable,
        // not direct user input
        final HttpGet httpget = new HttpGet(value);
        // Execute the request
        CloseableHttpResponse clientResponse = httpClient.execute(httpget);
        // Read the response
        byte[] responseData = clientResponse.getEntity().getContent().readAllBytes();
        // Handle the response
        // ...
    }
    ```

    If using a map is not possible, the user-supplied input must be encoded prior to use, and
    never allow full
    URLs:
    ```
    // Get user input
    String userInput = request.getParameter("key");
    // Encode the string using java.net.URLEncoder with the UTF-8 character set
    String encodedString = java.net.URLEncoder.encode(userInput, StandardCharsets.UTF_8);
    // Create a CloseableHttpClient, ideally any requests issued should be done
    // out-of-band from the servlet request itself (such as using a separate thread/scheduler
    system)
    try (final CloseableHttpClient httpClient = HttpClients.createDefault()) {
      // Construct the url, with the hardcoded url and only pass in the encoded value, never a
    full URL
      final HttpGet httpget = new HttpGet("https://example.com/getId?key="+encodedString);
      // Execute the request
      CloseableHttpResponse clientResponse = httpClient.execute(httpget);
      // Read the response
      byte[] responseData = clientResponse.getEntity().getContent().readAllBytes();
      // handle the response
    }
    ```

    For more information on SSRF see OWASP:
    https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html
  metadata:
    shortDescription: Server-Side Request Forgery (SSRF)
    category: security
    cwe: CWE-918
    primary_identifier: find_sec_bugs.URLCONNECTION_SSRF_FD-1
    secondary_identifiers:
    - name: Find Security Bugs-URLCONNECTION_SSRF_FD
      type: find_sec_bugs_type
      value: URLCONNECTION_SSRF_FD
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.URLCONNECTION_SSRF_FD-1
    shortlink: https://sg.run/Njl7
    semgrep.dev:
      rule:
        rule_id: pKUblx
        version_id: 1QTObv3
        url: https://semgrep.dev/playground/r/1QTObv3/gitlab.find_sec_bugs.URLCONNECTION_SSRF_FD-1
        origin: community
  pattern-either:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          import java.net.*
          ...
      - pattern-inside: |
          import java.net.URL
          ...
      - pattern-inside: |
          import java.net.URI
          ...
    - pattern: new $TYPE(...). ... .$FUNC
    - pattern-not: new $TYPE("..."). ... .$FUNC
    - metavariable-pattern:
        metavariable: "$FUNC"
        pattern-either:
        - pattern: connect
        - pattern: GetContent
        - pattern: openConnection
        - pattern: openStream
        - pattern: getContent
    - metavariable-pattern:
        metavariable: "$TYPE"
        pattern-either:
        - pattern: URL
        - pattern: java.net.URL
        - pattern: URI
        - pattern: java.net.URI
  - patterns:
    - pattern-either:
      - pattern-inside: |
          import java.net.*;
          ...
      - pattern-inside: |
          import java.net.InetSocketAddress;
          ...
    - pattern: 'new InetSocketAddress(..., $PORT)

        '
    - pattern-not: 'new InetSocketAddress("...", $PORT)

        '
  severity: ERROR
- id: gitlab.find_sec_bugs.WEAK_FILENAMEUTILS-1
  languages:
  - java
  message: |
    A file is opened to read its content. The filename comes from an input
    parameter. If an unfiltered parameter is passed to this file API, files from an
    arbitrary filesystem location could be read.
  metadata:
    category: security
    cwe: CWE-22
    shortDescription: Improper Limitation of a Pathname to a Restricted Directory
      ('Path Traversal')
    technology:
    - java
    primary_identifier: find_sec_bugs.WEAK_FILENAMEUTILS-1
    secondary_identifiers:
    - name: Find Security Bugs-WEAK_FILENAMEUTILS
      type: find_sec_bugs_type
      value: WEAK_FILENAMEUTILS
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.WEAK_FILENAMEUTILS-1
    shortlink: https://sg.run/Gb41
    semgrep.dev:
      rule:
        rule_id: 8GUvb6
        version_id: GxTvxeN
        url: https://semgrep.dev/playground/r/GxTvxeN/gitlab.find_sec_bugs.WEAK_FILENAMEUTILS-1
        origin: community
  patterns:
  - pattern-inside: |
      import static org.apache.commons.io.FilenameUtils;
      ...
  - pattern-either:
    - pattern: normalize(...)
    - pattern: getExtension(...)
    - pattern: isExtensions(...)
    - pattern: getName(...)
    - pattern: getBaseName(...)
    - pattern: org.apache.commons.io.FilenameUtils.normalize(...)
    - pattern: org.apache.commons.io.FilenameUtils.getExtension(...)
    - pattern: org.apache.commons.io.FilenameUtils.isExtensions(...)
    - pattern: org.apache.commons.io.FilenameUtils.getName(...)
    - pattern: org.apache.commons.io.FilenameUtils.getBaseName(...)
  severity: ERROR
- id: gitlab.find_sec_bugs.WEAK_HOSTNAME_VERIFIER-1.WEAK_TRUST_MANAGER-1
  languages:
  - java
  message: |
    Either the `HostnameVerifier` has been set to always return `true` or the `X509TrustManager`
    has
    been configured to return null, or both. This effectively disables the validation of server or
    client certificates.

    This allows for an adversary who is in between the application and the target host to intercept
    potentially sensitive information or transmit malicious data.

    It is recommended to not override the default `HostnameVerifiers`.

    Consider using the default `TrustManager` instead of implementing a custom one. If you must
    override
    the default verification process, implement proper TrustManager verification for
    `checkServerTrusted` and
    `checkClientTrusted` by throwing `CertificateException` if the certificate is invalid.

    Example using the built in `TrustManagerFactory` to manage validating certificate chains:
    ```
    // Use the default TrustManagerFactory
    TrustManagerFactory trustManagerFactory =
    TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
    // Use default system KeyStore, alternatively pass in your own keystore.
    trustManagerFactory.init((KeyStore) null);
    // Create SSLContext for TLS connections
    SSLContext tlsContext = SSLContext.getInstance("TLS");
    // Initialize the tlsContext with our trust manager and a SecureRandom number generator.
    tlsContext.init(null, trustManagerFactory.getTrustManagers(), new SecureRandom());
    ```

    For more information on TLS security see OWASP:
    https://cheatsheetseries.owasp.org/cheatsheets/Transport_Layer_Protection_Cheat_Sheet.html
  metadata:
    shortDescription: Improper certificate validation
    category: security
    cwe: CWE-295
    primary_identifier: find_sec_bugs.WEAK_HOSTNAME_VERIFIER-1.WEAK_TRUST_MANAGER-1
    secondary_identifiers:
    - name: Find Security Bugs-WEAK_HOSTNAME_VERIFIER
      type: find_sec_bugs_type
      value: WEAK_HOSTNAME_VERIFIER
    - name: Find Security Bugs-WEAK_TRUST_MANAGER
      type: find_sec_bugs_type
      value: WEAK_TRUST_MANAGER
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.WEAK_HOSTNAME_VERIFIER-1.WEAK_TRUST_MANAGER-1
    shortlink: https://sg.run/Jw5Z
    semgrep.dev:
      rule:
        rule_id: 7KUbOj
        version_id: JdTN3xE
        url: https://semgrep.dev/playground/r/JdTN3xE/gitlab.find_sec_bugs.WEAK_HOSTNAME_VERIFIER-1.WEAK_TRUST_MANAGER-1
        origin: community
  patterns:
  - pattern-either:
    - patterns:
      - pattern-inside: |
          class $V implements HostnameVerifier {
            ...
          }
      - pattern-inside: |
          public boolean verify(...) {
            ...
          }
      - pattern: return true;
    - patterns:
      - pattern-inside: |
          class $V implements X509TrustManager {
            ...
          }
      - pattern-either:
        - pattern: public void checkClientTrusted(...) {}
        - pattern: public void checkServerTrusted(...) {}
        - pattern: |
            public X509Certificate[] getAcceptedIssuers() {
              ...
              return null;
            }
  severity: WARNING
- id: gitlab.find_sec_bugs.WEAK_MESSAGE_DIGEST_MD5-1.WEAK_MESSAGE_DIGEST_SHA1-1
  languages:
  - java
  patterns:
  - pattern-either:
    - pattern: MessageDigest.getInstance($ALG, ...)
    - pattern: Signature.getInstance($ALG, ...)
  - metavariable-regex:
      metavariable: "$ALG"
      regex: ".*(MD5|MD4|MD2|SHA1|SHA-1).*"
  message: |
    The application was found using an insecure or risky digest or signature algorithm. Both MD5
    and SHA1 hash algorithms have been found to be vulnerable to producing collisions.
    This means
    that two different values, when hashed, can lead to the same hash value. If the application is
    trying
    to use these hash methods for storing passwords, then it is recommended to switch to a
    password hashing
    algorithm such as Argon2id or PBKDF2.
    strongly recommended that a standard Digest algorithm be chosen instead as implementing
    a digest by hand is error-prone.

    Example of creating a SHA-384 hash:
    ```
    // Create a MessageDigest using the SHA-384 algorithm
    MessageDigest sha384Digest = MessageDigest.getInstance("SHA-384");
    // Call update with your data
    sha384Digest.update(input);
    // Only call digest once all data has been fed into the update sha384digest instance
    byte[] output = sha384Digest.digest();
    // output base64 encoded version of the hash
    System.out.println("hash: " + Base64.getEncoder().encodeToString(output));
    ```

    For more information on secure password storage see OWASP:
    https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html
  severity: WARNING
  metadata:
    shortDescription: Use of a broken or risky cryptographic algorithm (SHA1/MD5)
    category: security
    cwe: CWE-327
    technology:
    - java
    primary_identifier: find_sec_bugs.WEAK_MESSAGE_DIGEST_MD5-1.WEAK_MESSAGE_DIGEST_SHA1-1
    secondary_identifiers:
    - name: Find Security Bugs-WEAK_MESSAGE_DIGEST_MD5
      type: find_sec_bugs_type
      value: WEAK_MESSAGE_DIGEST_MD5
    - name: Find Security Bugs-WEAK_MESSAGE_DIGEST_SHA1
      type: find_sec_bugs_type
      value: WEAK_MESSAGE_DIGEST_SHA1
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.WEAK_MESSAGE_DIGEST_MD5-1.WEAK_MESSAGE_DIGEST_SHA1-1
    shortlink: https://sg.run/L2R7
    semgrep.dev:
      rule:
        rule_id: OrUvyR
        version_id: ExTjpxX
        url: https://semgrep.dev/playground/r/ExTjpxX/gitlab.find_sec_bugs.WEAK_MESSAGE_DIGEST_MD5-1.WEAK_MESSAGE_DIGEST_SHA1-1
        origin: community
- id: gitlab.find_sec_bugs.WICKET_XSS1-1
  languages:
  - java
  patterns:
  - pattern: "(org.apache.wicket.markup.html.basic.Label $X).setEscapeModelStrings(false);"
  message: |
    The application is disabling Wicket's string escaping functionality by calling
    `setEscapeModelStrings(false)`.
    This could lead to Cross Site Scripting (XSS) if used with user-supplied input. XSS is an
    attack which exploits
     a web application or system to treat    user input
    as markup or script code. It is important to encode the data depending on the specific context
    it
    is used in. There are at least six context types:

    - Inside HTML tags `<div>context 1</div>`
    - Inside attributes: `<div class="context 2"></div>`
    - Inside event attributes `<button onclick="context 3">button</button>`
    - Inside script blocks: `<script>var x = "context 4"</script>`
    - Unsafe element HTML assignment: `element.innerHTML = "context 5"`
    - Inside URLs: `<iframe src="context 6"></iframe><a href="context 6">link</a>`

    Script blocks alone have multiple ways they need to be encoded. Extra care must be taken if
    user input
    is ever output inside of script tags.

    User input that is displayed within the application must be encoded, sanitized or validated
    to ensure it cannot be treated as HTML or executed as JavaScript code. Care must also be
    taken
    to not mix server-side templating with client-side templating, as the server-side templating
    will
    not encode things like {{ 7*7 }} which may execute client-side templating features.

    It is _NOT_ advised to encode user input prior to inserting into a data store. The data will
    need to be
    encoded depending on context of where it is output. It is much safer to force the displaying
    system to
    handle the encoding and not attempt to guess how it should be encoded.

    Use Wicket's built in escaping feature by calling `Component.setEscapeModelStrings(true);`

    For more information on Wicket components see:
    - https://nightlies.apache.org/wicket/apidocs/9.x/org/apache/wicket/Component.html

    For more information on XSS see OWASP:
    - https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html
  metadata:
    shortDescription: Improper neutralization of input during web page generation
      ('Cross-site Scripting')
    category: security
    cwe: CWE-79
    primary_identifier: find_sec_bugs.WICKET_XSS1-1
    secondary_identifiers:
    - name: Find Security Bugs-WICKET_XSS1
      type: find_sec_bugs_type
      value: WICKET_XSS1
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.WICKET_XSS1-1
    shortlink: https://sg.run/QJoP
    semgrep.dev:
      rule:
        rule_id: v8Uvkz
        version_id: QkTWzBA
        url: https://semgrep.dev/playground/r/QkTWzBA/gitlab.find_sec_bugs.WICKET_XSS1-1
        origin: community
  severity: WARNING
- id: gitlab.find_sec_bugs.XML_DECODER-1
  languages:
  - java
  message: |
    Deserialization attacks exploit the process of reading serialized data and turning it back
    into an object. By constructing malicious objects and serializing them, an adversary may
    attempt to:

    - Inject code that is executed upon object construction, which occurs during the
    deserialization process.
    - Exploit mass assignment by including fields that are not normally a part of the serialized
    data but are read in during deserialization.

    Consider safer alternatives such as serializing data in the JSON format. Ensure any format
    chosen allows
    the application to specify exactly which object types are allowed to be deserialized.
    Additionally, when
    deserializing, never deserialize to base object types like `Object` and only cast to the exact
    object
    type that is expected.

    To protect against mass assignment, only allow deserialization of the specific fields that are
    required. If this is not easily done, consider creating an intermediary type that
    can be serialized with only the necessary fields exposed.

    Do note that `XMLEncoder` and `XMLDecoder` are not recommended. If the application must
    use this serialization method, use a custom ClassLoader to prevent loading of arbitrary
    classes:
    ```
    XMLDecoder decoder = new XMLDecoder(inputStream, null, null, new ClassLoader() {
        @Override
        protected Class<?> loadClass(String name, boolean resolve) throws ClassNotFoundException {
            if (!name.equals(NameOfBeanHere.class.getName()) &&
    !name.equals(XMLDecoder.class.getName())) {
                throw new RuntimeException("Unauthorized deserialization attempt: " + name);
            }

            throw new ClassNotFoundException(name);
        }
    });
    ```

    For more information on XML security see OWASP's guide:
    https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html#java

    For more details on deserialization attacks in general, see OWASP's guide:
    https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html

    It should be noted that [tools exist](https://github.com/frohoff/ysoserial) to
    automatically create
    exploit code for these vulnerabilities.
  metadata:
    shortDescription: Deserialization of untrusted data
    category: security
    cwe: CWE-502
    primary_identifier: find_sec_bugs.XML_DECODER-1
    secondary_identifiers:
    - name: Find Security Bugs-XML_DECODER
      type: find_sec_bugs_type
      value: XML_DECODER
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.XML_DECODER-1
    shortlink: https://sg.run/7QeR
    semgrep.dev:
      rule:
        rule_id: wdUk2X
        version_id: vdTYpRE
        url: https://semgrep.dev/playground/r/vdTYpRE/gitlab.find_sec_bugs.XML_DECODER-1
        origin: community
  patterns:
  - pattern-either:
    - patterns:
      - pattern-inside: |
          $D = new XMLDecoder($IN);
          ...
      - pattern-not-inside: |
          $D = new XMLDecoder("...");
          ...
      - pattern: "$D.readObject()"
  severity: WARNING
- id: gitlab.find_sec_bugs.XPATH_INJECTION-1
  languages:
  - java
  message: |
    The application processes `XPath` queries with potentially malicious input.
    An adversary who is able to control the XPath query could potentially influence the logic
    of how data is retrieved, processed or even bypass protections.

    To protect against XPath injection, user input should be parameterized using a variable
    resolver.
    By creating a class that implements the `XPathVariableResolver` the application can ensure
    that
    the xpath query and user-supplied input are treated separately.

    Example implementation of an XPathVariableResolver:
    ```
    // Create a class which implements the XPathVariableResolver interface
    public static class SimpleXPathVariableResolver implements XPathVariableResolver {
      // Use a map or lookup table to store variables for resolution
      private HashMap<QName, String> variables = new HashMap<>();
      // Allow caller to set variables
      public void setVariable(QName name, String value) {
        variables.put(name, value);
      }
      // Implement the resolveVariable to return the value
      @Override
      public Object resolveVariable(QName name) {
        return variables.getOrDefault(name, "");
      }
    }

    public static void xpathQuery(String userInput) throws ParseException,
    ParserConfigurationException,
      SAXException, IOException, XPathExpressionException {

      // Create our DocumentFactory
      DocumentBuilderFactory domFactory = DocumentBuilderFactory.newInstance();
      // Enable namespace awareness
      domFactory.setNamespaceAware(true);
      // Enable secure processing
      domFactory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);
      // Create our DocumentBuilder
      DocumentBuilder builder = domFactory.newDocumentBuilder();
      // Parse our XML document
      Document doc = builder.parse("inventory.xml");

      // Create a new instance of an XPath object
      XPath xpathProcessor = XPathFactory.newInstance().newXPath();
      // Create our XPathVariableResolver
      SimpleXPathVariableResolver resolver = new SimpleXPathVariableResolver();
      // Add user input as a variable value
      resolver.setVariable(new QName("author"), userInput);
      // Configure the processor to use our variable resolver
      xpathProcessor.setXPathVariableResolver(resolver);
      // Evaluate the XPath query
          String result = xpathProcessor.compile("//author[contains(., $author)]").evaluate(doc);
      // Work with the result
      // ...
    }
    ```

    For more information on XPath Injection see:
    - https://owasp.org/www-community/attacks/XPATH_Injection
  metadata:
    shortDescription: Improper neutralization of data within XPath expressions ('XPath
      Injection')
    category: security
    cwe: CWE-643
    primary_identifier: find_sec_bugs.XPATH_INJECTION-1
    secondary_identifiers:
    - name: Find Security Bugs-XPATH_INJECTION
      type: find_sec_bugs_type
      value: XPATH_INJECTION
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.XPATH_INJECTION-1
    shortlink: https://sg.run/8kv7
    semgrep.dev:
      rule:
        rule_id: OrUv05
        version_id: ZRTQ7Z0
        url: https://semgrep.dev/playground/r/ZRTQ7Z0/gitlab.find_sec_bugs.XPATH_INJECTION-1
        origin: community
  patterns:
  - pattern-either:
    - pattern-inside: import javax.xml.xpath.*; ...
    - pattern-inside: import javax.xml.xpath.XPath; ...
  - pattern-either:
    - patterns:
      - pattern: "(XPath $X).compile($ARG)"
      - pattern-not: (XPath $X).compile("...")
    - patterns:
      - pattern: "(XPath $X).evaluate($ARG)"
      - pattern-not: (XPath $X).evaluate("...")
  severity: ERROR
- id: gitlab.find_sec_bugs.XSS_REQUEST_PARAMETER_TO_SEND_ERROR-1
  languages:
  - java
  mode: taint
  pattern-sanitizers:
  - patterns:
    - pattern-inside: org.owasp.encoder.Encode.forHtml($TAINTED);
    - pattern: "$TAINTED"
  pattern-sinks:
  - patterns:
    - pattern-inside: "$FUNC(..., HttpServletResponse $RES, ...) {...}"
    - pattern: "$RES.sendError(..., $DATA);"
    - pattern: "$DATA"
  pattern-sources:
  - patterns:
    - pattern-inside: "$FUNC(..., HttpServletRequest $REQ, ...) {...}"
    - pattern-either:
      - pattern: "$REQ.getParameter(...);"
      - pattern: "$REQ.getHeader(...);"
      - pattern: "$REQ.getRequestedSessionId();"
      - pattern: "$REQ.getQueryString();"
  message: |
    The application is returning user-supplied data from an HTTP request to an HTTP response's
    `sendError` method. This could lead to Cross Site Scripting (XSS) if the input were malicious
    script code and the application server is not properly validating the output. Note that Apache
    Tomcat 9 and above automatically encode the output and are not vulnerable.

    XSS is an attack which exploits a web application or system to treat user input
    as markup or script code. It is important to encode the data depending on the specific context
    it is used in. There are at least six context types:

    - Inside HTML tags `<div>context 1</div>`
    - Inside attributes: `<div class="context 2"></div>`
    - Inside event attributes `<button onclick="context 3">button</button>`
    - Inside script blocks: `<script>var x = "context 4"</script>`
    - Unsafe element HTML assignment: `element.innerHTML = "context 5"`
    - Inside URLs: `<iframe src="context 6"></iframe><a href="context 6">link</a>`

    Script blocks alone have multiple ways they need to be encoded. Extra care must be taken if
    user input
    is ever output inside of script tags.

    User input that is displayed within the application must be encoded, sanitized or validated
    to ensure it cannot be treated as HTML or executed as Javascript code. Care must also be
    taken
    to not mix server-side templating with client-side templating, as the server-side templating
    will
    not encode things like {{ 7*7 }} which may execute client-side templating features.

    It is _NOT_ advised to encode user input prior to inserting into a data store. The data will
    need to be
    encoded depending on context of where it is output. It is much safer to force the displaying
    system to
    handle the encoding and not attempt to guess how it should be encoded.

    If possible do not use user input directly in the output to the `sendError` message parameter.

    Regardless if the application server handles output encoding, consider encoding any
    user-supplied
    input
    that is used in the sendError method:

    Example using [Apache Commons Text](https://commons.apache.org/proper/commons-text/)
    `StringEscapeUtils.escapeHtml4`:
    ```
    // Get user input
    String userInput = request.getParameter("key");
    // Encode the input using the Html4 encoder
    String encoded = StringEscapeUtils.escapeHtml4(userInput);
    // Respond with the error code and value
    response.sendError(401, encoded);
    ```

    For more information on XSS see OWASP:
    - https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html
  severity: WARNING
  metadata:
    shortDescription: Improper neutralization of input during web page generation
      ('Cross-site Scripting')
    category: security
    cwe: CWE-79
    technology:
    - java
    primary_identifier: find_sec_bugs.XSS_REQUEST_PARAMETER_TO_SEND_ERROR-1
    secondary_identifiers:
    - name: Find Security Bugs-XSS_REQUEST_PARAMETER_TO_SEND_ERROR
      type: find_sec_bugs_type
      value: XSS_REQUEST_PARAMETER_TO_SEND_ERROR
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.XSS_REQUEST_PARAMETER_TO_SEND_ERROR-1
    shortlink: https://sg.run/0xwb
    semgrep.dev:
      rule:
        rule_id: 8GUo74
        version_id: 3ZTkP7b
        url: https://semgrep.dev/playground/r/3ZTkP7b/gitlab.find_sec_bugs.XSS_REQUEST_PARAMETER_TO_SEND_ERROR-1
        origin: community
- id: gitlab.find_sec_bugs.XSS_REQUEST_PARAMETER_TO_SERVLET_WRITER-1
  languages:
  - java
  mode: taint
  pattern-sanitizers:
  - patterns:
    - pattern-inside: org.owasp.encoder.Encode.forHtml($TAINTED);
    - pattern: "$TAINTED"
  pattern-sinks:
  - patterns:
    - pattern-inside: "$FUNC(..., HttpServletResponse $RES, ...) {...}"
    - pattern-inside: |
        $WRITER = $RES.getWriter();
        ...
    - pattern: "$WRITER.write($DATA,...);"
    - pattern: "$DATA"
  - patterns:
    - pattern-inside: "$FUNC(..., HttpServletResponse $RES, ...) {...}"
    - pattern: "$RES.getWriter().write($DATA,...);"
    - pattern: "$DATA"
  pattern-sources:
  - patterns:
    - pattern-inside: "$FUNC(..., HttpServletRequest $REQ, ...) {...}"
    - pattern: "$REQ.getParameter(...);"
  message: |
    The application is returning user-supplied data from an HTTP request directly into an HTTP
    response output
    writer. This could lead to Cross Site Scripting (XSS) if the input were malicious
    script code and the application server is not properly validating the output.

    XSS is an attack which exploits a web application or system to treat user input
    as markup or script code. It is important to encode the data depending on the specific context
    it is used in. There are at least six context types:

    - Inside HTML tags `<div>context 1</div>`
    - Inside attributes: `<div class="context 2"></div>`
    - Inside event attributes `<button onclick="context 3">button</button>`
    - Inside script blocks: `<script>var x = "context 4"</script>`
    - Unsafe element HTML assignment: `element.innerHTML = "context 5"`
    - Inside URLs: `<iframe src="context 6"></iframe><a href="context 6">link</a>`

    Script blocks alone have multiple ways they need to be encoded. Extra care must be taken if
    user input
    is ever output inside of script tags.

    User input that is displayed within the application must be encoded, sanitized or validated
    to ensure it cannot be treated as HTML or executed as Javascript code. Care must also be
    taken
    to not mix server-side templating with client-side templating, as the server-side templating
    will
    not encode things like {{ 7*7 }} which may execute client-side templating features.

    It is _NOT_ advised to encode user input prior to inserting into a data store. The data will
    need to be
    encoded depending on context of where it is output. It is much safer to force the displaying
    system to
    handle the encoding and not attempt to guess how it should be encoded.

    If possible do not use user input directly in the output to the response writer.

    If the application must output user-supplied input, it will need to encode the data depending
    on
    the output context.

    Consider using [Apache Commons Text](https://commons.apache.org/proper/commons-text/)
    `StringEscapeUtils` methods for various context. Please note there is no way to safely
    output script code in most circumstances, regardless of encoding. If calling the HTTP
    response writer directly, ensure that the `Content-Type` is set to `text/plain` so it will
    not be accidentally interpreted by HTML by modern browsers.
    ```
    // Get user input
    String htmlInput = request.getParameter("userInput");
    // Encode the input using the Html4 encoder
    String htmlEncoded = StringEscapeUtils.escapeHtml4(htmlInput);
    // Force the HTTP response to be content type of text/plain so it is not interpreted as HTML
    response.setContentType("text/plain");
    // Ensure UTF-8
    response.setCharacterEncoding("UTF-8");
    // Write response
    response.getWriter().write(htmlEncoded);
    ```

    For more information on XSS see OWASP:
    - https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html
  severity: WARNING
  metadata:
    shortDescription: Improper neutralization of input during web page generation
      ('Cross-site Scripting')
    category: security
    cwe: CWE-79
    technology:
    - java
    primary_identifier: find_sec_bugs.XSS_REQUEST_PARAMETER_TO_SERVLET_WRITER-1
    secondary_identifiers:
    - name: Find Security Bugs-XSS_REQUEST_PARAMETER_TO_SERVLET_WRITER
      type: find_sec_bugs_type
      value: XSS_REQUEST_PARAMETER_TO_SERVLET_WRITER
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.XSS_REQUEST_PARAMETER_TO_SERVLET_WRITER-1
    shortlink: https://sg.run/3Qkb
    semgrep.dev:
      rule:
        rule_id: d8U6Rg
        version_id: 44TRkxG
        url: https://semgrep.dev/playground/r/44TRkxG/gitlab.find_sec_bugs.XSS_REQUEST_PARAMETER_TO_SERVLET_WRITER-1
        origin: community
- id: gitlab.find_sec_bugs.XXE_SAXPARSER-1
  languages:
  - java
  message: |
    External XML entities are a feature of XML parsers that allow documents to contain references
    to
    other documents or data. This feature can be abused to read files, communicate with external
    hosts,
    exfiltrate data, or cause a Denial of Service (DoS).

    It is recommended that the `SAXParser` is configured to disable DTD doctypes as this protects
    against the majority of XXE attacks.

    Example creating a SAXParser with disallowing the doctypes feature enabled:
    ```
    // Create a SAXParserFactory
    SAXParserFactory saxParserFactory = SAXParserFactory.newInstance();
    // Enable the feature which disallows <!DOCTYPE declarations which includes referencing
    external entities.
    saxParserFactory.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
    // Create a new parser from this factory
    SAXParser parser = saxParserFactory.newSAXParser();
    // Parse the XML file, passing in a DefaultHandler (which also includes an empty entityResolve
    method)
    parser.parse(new FileInputStream(new File("bad.xml")), new DefaultHandler());
    ```

    For more information on XML security see OWASP's guide:
    https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html#java
  metadata:
    shortDescription: Improper restriction of XML external entity reference ('XXE')
    category: security
    cwe: CWE-611
    primary_identifier: find_sec_bugs.XXE_SAXPARSER-1
    secondary_identifiers:
    - name: Find Security Bugs-XXE_SAXPARSER
      type: find_sec_bugs_type
      value: XXE_SAXPARSER
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.XXE_SAXPARSER-1
    shortlink: https://sg.run/JwWQ
    semgrep.dev:
      rule:
        rule_id: EwU1kG
        version_id: QkTW7OO
        url: https://semgrep.dev/playground/r/QkTW7OO/gitlab.find_sec_bugs.XXE_SAXPARSER-1
        origin: community
  patterns:
  - pattern-inside: |
      $SF = SAXParserFactory.newInstance();
      ...
  - pattern-not-inside: |
      $SF.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);
      ...
  - pattern-not-inside: |
      $SF.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
      ...
  - pattern-inside: |
      $P = $SFP.newSAXParser();
      ...
  - pattern: "$P.parse(...);"
  severity: ERROR
- id: gitlab.find_sec_bugs.XXE_XMLREADER-1
  languages:
  - java
  message: |
    External XML entities are a feature of XML parsers that allow documents to contain references
    to
    other documents or data. This feature can be abused to read files, communicate with external
    hosts,
    exfiltrate data, or cause a Denial of Service (DoS).

    The XMLReaderFactory has been deprecated. It is recommended that
    [SAXParserFactory](https://docs.oracle.com/javase/9/docs/api/javax/xml/parsers/SAXParserFactory.html)
    be used
    instead. Additionally when using the SAXParser it must be configured to disallow doctypes,
    which will
    protect against the majority of XXE attacks.

    Example creating a SAXParser with disallowing the doctypes feature enabled:
    ```
    // Create a SAXParserFactory
    SAXParserFactory saxParserFactory = SAXParserFactory.newInstance();
    // Enable the feature which disallows <!DOCTYPE declarations which includes referencing
    external entities.
    saxParserFactory.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
    // Create a new parser from this factory
    SAXParser parser = saxParserFactory.newSAXParser();
    // Parse the XML file, passing in a DefaultHandler (which also includes an empty entityResolve
    method)
    parser.parse(new FileInputStream(new File("bad.xml")), new DefaultHandler());
    ```

    For more information on XML security see OWASP's guide:
    https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html#java
  metadata:
    shortDescription: Improper restriction of XML external entity reference ('XXE')
    category: security
    cwe: CWE-611
    primary_identifier: find_sec_bugs.XXE_XMLREADER-1
    secondary_identifiers:
    - name: Find Security Bugs-XXE_XMLREADER
      type: find_sec_bugs_type
      value: XXE_XMLREADER
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.XXE_XMLREADER-1
    shortlink: https://sg.run/GbAn
    semgrep.dev:
      rule:
        rule_id: L1UzY1
        version_id: 44TRAdn
        url: https://semgrep.dev/playground/r/44TRAdn/gitlab.find_sec_bugs.XXE_XMLREADER-1
        origin: community
  patterns:
  - pattern-inside: |
      $R = XMLReaderFactory.createXMLReader();
      ...
  - pattern-not-inside: |
      $R.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);
      ...
  - pattern: "$R.parse(...);"
  severity: ERROR
- id: gitlab.find_sec_bugs.XXE_XMLSTREAMREADER-1
  languages:
  - java
  message: |
    External XML entities are a feature of XML parsers that allow documents to contain references
    to
    other documents or data. This feature can be abused to read files, communicate with external
    hosts,
    exfiltrate data, or cause a Denial of Service (DoS).

    In most XML parsers, the recommendation to protect against XXE is to disable the doctype
    feature.
    Unfortunately use of the `XMLInputFactory` requires that the doctypes feature be enabled.
    Instead
    the application can set the `ACCESS_EXTERNAL_DTD` to an empty string and disable
    `javax.xml.stream.isSupportingExternalEntities`.


    Creates an `XMLInputFactory` stream parser, but disables accessing external DTD or entities:
    ```
    // Create an XMLInputFactory
    XMLInputFactory factory = XMLInputFactory.newFactory();
    // Set the ACCESS_EXTERNAL_DTD property to an empty string so it won't access
    // entities using protocols
    // (ref:
    https://docs.oracle.com/javase/8/docs/api/javax/xml/XMLConstants.html#ACCESS_EXTERNAL_DTD)
    factory.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, "");
    // Additionally, disable support for resolving external entities
    factory.setProperty("javax.xml.stream.isSupportingExternalEntities", false);
    // Continue to work with the factory/stream parser
    ```

    For more information on XML security see OWASP's guide:
    https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html#java
  metadata:
    shortDescription: Improper restriction of XML external entity reference ('XXE')
    category: security
    cwe: CWE-611
    primary_identifier: find_sec_bugs.XXE_XMLSTREAMREADER-1
    secondary_identifiers:
    - name: Find Security Bugs-XXE_XMLSTREAMREADER
      type: find_sec_bugs_type
      value: XXE_XMLSTREAMREADER
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs.XXE_XMLSTREAMREADER-1
    shortlink: https://sg.run/R5zK
    semgrep.dev:
      rule:
        rule_id: 8GUv2b
        version_id: PkTJWyp
        url: https://semgrep.dev/playground/r/PkTJWyp/gitlab.find_sec_bugs.XXE_XMLSTREAMREADER-1
        origin: community
  patterns:
  - pattern-inside: |
      $SF = XMLInputFactory.newFactory();
      ...
  - pattern-not-inside: |
      $SF.setProperty(XMLInputFactory.SUPPORT_DTD, false);
      ...
  - pattern-not-inside: |
      $SF.setProperty(XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, false);
      ...
  - pattern-not-inside: |
      $SF.setProperty(XMLInputFactory.SUPPORT_DTD, Boolean.FALSE);
      ...
  - pattern-not-inside: |
      $SF.setProperty(XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, Boolean.FALSE);
      ...
  - pattern: "$SF.createXMLStreamReader(...)"
  severity: ERROR
- id: gitlab.find_sec_bugs_scala.AWS_QUERY_INJECTION-1
  languages:
  - scala
  message: |
    Constructing SimpleDB queries containing user input can allow an attacker to view unauthorized
    records.
  metadata:
    category: security
    cwe: CWE-943
    shortDescription: Improper Neutralization of Special Elements in Data Query Logic
    technology:
    - scala
    primary_identifier: find_sec_bugs.AWS_QUERY_INJECTION
    secondary_identifiers:
    - name: Find Security Bugs-AWS_QUERY_INJECTION
      type: find_sec_bugs_type
      value: AWS_QUERY_INJECTION
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs_scala.AWS_QUERY_INJECTION-1
    shortlink: https://sg.run/wyeY
    semgrep.dev:
      rule:
        rule_id: PeUGZy
        version_id: gET31bN
        url: https://semgrep.dev/playground/r/gET31bN/gitlab.find_sec_bugs_scala.AWS_QUERY_INJECTION-1
        origin: community
  mode: taint
  pattern-sinks:
  - pattern: new com.amazonaws.services.simpledb.model.SelectRequest($QUERY, ...);
  - patterns:
    - pattern-inside: "$DB.select(($SR: com.amazonaws.services.simpledb.model.SelectRequest).withSelectExpression($QUERY,...));\n"
    - pattern: "$QUERY"
    - metavariable-pattern:
        metavariable: "$DB"
        pattern-either:
        - pattern: "($DB: com.amazonaws.services.simpledb.AmazonSimpleDB)"
        - pattern: "($DB: com.amazonaws.services.simpledb.AmazonSimpleDBClient)"
  pattern-sources:
  - patterns:
    - pattern-inside: |
        def $FUNC(..., $REQ: HttpServletRequest, ...): $TYPE = {
          ...
        }
    - pattern: "$REQ"
  - patterns:
    - pattern-inside: |
        def $FUNC(..., $X: $TYPE, ...): $RET_TYPE = {
          ...
          $QUERY = <...$X...>
          ...
        }
    - pattern: "$QUERY"
  severity: ERROR
- id: gitlab.find_sec_bugs_scala.BAD_HEXA_CONVERSION-1
  languages:
  - scala
  message: |
    When converting a byte array containing a hash signature to a human readable string, a
    conversion mistake can be made if the array is read byte by byte.
  metadata:
    category: security
    confidence: HIGH
    cwe: CWE-704
    shortDescription: Incorrect Type Conversion or Cast
    primary_identifier: find_sec_bugs.BAD_HEXA_CONVERSION
    secondary_identifiers:
    - name: Find Security Bugs-BAD_HEXA_CONVERSION
      type: find_sec_bugs_type
      value: BAD_HEXA_CONVERSION
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs_scala.BAD_HEXA_CONVERSION-1
    shortlink: https://sg.run/GKWB
    semgrep.dev:
      rule:
        rule_id: eqUKvP
        version_id: 6xTvjez
        url: https://semgrep.dev/playground/r/6xTvjez/gitlab.find_sec_bugs_scala.BAD_HEXA_CONVERSION-1
        origin: community
  pattern-either:
  - pattern: |
      $B_ARR = ($MD: java.security.MessageDigest).digest(...);
      ...
      for(...) {
        ...
        Integer.toHexString(...);
      }
  - pattern: |
      $B_ARR = ($MD: java.security.MessageDigest).digest(...);
      ...
      while(...) {
        ...
        Integer.toHexString(...);
      }
  severity: WARNING
- id: gitlab.find_sec_bugs_scala.BEAN_PROPERTY_INJECTION-1
  languages:
  - scala
  message: |
    An attacker can set arbitrary bean properties that can compromise system integrity. An
    attacker can leverage this functionality to access special bean properties like
    class.classLoader that will allow them to override system properties and potentially execute
    arbitrary code.
  metadata:
    category: security
    cwe: CWE-15
    shortDescription: External Control of System or Configuration Setting
    technology:
    - scala
    primary_identifier: find_sec_bugs.BEAN_PROPERTY_INJECTION
    secondary_identifiers:
    - name: Find Security Bugs-BEAN_PROPERTY_INJECTION
      type: find_sec_bugs_type
      value: BEAN_PROPERTY_INJECTION
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs_scala.BEAN_PROPERTY_INJECTION-1
    shortlink: https://sg.run/x31z
    semgrep.dev:
      rule:
        rule_id: JDURyW
        version_id: QkTWz4e
        url: https://semgrep.dev/playground/r/QkTWz4e/gitlab.find_sec_bugs_scala.BEAN_PROPERTY_INJECTION-1
        origin: community
  patterns:
  - pattern-inside: 'def $FUNC(..., $REQ: HttpServletRequest, ...): $TYPE = { ...
      }'
  - pattern-either:
    - pattern: |
        $MAP.put(..., $REQ.getParameter(...))
        ...
        $BEAN_UTIL.populate(..., $MAP)
    - pattern: |
        while (...) {
            ...
            $MAP.put(..., $REQ.getParameterValues(...). ...)
        }
        ...
        $BEAN_UTIL.populate(..., $MAP)
  - metavariable-pattern:
      metavariable: "$BEAN_UTIL"
      pattern-either:
      - pattern: "(BeanUtilsBean $B)"
      - pattern: new BeanUtilsBean()
      - pattern: org.apache.commons.beanutils.BeanUtils
  severity: ERROR
- id: gitlab.find_sec_bugs_scala.BLOWFISH_KEY_SIZE-1
  languages:
  - scala
  message: |
    A small key size makes the ciphertext vulnerable to brute force attacks. At least 128 bits of
    entropy should be used when generating the key if use of Blowfish is required.
  metadata:
    category: security
    cwe: CWE-326
    shortDescription: Inadequate Encryption Strength
    technology:
    - scala
    primary_identifier: find_sec_bugs.BLOWFISH_KEY_SIZE
    secondary_identifiers:
    - name: Find Security Bugs-BLOWFISH_KEY_SIZE
      type: find_sec_bugs_type
      value: BLOWFISH_KEY_SIZE
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs_scala.BLOWFISH_KEY_SIZE-1
    shortlink: https://sg.run/ARvp
    semgrep.dev:
      rule:
        rule_id: ZqUd5K
        version_id: pZT1OBX
        url: https://semgrep.dev/playground/r/pZT1OBX/gitlab.find_sec_bugs_scala.BLOWFISH_KEY_SIZE-1
        origin: community
  patterns:
  - pattern-inside: |
      $KEYGEN = javax.crypto.KeyGenerator.getInstance("Blowfish", ...);
      ...
      $KEYGEN.init($KEY_SIZE);
  - metavariable-comparison:
      comparison: "$KEY_SIZE < 128"
      metavariable: "$KEY_SIZE"
  severity: WARNING
- id: gitlab.find_sec_bugs_scala.CIPHER_INTEGRITY-1
  languages:
  - scala
  message: |
    The ciphertext produced is susceptible to alteration by an adversary. This mean that the
    cipher provides no way to detect that the data has been tampered with. If the ciphertext can be
    controlled by an attacker, it could be altered without detection.
  metadata:
    category: security
    cwe: CWE-353
    shortDescription: Missing Support for Integrity Check
    technology:
    - scala
    primary_identifier: find_sec_bugs.CIPHER_INTEGRITY
    secondary_identifiers:
    - name: Find Security Bugs-CIPHER_INTEGRITY
      type: find_sec_bugs_type
      value: CIPHER_INTEGRITY
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs_scala.CIPHER_INTEGRITY-1
    shortlink: https://sg.run/09Qv
    semgrep.dev:
      rule:
        rule_id: L1UeyB
        version_id: 1QTOKD7
        url: https://semgrep.dev/playground/r/1QTOKD7/gitlab.find_sec_bugs_scala.CIPHER_INTEGRITY-1
        origin: community
  patterns:
  - pattern-inside: javax.crypto.Cipher.getInstance("...")
  - pattern-either:
    - pattern-regex: "(/CBC/PKCS5Padding)"
    - pattern-regex: "(AES|DES(ede)?)(/ECB/*)"
    - pattern-regex: "(AES|DES(ede)?)(/CBC/*)"
    - pattern-regex: "(AES|DES(ede)?)(/OFB/*)"
    - pattern-regex: "(AES|DES(ede)?)(/CTR/*)"
  - pattern-not-regex: ".*/(CCM|CWC|OCB|EAX|GCM)/.*"
  - pattern-not-regex: "^(RSA)/.*"
  - pattern-not-regex: "^(ECIES)$"
  severity: ERROR
- id: gitlab.find_sec_bugs_scala.COMMAND_INJECTION-1.SCALA_COMMAND_INJECTION-1
  languages:
  - scala
  message: |
    The highlighted API is used to execute a system command. If unfiltered input is passed to this
    API, it can lead to arbitrary command execution.
  metadata:
    category: security
    cwe: CWE-78
    shortDescription: Improper Neutralization of Special Elements used in an OS Command
      ('OS Command Injection')
    technology:
    - scala
    primary_identifier: find_sec_bugs.COMMAND_INJECTION-1.SCALA_COMMAND_INJECTION-1
    secondary_identifiers:
    - name: Find Security Bugs-COMMAND_INJECTION
      type: find_sec_bugs_type
      value: COMMAND_INJECTION
    - name: Find Security Bugs-SCALA_COMMAND_INJECTION
      type: find_sec_bugs_type
      value: SCALA_COMMAND_INJECTION
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs_scala.COMMAND_INJECTION-1.SCALA_COMMAND_INJECTION-1
    shortlink: https://sg.run/eALb
    semgrep.dev:
      rule:
        rule_id: GdUX7G
        version_id: 44TRkXq
        url: https://semgrep.dev/playground/r/44TRkXq/gitlab.find_sec_bugs_scala.COMMAND_INJECTION-1.SCALA_COMMAND_INJECTION-1
        origin: community
  pattern-either:
  - patterns:
    - pattern-inside: |
        def $FUNC(..., $PARAM: String, ...): $TYPE = {
          ...
        }
    - pattern-inside: |
        val $RT = Runtime.getRuntime
        ...
    - pattern-either:
      - pattern: "$RT.exec($PARAM)"
      - pattern: |
          var $CMDARR = new Array[String]("$SHELL",...,$PARAM,...)
          ...
          $RT.exec($CMDARR,...)
      - pattern: $RT.exec(Array[String]("$SHELL",...,$PARAM,...), ...)
      - pattern: $RT.exec(java.util.String.format("...", ...,$PARAM,...))
      - pattern: "$RT.exec(($A: String) + ($B: String))"
    - metavariable-regex:
        metavariable: "$SHELL"
        regex: "(/.../)?(sh|bash|ksh|csh|tcsh|zsh)$"
    - pattern-not: $RT.exec("...","...","...",...)
    - pattern-not: $RT.exec(new Array[String]("...","...","...",...),...)
  - patterns:
    - pattern-inside: |
        def $FUNC(...,$PARAM: String, ...): $TYPE = {
          ...
        }
    - pattern-inside: |
        val $PB = new ProcessBuilder()
        ...
    - pattern-either:
      - pattern: "$PB.command($PARAM,...)"
      - patterns:
        - pattern-either:
          - pattern: $PB.command("$SHELL",...,$PARAM,...)
          - pattern: |
              var $CMDARR = java.util.Arrays.asList("$SHELL",...,$PARAM,...)
              ...
              $PB.command($CMDARR,...)
          - pattern: $PB.command(java.util.Arrays.asList("$SHELL",...,$PARAM,...),...)
          - pattern: $PB.command(java.util.String.format("...", ...,$PARAM,...))
          - pattern: "$PB.command(($A: String) + ($B: String))"
        - metavariable-regex:
            metavariable: "$SHELL"
            regex: "(/.../)?(sh|bash|ksh|csh|tcsh|zsh)$"
    - pattern-not: $PB.command("...","...","...",...)
    - pattern-not: '$PB.command(java.util.Arrays.asList("...","...","...",...))

        '
  severity: WARNING
- id: gitlab.find_sec_bugs_scala.COOKIE_PERSISTENT-1
  languages:
  - scala
  message: |
    "Storing sensitive data in a persistent cookie for an extended period can lead to a breach of
    confidentiality or account compromise."
  metadata:
    category: security
    cwe: CWE-614
    shortDescription: Sensitive Cookie in HTTPS Session Without 'Secure' Attribute
    technology:
    - scala
    primary_identifier: find_sec_bugs.COOKIE_PERSISTENT
    secondary_identifiers:
    - name: Find Security Bugs-COOKIE_PERSISTENT
      type: find_sec_bugs_type
      value: COOKIE_PERSISTENT
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs_scala.COOKIE_PERSISTENT-1
    shortlink: https://sg.run/Qj54
    semgrep.dev:
      rule:
        rule_id: NbURkY
        version_id: 0bTL54L
        url: https://semgrep.dev/playground/r/0bTL54L/gitlab.find_sec_bugs_scala.COOKIE_PERSISTENT-1
        origin: community
  patterns:
  - pattern: "($C: Cookie).setMaxAge($AGE)\n"
  - metavariable-comparison:
      comparison: "$AGE >= 31536000"
      metavariable: "$AGE"
  severity: WARNING
- id: gitlab.find_sec_bugs_scala.COOKIE_USAGE-1
  languages:
  - scala
  message: |
    The information stored in a custom cookie should not be sensitive or related to the session.
    In most cases, sensitive data should only be stored in session and referenced by the user's
    session cookie.
  metadata:
    category: security
    cwe: CWE-614
    shortDescription: Sensitive Cookie in HTTPS Session Without 'Secure' Attribute
    technology:
    - scala
    primary_identifier: find_sec_bugs.COOKIE_USAGE
    secondary_identifiers:
    - name: Find Security Bugs-COOKIE_USAGE
      type: find_sec_bugs_type
      value: COOKIE_USAGE
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs_scala.COOKIE_USAGE-1
    shortlink: https://sg.run/3bxr
    semgrep.dev:
      rule:
        rule_id: kxUPkw
        version_id: K3Tvbpn
        url: https://semgrep.dev/playground/r/K3Tvbpn/gitlab.find_sec_bugs_scala.COOKIE_USAGE-1
        origin: community
  patterns:
  - pattern-inside: |
      def $FUNC(..., $REQ: HttpServletRequest, ...): $TYPE = {
        ...
      }
  - pattern-either:
    - patterns:
      - pattern-inside: |
          for ($C <- $REQ.getCookies) {
              ...
          }
      - pattern-either:
        - pattern: "$C.getName"
        - pattern: "$C.getValue"
        - pattern: "$C.getPath"
    - pattern: "($C: Cookie).getName()"
    - pattern: "($C: Cookie).getValue"
    - pattern: "($C: Cookie).getPath"
  severity: WARNING
- id: gitlab.find_sec_bugs_scala.CRLF_INJECTION_LOGS-1
  languages:
  - scala
  message: |
    When data from an untrusted source is put into a logger and not neutralized correctly, an
    attacker could forge log entries or include malicious content. Inserted false entries could be
    used to skew statistics, distract the administrator or even to implicate another party in the
    commission of a malicious act. If the log file is processed automatically, the attacker can
    render the file unusable by corrupting the format of the file or injecting unexpected
    characters. An attacker may also inject code or other commands into the log file and take
    advantage of a vulnerability in the log processing utility (e.g. command injection or XSS).
  metadata:
    category: security
    cwe: CWE-93
    shortDescription: Improper Neutralization of CRLF Sequences ('CRLF Injection')
    technology:
    - scala
    primary_identifier: find_sec_bugs.CRLF_INJECTION_LOGS
    secondary_identifiers:
    - name: Find Security Bugs-CRLF_INJECTION_LOGS
      type: find_sec_bugs_type
      value: CRLF_INJECTION_LOGS
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs_scala.CRLF_INJECTION_LOGS-1
    shortlink: https://sg.run/O2PB
    semgrep.dev:
      rule:
        rule_id: 5rUGOX
        version_id: 3ZTkPoA
        url: https://semgrep.dev/playground/r/3ZTkPoA/gitlab.find_sec_bugs_scala.CRLF_INJECTION_LOGS-1
        origin: community
  mode: taint
  pattern-sanitizers:
  - patterns:
    - pattern-inside: $STR.replaceAll("$REPLACE_CHAR", "$REPLACE");
    - pattern: "$STR"
    - metavariable-regex:
        metavariable: "$REPLACE_CHAR"
        regex: "(.*\\\\r\\\\n.*)"
    - metavariable-regex:
        metavariable: "$REPLACE"
        regex: "(?!(\\\\r\\\\n))"
  - pattern: org.owasp.encoder.Encode.forUriComponent(...)
  - pattern: org.owasp.encoder.Encode.forUri(...)
  - pattern: java.net.URLEncoder.encode(..., $CHARSET)
  pattern-sinks:
  - patterns:
    - patterns:
      - pattern: "$LOGGER.$METHOD(...,<...$TAINTED...>,...)"
      - focus-metavariable: "$TAINTED"
    - metavariable-regex:
        metavariable: "$METHOD"
        regex: "(log|logp|logrb|entering|exiting|fine|finer|finest|info|debug|trace|warn|warning|config|error|severe)"
    - metavariable-pattern:
        metavariable: "$LOGGER"
        pattern-either:
        - pattern: Logger
        - pattern: log
        - pattern: logger
        - pattern: org.pmw.tinylog.Logger
        - pattern: org.apache.log4j.Logger
        - pattern: org.apache.logging.log4j.Logger
        - pattern: org.slf4j.Logger
        - pattern: org.apache.commons.logging.Log
        - pattern: java.util.logging.Logger
  pattern-sources:
  - patterns:
    - pattern-inside: |
        def $FUNC(..., $REQ: HttpServletRequest, ...) : $TYPE = {
          ...
        }
    - pattern: "$REQ.getParameter(...)"
  severity: ERROR
- id: gitlab.find_sec_bugs_scala.CUSTOM_INJECTION-1
  languages:
  - scala
  message: |
    The method identified is susceptible to injection. The input should be validated and properly
    escaped.
  metadata:
    category: security
    cwe: CWE-89
    shortDescription: Improper Neutralization of Special Elements used in an SQL Command
      ('SQL Injection')
    technology:
    - scala
    primary_identifier: find_sec_bugs.CUSTOM_INJECTION
    secondary_identifiers:
    - name: Find Security Bugs-CUSTOM_INJECTION
      type: find_sec_bugs_type
      value: CUSTOM_INJECTION
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs_scala.CUSTOM_INJECTION-1
    shortlink: https://sg.run/v9zA
    semgrep.dev:
      rule:
        rule_id: ReUxgb
        version_id: PkTJZp3
        url: https://semgrep.dev/playground/r/PkTJZp3/gitlab.find_sec_bugs_scala.CUSTOM_INJECTION-1
        origin: community
  patterns:
  - pattern-either:
    - pattern-inside: |
        val $ST = connection.createStatement
        ...
  - pattern-either:
    - pattern: |
        val $QUERY = ... + $VAR + ...
        ...
        $ST.executeQuery($QUERY)
    - pattern: |
        val $QUERY = ... + $VAR
        ...
        $ST.executeQuery($QUERY)
    - pattern: |
        val $QUERY = String.format("...",...,$VAR,...)
        ...
        $ST.executeQuery($QUERY)
    - pattern: "$ST.executeQuery(($SB: StringBuilder).toString())"
    - pattern: "$ST.executeQuery(... + $VAR + ...)"
    - pattern: "$ST.executeQuery(... + $VAR)"
    - pattern: $ST.executeQuery(...,String.format("...",...,$VAR,...), ...)
  severity: WARNING
- id: gitlab.find_sec_bugs_scala.CUSTOM_INJECTION-2
  languages:
  - scala
  message: |
    The method identified is susceptible to injection. The input should be validated and properly
    escaped.
  metadata:
    category: security
    cwe: CWE-89
    shortDescription: Improper Neutralization of Special Elements used in an SQL Command
      ('SQL Injection')
    technology:
    - scala
    primary_identifier: find_sec_bugs.CUSTOM_INJECTION-2
    secondary_identifiers:
    - name: Find Security Bugs-CUSTOM_INJECTION
      type: find_sec_bugs_type
      value: CUSTOM_INJECTION
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs_scala.CUSTOM_INJECTION-2
    shortlink: https://sg.run/dRKZ
    semgrep.dev:
      rule:
        rule_id: AbUlzY
        version_id: JdTNyJj
        url: https://semgrep.dev/playground/r/JdTNyJj/gitlab.find_sec_bugs_scala.CUSTOM_INJECTION-2
        origin: community
  patterns:
  - pattern-inside: |
      def $FOO(..., $SQLIN: String, ...): $TYPE = {
        ...
      }
  - pattern-either:
    - pattern: '"$SQL_STR" + $SQLIN

        '
    - pattern: String.format("$SQL_STR", ... + $SQLIN + ...)
    - pattern: '"$SQL_STR".concat(...)

        '
    - pattern: (StringBuilder $BUILDER). ... .append("$SQL_STR")
    - patterns:
      - pattern-inside: |
          StringBuilder $BUILDER = new StringBuilder(... + "$SQL_STR" + ...);
          ...
      - pattern: "$BUILDER.append(...)"
      - pattern-not: $BUILDER.append("...")
    - patterns:
      - pattern-inside: |
          $QUERY = "$SQL_STR";
          ...
      - pattern: "$QUERY += ..."
  - metavariable-regex:
      metavariable: "$SQL_STR"
      regex: "(?i)(select|insert|create|update|alter|delete|drop)\\b"
  severity: WARNING
- id: gitlab.find_sec_bugs_scala.CUSTOM_MESSAGE_DIGEST-1
  languages:
  - scala
  message: |
    Implementing a custom MessageDigest is error-prone. National Institute of Standards and
    Technology(NIST) recommends the use of SHA-224, SHA-256, SHA-384, SHA-512, SHA-512/224, or
    SHA-512/256.
  metadata:
    category: security
    cwe: CWE-327
    shortDescription: Use of a Broken or Risky Cryptographic Algorithm
    technology:
    - scala
    primary_identifier: find_sec_bugs.CUSTOM_MESSAGE_DIGEST
    secondary_identifiers:
    - name: Find Security Bugs-CUSTOM_MESSAGE_DIGEST
      type: find_sec_bugs_type
      value: CUSTOM_MESSAGE_DIGEST
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs_scala.CUSTOM_MESSAGE_DIGEST-1
    shortlink: https://sg.run/qpxz
    semgrep.dev:
      rule:
        rule_id: gxUX15
        version_id: yeTRn6O
        url: https://semgrep.dev/playground/r/yeTRn6O/gitlab.find_sec_bugs_scala.CUSTOM_MESSAGE_DIGEST-1
        origin: community
  patterns:
  - pattern: |
      class $CLAZZ extends java.security.MessageDigest(...) {
        ...
      }
  severity: WARNING
- id: gitlab.find_sec_bugs_scala.DANGEROUS_PERMISSION_COMBINATION-1
  pattern-either:
  - pattern: |
      $RUNVAR = new RuntimePermission("createClassLoader");
      ...
      ($PC: PermissionCollection).add($RUNVAR);
  - pattern: |
      $REFVAR = new ReflectPermission("suppressAccessChecks");
      ...
      ($PC: PermissionCollection).add($REFVAR);
  - pattern: '($PC: PermissionCollection).add(new ReflectPermission ("suppressAccessChecks"))'
  - pattern: '($PC: PermissionCollection).add(new RuntimePermission("createClassLoader"))'
  languages:
  - scala
  message: 'Do not grant dangerous combinations of permissions.

    '
  metadata:
    shortDescription: Improper privilege management
    category: security
    cwe: CWE-269
    confidence: HIGH
    primary_identifier: find_sec_bugs.DANGEROUS_PERMISSION_COMBINATION
    secondary_identifiers:
    - name: Find Security Bugs-DANGEROUS_PERMISSION_COMBINATION
      type: find_sec_bugs_type
      value: DANGEROUS_PERMISSION_COMBINATION
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs_scala.DANGEROUS_PERMISSION_COMBINATION-1
    shortlink: https://sg.run/ARlp
    semgrep.dev:
      rule:
        rule_id: 10UNZy
        version_id: RGTDgbK
        url: https://semgrep.dev/playground/r/RGTDgbK/gitlab.find_sec_bugs_scala.DANGEROUS_PERMISSION_COMBINATION-1
        origin: community
  severity: WARNING
- id: gitlab.find_sec_bugs_scala.DEFAULT_HTTP_CLIENT-1
  patterns:
  - pattern: new org.apache.http.impl.client.DefaultHttpClient(...)
  message: 'DefaultHttpClient with default constructor is not compatible with TLS
    1.2

    '
  languages:
  - scala
  severity: WARNING
  metadata:
    shortDescription: Inadequate encryption strength
    category: security
    cwe: CWE-326
    technology:
    - scala
    primary_identifier: find_sec_bugs.DEFAULT_HTTP_CLIENT
    secondary_identifiers:
    - name: Find Security Bugs-DEFAULT_HTTP_CLIENT
      type: find_sec_bugs_type
      value: DEFAULT_HTTP_CLIENT
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs_scala.DEFAULT_HTTP_CLIENT-1
    shortlink: https://sg.run/ll2y
    semgrep.dev:
      rule:
        rule_id: QrUNzB
        version_id: rxTyr5n
        url: https://semgrep.dev/playground/r/rxTyr5n/gitlab.find_sec_bugs_scala.DEFAULT_HTTP_CLIENT-1
        origin: community
- id: gitlab.find_sec_bugs_scala.DES_USAGE-1
  languages:
  - scala
  message: |
    DES is considered strong ciphers for modern applications. Currently, NIST recommends the usage
    of AES block ciphers instead of DES.
  metadata:
    category: security
    cwe: CWE-326
    shortDescription: Inadequate Encryption Strength
    technology:
    - scala
    primary_identifier: find_sec_bugs.DES_USAGE
    secondary_identifiers:
    - name: Find Security Bugs-DES_USAGE
      type: find_sec_bugs_type
      value: DES_USAGE
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs_scala.DES_USAGE-1
    shortlink: https://sg.run/BAkW
    semgrep.dev:
      rule:
        rule_id: nJUNz9
        version_id: 2KTzbDd
        url: https://semgrep.dev/playground/r/2KTzbDd/gitlab.find_sec_bugs_scala.DES_USAGE-1
        origin: community
  patterns:
  - pattern-inside: javax.crypto.Cipher.getInstance("$ALG")
  - metavariable-regex:
      metavariable: "$ALG"
      regex: "^(DES)/.*"
  severity: WARNING
- id: gitlab.find_sec_bugs_scala.DMI_CONSTANT_DB_PASSWORD-1.HARD_CODE_PASSWORD-3
  languages:
  - scala
  message: |
    This code creates a database connect using a hardcoded, constant password. Anyone with access
    to either the source code or the compiled code can easily learn the password.
  metadata:
    category: security
    cwe: CWE-259
    shortDescription: Use of Hard-coded Password
    technology:
    - scala
    primary_identifier: find_sec_bugs.DMI_CONSTANT_DB_PASSWORD-1.HARD_CODE_PASSWORD-3
    secondary_identifiers:
    - name: Find Security Bugs-DMI_CONSTANT_DB_PASSWORD
      type: find_sec_bugs_type
      value: DMI_CONSTANT_DB_PASSWORD
    - name: Find Security Bugs-HARD_CODE_PASSWORD
      type: find_sec_bugs_type
      value: HARD_CODE_PASSWORD
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs_scala.DMI_CONSTANT_DB_PASSWORD-1.HARD_CODE_PASSWORD-3
    shortlink: https://sg.run/5k8A
    semgrep.dev:
      rule:
        rule_id: 2ZUO4Y
        version_id: JdTNyqQ
        url: https://semgrep.dev/playground/r/JdTNyqQ/gitlab.find_sec_bugs_scala.DMI_CONSTANT_DB_PASSWORD-1.HARD_CODE_PASSWORD-3
        origin: community
  patterns:
  - pattern: java.sql.DriverManager.getConnection($URI, $USR, "...");
  severity: WARNING
- id: gitlab.find_sec_bugs_scala.DMI_EMPTY_DB_PASSWORD-1.HARD_CODE_PASSWORD-2
  languages:
  - scala
  message: |
    This code creates a database connect using a blank or empty password. This indicates that the
    database is not protected by a password.
  metadata:
    category: security
    cwe: CWE-259
    shortDescription: Use of Hard-coded Password
    technology:
    - scala
    primary_identifier: find_sec_bugs.DMI_EMPTY_DB_PASSWORD-1.HARD_CODE_PASSWORD-2
    secondary_identifiers:
    - name: Find Security Bugs-DMI_EMPTY_DB_PASSWORD
      type: find_sec_bugs_type
      value: DMI_EMPTY_DB_PASSWORD
    - name: Find Security Bugs-HARD_CODE_PASSWORD
      type: find_sec_bugs_type
      value: HARD_CODE_PASSWORD
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs_scala.DMI_EMPTY_DB_PASSWORD-1.HARD_CODE_PASSWORD-2
    shortlink: https://sg.run/GKWp
    semgrep.dev:
      rule:
        rule_id: X5UKZx
        version_id: 5PTdO6L
        url: https://semgrep.dev/playground/r/5PTdO6L/gitlab.find_sec_bugs_scala.DMI_EMPTY_DB_PASSWORD-1.HARD_CODE_PASSWORD-2
        origin: community
  patterns:
  - pattern: java.sql.DriverManager.getConnection($URI, $USR, "");
  severity: WARNING
- id: gitlab.find_sec_bugs_scala.ECB_MODE-1
  languages:
  - scala
  message: |
    An authentication cipher mode which provides better confidentiality of the encrypted data
    should be used instead of Electronic Code Book (ECB) mode, which does not provide good
    confidentiality. Specifically, ECB mode produces the same output for the same input each time.
    This allows an attacker to intercept and replay the data.
  metadata:
    category: security
    cwe: CWE-326
    shortDescription: Inadequate Encryption Strength
    technology:
    - scala
    primary_identifier: find_sec_bugs.ECB_MODE
    secondary_identifiers:
    - name: Find Security Bugs-ECB_MODE
      type: find_sec_bugs_type
      value: ECB_MODE
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs_scala.ECB_MODE-1
    shortlink: https://sg.run/WN84
    semgrep.dev:
      rule:
        rule_id: 7KURQZ
        version_id: jQTgvEY
        url: https://semgrep.dev/playground/r/jQTgvEY/gitlab.find_sec_bugs_scala.ECB_MODE-1
        origin: community
  patterns:
  - pattern-inside: javax.crypto.Cipher.getInstance("...")
  - pattern-regex: "(AES|DES(ede)?)(/ECB/*)"
  severity: ERROR
- id: gitlab.find_sec_bugs_scala.EL_INJECTION-1
  languages:
  - scala
  message: |
    An expression is built with a dynamic value. The source of the value(s) should be verified to
    avoid that unfiltered values fall into this risky code evaluation.
  metadata:
    category: security
    cwe: CWE-94
    shortDescription: Improper Control of Generation of Code ('Code Injection')
    technology:
    - scala
    primary_identifier: find_sec_bugs.EL_INJECTION
    secondary_identifiers:
    - name: Find Security Bugs-EL_INJECTION
      type: find_sec_bugs_type
      value: EL_INJECTION
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs_scala.EL_INJECTION-1
    shortlink: https://sg.run/ZxvD
    semgrep.dev:
      rule:
        rule_id: BYULN2
        version_id: 5PTdOvw
        url: https://semgrep.dev/playground/r/5PTdOvw/gitlab.find_sec_bugs_scala.EL_INJECTION-1
        origin: community
  patterns:
  - pattern-inside: |
      import javax.el._
      ...
  - pattern-either:
    - pattern-inside: |
        def $FUNC(..., $EXPR: String, ...) : $TYPE = {
          ...
        }
    - pattern-inside: |
        def $FUNC(..., $EXPR: String, ...) = {
          ...
        }
  - pattern-either:
    - pattern: "$X.createValueExpression(..., $EXPR, ...)"
    - pattern: "$X.createMethodExpression(..., $EXPR, ...)"
  severity: WARNING
- id: gitlab.find_sec_bugs_scala.EXTERNAL_CONFIG_CONTROL-1
  languages:
  - scala
  message: |
    Allowing external control of system settings can disrupt service or cause an application to
    behave in unexpected, and potentially malicious ways. An attacker could cause an error by
    providing a nonexistent catalog name or connect to an unauthorized portion of the database.
  metadata:
    category: security
    cwe: CWE-15
    shortDescription: External Control of System or Configuration Setting
    technology:
    - scala
    primary_identifier: find_sec_bugs.EXTERNAL_CONFIG_CONTROL
    secondary_identifiers:
    - name: Find Security Bugs-EXTERNAL_CONFIG_CONTROL
      type: find_sec_bugs_type
      value: EXTERNAL_CONFIG_CONTROL
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs_scala.EXTERNAL_CONFIG_CONTROL-1
    shortlink: https://sg.run/09nk
    semgrep.dev:
      rule:
        rule_id: 7KURe0
        version_id: jQTgvKA
        url: https://semgrep.dev/playground/r/jQTgvKA/gitlab.find_sec_bugs_scala.EXTERNAL_CONFIG_CONTROL-1
        origin: community
  patterns:
  - pattern: |
      $TAINTED = ($REQ: HttpServletRequest).getParameter(...);
      ...
      ($CONN: java.sql.Connection).setCatalog($TAINTED);
  severity: WARNING
- id: gitlab.find_sec_bugs_scala.FILE_UPLOAD_FILENAME-1
  languages:
  - scala
  message: |
    The filename provided by the FileUpload API can be tampered with by the client to reference
    unauthorized files. The provided filename should be properly validated to ensure it's properly
    structured, contains no unauthorized path characters (e.g., / \), and refers to an authorized
    file.
  metadata:
    category: security
    cwe: CWE-22
    shortDescription: Improper Limitation of a Pathname to a Restricted Directory
      ('Path Traversal')
    technology:
    - scala
    primary_identifier: find_sec_bugs.FILE_UPLOAD_FILENAME
    secondary_identifiers:
    - name: Find Security Bugs-FILE_UPLOAD_FILENAME
      type: find_sec_bugs_type
      value: FILE_UPLOAD_FILENAME
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs_scala.FILE_UPLOAD_FILENAME-1
    shortlink: https://sg.run/b57p
    semgrep.dev:
      rule:
        rule_id: KxULbq
        version_id: 7ZTgQLd
        url: https://semgrep.dev/playground/r/7ZTgQLd/gitlab.find_sec_bugs_scala.FILE_UPLOAD_FILENAME-1
        origin: community
  patterns:
  - pattern: |
      def $FUNC (..., $REQ: HttpServletRequest, ... ) = {
        ...
        val $FILES = ($SFU: ServletFileUpload).parseRequest($REQ)
        ...
        for ($FILE <- $FILES.asScala) {
          ...
        }
      }
  - pattern: "$ITEM.getName()"
  severity: ERROR
- id: gitlab.find_sec_bugs_scala.FORMAT_STRING_MANIPULATION-1
  languages:
  - scala
  message: |
    Allowing user input to control format parameters could enable an attacker to cause exceptions
    to be thrown or leak information.Attackers may be able  to modify the format string argument,
    such that an exception is thrown. If this exception is left uncaught, it may crash the
    application. Alternatively, if sensitive information is used within the unused arguments,
    attackers may change the format string to reveal this information.
  metadata:
    category: security
    confidence: HIGH
    cwe: CWE-134
    shortDescription: Use of Externally-Controlled Format String
    primary_identifier: find_sec_bugs.FORMAT_STRING_MANIPULATION
    secondary_identifiers:
    - name: Find Security Bugs-FORMAT_STRING_MANIPULATION
      type: find_sec_bugs_type
      value: FORMAT_STRING_MANIPULATION
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs_scala.FORMAT_STRING_MANIPULATION-1
    shortlink: https://sg.run/R18E
    semgrep.dev:
      rule:
        rule_id: v8UQ5x
        version_id: o5Tgen5
        url: https://semgrep.dev/playground/r/o5Tgen5/gitlab.find_sec_bugs_scala.FORMAT_STRING_MANIPULATION-1
        origin: community
  patterns:
  - pattern-either:
    - patterns:
      - pattern-inside: |
          $INPUT = ($REQ: javax.servlet.http.HttpServletRequest).getParameter(...);
          ...
      - pattern-inside: "$FORMAT_STR = <... $INPUT ...>;\n"
    - patterns:
      - pattern-inside: |
          val $INPUT = ($REQ: javax.servlet.http.HttpServletRequest).getParameter(...);
          ...
      - pattern-inside: |
          val $FORMAT_STR = <... $INPUT ...>;
          ...
    - pattern-inside: 'val $FORMAT_STR = ... + ($REQ: javax.servlet.http.HttpServletRequest).getParameter(...)
        + ...; ...

        '
    - pattern-inside: 'val $FORMAT_STR = ... + ($REQ: javax.servlet.http.HttpServletRequest).getParameter(...);
        ...

        '
  - pattern-either:
    - pattern: "$VAL = <... $INPUT ...>"
    - pattern: String.format($FORMAT_STR, ...);
    - pattern: String.format(java.util.Locale.$LOCALE, $FORMAT_STR, ...);
    - pattern: "($F: java.util.Formatter).format($FORMAT_STR, ...);"
    - pattern: "($F: java.util.Formatter).format(java.util.Locale.$LOCALE, $FORMAT_STR,
        ...);"
    - pattern: "($F: java.io.PrintStream).printf($FORMAT_STR, ...);"
    - pattern: "($F: java.io.PrintStream).printf(java.util.Locale.$LOCALE, $FORMAT_STR,
        ...);"
    - pattern: "($F: java.io.PrintStream).format($FORMAT_STR, ...);"
    - pattern: "($F: java.io.PrintStream).format(java.util.Locale.$LOCALE, $FORMAT_STR,
        ...);"
    - pattern: System.out.printf($FORMAT_STR, ...);
    - pattern: System.out.printf(java.util.Locale.$LOCALE, $FORMAT_STR, ...);
    - pattern: System.out.format($FORMAT_STR, ...);
    - pattern: System.out.format(java.util.Locale.$LOCALE, $FORMAT_STR, ...);
  severity: ERROR
- id: gitlab.find_sec_bugs_scala.HARD_CODE_PASSWORD-1
  languages:
  - scala
  message: |
    Passwords should not be kept in the source code. The source code can be widely shared in an
    enterprise environment, and is certainly shared in open source. To be managed safely, passwords
    and secret keys should be stored in separate configuration files or keystores.
  metadata:
    category: security
    cwe: CWE-259
    shortDescription: Use of Hard-coded Password
    technology:
    - scala
    primary_identifier: find_sec_bugs.HARD_CODE_PASSWORD
    secondary_identifiers:
    - name: Find Security Bugs-HARD_CODE_PASSWORD
      type: find_sec_bugs_type
      value: HARD_CODE_PASSWORD
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs_scala.HARD_CODE_PASSWORD-1
    shortlink: https://sg.run/R18O
    semgrep.dev:
      rule:
        rule_id: j2Ujqy
        version_id: GxTv72z
        url: https://semgrep.dev/playground/r/GxTv72z/gitlab.find_sec_bugs_scala.HARD_CODE_PASSWORD-1
        origin: community
  patterns:
  - pattern-either:
    - pattern-inside: |
        val $PWD = "..."
        ...
    - pattern-inside: |
        val $PWD = Array[Byte](...)
        ...
    - pattern-inside: |
        val $PWD = Array(...)
        ...
    - pattern-inside: |
        val $PWD = new String(...)
        ...
    - pattern-inside: |
        val $PWD: String = ...
        ...
    - pattern-inside: |
        val $PWD: Char = ...
        ...
    - pattern-inside: |
        val $PWD = $VAR.toCharArray
        ...
    - pattern-inside: |
        object $CLAZZ {
            val $PWD = ...
            ...
        }
    - pattern-inside: |
        class $CLAZZ {
            val $PWD = ...
            ...
        }
    - pattern-inside: |
        $S = new SymmetricEncryptionConfig(...)
        ...
  - pattern-either:
    - pattern: '($KS: java.security.KeyStore).load(..., "...")'
    - pattern: '($KS: java.security.KeyStore).load(..., "...".$FOO(...))'
    - pattern: "($KS: java.security.KeyStore).load(..., $PWD)"
    - pattern: "($KS: java.security.KeyStore).load(..., $PWD.$FOO(...))"
    - pattern: KeyManagerFactory.getInstance(...).init(..., $PWD)
    - pattern: KeyManagerFactory.getInstance(...).init(..., $PWD.$FOO(...))
    - pattern: KeyManagerFactory.getInstance(...).init(..., "...")
    - pattern: KeyManagerFactory.getInstance(...).init(..., "...".$FOO(...))
    - pattern: '($KS: java.security.KeyStore).getInstance(...).load(..., "...")'
    - pattern: '($KS: java.security.KeyStore).getInstance(...).load(..., "...".$FOO(...))'
    - pattern: "($KS: java.security.KeyStore).getInstance(...).load(..., $PWD)"
    - pattern: "($KS: java.security.KeyStore).getInstance(...).load(..., $PWD.$FOO(...))"
    - pattern: KeyStore.getInstance(...).load(..., "...")
    - pattern: KeyStore.getInstance(...).load(..., "...".$FOO(...))
    - pattern: KeyStore.getInstance(...).load(..., $PWD)
    - pattern: KeyStore.getInstance(...).load(..., $PWD.$FOO(...))
    - pattern: new PBEKeySpec("...", ...)
    - pattern: new PBEKeySpec("...".$FOO(...), ...)
    - pattern: new PBEKeySpec($PWD, ...)
    - pattern: new PBEKeySpec($PWD.$FOO(...), ...)
    - pattern: new PasswordAuthentication("...", "...")
    - pattern: new PasswordAuthentication("...", "...".$FOO(...))
    - pattern: new PasswordAuthentication("...", $PWD)
    - pattern: new PasswordAuthentication("...", $PWD.$FOO(...))
    - pattern: '($CB: PasswordCallback).setPassword("...")'
    - pattern: '($CB: PasswordCallback).setPassword("...".$FOO(...))'
    - pattern: "($CB: PasswordCallback).setPassword($PWD)"
    - pattern: "($CB: PasswordCallback).setPassword($PWD.$FOO(...))"
    - pattern: new KeyStore.PasswordProtection("...")
    - pattern: new KeyStore.PasswordProtection("...".$FOO(...))
    - pattern: new KeyStore.PasswordProtection($PWD)
    - pattern: new KeyStore.PasswordProtection($PWD.$FOO(...))
    - pattern: new KerberosKey(...,"...",...)
    - pattern: new KerberosKey(...,"...".$FOO(...),...)
    - pattern: new KerberosKey(...,$PWD,...)
    - pattern: new KerberosKey(...,$PWD.$FOO(...),...)
    - pattern: "($KMF: javax.net.ssl.KeyManagerFactory).init(..., $PWD)"
    - pattern: '($KMF: javax.net.ssl.KeyManagerFactory).init(..., "...")'
    - pattern: '($KMF: javax.net.ssl.KeyManagerFactory).init(..., "...".$FOO(...))'
    - pattern: "($KMF: javax.net.ssl.KeyManagerFactory).init(..., $PWD.$FOO(...))"
    - pattern: '($DM: java.sql.DriverManager).getConnection(..., "...")'
    - pattern: '($DM: java.sql.DriverManager).getConnection(..., "...".$FOO(...))'
    - pattern: "($DM: java.sql.DriverManager).getConnection(..., $PWD)"
    - pattern: "($DM: java.sql.DriverManager).getConnection(..., $PWD.$FOO(...))"
    - pattern: '($KMF: javax.net.ssl.KeyManagerFactory).init(..., "...")'
    - pattern: '($KMF: javax.net.ssl.KeyManagerFactory).init(..., "...".$FOO(...))'
    - pattern: "($KMF: javax.net.ssl.KeyManagerFactory).init(..., $PWD)"
    - pattern: "($KMF: javax.net.ssl.KeyManagerFactory).init(..., $PWD.$FOO(...))"
    - pattern: io.vertx.ext.web.handler.CSRFHandler.create(..., "...")
    - pattern: io.vertx.ext.web.handler.CSRFHandler.create(..., "...".$FOO(...))
    - pattern: io.vertx.ext.web.handler.CSRFHandler.create(..., $PWD)
    - pattern: io.vertx.ext.web.handler.CSRFHandler.create(..., $PWD.$FOO(...))
    - pattern: "$S.setPassword($PWD)"
    - pattern: "$S.setPassword($PWD.$FOO(...))"
    - pattern: $S.setPassword("...")
  - metavariable-regex:
      metavariable: "$PWD"
      regex: "(?i).*(pass|pwd|psw|secret|key|cipher|crypt|des|aes|mac|private|sign|cert).*"
  severity: ERROR
- id: gitlab.find_sec_bugs_scala.HAZELCAST_SYMMETRIC_ENCRYPTION-1
  languages:
  - scala
  message: |
    The network communications for Hazelcast is configured to use a symmetric cipher (probably DES
    or Blowfish). Those ciphers alone do not provide integrity or secure authentication. The use of
    asymmetric encryption is preferred.
  metadata:
    category: security
    cwe: CWE-326
    shortDescription: Inadequate Encryption Strength
    technology:
    - scala
    primary_identifier: find_sec_bugs.HAZELCAST_SYMMETRIC_ENCRYPTION
    secondary_identifiers:
    - name: Find Security Bugs-HAZELCAST_SYMMETRIC_ENCRYPTION
      type: find_sec_bugs_type
      value: HAZELCAST_SYMMETRIC_ENCRYPTION
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs_scala.HAZELCAST_SYMMETRIC_ENCRYPTION-1
    shortlink: https://sg.run/Ywve
    semgrep.dev:
      rule:
        rule_id: 3qUwPg
        version_id: bZTbwYQ
        url: https://semgrep.dev/playground/r/bZTbwYQ/gitlab.find_sec_bugs_scala.HAZELCAST_SYMMETRIC_ENCRYPTION-1
        origin: community
  patterns:
  - pattern: new com.hazelcast.config.SymmetricEncryptionConfig()
  severity: WARNING
- id: gitlab.find_sec_bugs_scala.HRS_REQUEST_PARAMETER_TO_COOKIE-1
  languages:
  - scala
  message: |
    This code constructs an HTTP Cookie using an untrusted HTTP parameter. If this cookie is added
    to an HTTP response, it will allow a HTTP response splitting vulnerability. See
    http://en.wikipedia.org/wiki/HTTP_response_splitting for more information.
  metadata:
    category: security
    cwe: CWE-113
    shortDescription: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP
      Response Splitting')
    technology:
    - scala
    primary_identifier: find_sec_bugs.HRS_REQUEST_PARAMETER_TO_COOKIE
    secondary_identifiers:
    - name: Find Security Bugs-HRS_REQUEST_PARAMETER_TO_COOKIE
      type: find_sec_bugs_type
      value: HRS_REQUEST_PARAMETER_TO_COOKIE
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs_scala.HRS_REQUEST_PARAMETER_TO_COOKIE-1
    shortlink: https://sg.run/PXJY
    semgrep.dev:
      rule:
        rule_id: x8UrnN
        version_id: l4T49L9
        url: https://semgrep.dev/playground/r/l4T49L9/gitlab.find_sec_bugs_scala.HRS_REQUEST_PARAMETER_TO_COOKIE-1
        origin: community
  mode: taint
  pattern-sanitizers:
  - patterns:
    - pattern-inside: $STR.replaceAll("$REPLACE_CHAR", "$REPLACE");
    - pattern: "$STR"
    - metavariable-regex:
        metavariable: "$REPLACE_CHAR"
        regex: "(.*\\\\r\\\\n.*)"
    - metavariable-regex:
        metavariable: "$REPLACE"
        regex: "(?!(\\\\r\\\\n))"
  - pattern: org.owasp.encoder.Encode.forUriComponent(...)
  - pattern: org.owasp.encoder.Encode.forUri(...)
  - pattern: java.net.URLEncoder.encode(..., $CHARSET)
  pattern-sinks:
  - pattern: new javax.servlet.http.Cookie("$KEY", ...);
  - patterns:
    - pattern-inside: |
        $C = new javax.servlet.http.Cookie("$KEY", ...);
        ...
    - pattern: "$C.setValue(...);"
  pattern-sources:
  - pattern: "($REQ: HttpServletRequest).getParameter(...);"
  severity: ERROR
- id: gitlab.find_sec_bugs_scala.HRS_REQUEST_PARAMETER_TO_HTTP_HEADER-1
  languages:
  - scala
  message: |
    This code directly writes an HTTP parameter to an HTTP header, which allows for a HTTP
    response splitting vulnerability. See http://en.wikipedia.org/wiki/HTTP_response_splitting for
    more information.
  metadata:
    category: security
    cwe: CWE-113
    shortDescription: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP
      Response Splitting')
    technology:
    - scala
    primary_identifier: find_sec_bugs.HRS_REQUEST_PARAMETER_TO_HTTP_HEADER
    secondary_identifiers:
    - name: Find Security Bugs-HRS_REQUEST_PARAMETER_TO_HTTP_HEADER
      type: find_sec_bugs_type
      value: HRS_REQUEST_PARAMETER_TO_HTTP_HEADER
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs_scala.HRS_REQUEST_PARAMETER_TO_HTTP_HEADER-1
    shortlink: https://sg.run/JY9w
    semgrep.dev:
      rule:
        rule_id: OrU73v
        version_id: YDTpR3r
        url: https://semgrep.dev/playground/r/YDTpR3r/gitlab.find_sec_bugs_scala.HRS_REQUEST_PARAMETER_TO_HTTP_HEADER-1
        origin: community
  mode: taint
  pattern-sanitizers:
  - patterns:
    - pattern-inside: $STR.replaceAll("$REPLACE_CHAR", "$REPLACE");
    - pattern: "$STR"
    - metavariable-regex:
        metavariable: "$REPLACE_CHAR"
        regex: "(.*\\\\r\\\\n.*)"
    - metavariable-regex:
        metavariable: "$REPLACE"
        regex: "(?!(\\\\r\\\\n))"
  - pattern: org.owasp.encoder.Encode.forUriComponent(...)
  - pattern: org.owasp.encoder.Encode.forUri(...)
  - pattern: java.net.URLEncoder.encode(..., $CHARSET)
  pattern-sinks:
  - pattern: '($RES: HttpServletResponse).setHeader("$KEY", ...);'
  - pattern: '($RES: HttpServletResponse).addHeader("$KEY", ...);'
  - pattern: '($WRP: HttpServletResponseWrapper).setHeader("$KEY", ...);'
  - pattern: '($WRP: HttpServletResponseWrapper).addHeader("$KEY", ...);'
  pattern-sources:
  - pattern: "($REQ: HttpServletRequest).getParameter(...);"
  severity: ERROR
- id: gitlab.find_sec_bugs_scala.HTTPONLY_COOKIE-1
  languages:
  - scala
  message: |
    A new cookie is created without the HttpOnly flag set. The HttpOnly flag is a directive to the
    browser to make sure that the cookie can not be red by malicious script. When a user is the
    target of a "Cross-Site Scripting", the attacker would benefit greatly from getting the session
    id for example.
  metadata:
    category: security
    cwe: CWE-1004
    shortDescription: Sensitive Cookie Without 'HttpOnly' Flag
    technology:
    - scala
    primary_identifier: find_sec_bugs.HTTPONLY_COOKIE
    secondary_identifiers:
    - name: Find Security Bugs-HTTPONLY_COOKIE
      type: find_sec_bugs_type
      value: HTTPONLY_COOKIE
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs_scala.HTTPONLY_COOKIE-1
    shortlink: https://sg.run/8Oyy
    semgrep.dev:
      rule:
        rule_id: r6Uvrr
        version_id: DkT6pDz
        url: https://semgrep.dev/playground/r/DkT6pDz/gitlab.find_sec_bugs_scala.HTTPONLY_COOKIE-1
        origin: community
  pattern-either:
  - patterns:
    - pattern: |
        val $C = new javax.servlet.http.Cookie(..., ...);
        ...
        $RESP.addCookie($C);
    - pattern-not-inside: |
        val $C = new javax.servlet.http.Cookie(..., ...);
        ...
        $C.setHttpOnly(true);
        ...
        $RESP.addCookie($C);
  - pattern: "(javax.servlet.http.Cookie $C).setHttpOnly(false);"
  severity: WARNING
- id: gitlab.find_sec_bugs_scala.HTTP_PARAMETER_POLLUTION-1
  languages:
  - scala
  message: |
    Concatenating unvalidated user input into a URL can allow an attacker to override the value of
    a request parameter. Attacker may be able to override existing parameter values, inject a new
    parameter or exploit variables out of a direct reach. HTTP Parameter Pollution (HPP) attacks
    consist of injecting encoded query string delimiters into other existing parameters. If a web
    application does not properly sanitize the user input, a malicious user may compromise the
    logic of the application to perform either client-side or server-side attacks.
  metadata:
    category: security
    cwe: CWE-88
    shortDescription: Improper Neutralization of Argument Delimiters in a Command
      ('Argument Injection')
    technology:
    - scala
    primary_identifier: find_sec_bugs.HTTP_PARAMETER_POLLUTION
    secondary_identifiers:
    - name: Find Security Bugs-HTTP_PARAMETER_POLLUTION
      type: find_sec_bugs_type
      value: HTTP_PARAMETER_POLLUTION
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs_scala.HTTP_PARAMETER_POLLUTION-1
    shortlink: https://sg.run/E35w
    semgrep.dev:
      rule:
        rule_id: WAUnZW
        version_id: RGTDgXX
        url: https://semgrep.dev/playground/r/RGTDgXX/gitlab.find_sec_bugs_scala.HTTP_PARAMETER_POLLUTION-1
        origin: community
  mode: taint
  pattern-sanitizers:
  - pattern: java.net.URLEncoder.encode(...)
  - pattern: com.google.common.net.UrlEscapers.urlPathSegmentEscaper().escape(...)
  pattern-sinks:
  - pattern: new org.apache.http.client.methods.HttpGet(...)
  - pattern: new org.apache.commons.httpclient.methods.GetMethod(...)
  - pattern: "($GM: org.apache.commons.httpclient.methods.GetMethod).setQueryString(...)"
  pattern-sources:
  - pattern: "($REQ: HttpServletRequest ).getParameter(...)"
  severity: ERROR
- id: gitlab.find_sec_bugs_scala.HTTP_RESPONSE_SPLITTING-1
  languages:
  - scala
  message: |
    When an HTTP request contains unexpected CR and LF characters, the server may respond with an
    output stream that is interpreted as two different HTTP responses (instead of one). An attacker
    can control the second response and mount attacks such as cross-site scripting and cache
    poisoning attacks.
  metadata:
    category: security
    cwe: CWE-113
    shortDescription: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP
      Response Splitting')
    technology:
    - scala
    primary_identifier: find_sec_bugs.HTTP_RESPONSE_SPLITTING
    secondary_identifiers:
    - name: Find Security Bugs-HTTP_RESPONSE_SPLITTING
      type: find_sec_bugs_type
      value: HTTP_RESPONSE_SPLITTING
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs_scala.HTTP_RESPONSE_SPLITTING-1
    shortlink: https://sg.run/4Nxl
    semgrep.dev:
      rule:
        rule_id: wdUbJl
        version_id: qkT2j01
        url: https://semgrep.dev/playground/r/qkT2j01/gitlab.find_sec_bugs_scala.HTTP_RESPONSE_SPLITTING-1
        origin: community
  mode: taint
  pattern-sanitizers:
  - patterns:
    - pattern-inside: $STR.replaceAll("$REPLACE_CHAR", "$REPLACE");
    - pattern: "$STR"
    - metavariable-regex:
        metavariable: "$REPLACE_CHAR"
        regex: "(.*\\\\r\\\\n.*)"
    - metavariable-regex:
        metavariable: "$REPLACE"
        regex: "(?!(\\\\r\\\\n))"
  - pattern: org.owasp.encoder.Encode.forUriComponent(...)
  - pattern: org.owasp.encoder.Encode.forUri(...)
  - pattern: java.net.URLEncoder.encode(..., $CHARSET)
  pattern-sinks:
  - pattern: new javax.servlet.http.Cookie("$KEY", ...)
  - pattern: "($C:javax.servlet.http.Cookie).setValue(...)"
  pattern-sources:
  - pattern: "($REQ: javax.servlet.http.HttpServletRequest).getParameter(...)"
  severity: WARNING
- id: gitlab.find_sec_bugs_scala.IMPROPER_UNICODE-1
  languages:
  - scala
  message: 'Improper Handling of Unicode Encoding

    '
  metadata:
    category: security
    confidence: HIGH
    cwe: CWE-176
    shortDescription: Improper Handling of Unicode Encoding
    primary_identifier: find_sec_bugs.IMPROPER_UNICODE
    secondary_identifiers:
    - name: Find Security Bugs-IMPROPER_UNICODE
      type: find_sec_bugs_type
      value: IMPROPER_UNICODE
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs_scala.IMPROPER_UNICODE-1
    shortlink: https://sg.run/ARlg
    semgrep.dev:
      rule:
        rule_id: d8Ugz5
        version_id: zyTKk5X
        url: https://semgrep.dev/playground/r/zyTKk5X/gitlab.find_sec_bugs_scala.IMPROPER_UNICODE-1
        origin: community
  pattern-either:
  - patterns:
    - pattern-either:
      - pattern: |
          $S = ($INPUT: String).$TRANSFORM(...);
          ...
          $S.$METHOD(...);
      - pattern: "($INPUT: String).$TRANSFORM().$METHOD(...);"
    - metavariable-regex:
        metavariable: "$METHOD"
        regex: "(equals|equalsIgnoreCase|indexOf)"
    - metavariable-regex:
        metavariable: "$TRANSFORM"
        regex: "(toLowerCase|toUpperCase)"
  - pattern: java.text.Normalizer.normalize(...);
  - pattern: java.net.IDN.toASCII(...);
  - pattern: "($U: URI).toASCIIString()"
  severity: ERROR
- id: gitlab.find_sec_bugs_scala.INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE-1
  languages:
  - scala
  message: |
    The sensitive information may be valuable information on its own (such as a password), or it
    may be useful for launching other, more deadly attacks. If an attack fails, an attacker may use
    error information provided by the server to launch another more focused attack. For example, an
    attempt to exploit a path traversal weakness (CWE-22) might yield the full pathname of the
    installed application.
  metadata:
    category: security
    cwe: CWE-209
    shortDescription: Information Exposure Through an Error Message
    technology:
    - scala
    primary_identifier: find_sec_bugs.INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE
    secondary_identifiers:
    - name: Find Security Bugs-INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE
      type: find_sec_bugs_type
      value: INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs_scala.INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE-1
    shortlink: https://sg.run/K6WP
    semgrep.dev:
      rule:
        rule_id: L1Ue4j
        version_id: 1QTOKjw
        url: https://semgrep.dev/playground/r/1QTOKjw/gitlab.find_sec_bugs_scala.INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE-1
        origin: community
  patterns:
  - pattern: "$E.printStackTrace(...)"
  severity: WARNING
- id: gitlab.find_sec_bugs_scala.INSECURE_COOKIE-1
  languages:
  - scala
  message: |
    "A new cookie is created without the Secure flag set. The Secure flag is a
     directive to the browser to make sure that the cookie is not sent for insecure communication
    (http://)"
  metadata:
    category: security
    cwe: CWE-539
    shortDescription: Information Exposure Through Persistent Cookies
    technology:
    - scala
    primary_identifier: find_sec_bugs.INSECURE_COOKIE
    secondary_identifiers:
    - name: Find Security Bugs-INSECURE_COOKIE
      type: find_sec_bugs_type
      value: INSECURE_COOKIE
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs_scala.INSECURE_COOKIE-1
    shortlink: https://sg.run/gDLJ
    semgrep.dev:
      rule:
        rule_id: bwUowO
        version_id: WrTWoRz
        url: https://semgrep.dev/playground/r/WrTWoRz/gitlab.find_sec_bugs_scala.INSECURE_COOKIE-1
        origin: community
  patterns:
  - pattern-not-inside: |
      val $C = new javax.servlet.http.Cookie(..., ...);
      ...
      $C.setSecure(true);
      ...
      $RESP.addCookie($C);
  - pattern-either:
    - pattern: |
        val $C = new javax.servlet.http.Cookie(..., ...);
        ...
        $RESP.addCookie($C);
    - pattern: "($C:javax.servlet.http.Cookie).setSecure(false);"
  severity: WARNING
- id: gitlab.find_sec_bugs_scala.JAXRS_ENDPOINT-1
  languages:
  - scala
  message: |
    This method is part of a REST Web Service (JSR311). The security of this web service should be
    analyzed. For example:
    - Authentication, if enforced, should be tested.
    - Access control, if enforced, should be tested.
    - The inputs should be tracked for potential vulnerabilities.
    - The communication should ideally be over SSL.
    - If the service supports writes (e.g., via POST), its vulnerability to CSRF should be
    investigated.
  metadata:
    category: security
    cwe: CWE-20
    shortDescription: Improper Input Validation
    technology:
    - scala
    primary_identifier: find_sec_bugs.JAXRS_ENDPOINT
    secondary_identifiers:
    - name: Find Security Bugs-JAXRS_ENDPOINT
      type: find_sec_bugs_type
      value: JAXRS_ENDPOINT
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs_scala.JAXRS_ENDPOINT-1
    shortlink: https://sg.run/jKRY
    semgrep.dev:
      rule:
        rule_id: AbUlz8
        version_id: vdTYnZb
        url: https://semgrep.dev/playground/r/vdTYnZb/gitlab.find_sec_bugs_scala.JAXRS_ENDPOINT-1
        origin: community
  mode: taint
  pattern-sinks:
  - pattern: "<...$VAR...>"
  pattern-sources:
  - patterns:
    - pattern-inside: |
        @javax.ws.rs.Path("...")
        def $FUNC(..., $VAR: $TYPE, ...) = ...
    - pattern: "$VAR"
  severity: INFO
- id: gitlab.find_sec_bugs_scala.JAXWS_ENDPOINT-1
  languages:
  - scala
  message: |
    This method is part of a SOAP Web Service (JSR224). The security of this web service should be
    analyzed. For example:
    - Authentication, if enforced, should be tested.
    - Access control, if enforced, should be tested.
    - The inputs should be tracked for potential vulnerabilities.
    - The communication should ideally be over SSL.
  metadata:
    category: security
    cwe: CWE-20
    owasp: A7:2017-Cross-Site Scripting (XSS)
    shortDescription: Improper Input Validation
    technology:
    - scala
    primary_identifier: find_sec_bugs.JAXWS_ENDPOINT
    secondary_identifiers:
    - name: Find Security Bugs-JAXWS_ENDPOINT
      type: find_sec_bugs_type
      value: JAXWS_ENDPOINT
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs_scala.JAXWS_ENDPOINT-1
    shortlink: https://sg.run/1yZw
    semgrep.dev:
      rule:
        rule_id: BYULNq
        version_id: d6TrjB2
        url: https://semgrep.dev/playground/r/d6TrjB2/gitlab.find_sec_bugs_scala.JAXWS_ENDPOINT-1
        origin: community
  mode: taint
  pattern-sinks:
  - pattern: "<...$VAR...>"
  pattern-sources:
  - patterns:
    - pattern-inside: |
        @javax.jws.WebMethod(...)
        def $FUNC(..., $VAR: $TYPE, ...) = ...
    - pattern: "$VAR"
  severity: INFO
- id: gitlab.find_sec_bugs_scala.LDAP_ANONYMOUS-1
  languages:
  - scala
  message: |
    Without proper access control, executing an LDAP statement that contains a
    user-controlled value can allow an attacker to abuse poorly configured LDAP
    context
  metadata:
    category: security
    cwe: CWE-20
    shortDescription: Improper Input Validation
    primary_identifier: find_sec_bugs.LDAP_ANONYMOUS
    secondary_identifiers:
    - name: Find Security Bugs-LDAP_ANONYMOUS
      type: find_sec_bugs_type
      value: LDAP_ANONYMOUS
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs_scala.LDAP_ANONYMOUS-1
    shortlink: https://sg.run/PXpY
    semgrep.dev:
      rule:
        rule_id: zdU3yW
        version_id: l4T4959
        url: https://semgrep.dev/playground/r/l4T4959/gitlab.find_sec_bugs_scala.LDAP_ANONYMOUS-1
        origin: community
  patterns:
  - pattern-inside: |
      import javax.naming.Context;
      ...
  - pattern: $ENV.put(Context.SECURITY_AUTHENTICATION, "none");
  severity: WARNING
- id: gitlab.find_sec_bugs_scala.LDAP_ENTRY_POISONING-1
  languages:
  - scala
  message: |
    Without proper access control, executing an LDAP statement that contains a
    user-controlled value can allow an attacker to abuse poorly configured LDAP
    context
  metadata:
    category: security
    cwe: CWE-20
    shortDescription: Improper Input Validation
    primary_identifier: find_sec_bugs.LDAP_ENTRY_POISONING
    secondary_identifiers:
    - name: Find Security Bugs-LDAP_ENTRY_POISONING
      type: find_sec_bugs_type
      value: LDAP_ENTRY_POISONING
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs_scala.LDAP_ENTRY_POISONING-1
    shortlink: https://sg.run/JY3w
    semgrep.dev:
      rule:
        rule_id: pKUDGb
        version_id: YDTpRor
        url: https://semgrep.dev/playground/r/YDTpRor/gitlab.find_sec_bugs_scala.LDAP_ENTRY_POISONING-1
        origin: community
  patterns:
  - pattern: new javax.naming.directory.SearchControls($SCOPE, $CLIMIT, $TLIMIT, $ATTR,
      true, $DEREF)
  severity: ERROR
- id: gitlab.find_sec_bugs_scala.LDAP_INJECTION-1
  languages:
  - scala
  message: |
    Just like SQL, all inputs passed to an LDAP query need to be passed in safely. Unfortunately,
    LDAP doesn't have prepared statement interfaces like SQL. Therefore, the primary defense
    against LDAP injection is strong input validation of any untrusted data before including it in
    an LDAP query.
  metadata:
    category: security
    cwe: CWE-90
    shortDescription: Improper Neutralization of Special Elements used in an LDAP
      Query ('LDAP Injection')
    technology:
    - scala
    primary_identifier: find_sec_bugs.LDAP_INJECTION
    secondary_identifiers:
    - name: Find Security Bugs-LDAP_INJECTION
      type: find_sec_bugs_type
      value: LDAP_INJECTION
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs_scala.LDAP_INJECTION-1
    shortlink: https://sg.run/7x0Z
    semgrep.dev:
      rule:
        rule_id: 0oU3Ey
        version_id: A8T9z6R
        url: https://semgrep.dev/playground/r/A8T9z6R/gitlab.find_sec_bugs_scala.LDAP_INJECTION-1
        origin: community
  patterns:
  - pattern-either:
    - pattern-inside: |
        def $FUNC(..., $VAR: String, ...): $TYPE = {
          ...
        }
    - pattern-inside: |
        def $FUNC(..., $X: String, ...): $TYPE = {
          ...
          $VAR = ... + $X;
          ...
        }
  - pattern-either:
    - pattern: "($P: java.util.Properties).put($KEY, $VAR)"
    - pattern: "$CTX.lookup(..., $VAR, ...)"
    - pattern: "$CTX.search(..., $VAR, ...)"
    - pattern: "$CTX.list(..., $VAR, ...)"
  - metavariable-pattern:
      metavariable: "$CTX"
      pattern-either:
      - pattern: "($CTX: javax.naming.directory.DirContext)"
      - pattern: "($CTX: javax.naming.directory.Context)"
      - pattern: "($CTX: javax.naming.Context)"
      - pattern: "($CTX: javax.naming.directory.InitialDirContext)"
      - pattern: "($CTX: javax.naming.ldap.LdapContext)"
      - pattern: "($CTX: com.unboundid.ldap.sdk.LDAPConnection)"
      - pattern: "($CTX: javax.naming.event.EventDirContext)"
      - pattern: "($CTX: com.sun.jndi.ldap.LdapCtx)"
      - pattern: "($CTX: org.springframework.ldap.core.LdapTemplate)"
      - pattern: "($CTX: org.springframework.ldap.core.LdapOperations)"
  severity: WARNING
- id: gitlab.find_sec_bugs_scala.MALICIOUS_XSLT-1
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - patterns:
        - pattern-inside: |
            $FUNC(...,String $VAR, ...) {
              ...
            }
        - pattern-either:
          - pattern: new FileInputStream(<... $VAR ...>);
          - pattern: getClass.getResourceAsStream(<... $VAR ...>)
      - patterns:
        - pattern-inside: |
            class $CLZ {
              String $X = "...";
              ...
            }
        - pattern-inside: |
            $FUNC(...,String $Y, ...) {
              ...
            }
        - pattern-either:
          - pattern: new FileInputStream($X + $Y);
          - pattern: getClass.getResourceAsStream($X + $Y)
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern-inside: "(javax.xml.transform.TransformerFactory $T).newTransformer($SRC,
          ...)"
      - pattern-inside: "(javax.xml.transform.Transformer $T).transform($SRC, ...)"
    - pattern: "$SRC"
  languages:
  - java
  message: |
    It is possible to attach malicious behavior to those style sheets. Therefore, if an attacker
    can control the content or the source of the style sheet, he might be able to trigger remote
    code execution.
  metadata:
    shortDescription: Improper neutralization of special elements in output used by
      a downstream component ('Injection')
    category: security
    cwe: CWE-74
    primary_identifier: find_sec_bugs.MALICIOUS_XSLT
    secondary_identifiers:
    - name: Find Security Bugs-MALICIOUS_XSLT
      type: find_sec_bugs_type
      value: MALICIOUS_XSLT
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs_scala.MALICIOUS_XSLT-1
    shortlink: https://sg.run/ook7
    semgrep.dev:
      rule:
        rule_id: 4bUqzj
        version_id: NdT3k14
        url: https://semgrep.dev/playground/r/NdT3k14/gitlab.find_sec_bugs_scala.MALICIOUS_XSLT-1
        origin: community
  severity: WARNING
- id: gitlab.find_sec_bugs_scala.MODIFICATION_AFTER_VALIDATION-1
  patterns:
  - pattern: |
      $Y.matcher($VAR);
      ...
      $VAR.$METHOD(...);
  - metavariable-regex:
      metavariable: "$METHOD"
      regex: "(replace)"
  languages:
  - scala
  message: 'CERT: IDS11-J. Perform any string modifications before validation

    '
  metadata:
    shortDescription: Collapse of data into unsafe value
    category: security
    cwe: CWE-182
    confidence: HIGH
    primary_identifier: find_sec_bugs.MODIFICATION_AFTER_VALIDATION
    secondary_identifiers:
    - name: Find Security Bugs-MODIFICATION_AFTER_VALIDATION
      type: find_sec_bugs_type
      value: MODIFICATION_AFTER_VALIDATION
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs_scala.MODIFICATION_AFTER_VALIDATION-1
    shortlink: https://sg.run/BA4b
    semgrep.dev:
      rule:
        rule_id: ZqUdq9
        version_id: pZT1OrJ
        url: https://semgrep.dev/playground/r/pZT1OrJ/gitlab.find_sec_bugs_scala.MODIFICATION_AFTER_VALIDATION-1
        origin: community
  severity: WARNING
- id: gitlab.find_sec_bugs_scala.NORMALIZATION_AFTER_VALIDATION-1
  patterns:
  - pattern: |
      $Y = java.util.regex.Pattern.compile("[<>]");
      ...
      $Y.matcher($VAR);
      ...
      java.text.Normalizer.normalize($VAR, ...);
  languages:
  - scala
  message: 'IDS01-J. Normalize strings before validating them

    '
  metadata:
    shortDescription: Collapse of data into unsafe value
    category: security
    cwe: CWE-182
    confidence: HIGH
    primary_identifier: find_sec_bugs.NORMALIZATION_AFTER_VALIDATION
    secondary_identifiers:
    - name: Find Security Bugs-NORMALIZATION_AFTER_VALIDATION
      type: find_sec_bugs_type
      value: NORMALIZATION_AFTER_VALIDATION
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs_scala.NORMALIZATION_AFTER_VALIDATION-1
    shortlink: https://sg.run/DDJ2
    semgrep.dev:
      rule:
        rule_id: nJUNYE
        version_id: 2KTzb1n
        url: https://semgrep.dev/playground/r/2KTzb1n/gitlab.find_sec_bugs_scala.NORMALIZATION_AFTER_VALIDATION-1
        origin: community
  severity: WARNING
- id: gitlab.find_sec_bugs_scala.NULL_CIPHER-1
  languages:
  - scala
  message: |
    The NullCipher implements the Cipher interface by returning ciphertext identical to the
    supplied plaintext. In a few contexts, such as testing, a NullCipher may be appropriate. Avoid
    using the NullCipher. Its accidental use can introduce a significant confidentiality risk.
  metadata:
    category: security
    cwe: CWE-327
    shortDescription: Use of a Broken or Risky Cryptographic Algorithm
    technology:
    - scala
    primary_identifier: find_sec_bugs.NULL_CIPHER
    secondary_identifiers:
    - name: Find Security Bugs-NULL_CIPHER
      type: find_sec_bugs_type
      value: NULL_CIPHER
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs_scala.NULL_CIPHER-1
    shortlink: https://sg.run/oox9
    semgrep.dev:
      rule:
        rule_id: PeUGZw
        version_id: kbTdkoe
        url: https://semgrep.dev/playground/r/kbTdkoe/gitlab.find_sec_bugs_scala.NULL_CIPHER-1
        origin: community
  pattern: new javax.crypto.NullCipher()
  severity: WARNING
- id: gitlab.find_sec_bugs_scala.OGNL_INJECTION-1
  patterns:
  - pattern-either:
    - pattern-inside: |
        def $FUNC(..., $VAR: String, ...): $TYPE = {
          ...
        }
    - pattern-inside: |
        def $FUNC(..., $VAR: Map[$K,$V], ...): $TYPE = {
          ...
        }
    - pattern-inside: |
        def $FUNC(..., $VAR: java.util.HashMap[$K,$V], ...): $TYPE = {
          ...
        }
  - pattern-either:
    - pattern: com.opensymphony.xwork2.util.TextParseUtil.translateVariables(...,
        $VAR, ...)
    - pattern: com.opensymphony.xwork2.util.TextParseUtil.translateVariablesCollection(...,
        $VAR, ...)
    - pattern: com.opensymphony.xwork2.util.TextParseUtil.shallBeIncluded(..., $VAR,
        ...)
    - pattern: com.opensymphony.xwork2.util.TextParseUtil.commaDelimitedStringToSet(...,
        $VAR, ...)
    - pattern: "($P:com.opensymphony.xwork2.util.TextParser).evaluate(..., $VAR, ...)"
    - pattern: "($P:com.opensymphony.xwork2.util.OgnlTextParser).evaluate(..., $VAR,
        ...)"
    - pattern: "($P:com.opensymphony.xwork2.ognl.OgnlReflectionProvider).getGetMethod(...,
        $VAR, ...)"
    - pattern: "($P:com.opensymphony.xwork2.ognl.OgnlReflectionProvider).getSetMethod(...,
        $VAR, ...)"
    - pattern: "($P:com.opensymphony.xwork2.ognl.OgnlReflectionProvider).getField(...,
        $VAR, ...)"
    - pattern: "($P:com.opensymphony.xwork2.ognl.OgnlReflectionProvider).setProperties(...,
        $VAR, ...)"
    - pattern: "($P:com.opensymphony.xwork2.ognl.OgnlReflectionProvider).setProperty(...,$VAR,
        ...)"
    - pattern: "($P:com.opensymphony.xwork2.ognl.OgnlReflectionProvider).getValue(...,$VAR,
        ...)"
    - pattern: "($P:com.opensymphony.xwork2.ognl.OgnlReflectionProvider).setValue(...,$VAR,
        ...)"
    - pattern: "($P:com.opensymphony.xwork2.util.reflection.ReflectionProvider).getGetMethod(...,
        $VAR, ...)"
    - pattern: "($P:com.opensymphony.xwork2.util.reflection.ReflectionProvider).getSetMethod(...,
        $VAR, ...)"
    - pattern: "($P:com.opensymphony.xwork2.util.reflection.ReflectionProvider).getField(...,
        $VAR, ...)"
    - pattern: "($P:com.opensymphony.xwork2.util.reflection.ReflectionProvider).setProperties(...,
        $VAR, ...)"
    - pattern: "($P:com.opensymphony.xwork2.util.reflection.ReflectionProvider).setProperty(...,
        $VAR, ...)"
    - pattern: "($P:com.opensymphony.xwork2.util.reflection.ReflectionProvider).getValue(...,
        $VAR, ...)"
    - pattern: "($P:com.opensymphony.xwork2.util.reflection.ReflectionProvider).setValue(...,
        $VAR, ...)"
    - pattern: "($P:com.opensymphony.xwork2.ognl.OgnlUtil).setProperties(..., $VAR,
        ...)"
    - pattern: "($P:com.opensymphony.xwork2.ognl.OgnlUtil).setProperty(..., $VAR,
        ...)"
    - pattern: "($P:com.opensymphony.xwork2.ognl.OgnlUtil).getValue(..., $VAR, ...)"
    - pattern: "($P:com.opensymphony.xwork2.ognl.OgnlUtil).setValue(..., $VAR, ...)"
    - pattern: "($P:com.opensymphony.xwork2.ognl.OgnlUtil).callMethod(..., $VAR, ...)"
    - pattern: "($P:com.opensymphony.xwork2.ognl.OgnlUtil).compile(..., $VAR, ...)"
    - pattern: "($P:org.apache.struts2.util.VelocityStrutsUtil).evaluate(...)"
    - pattern: org.apache.struts2.util.StrutsUtil.findString(...)
    - pattern: org.apache.struts2.util.StrutsUtil.findValue(..., $VAL)
    - pattern: org.apache.struts2.util.StrutsUtil.getText(...)
    - pattern: org.apache.struts2.util.StrutsUtil.translateVariables(...)
    - pattern: org.apache.struts2.util.StrutsUtil.makeSelectList(..., $VAR, ...)
    - pattern: "($T:org.apache.struts2.views.jsp.ui.OgnlTool).findValue(..., $VAR,
        ...)"
    - pattern: "($V:com.opensymphony.xwork2.util.ValueStack).findString(...)"
    - pattern: "($V:com.opensymphony.xwork2.util.ValueStack).findValue(..., $VAR,
        ...)"
    - pattern: "($V:com.opensymphony.xwork2.util.ValueStack).setValue(..., $VAR, ...)"
    - pattern: "($V:com.opensymphony.xwork2.util.ValueStack).setParameter(..., $VAR,
        ...)"
  message: |
    "A expression is built with a dynamic value. The source of the value(s) should be verified to
    avoid that unfiltered values fall into this risky code evaluation."
  languages:
  - scala
  severity: WARNING
  metadata:
    shortDescription: Expression injection (OGNL)
    category: security
    cwe: CWE-917
    technology:
    - scala
    primary_identifier: find_sec_bugs.OGNL_INJECTION
    secondary_identifiers:
    - name: Find Security Bugs-OGNL_INJECTION
      type: find_sec_bugs_type
      value: OGNL_INJECTION
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs_scala.OGNL_INJECTION-1
    shortlink: https://sg.run/Lo0r
    semgrep.dev:
      rule:
        rule_id: KxUL4z
        version_id: BjTXN9Y
        url: https://semgrep.dev/playground/r/BjTXN9Y/gitlab.find_sec_bugs_scala.OGNL_INJECTION-1
        origin: community
- id: gitlab.find_sec_bugs_scala.OVERLY_PERMISSIVE_FILE_PERMISSION-1
  languages:
  - scala
  message: 'Overly permissive file permission

    '
  metadata:
    category: security
    confidence: HIGH
    cwe: CWE-732
    shortDescription: Incorrect Permission Assignment for Critical Resource
    primary_identifier: find_sec_bugs.OVERLY_PERMISSIVE_FILE_PERMISSION
    secondary_identifiers:
    - name: Find Security Bugs-OVERLY_PERMISSIVE_FILE_PERMISSION
      type: find_sec_bugs_type
      value: OVERLY_PERMISSIVE_FILE_PERMISSION
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs_scala.OVERLY_PERMISSIVE_FILE_PERMISSION-1
    shortlink: https://sg.run/BA4W
    semgrep.dev:
      rule:
        rule_id: 9AU7Ol
        version_id: A8T9zRN
        url: https://semgrep.dev/playground/r/A8T9zRN/gitlab.find_sec_bugs_scala.OVERLY_PERMISSIVE_FILE_PERMISSION-1
        origin: community
  patterns:
  - pattern-either:
    - pattern: java.nio.file.Files.setPosixFilePermissions(..., java.nio.file.attribute.PosixFilePermissions.fromString("$PERM_STRING"));
    - pattern: |
        $PERMISSIONS = java.nio.file.attribute.PosixFilePermissions.fromString("$PERM_STRING");
        ...
        java.nio.file.Files.setPosixFilePermissions(..., $PERMISSIONS);
  - metavariable-regex:
      metavariable: "$PERM_STRING"
      regex: "[rwx-]{6}[rwx]{1,}"
  severity: WARNING
- id: gitlab.find_sec_bugs_scala.OVERLY_PERMISSIVE_FILE_PERMISSION-2
  languages:
  - scala
  message: 'Overly permissive file permission

    '
  metadata:
    category: security
    confidence: HIGH
    cwe: CWE-732
    shortDescription: Incorrect Permission Assignment for Critical Resource
    primary_identifier: find_sec_bugs.OVERLY_PERMISSIVE_FILE_PERMISSION-2
    secondary_identifiers:
    - name: Find Security Bugs-OVERLY_PERMISSIVE_FILE_PERMISSION
      type: find_sec_bugs_type
      value: OVERLY_PERMISSIVE_FILE_PERMISSION
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs_scala.OVERLY_PERMISSIVE_FILE_PERMISSION-2
    shortlink: https://sg.run/DDJY
    semgrep.dev:
      rule:
        rule_id: yyUgvq
        version_id: BjTXNE1
        url: https://semgrep.dev/playground/r/BjTXNE1/gitlab.find_sec_bugs_scala.OVERLY_PERMISSIVE_FILE_PERMISSION-2
        origin: community
  patterns:
  - pattern-inside: |
      ...
      java.nio.file.Files.setPosixFilePermissions(..., $PERMS);
  - pattern-either:
    - pattern: "$PERMS.add($P);"
    - pattern: "$A = $B + $P;"
  - metavariable-regex:
      metavariable: "$P"
      regex: "(PosixFilePermission.){0,1}(OTHERS_)"
  severity: WARNING
- id: gitlab.find_sec_bugs_scala.PADDING_ORACLE-1
  languages:
  - scala
  message: |
    This specific mode of CBC with PKCS5Padding is susceptible to padding oracle attacks. An
    adversary could potentially decrypt the message if the system exposed the difference between
    plaintext with invalid padding or valid padding. The distinction between valid and invalid
    padding is usually revealed through distinct error messages being returned for each condition.
  metadata:
    category: security
    cwe: CWE-696
    shortDescription: Incorrect Behavior Order
    technology:
    - scala
    primary_identifier: find_sec_bugs.PADDING_ORACLE
    secondary_identifiers:
    - name: Find Security Bugs-PADDING_ORACLE
      type: find_sec_bugs_type
      value: PADDING_ORACLE
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs_scala.PADDING_ORACLE-1
    shortlink: https://sg.run/K6l7
    semgrep.dev:
      rule:
        rule_id: 8GUljB
        version_id: 9lTd1j4
        url: https://semgrep.dev/playground/r/9lTd1j4/gitlab.find_sec_bugs_scala.PADDING_ORACLE-1
        origin: community
  patterns:
  - pattern-inside: javax.crypto.Cipher.getInstance("...")
  - pattern-regex: "(/CBC/PKCS5Padding)"
  - pattern-not-regex: "^(RSA)/.*"
  - pattern-not-regex: "^(ECIES)$"
  severity: ERROR
- id: gitlab.find_sec_bugs_scala.PATH_TRAVERSAL_IN-1.SCALA_PATH_TRAVERSAL_IN-1
  languages:
  - scala
  message: |
    A file is opened to read its content. The filename comes from an input parameter. If an
    unfiltered parameter is passed to this file API, files from an arbitrary filesystem location
    could be read. This rule identifies potential path traversal vulnerabilities. In many cases,
    the constructed file path cannot be controlled by the user.
  metadata:
    category: security
    cwe: CWE-22
    shortDescription: Improper Limitation of a Pathname to a Restricted Directory
      ('Path Traversal')
    technology:
    - scala
    primary_identifier: find_sec_bugs.PATH_TRAVERSAL_IN-1.SCALA_PATH_TRAVERSAL_IN-1
    secondary_identifiers:
    - name: Find Security Bugs-PATH_TRAVERSAL_IN
      type: find_sec_bugs_type
      value: PATH_TRAVERSAL_IN
    - name: Find Security Bugs-SCALA_PATH_TRAVERSAL_IN
      type: find_sec_bugs_type
      value: SCALA_PATH_TRAVERSAL_IN
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs_scala.PATH_TRAVERSAL_IN-1.SCALA_PATH_TRAVERSAL_IN-1
    shortlink: https://sg.run/8Ony
    semgrep.dev:
      rule:
        rule_id: qNUwoj
        version_id: DkT6pOz
        url: https://semgrep.dev/playground/r/DkT6pOz/gitlab.find_sec_bugs_scala.PATH_TRAVERSAL_IN-1.SCALA_PATH_TRAVERSAL_IN-1
        origin: community
  patterns:
  - pattern-either:
    - patterns:
      - pattern-inside: |
          def $FUNC(...,$ARGS: Array[String], ...): $TYPE = {
          ...
          }
      - pattern-inside: |
          $VAR = $ARGS($IDX)
          ...
    - pattern-inside: |
        def $FUNC(...,$VAR: String, ...): $TYPE = {
        ...
        }
  - pattern-not-inside: |
      ...
      org.apache.commons.io.FilenameUtils.getName($VAR)
      ...
  - pattern-either:
    - patterns:
      - pattern-inside: |
          $U = new java.net.URI($VAR)
          ...
      - pattern-either:
        - pattern: new java.io.File($U)
        - pattern: java.nio.file.Paths.get($U)
    - pattern: new java.io.RandomAccessFile(..., $VAR,...)
    - pattern: new java.io.FileReader(<...$VAR...>, ...)
    - pattern: new javax.activation.FileDataSource(..., $VAR, ...)
    - pattern: new java.io.FileInputStream(..., $VAR, ...)
    - pattern: new java.io.File(<...$VAR...>, ...)
    - pattern: java.nio.file.Paths.get(...,$VAR,...)
    - pattern: java.io.File.createTempFile(...,$VAR, ...)
    - pattern: java.io.File.createTempDirectory(...,$VAR,...)
    - pattern: java.nio.file.Files.createTempFile(..., $VAR, ...)
    - pattern: java.nio.file.Files.createTempDirectory(..., $VAR, ...)
    - pattern: scala.io.Source.from(<...$VAR...>)
    - pattern: scala.io.Source.fromFile(<...$VAR...>)
    - pattern: scala.io.Source.fromString(<...$VAR...>)
  severity: ERROR
- id: gitlab.find_sec_bugs_scala.PATH_TRAVERSAL_OUT-1
  languages:
  - scala
  message: |
    A file is opened to write to its contents. The filename comes from an input parameter. If an
    unfiltered parameter is passed to this file API, files at an arbitrary filesystem location
    could be modified. This rule identifies potential path traversal vulnerabilities. In many
    cases, the constructed file path cannot be controlled by the user.
  metadata:
    category: security
    cwe: CWE-22
    shortDescription: Improper Limitation of a Pathname to a Restricted Directory
      ('Path Traversal')
    technology:
    - scala
    primary_identifier: find_sec_bugs.PATH_TRAVERSAL_OUT
    secondary_identifiers:
    - name: Find Security Bugs-PATH_TRAVERSAL_OUT
      type: find_sec_bugs_type
      value: PATH_TRAVERSAL_OUT
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs_scala.PATH_TRAVERSAL_OUT-1
    shortlink: https://sg.run/gDJJ
    semgrep.dev:
      rule:
        rule_id: lBUDdd
        version_id: WrTWobz
        url: https://semgrep.dev/playground/r/WrTWobz/gitlab.find_sec_bugs_scala.PATH_TRAVERSAL_OUT-1
        origin: community
  mode: taint
  pattern-sanitizers:
  - pattern: org.apache.commons.io.FilenameUtils.getName(...)
  pattern-sinks:
  - patterns:
    - pattern-inside: new java.io.FileWriter($PATH, ...)
    - pattern: "$PATH"
  - patterns:
    - pattern-inside: new java.io.FileOutputStream($PATH, ...)
    - pattern: "$PATH"
  pattern-sources:
  - patterns:
    - pattern-inside: |
        def $FUNC(..., $ARGS: Array[String], ...): $TYPE = {
          ...
        }
    - pattern: "$ARGS[$IDX]"
  - patterns:
    - pattern-inside: |
        def $FUNC(..., $VAR: String, ...): $TYPE = {
          ...
        }
    - pattern: "$VAR"
  severity: ERROR
- id: gitlab.find_sec_bugs_scala.PERMISSIVE_CORS-1
  languages:
  - scala
  message: |
    Prior to HTML5, Web browsers enforced the Same Origin Policy which ensures that in order for
    JavaScript to access the contents of a Web page, both the JavaScript and the Web page must
    originate from the same domain. Without the Same Origin Policy, a malicious website could serve
    up JavaScript that loads sensitive information from other websites using a client's
    credentials, cull through it, and communicate it back to the attacker. HTML5 makes it possible
    for JavaScript to access data across domains if a new HTTP header called
    Access-Control-Allow-Origin is defined. With this header, a Web server defines which other
    domains are allowed to access its domain using cross-origin requests. However, caution should
    be taken when defining the header because an overly permissive CORS policy will allow a
    malicious application to communicate with the victim application in an inappropriate way,
    leading to spoofing, data theft, relay and other attacks.
  metadata:
    category: security
    cwe: CWE-942
    shortDescription: Permissive Cross-domain Policy with Untrusted Domains
    technology:
    - scala
    primary_identifier: find_sec_bugs.PERMISSIVE_CORS
    secondary_identifiers:
    - name: Find Security Bugs-PERMISSIVE_CORS
      type: find_sec_bugs_type
      value: PERMISSIVE_CORS
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs_scala.PERMISSIVE_CORS-1
    shortlink: https://sg.run/GKep
    semgrep.dev:
      rule:
        rule_id: v8UQnN
        version_id: o5Tge74
        url: https://semgrep.dev/playground/r/o5Tge74/gitlab.find_sec_bugs_scala.PERMISSIVE_CORS-1
        origin: community
  pattern-either:
  - patterns:
    - pattern-either:
      - pattern: ($RESP:javax.servlet.http.HttpServletResponse).setHeader("$HEADER",
          "$VAL")
      - pattern: ($RESP:javax.servlet.http.HttpServletResponse).addHeader("$HEADER",
          "$VAL")
    - metavariable-regex:
        metavariable: "$HEADER"
        regex: "(?i)(Access-Control-Allow-Origin)"
    - metavariable-regex:
        metavariable: "$VAL"
        regex: "(\\*|null)"
  - patterns:
    - pattern-inside: |
        $REQVAL = ($REQ: javax.servlet.http.HttpServletRequest).getParameter(...)
        ...
    - pattern-either:
      - pattern-inside: ($RESP:javax.servlet.http.HttpServletResponse).setHeader("$HEADER",
          $REQVAL)
      - pattern-inside: ($RESP:javax.servlet.http.HttpServletResponse).addHeader("$HEADER",
          $REQVAL)
  - patterns:
    - pattern-either:
      - pattern-inside: '($RESP:javax.servlet.http.HttpServletResponse).setHeader("$HEADER",($REQ:
          javax.servlet.http.HttpServletRequest).getParameter(...))'
      - pattern-inside: '($RESP:javax.servlet.http.HttpServletResponse).addHeader("$HEADER",($REQ:
          javax.servlet.http.HttpServletRequest).getParameter(...))'
  severity: ERROR
- id: gitlab.find_sec_bugs_scala.PERMISSIVE_CORS-2
  languages:
  - java
  message: |
    Prior to HTML5, Web browsers enforced the Same Origin Policy which ensures that in order for
    JavaScript to access the contents of a Web page, both the JavaScript and the Web page must
    originate from the same domain. Without the Same Origin Policy, a malicious website could serve
    up JavaScript that loads sensitive information from other websites using a client's
    credentials, cull through it, and communicate it back to the attacker. HTML5 makes it possible
    for JavaScript to access data across domains if a new HTTP header called
    Access-Control-Allow-Origin is defined. With this header, a Web server defines which other
    domains are allowed to access its domain using cross-origin requests. However, caution should
    be taken when defining the header because an overly permissive CORS policy will allow a
    malicious application to communicate with the victim application in an inappropriate way,
    leading to spoofing, data theft, relay and other attacks.
  metadata:
    category: security
    cwe: CWE-942
    shortDescription: Permissive Cross-domain Policy with Untrusted Domains
    technology:
    - java
    primary_identifier: find_sec_bugs.PERMISSIVE_CORS-2
    secondary_identifiers:
    - name: Find Security Bugs-PERMISSIVE_CORS
      type: find_sec_bugs_type
      value: PERMISSIVE_CORS
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs_scala.PERMISSIVE_CORS-2
    shortlink: https://sg.run/R1oO
    semgrep.dev:
      rule:
        rule_id: d8Ugjv
        version_id: zyTKkxn
        url: https://semgrep.dev/playground/r/zyTKkxn/gitlab.find_sec_bugs_scala.PERMISSIVE_CORS-2
        origin: community
  mode: taint
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern: (HttpServletResponse $RES).setHeader("$HEADER", ...)
      - pattern: (HttpServletResponse $RES).addHeader("$HEADER", ...)
    - metavariable-regex:
        metavariable: "$HEADER"
        regex: "(?i)(Access-Control-Allow-Origin)"
  pattern-sources:
  - pattern: "(HttpServletRequest $REQ).getParamater(...)"
  severity: ERROR
- id: gitlab.find_sec_bugs_scala.PREDICTABLE_RANDOM-1.PREDICTABLE_RANDOM_SCALA-1
  languages:
  - scala
  message: |
    The use of a predictable random value can lead to vulnerabilities when used in certain security
    critical contexts. A quick fix could be to replace the use of scala.util.Random with something
    stronger, such as java.security.SecureRandom
  metadata:
    category: security
    cwe: CWE-330
    shortDescription: Use of Insufficiently Random Values
    technology:
    - scala
    primary_identifier: find_sec_bugs.PREDICTABLE_RANDOM-1.PREDICTABLE_RANDOM_SCALA-1
    secondary_identifiers:
    - name: Find Security Bugs-PREDICTABLE_RANDOM
      type: find_sec_bugs_type
      value: PREDICTABLE_RANDOM
    - name: Find Security Bugs-PREDICTABLE_RANDOM_SCALA
      type: find_sec_bugs_type
      value: PREDICTABLE_RANDOM_SCALA
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs_scala.PREDICTABLE_RANDOM-1.PREDICTABLE_RANDOM_SCALA-1
    shortlink: https://sg.run/WNg4
    semgrep.dev:
      rule:
        rule_id: r6Uvkl
        version_id: DkT6pQn
        url: https://semgrep.dev/playground/r/DkT6pQn/gitlab.find_sec_bugs_scala.PREDICTABLE_RANDOM-1.PREDICTABLE_RANDOM_SCALA-1
        origin: community
  pattern-either:
  - patterns:
    - pattern: "$LANG.util.Random.$METHOD"
    - metavariable-regex:
        metavariable: "$METHOD"
        regex: "^(next)"
  - pattern: Math.random
  severity: WARNING
- id: gitlab.find_sec_bugs_scala.PT_ABSOLUTE_PATH_TRAVERSAL-1
  languages:
  - scala
  message: |
    "The software uses an HTTP request parameter to construct a pathname that should be within a
    restricted directory, but it does not properly neutralize absolute path sequences such as
    "/abs/path" that can resolve to a location that is outside of that directory. See
    http://cwe.mitre.org/data/definitions/36.html for more information."
  metadata:
    category: security
    cwe: CWE-22
    shortDescription: Improper Limitation of a Pathname to a Restricted Directory
      ('Path Traversal')
    technology:
    - scala
    primary_identifier: find_sec_bugs.PT_ABSOLUTE_PATH_TRAVERSAL
    secondary_identifiers:
    - name: Find Security Bugs-PT_ABSOLUTE_PATH_TRAVERSAL
      type: find_sec_bugs_type
      value: PT_ABSOLUTE_PATH_TRAVERSAL
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs_scala.PT_ABSOLUTE_PATH_TRAVERSAL-1
    shortlink: https://sg.run/Qj84
    semgrep.dev:
      rule:
        rule_id: YGUbrQ
        version_id: 0bTL5vL
        url: https://semgrep.dev/playground/r/0bTL5vL/gitlab.find_sec_bugs_scala.PT_ABSOLUTE_PATH_TRAVERSAL-1
        origin: community
  mode: taint
  pattern-sanitizers:
  - pattern: org.apache.commons.io.FilenameUtils.getName(...)
  pattern-sinks:
  - patterns:
    - pattern-inside: "$U = new java.net.URI($VAR)\n"
    - pattern-either:
      - pattern-inside: new java.io.File($U)
      - pattern-inside: java.nio.file.Paths.get($U)
    - pattern: "$VAR"
  - patterns:
    - pattern-inside: new java.io.RandomAccessFile($INPUT,...)
    - pattern: "$INPUT"
  - pattern: new java.io.FileReader(...)
  - pattern: new javax.activation.FileDataSource(...)
  - pattern: new java.io.FileInputStream(...)
  - pattern: new java.io.File(...)
  - pattern: java.nio.file.Paths.get(...)
  - pattern: java.io.File.createTempFile(...)
  - pattern: java.io.File.createTempDirectory(...)
  - pattern: java.nio.file.Files.createTempFile(...)
  - pattern: java.nio.file.Files.createTempDirectory(...)
  - patterns:
    - pattern-inside: new java.io.FileWriter($PATH, ...)
    - pattern: "$PATH"
  - patterns:
    - pattern-inside: new java.io.FileOutputStream($PATH, ...)
    - pattern: "$PATH"
  pattern-sources:
  - pattern: "($REQ: HttpServletRequest ).getParameter(...)"
  severity: WARNING
- id: gitlab.find_sec_bugs_scala.PT_RELATIVE_PATH_TRAVERSAL-1
  languages:
  - scala
  message: |
    "The software uses an HTTP request parameter to construct a pathname that should be within a
    restricted directory, but it does not properly neutralize sequences such as ".." that can
    resolve to a location that is outside of that directory. See
    http://cwe.mitre.org/data/definitions/23.html for more information."
  metadata:
    category: security
    cwe: CWE-22
    shortDescription: Improper Limitation of a Pathname to a Restricted Directory
      ('Path Traversal')
    technology:
    - scala
    primary_identifier: find_sec_bugs.PT_RELATIVE_PATH_TRAVERSAL
    secondary_identifiers:
    - name: Find Security Bugs-PT_RELATIVE_PATH_TRAVERSAL
      type: find_sec_bugs_type
      value: PT_RELATIVE_PATH_TRAVERSAL
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs_scala.PT_RELATIVE_PATH_TRAVERSAL-1
    shortlink: https://sg.run/3bAr
    semgrep.dev:
      rule:
        rule_id: 6JUXq1
        version_id: K3Tvbln
        url: https://semgrep.dev/playground/r/K3Tvbln/gitlab.find_sec_bugs_scala.PT_RELATIVE_PATH_TRAVERSAL-1
        origin: community
  mode: taint
  pattern-sanitizers:
  - pattern: org.apache.commons.io.FilenameUtils.getName(...)
  pattern-sinks:
  - patterns:
    - pattern-inside: "$U = new java.net.URI($VAR)\n"
    - pattern-either:
      - pattern-inside: new java.io.File($U)
      - pattern-inside: java.nio.file.Paths.get($U)
    - pattern: "$VAR"
  - patterns:
    - pattern-inside: new java.io.RandomAccessFile($INPUT,...)
    - pattern: "$INPUT"
  - pattern: new java.io.FileReader(...)
  - pattern: new javax.activation.FileDataSource(...)
  - pattern: new java.io.FileInputStream(...)
  - pattern: new java.io.File(...)
  - pattern: java.nio.file.Paths.get(...)
  - pattern: java.io.File.createTempFile(...)
  - pattern: java.io.File.createTempDirectory(...)
  - pattern: java.nio.file.Files.createTempFile(...)
  - pattern: java.nio.file.Files.createTempDirectory(...)
  - patterns:
    - pattern-inside: new java.io.FileWriter($PATH, ...)
    - pattern: "$PATH"
  - patterns:
    - pattern-inside: new java.io.FileOutputStream($PATH, ...)
    - pattern: "$PATH"
  pattern-sources:
  - patterns:
    - pattern-inside: |
        $P = ($REQ: HttpServletRequest ).getParameter(...);
        ...
    - pattern-either:
      - pattern: "$P + ..."
      - pattern: "... + $P"
  severity: WARNING
- id: gitlab.find_sec_bugs_scala.REQUESTDISPATCHER_FILE_DISCLOSURE-1.STRUTS_FILE_DISCLOSURE-1.SPRING_FILE_DISCLOSURE-1
  languages:
  - scala
  message: |
    Constructing a server-side redirect path with user input could allow an
    attacker to download application binaries (including application classes or
    jar files) or view arbitrary files within protected directories.
  metadata:
    category: security
    cwe: CWE-552
    shortDescription: Files or Directories Accessible to External Parties
    primary_identifier: find_sec_bugs.REQUESTDISPATCHER_FILE_DISCLOSURE-1.STRUTS_FILE_DISCLOSURE-1.SPRING_FILE_DISCLOSURE-1
    secondary_identifiers:
    - name: Find Security Bugs-REQUESTDISPATCHER_FILE_DISCLOSURE
      type: find_sec_bugs_type
      value: REQUESTDISPATCHER_FILE_DISCLOSURE
    - name: Find Security Bugs-STRUTS_FILE_DISCLOSURE
      type: find_sec_bugs_type
      value: STRUTS_FILE_DISCLOSURE
    - name: Find Security Bugs-SPRING_FILE_DISCLOSURE
      type: find_sec_bugs_type
      value: SPRING_FILE_DISCLOSURE
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs_scala.REQUESTDISPATCHER_FILE_DISCLOSURE-1.STRUTS_FILE_DISCLOSURE-1.SPRING_FILE_DISCLOSURE-1
    shortlink: https://sg.run/n6qX
    semgrep.dev:
      rule:
        rule_id: DbUyWd
        version_id: GxTv7GQ
        url: https://semgrep.dev/playground/r/GxTv7GQ/gitlab.find_sec_bugs_scala.REQUESTDISPATCHER_FILE_DISCLOSURE-1.STRUTS_FILE_DISCLOSURE-1.SPRING_FILE_DISCLOSURE-1
        origin: community
  mode: taint
  pattern-sinks:
  - patterns:
    - pattern: new org.springframework.web.servlet.ModelAndView($FST)
    - pattern: "$FST"
  - patterns:
    - pattern: new org.springframework.web.servlet.ModelAndView($FST, $SND)
    - pattern: "$FST"
  - patterns:
    - pattern: new org.springframework.web.servlet.ModelAndView($FST, $SND, $TRD)
    - pattern: "$FST"
  - patterns:
    - pattern: new org.apache.struts.action.ActionForward($FST)
    - pattern: "$FST"
  - patterns:
    - pattern: new org.apache.struts.action.ActionForward($FST, $SND)
    - pattern: "$FST"
  - patterns:
    - pattern: new org.apache.struts.action.ActionForward($FST, $SND, $TRD)
    - pattern: "$SND"
  - patterns:
    - pattern: new org.apache.struts.action.ActionForward($FST, $SND, $TRD)
    - pattern: "$TRD"
  - patterns:
    - pattern-inside: |
        $ACTION = new org.apache.struts.action.ActionForward()
        ...
    - pattern: "$ACTION.setPath(...)"
  - patterns:
    - pattern-inside: |
        $MVC = new org.springframework.web.servlet.ModelAndView()
        ...
    - pattern: "$MVC.setViewName(...);"
  - patterns:
    - pattern-inside: |
        $REQ = $HTTP.getRequestDispatcher(...)
        ...
    - pattern-either:
      - pattern: "$REQ.include($FST, $SND)"
      - pattern: "$REQ.forward($FST, $SND)"
  pattern-sources:
  - pattern: "($VAR: javax.servlet.http.HttpServletRequest).getParameter(...)"
  severity: ERROR
- id: gitlab.find_sec_bugs_scala.RPC_ENABLED_EXTENSIONS-1
  languages:
  - scala
  message: |
    Enabling extensions in Apache XML RPC server or client can lead to deserialization
    vulnerability which would allow an attacker to execute arbitrary code.
  metadata:
    category: security
    cwe: CWE-502
    shortDescription: Deserialization of Untrusted Data
    primary_identifier: find_sec_bugs.RPC_ENABLED_EXTENSIONS
    secondary_identifiers:
    - name: Find Security Bugs-RPC_ENABLED_EXTENSIONS
      type: find_sec_bugs_type
      value: RPC_ENABLED_EXTENSIONS
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs_scala.RPC_ENABLED_EXTENSIONS-1
    shortlink: https://sg.run/lljL
    semgrep.dev:
      rule:
        rule_id: gxUXWQ
        version_id: yeTRnXE
        url: https://semgrep.dev/playground/r/yeTRnXE/gitlab.find_sec_bugs_scala.RPC_ENABLED_EXTENSIONS-1
        origin: community
  patterns:
  - pattern-either:
    - patterns:
      - pattern-inside: |
          val $VAR = new XmlRpcServerConfigImpl();
          ...
      - pattern: "$VAR.setEnabledForExtensions(true);"
    - patterns:
      - pattern-inside: |
          val $VAR = new org.apache.xmlrpc.client.XmlRpcClientConfigImpl();
          ...
      - pattern: "$VAR.setEnabledForExtensions(true);"
  severity: WARNING
- id: gitlab.find_sec_bugs_scala.RSA_KEY_SIZE-1
  languages:
  - scala
  message: |
    Detected an insufficient key size for DSA. NIST recommends a key size
    of 2048 or higher.
  metadata:
    category: security
    cwe: CWE-326
    shortDescription: Inadequate Encryption Strength
    primary_identifier: find_sec_bugs.RSA_KEY_SIZE
    secondary_identifiers:
    - name: Find Security Bugs-RSA_KEY_SIZE
      type: find_sec_bugs_type
      value: RSA_KEY_SIZE
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs_scala.RSA_KEY_SIZE-1
    shortlink: https://sg.run/6wno
    semgrep.dev:
      rule:
        rule_id: 4bUqkK
        version_id: NdT3kxJ
        url: https://semgrep.dev/playground/r/NdT3kxJ/gitlab.find_sec_bugs_scala.RSA_KEY_SIZE-1
        origin: community
  patterns:
  - pattern-either:
    - patterns:
      - pattern-inside: |
          $GEN = KeyPairGenerator.getInstance($ALG, ...);
          ...
      - pattern-either:
        - pattern: "$VAR.initialize($SIZE, ...)"
        - pattern: new java.security.spec.RSAKeyGenParameterSpec($SIZE, ...)
      - metavariable-comparison:
          comparison: "$SIZE < 2048"
          metavariable: "$SIZE"
      - metavariable-regex:
          metavariable: "$ALG"
          regex: '"(RSA|DSA)"'
  severity: WARNING
- id: gitlab.find_sec_bugs_scala.SAML_IGNORE_COMMENTS-1
  languages:
  - scala
  message: 'Ignoring XML comments in SAML may lead to authentication bypass

    '
  metadata:
    category: security
    cwe: CWE-287
    shortDescription: Improper Authentication
    primary_identifier: find_sec_bugs.SAML_IGNORE_COMMENTS
    secondary_identifiers:
    - name: Find Security Bugs-SAML_IGNORE_COMMENTS
      type: find_sec_bugs_type
      value: SAML_IGNORE_COMMENTS
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs_scala.SAML_IGNORE_COMMENTS-1
    shortlink: https://sg.run/YwgW
    semgrep.dev:
      rule:
        rule_id: QrUN6r
        version_id: rxTyrxq
        url: https://semgrep.dev/playground/r/rxTyrxq/gitlab.find_sec_bugs_scala.SAML_IGNORE_COMMENTS-1
        origin: community
  pattern: "($POOL: BasicParserPool).setIgnoreComments(false);"
  severity: WARNING
- id: gitlab.find_sec_bugs_scala.SCALA_PLAY_SSRF-1
  languages:
  - scala
  message: |
    Server-Side Request Forgery occur when a web server executes a request to a user supplied
    destination parameter that is not validated. Such vulnerabilities could allow an attacker to
    access internal services or to launch attacks from your web server.
  metadata:
    category: security
    cwe: CWE-918
    shortDescription: Server-Side Request Forgery (SSRF)
    primary_identifier: find_sec_bugs.SCALA_PLAY_SSRF
    secondary_identifiers:
    - name: Find Security Bugs-SCALA_PLAY_SSRF
      type: find_sec_bugs_type
      value: SCALA_PLAY_SSRF
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs_scala.SCALA_PLAY_SSRF-1
    shortlink: https://sg.run/JY3o
    semgrep.dev:
      rule:
        rule_id: x8UrW1
        version_id: l4T495o
        url: https://semgrep.dev/playground/r/l4T495o/gitlab.find_sec_bugs_scala.SCALA_PLAY_SSRF-1
        origin: community
  patterns:
  - pattern-not-inside: |
      object $CLAZZ {
        ...
        $ARG = ...
        ...
      }
  - pattern-not-inside: |
      class $CLAZZ {
        ...
        $ARG = ...
        ...
      }
  - pattern-either:
    - patterns:
      - pattern-inside: |
          import play.api.libs.ws._
          ...
      - pattern-not: ($W:WSClient).url("...")
      - pattern-not: ($W:WSClient).url("..." + "...")
      - pattern: "($W:WSClient).url(<...$ARG...>)"
    - patterns:
      - pattern: "($W:play.api.libs.ws.WSClient).url(<...$ARG...>)"
      - pattern-not: ($W:play.api.libs.ws.WSClient).url("...")
      - pattern-not: ($W:play.api.libs.ws.WSClient).url("..." + "...")
  severity: ERROR
- id: gitlab.find_sec_bugs_scala.SCALA_SENSITIVE_DATA_EXPOSURE-1
  languages:
  - scala
  message: |
    Applications can unintentionally leak information about their configuration, internal
    workings, or violate privacy through a variety of application problems. Pages that provide
    different responses based on the validity of the data can lead to Information Leakage;
    specifically when data deemed confidential is being revealed as a result of the web
    application's design.
  metadata:
    category: security
    cwe: CWE-200
    shortDescription: Information Exposure
    technology:
    - scala
    - play
    primary_identifier: find_sec_bugs.SCALA_SENSITIVE_DATA_EXPOSURE
    secondary_identifiers:
    - name: Find Security Bugs-SCALA_SENSITIVE_DATA_EXPOSURE
      type: find_sec_bugs_type
      value: SCALA_SENSITIVE_DATA_EXPOSURE
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs_scala.SCALA_SENSITIVE_DATA_EXPOSURE-1
    shortlink: https://sg.run/qpr1
    semgrep.dev:
      rule:
        rule_id: 8GUlEw
        version_id: 9lTd1zG
        url: https://semgrep.dev/playground/r/9lTd1zG/gitlab.find_sec_bugs_scala.SCALA_SENSITIVE_DATA_EXPOSURE-1
        origin: community
  patterns:
  - pattern-inside: |
      def $FUNC(..., $ARG: String, ...) = $TYPE {
        ...
      }
  - pattern-inside: |
      $VAL = ($C: play.api.Configuration).underlying.getString($ARG)
      ...
  - pattern: Ok(<...$VAL...>)
  severity: WARNING
- id: gitlab.find_sec_bugs_scala.SCALA_XSS_MVC_API-1
  languages:
  - scala
  message: 'Disabling HTML escaping put the application at risk for Cross-Site Scripting
    (XSS).

    '
  metadata:
    category: security
    cwe: CWE-79
    shortDescription: Improper Neutralization of Input During Web Page Generation
      ('Cross-site Scripting')
    primary_identifier: find_sec_bugs.SCALA_XSS_MVC_API
    secondary_identifiers:
    - name: Find Security Bugs-SCALA_XSS_MVC_API
      type: find_sec_bugs_type
      value: SCALA_XSS_MVC_API
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs_scala.SCALA_XSS_MVC_API-1
    shortlink: https://sg.run/pzl3
    semgrep.dev:
      rule:
        rule_id: JDURPW
        version_id: w8T9J37
        url: https://semgrep.dev/playground/r/w8T9J37/gitlab.find_sec_bugs_scala.SCALA_XSS_MVC_API-1
        origin: community
  mode: taint
  pattern-sanitizers:
  - pattern: org.owasp.encoder.Encode.forHtml(...)
  pattern-sinks:
  - pattern: Ok(...)
  pattern-sources:
  - patterns:
    - pattern-inside: |
        def $FUNC(..., $ARG: String, ...) = Action {
          ...
        }
    - focus-metavariable: "$ARG"
  severity: WARNING
- id: gitlab.find_sec_bugs_scala.SERVLET_PARAMETER-1.SERVLET_CONTENT_TYPE-1.SERVLET_SERVER_NAME-1.SERVLET_SESSION_ID-1.SERVLET_QUERY_STRING-1.SERVLET_HEADER-1.SERVLET_HEADER_REFERER-1.SERVLET_HEADER_USER_AGENT-1
  languages:
  - scala
  message: |
    The Servlet can read GET and POST parameters from various methods. The
    value obtained should be considered unsafe."
  metadata:
    category: security
    cwe: CWE-20
    shortDescription: Improper Input Validation
    primary_identifier: find_sec_bugs.SERVLET_PARAMETER-1.SERVLET_CONTENT_TYPE-1.SERVLET_SERVER_NAME-1.SERVLET_SESSION_ID-1.SERVLET_QUERY_STRING-1.SERVLET_HEADER-1.SERVLET_HEADER_REFERER-1.SERVLET_HEADER_USER_AGENT-1
    secondary_identifiers:
    - name: Find Security Bugs-SERVLET_PARAMETER
      type: find_sec_bugs_type
      value: SERVLET_PARAMETER
    - name: Find Security Bugs-SERVLET_CONTENT_TYPE
      type: find_sec_bugs_type
      value: SERVLET_CONTENT_TYPE
    - name: Find Security Bugs-SERVLET_SERVER_NAME
      type: find_sec_bugs_type
      value: SERVLET_SERVER_NAME
    - name: Find Security Bugs-SERVLET_SESSION_ID
      type: find_sec_bugs_type
      value: SERVLET_SESSION_ID
    - name: Find Security Bugs-SERVLET_QUERY_STRING
      type: find_sec_bugs_type
      value: SERVLET_QUERY_STRING
    - name: Find Security Bugs-SERVLET_HEADER
      type: find_sec_bugs_type
      value: SERVLET_HEADER
    - name: Find Security Bugs-SERVLET_HEADER_REFERER
      type: find_sec_bugs_type
      value: SERVLET_HEADER_REFERER
    - name: Find Security Bugs-SERVLET_HEADER_USER_AGENT
      type: find_sec_bugs_type
      value: SERVLET_HEADER_USER_AGENT
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs_scala.SERVLET_PARAMETER-1.SERVLET_CONTENT_TYPE-1.SERVLET_SERVER_NAME-1.SERVLET_SESSION_ID-1.SERVLET_QUERY_STRING-1.SERVLET_HEADER-1.SERVLET_HEADER_REFERER-1.SERVLET_HEADER_USER_AGENT-1
    shortlink: https://sg.run/XkBK
    semgrep.dev:
      rule:
        rule_id: ReUxg8
        version_id: e1T086Y
        url: https://semgrep.dev/playground/r/e1T086Y/gitlab.find_sec_bugs_scala.SERVLET_PARAMETER-1.SERVLET_CONTENT_TYPE-1.SERVLET_SERVER_NAME-1.SERVLET_SESSION_ID-1.SERVLET_QUERY_STRING-1.SERVLET_HEADER-1.SERVLET_HEADER_REFERER-1.SERVLET_HEADER_USER_AGENT-1
        origin: community
  mode: taint
  pattern-sanitizers:
  - pattern: Encode.forHtml(...)
  - pattern: org.owasp.esapi.Encoder.encodeForSQL(...)
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern: "... + $PAR\n"
      - pattern: "... + $PAR + ...\n"
      - pattern: "$PAR + ...\n"
    - pattern: "$PAR"
  pattern-sources:
  - pattern-either:
    - pattern: "($REQ: HttpServletRequest).getContentType"
    - pattern: "($REQ: HttpServletRequest).getServerName"
    - pattern: "($REQ: HttpServletRequest).getRequestedSessionId"
    - pattern: "($REQ: HttpServletRequest).getParameterValues(...)"
    - pattern: "($REQ: HttpServletRequest).getParameterMap"
    - pattern: "($REQ: HttpServletRequest).getParameterNames"
    - pattern: "($REQ: HttpServletRequest).getParameter(...)"
    - patterns:
      - pattern-inside: "($REQ: HttpServletRequest).getSession\n"
      - pattern: $SESS.getAttribute("...")
    - pattern: '($REQ: HttpServletRequest).getSession.getAttribute("...")

        '
  severity: WARNING
- id: gitlab.find_sec_bugs_scala.SMTP_HEADER_INJECTION-1
  languages:
  - scala
  message: |
    Simple Mail Transfer Protocol (SMTP) is a the text based protocol used for
    email delivery. Like with HTTP, headers are separate by new line separator. If
    kuser input is place in a header line, the application should remove or replace
    new line characters (CR / LF). You should use a safe wrapper such as Apache
    Common Email and Simple Java Mail which filter special characters that can lead
    to header injection.
  metadata:
    category: security
    cwe: CWE-77
    shortDescription: Improper Neutralization of Special Elements used in a Command
    primary_identifier: find_sec_bugs.SMTP_HEADER_INJECTION
    secondary_identifiers:
    - name: Find Security Bugs-SMTP_HEADER_INJECTION
      type: find_sec_bugs_type
      value: SMTP_HEADER_INJECTION
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs_scala.SMTP_HEADER_INJECTION-1
    shortlink: https://sg.run/PXpN
    semgrep.dev:
      rule:
        rule_id: wdUb84
        version_id: qkT2jNv
        url: https://semgrep.dev/playground/r/qkT2jNv/gitlab.find_sec_bugs_scala.SMTP_HEADER_INJECTION-1
        origin: community
  patterns:
  - pattern-either:
    - patterns:
      - pattern-inside: |
          $M = new MimeMessage(...);
          ...
      - pattern: "$M.setSubject($ARG);"
      - pattern-not: $M.setSubject("...")
    - patterns:
      - pattern-inside: |
          $M = new MimeMessage(...);
          ...
      - pattern: "$M.addHeader($ARG1, $ARG2)"
      - pattern-not: $M.addHeader("...", "...")
    - patterns:
      - pattern-inside: |
          $M = new MimeMessage(...);
          ...
      - pattern: "$M.setDescription($ARG)"
      - pattern-not: $M.setDescription("...")
    - patterns:
      - pattern-inside: |
          $M = new MimeMessage(...);
          ...
      - pattern: "$M.setDisposition($ARG)"
      - pattern-not: $M.setDisposition("...")
  severity: ERROR
- id: gitlab.find_sec_bugs_scala.SQL_INJECTION_SPRING_JDBC-1.SQL_INJECTION_JPA-1.SQL_INJECTION_JDO-1.SQL_INJECTION_JDBC-1.SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE-1.SCALA_SQL_INJECTION_SLICK-1
  languages:
  - scala
  message: |
    The input values included in SQL queries need to be passed in safely. Bind
    variables in prepared statements can be used to easily mitigate the risk of
    SQL injection.
  metadata:
    category: security
    cwe: CWE-89
    owasp: A1:2017-Injection
    shortDescription: Improper Neutralization of Special Elements used in an SQL Command
      ('SQL Injection')
    primary_identifier: find_sec_bugs.SQL_INJECTION_SPRING_JDBC-1.SQL_INJECTION_JPA-1.SQL_INJECTION_JDO-1.SQL_INJECTION_JDBC-1.SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE-1.SCALA_SQL_INJECTION_SLICK-1
    secondary_identifiers:
    - name: Find Security Bugs-SQL_INJECTION_SPRING_JDBC
      type: find_sec_bugs_type
      value: SQL_INJECTION_SPRING_JDBC
    - name: Find Security Bugs-SQL_INJECTION_JPA
      type: find_sec_bugs_type
      value: SQL_INJECTION_JPA
    - name: Find Security Bugs-SQL_INJECTION_JDO
      type: find_sec_bugs_type
      value: SQL_INJECTION_JDO
    - name: Find Security Bugs-SQL_INJECTION_JDBC
      type: find_sec_bugs_type
      value: SQL_INJECTION_JDBC
    - name: Find Security Bugs-SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE
      type: find_sec_bugs_type
      value: SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE
    - name: Find Security Bugs-SCALA_SQL_INJECTION_SLICK
      type: find_sec_bugs_type
      value: SCALA_SQL_INJECTION_SLICK
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs_scala.SQL_INJECTION_SPRING_JDBC-1.SQL_INJECTION_JPA-1.SQL_INJECTION_JDO-1.SQL_INJECTION_JDBC-1.SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE-1.SCALA_SQL_INJECTION_SLICK-1
    shortlink: https://sg.run/4Nyl
    semgrep.dev:
      rule:
        rule_id: oqU1z2
        version_id: qkT2jN1
        url: https://semgrep.dev/playground/r/qkT2jN1/gitlab.find_sec_bugs_scala.SQL_INJECTION_SPRING_JDBC-1.SQL_INJECTION_JPA-1.SQL_INJECTION_JDO-1.SQL_INJECTION_JDBC-1.SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE-1.SCALA_SQL_INJECTION_SLICK-1
        origin: community
  patterns:
  - pattern-not-inside: |
      $ARG = ...
      ...
  - pattern-not-inside: |
      object $CLAZZ {
        ...
        $ARG = ...
        ...
      }
  - pattern-not-inside: |
      class $CLAZZ {
        ...
        $ARG = ...
        ...
      }
  - pattern-either:
    - patterns:
      - pattern: "($PM:javax.jdo.PersistenceManager).newQuery(<...$ARG...>)"
      - pattern-not: ($PM:javax.jdo.PersistenceManager).newQuery("...")
    - patterns:
      - pattern: "($PM:javax.jdo.PersistenceManager).newQuery(..., <...$ARG...>)"
      - pattern-not: ($PM:javax.jdo.PersistenceManager).newQuery(..., "...")
    - patterns:
      - pattern: "($Q: javax.jdo.Query).setFilter(<...$ARG...>)"
      - pattern-not: '($Q: javax.jdo.Query).setFilter("...")'
    - patterns:
      - pattern: "($Q: javax.jdo.Query).setGrouping(<...$ARG...>)"
      - pattern-not: '($Q: javax.jdo.Query).setGrouping("...")'
    - patterns:
      - pattern: "($Q: javax.jdo.Query).setGrouping(<...$ARG...>)"
      - pattern-not: '($Q: javax.jdo.Query).setGrouping("...")'
    - patterns:
      - pattern: "($H: org.hibernate.criterion.Restrictions).sqlRestriction(<...$ARG...>,
          ...)"
      - pattern-not: '($H: org.hibernate.criterion.Restrictions).sqlRestriction("...",
          ...)'
    - patterns:
      - pattern: "($S: org.hibernate.Session).createQuery(<...$ARG...>, ...)"
      - pattern-not: '($S: org.hibernate.Session).createQuery("...", ...)'
    - patterns:
      - pattern: "($S: org.hibernate.Session).createSQLQuery(<...$ARG...>, ...)"
      - pattern-not: '($S: org.hibernate.Session).createSQLQuery("...", ...)'
    - patterns:
      - pattern: "($S: java.sql.Statement).executeQuery(<...$ARG...>, ...)"
      - pattern-not: '($S: java.sql.Statement).createSQLQuery("...", ...)'
    - patterns:
      - pattern: "($S: java.sql.Statement).execute(<...$ARG...>, ...)"
      - pattern-not: '($S: java.sql.Statement).execute("...", ...)'
    - patterns:
      - pattern: "($S: java.sql.Statement).executeUpdate(<...$ARG...>, ...)"
      - pattern-not: '($S: java.sql.Statement).executeUpdate("...", ...)'
    - patterns:
      - pattern: "($S: java.sql.Statement).executeLargeUpdate(<...$ARG...>, ...)"
      - pattern-not: '($S: java.sql.Statement).executeLargeUpdate("...", ...)'
    - patterns:
      - pattern: "($S: java.sql.Statement).addBatch(<...$ARG...>, ...)"
      - pattern-not: '($S: java.sql.Statement).addBatch("...", ...)'
    - patterns:
      - pattern: "($S: java.sql.PreparedStatement).executeQuery(<...$ARG...>, ...)"
      - pattern-not: '($S: java.sql.PreparedStatement).executeQuery("...", ...)'
    - patterns:
      - pattern: "($S: java.sql.PreparedStatement).execute(<...$ARG...>, ...)"
      - pattern-not: '($S: java.sql.PreparedStatement).execute("...", ...)'
    - patterns:
      - pattern: "($S: java.sql.PreparedStatement).executeUpdate(<...$ARG...>, ...)"
      - pattern-not: '($S: java.sql.PreparedStatement).executeUpdate("...", ...)'
    - patterns:
      - pattern: "($S: java.sql.PreparedStatement).executeLargeUpdate(<...$ARG...>,
          ...)"
      - pattern-not: '($S: java.sql.PreparedStatement).executeLargeUpdate("...", ...)'
    - patterns:
      - pattern: "($S: java.sql.PreparedStatement).addBatch(<...$ARG...>, ...)"
      - pattern-not: '($S: java.sql.PreparedStatement).addBatch("...", ...)'
    - patterns:
      - pattern: "($S: java.sql.Connection).prepareCall(<...$ARG...>, ...)"
      - pattern-not: '($S: java.sql.Connection).prepareCall("...", ...)'
    - patterns:
      - pattern: "($S: java.sql.Connection).prepareStatement(<...$ARG...>, ...)"
      - pattern-not: '($S: java.sql.Connection).prepareStatement("...", ...)'
    - patterns:
      - pattern: "($S: java.sql.Connection).nativeSQL(<...$ARG...>, ...)"
      - pattern-not: '($S: java.sql.Connection).nativeSQL("...", ...)'
    - patterns:
      - pattern: new org.springframework.jdbc.core.PreparedStatementCreatorFactory(<...$ARG...>,
          ...)
      - pattern-not: new org.springframework.jdbc.core.PreparedStatementCreatorFactory("...",
          ...)
    - patterns:
      - pattern: "(org.springframework.jdbc.core.PreparedStatementCreatorFactory $F).newPreparedStatementCreator(<...$ARG...>,
          ...)"
      - pattern-not: (org.springframework.jdbc.core.PreparedStatementCreatorFactory
          $F).newPreparedStatementCreator("...", ...)
    - patterns:
      - pattern: "($O: org.springframework.jdbc.core.JdbcOperations).batchUpdate(<...$ARG...>,
          ...)"
      - pattern-not: '($O: org.springframework.jdbc.core.JdbcOperations).batchUpdate("...",
          ...)'
    - patterns:
      - pattern: "($O: org.springframework.jdbc.core.JdbcOperations).execute(<...$ARG...>,
          ...)"
      - pattern-not: '($O: org.springframework.jdbc.core.JdbcOperations).execute("...",
          ...)'
    - patterns:
      - pattern: "($O: org.springframework.jdbc.core.JdbcOperations).query(<...$ARG...>,
          ...)"
      - pattern-not: '($O: org.springframework.jdbc.core.JdbcOperations).query("...",
          ...)'
    - patterns:
      - pattern: "($O: org.springframework.jdbc.core.JdbcOperations).queryForList(<...$ARG...>,
          ...)"
      - pattern-not: '($O: org.springframework.jdbc.core.JdbcOperations).queryForList("...",
          ...)'
    - patterns:
      - pattern: "($O: org.springframework.jdbc.core.JdbcOperations).queryForMap(<...$ARG...>,
          ...)"
      - pattern-not: '($O: org.springframework.jdbc.core.JdbcOperations).queryForMap("...",
          ...)'
    - patterns:
      - pattern: "($O: org.springframework.jdbc.core.JdbcOperations).queryForObject(<...$ARG...>,
          ...)"
      - pattern-not: '($O: org.springframework.jdbc.core.JdbcOperations).queryForObject("...",
          ...)'
    - patterns:
      - pattern: "($O: org.springframework.jdbc.core.JdbcOperations).queryForObject(<...$ARG...>,
          ...)"
      - pattern-not: '($O: org.springframework.jdbc.core.JdbcOperations).queryForObject("...",
          ...)'
    - patterns:
      - pattern: "($O: org.springframework.jdbc.core.JdbcOperations).queryForRowSet(<...$ARG...>,
          ...)"
      - pattern-not: '($O: org.springframework.jdbc.core.JdbcOperations).queryForRowSet("...",
          ...)'
    - patterns:
      - pattern: "($O: org.springframework.jdbc.core.JdbcOperations).queryForInt(<...$ARG...>,
          ...)"
      - pattern-not: '($O: org.springframework.jdbc.core.JdbcOperations).queryForInt("...",
          ...)'
    - patterns:
      - pattern: "($O: org.springframework.jdbc.core.JdbcOperations).queryForLong(<...$ARG...>,
          ...)"
      - pattern-not: '($O: org.springframework.jdbc.core.JdbcOperations).queryForLong("...",
          ...)'
    - patterns:
      - pattern: "($O: org.springframework.jdbc.core.JdbcOperations).udpate(<...$ARG...>,
          ...)"
      - pattern-not: '($O: org.springframework.jdbc.core.JdbcOperations).udpate("...",
          ...)'
    - patterns:
      - pattern: "($O: org.springframework.jdbc.core.JdbcTemplate).batchUpdate(<...$ARG...>,
          ...)"
      - pattern-not: '($O: org.springframework.jdbc.core.JdbcTemplate).batchUpdate("...",
          ...)'
    - patterns:
      - pattern: "($O: org.springframework.jdbc.core.JdbcTemplate).execute(<...$ARG...>,
          ...)"
      - pattern-not: '($O: org.springframework.jdbc.core.JdbcTemplate).execute("...",
          ...)'
    - patterns:
      - pattern: "($O: org.springframework.jdbc.core.JdbcTemplate).query(<...$ARG...>,
          ...)"
      - pattern-not: '($O: org.springframework.jdbc.core.JdbcTemplate).query("...",
          ...)'
    - patterns:
      - pattern: "($O: org.springframework.jdbc.core.JdbcTemplate).queryForList(<...$ARG...>,
          ...)"
      - pattern-not: '($O: org.springframework.jdbc.core.JdbcTemplate).queryForList("...",
          ...)'
    - patterns:
      - pattern: "($O: org.springframework.jdbc.core.JdbcTemplate).queryForMap(<...$ARG...>,
          ...)"
      - pattern-not: '($O: org.springframework.jdbc.core.JdbcTemplate).queryForMap("...",
          ...)'
    - patterns:
      - pattern: "($O: org.springframework.jdbc.core.JdbcTemplate).queryForObject(<...$ARG...>,
          ...)"
      - pattern-not: '($O: org.springframework.jdbc.core.JdbcTemplate).queryForObject("...",
          ...)'
    - patterns:
      - pattern: "($O: org.springframework.jdbc.core.JdbcTemplate).queryForRowSet(<...$ARG...>,
          ...)"
      - pattern-not: '($O: org.springframework.jdbc.core.JdbcTemplate).queryForRowSet("...",
          ...)'
    - patterns:
      - pattern: "($O: org.springframework.jdbc.core.JdbcTemplate).queryForInt(<...$ARG...>,
          ...)"
      - pattern-not: '($O: org.springframework.jdbc.core.JdbcTemplate).queryForInt("...",
          ...)'
    - patterns:
      - pattern: "($O: org.springframework.jdbc.core.JdbcTemplate).queryForLong(<...$ARG...>,
          ...)"
      - pattern-not: '($O: org.springframework.jdbc.core.JdbcTemplate).queryForLong("...",
          ...)'
    - patterns:
      - pattern: "($O: org.springframework.jdbc.core.JdbcTemplate).update(<...$ARG...>,
          ...)"
      - pattern-not: '($O: org.springframework.jdbc.core.JdbcTemplate).update("...",
          ...)'
    - patterns:
      - pattern: "($O: io.vertx.sqlclient.SqlClient).query(<...$ARG...>, ...)"
      - pattern-not: '($O: io.vertx.sqlclient.SqlClient).query("...", ...)'
    - patterns:
      - pattern: "($O: io.vertx.sqlclient.SqlClient).preparedQuery(<...$ARG...>, ...)"
      - pattern-not: '($O: io.vertx.sqlclient.SqlClient).preparedQuery("...", ...)'
    - patterns:
      - pattern: "($O: io.vertx.sqlclient.SqlConnection).prepare(<...$ARG...>, ...)"
      - pattern-not: '($O: io.vertx.sqlclient.SqlConnection).prepare("...", ...)'
    - patterns:
      - pattern: "($O: org.apache.turbine.om.peer.BasePeer).executeQuery(<...$ARG...>,
          ...)"
      - pattern-not: '($O: org.apache.turbine.om.peer.BasePeer).executeQuery("...",
          ...)'
    - patterns:
      - pattern: "($O: org.apache.torque.util.BasePeer).executeQuery(<...$ARG...>,
          ...)"
      - pattern-not: '($O: org.apache.torque.util.BasePeer).executeQuery("...", ...)'
    - patterns:
      - pattern: "($O: javax.persistence.EntityManager).createQuery(<...$ARG...>,
          ...)"
      - pattern-not: '($O: javax.persistence.EntityManager).createQuery("...", ...)'
    - patterns:
      - pattern: "($O: javax.persistence.EntityManager).createNativeQuery(<...$ARG...>,
          ...)"
      - pattern-not: '($O: javax.persistence.EntityManager).createNativeQuery("...",
          ...)'
    - patterns:
      - pattern: anorm.SQL(<...$ARG...>)
      - pattern-not: anorm.SQL("...")
    - patterns:
      - pattern-inside: |
          import anorm._
          ...
      - pattern: SQL(<...$ARG...>)
      - pattern-not: SQL("...")
  severity: ERROR
- id: gitlab.find_sec_bugs_scala.SSL_CONTEXT-1
  languages:
  - scala
  message: |
    A HostnameVerifier that accept any host are often use because of certificate
    reuse on many hosts. As a consequence, this is vulnerable to Man-in-the-middleattacks
    attacks since the client will trust any certificate.
  metadata:
    category: security
    cwe: CWE-295
    shortDescription: Improper Certificate Validation
    primary_identifier: find_sec_bugs.SSL_CONTEXT
    secondary_identifiers:
    - name: Find Security Bugs-SSL_CONTEXT
      type: find_sec_bugs_type
      value: SSL_CONTEXT
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs_scala.SSL_CONTEXT-1
    shortlink: https://sg.run/2rx0
    semgrep.dev:
      rule:
        rule_id: GdUX7n
        version_id: O9TN3Pr
        url: https://semgrep.dev/playground/r/O9TN3Pr/gitlab.find_sec_bugs_scala.SSL_CONTEXT-1
        origin: community
  patterns:
  - pattern-either:
    - pattern: new org.apache.http.impl.client.DefaultHttpClient()
    - pattern: javax.net.ssl.SSLContext.getInstance("SSL")
    - patterns:
      - pattern-inside: |
          import javax.net.ssl._
          ...
      - pattern: SSLContext.getInstance("SSL")
  severity: WARNING
- id: gitlab.find_sec_bugs_scala.STRUTS_FORM_VALIDATION-1
  languages:
  - scala
  message: |
    Form inputs should have minimal input validation. Preventive validation helps provide defense
    in depth against a variety of risks.
  metadata:
    category: security
    cwe: CWE-20
    shortDescription: Improper Input Validation
    primary_identifier: find_sec_bugs.STRUTS_FORM_VALIDATION
    secondary_identifiers:
    - name: Find Security Bugs-STRUTS_FORM_VALIDATION
      type: find_sec_bugs_type
      value: STRUTS_FORM_VALIDATION
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs_scala.STRUTS_FORM_VALIDATION-1
    shortlink: https://sg.run/kqX7
    semgrep.dev:
      rule:
        rule_id: lBUD9R
        version_id: 8KTQjdD
        url: https://semgrep.dev/playground/r/8KTQjdD/gitlab.find_sec_bugs_scala.STRUTS_FORM_VALIDATION-1
        origin: community
  patterns:
  - pattern-inside: |
      class $CLASS extends $SC {
        ...
      }
  - metavariable-regex:
      metavariable: "$SC"
      regex: "(ActionForm|ValidatorForm)"
  - pattern-not: public void validate() { ... }
  severity: WARNING
- id: gitlab.find_sec_bugs_scala.TDES_USAGE-1
  languages:
  - scala
  message: |
    Triple DES (also known as 3DES or DESede) is considered strong ciphers for modern
    applications. NIST recommends the usage of AES block ciphers instead of 3DES.
  metadata:
    category: security
    cwe: CWE-326
    shortDescription: Inadequate Encryption Strength
    technology:
    - scala
    primary_identifier: find_sec_bugs.TDES_USAGE
    secondary_identifiers:
    - name: Find Security Bugs-TDES_USAGE
      type: find_sec_bugs_type
      value: TDES_USAGE
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs_scala.TDES_USAGE-1
    shortlink: https://sg.run/DDoY
    semgrep.dev:
      rule:
        rule_id: EwUW2e
        version_id: X0TQ8vL
        url: https://semgrep.dev/playground/r/X0TQ8vL/gitlab.find_sec_bugs_scala.TDES_USAGE-1
        origin: community
  patterns:
  - pattern-inside: javax.crypto.Cipher.getInstance("$ALG")
  - metavariable-regex:
      metavariable: "$ALG"
      regex: "^(DESede)/.*"
  severity: WARNING
- id: gitlab.find_sec_bugs_scala.TEMPLATE_INJECTION_PEBBLE-1.TEMPLATE_INJECTION_FREEMARKER-1.TEMPLATE_INJECTION_VELOCITY-1
  languages:
  - scala
  message: |
    A malicious user in control of a template can run malicious code on the
    server-side. Velocity templates should be seen as scripts.
  metadata:
    category: security
    cwe: CWE-94
    shortDescription: Improper Control of Generation of Code ('Code Injection')
    primary_identifier: find_sec_bugs.TEMPLATE_INJECTION_PEBBLE-1.TEMPLATE_INJECTION_FREEMARKER-1.TEMPLATE_INJECTION_VELOCITY-1
    secondary_identifiers:
    - name: Find Security Bugs-TEMPLATE_INJECTION_PEBBLE
      type: find_sec_bugs_type
      value: TEMPLATE_INJECTION_PEBBLE
    - name: Find Security Bugs-TEMPLATE_INJECTION_FREEMARKER
      type: find_sec_bugs_type
      value: TEMPLATE_INJECTION_FREEMARKER
    - name: Find Security Bugs-TEMPLATE_INJECTION_VELOCITY
      type: find_sec_bugs_type
      value: TEMPLATE_INJECTION_VELOCITY
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs_scala.TEMPLATE_INJECTION_PEBBLE-1.TEMPLATE_INJECTION_FREEMARKER-1.TEMPLATE_INJECTION_VELOCITY-1
    shortlink: https://sg.run/WNgy
    semgrep.dev:
      rule:
        rule_id: EwUW4O
        version_id: X0TQ8Pe
        url: https://semgrep.dev/playground/r/X0TQ8Pe/gitlab.find_sec_bugs_scala.TEMPLATE_INJECTION_PEBBLE-1.TEMPLATE_INJECTION_FREEMARKER-1.TEMPLATE_INJECTION_VELOCITY-1
        origin: community
  pattern-either:
  - patterns:
    - pattern: org.apache.velocity.app.Velocity.evaluate(..., $VAR)
    - pattern-not: org.apache.velocity.app.Velocity.evaluate(..., "...")
  - patterns:
    - pattern-not-inside: |
        $C = ($CFG: freemarker.template.Configuration).getTemplate("...");
        ...
    - pattern-inside: |
        $C = ($CFG: freemarker.template.Configuration).getTemplate($IN);
        ...
    - pattern: "$C.process(...)"
  - patterns:
    - pattern-inside: |
        import com.mitchellbosecke.pebble.PebbleEngine;
        ...
    - pattern-inside: |
        $C = $T.getTemplate($IN);
        ...
    - pattern-not-inside: |
        $C = $T.getTemplate("...");
        ...
    - pattern: "$C.evaluate(...)"
  severity: ERROR
- id: gitlab.find_sec_bugs_scala.TRUST_BOUNDARY_VIOLATION-1
  languages:
  - scala
  message: |
    A trust boundary can be thought of as line drawn through a program. On one side
    of the line, data is untrusted. On the other side of the line, data is assumed
    to be trustworthy. The purpose of validation logic is to allow data to safely
    cross the trust boundary - to move from untrusted to trusted. A trust boundary
    violation occurs when a program blurs the line between what is trusted and what
    is untrusted. By combining trusted and untrusted data in the same data
    structure, it becomes easier for programmers to mistakenly trust unvalidated
    data.
  metadata:
    category: security
    cwe: CWE-501
    shortDescription: Trust Boundary Violation
    primary_identifier: find_sec_bugs.TRUST_BOUNDARY_VIOLATION
    secondary_identifiers:
    - name: Find Security Bugs-TRUST_BOUNDARY_VIOLATION
      type: find_sec_bugs_type
      value: TRUST_BOUNDARY_VIOLATION
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs_scala.TRUST_BOUNDARY_VIOLATION-1
    shortlink: https://sg.run/5kQA
    semgrep.dev:
      rule:
        rule_id: eqUK89
        version_id: 6xTvjL6
        url: https://semgrep.dev/playground/r/6xTvjL6/gitlab.find_sec_bugs_scala.TRUST_BOUNDARY_VIOLATION-1
        origin: community
  patterns:
  - pattern-either:
    - patterns:
      - pattern: "($H: HttpServletRequest). ... .setAttribute($ARG1, $ARG2)"
      - pattern-not: '($H: HttpServletRequest). ... .setAttribute("...", "...")'
    - patterns:
      - pattern: "($H: HttpServletRequest). ... .putValue($ARG1, $ARG2)"
      - pattern-not: '($H: HttpServletRequest). ... .putValue("...", "...")'
  severity: WARNING
- id: gitlab.find_sec_bugs_scala.UNVALIDATED_REDIRECT-1.URL_REWRITING-1
  languages:
  - scala
  message: |
    Unvalidated redirects occur when an application redirects a user to a
    destination URL specified by a user supplied parameter that is not validated.
    Such vulnerabilities can be used to facilitate phishing attacks.
  metadata:
    category: security
    cwe: CWE-601
    shortDescription: URL Redirection to Untrusted Site ('Open Redirect')
    primary_identifier: find_sec_bugs.UNVALIDATED_REDIRECT-1.URL_REWRITING-1
    secondary_identifiers:
    - name: Find Security Bugs-UNVALIDATED_REDIRECT
      type: find_sec_bugs_type
      value: UNVALIDATED_REDIRECT
    - name: Find Security Bugs-URL_REWRITING
      type: find_sec_bugs_type
      value: URL_REWRITING
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs_scala.UNVALIDATED_REDIRECT-1.URL_REWRITING-1
    shortlink: https://sg.run/ybdx
    semgrep.dev:
      rule:
        rule_id: WAUno0
        version_id: nWTxz6b
        url: https://semgrep.dev/playground/r/nWTxz6b/gitlab.find_sec_bugs_scala.UNVALIDATED_REDIRECT-1.URL_REWRITING-1
        origin: community
  patterns:
  - pattern-either:
    - patterns:
      - pattern: "($REQ: HttpServletResponse).sendRedirect(...)"
      - pattern-not: '($REQ: HttpServletResponse).sendRedirect("...")'
    - patterns:
      - pattern: "($REQ: HttpServletResponse).addHeader(...)"
      - pattern-not: '($REQ: HttpServletResponse).addHeader("...", "...")'
    - patterns:
      - pattern: "($REQ: HttpServletResponse).encodeURL(...)"
      - pattern-not: '($REQ: HttpServletResponse).encodeURL("...")'
    - patterns:
      - pattern: "($REQ: HttpServletResponse).encodeRedirectUrl(...)"
      - pattern-not: '($REQ: HttpServletResponse).encodeRedirectUrl("...")'
  severity: ERROR
- id: gitlab.find_sec_bugs_scala.URLCONNECTION_SSRF_FD-1
  languages:
  - scala
  message: |
    Server-Side Request Forgery occur when a web server executes a request to a user supplied
    destination parameter that is not validated. Such vulnerabilities could allow an attacker to
    access internal services or to launch attacks from your web server.
  metadata:
    category: security
    cwe: CWE-918
    shortDescription: Server-Side Request Forgery (SSRF)
    primary_identifier: find_sec_bugs.URLCONNECTION_SSRF_FD
    secondary_identifiers:
    - name: Find Security Bugs-URLCONNECTION_SSRF_FD
      type: find_sec_bugs_type
      value: URLCONNECTION_SSRF_FD
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs_scala.URLCONNECTION_SSRF_FD-1
    shortlink: https://sg.run/5k86
    semgrep.dev:
      rule:
        rule_id: OrU7GA
        version_id: BjTXBAr
        url: https://semgrep.dev/playground/r/BjTXBAr/gitlab.find_sec_bugs_scala.URLCONNECTION_SSRF_FD-1
        origin: community
  pattern-either:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          import java.net._
          ...
      - pattern-inside: |
          import java.net.URL
          ...
      - pattern-inside: |
          import java.net.URI
          ...
    - pattern: new $TYPE(...). ... .$FUNC
    - pattern-not: new $TYPE("..."). ... .$FUNC
    - metavariable-pattern:
        metavariable: "$FUNC"
        pattern-either:
        - pattern: connect
        - pattern: GetContent
        - pattern: openConnection
        - pattern: openStream
        - pattern: getContent
    - metavariable-pattern:
        metavariable: "$TYPE"
        pattern-either:
        - pattern: URL
        - pattern: java.net.URL
        - pattern: URI
        - pattern: java.net.URI
  - patterns:
    - pattern-either:
      - pattern-inside: |
          import java.net.*;
          ...
      - pattern-inside: |
          import java.net.InetSocketAddress;
          ...
    - pattern: 'new InetSocketAddress(..., $PORT)

        '
    - pattern-not: 'new InetSocketAddress("...", $PORT)

        '
  severity: ERROR
- id: gitlab.find_sec_bugs_scala.WEAK_FILENAMEUTILS-1
  languages:
  - scala
  message: |
    A file is opened to read its content. The filename comes from an input
    parameter. If an unfiltered parameter is passed to this file API, files from an
    arbitrary filesystem location could be read.
  metadata:
    category: security
    cwe: CWE-22
    shortDescription: Improper Limitation of a Pathname to a Restricted Directory
      ('Path Traversal')
    technology:
    - scala
    primary_identifier: find_sec_bugs.WEAK_FILENAMEUTILS
    secondary_identifiers:
    - name: Find Security Bugs-WEAK_FILENAMEUTILS
      type: find_sec_bugs_type
      value: WEAK_FILENAMEUTILS
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs_scala.WEAK_FILENAMEUTILS-1
    shortlink: https://sg.run/Np4p
    semgrep.dev:
      rule:
        rule_id: qNUwjw
        version_id: LjTqy1Z
        url: https://semgrep.dev/playground/r/LjTqy1Z/gitlab.find_sec_bugs_scala.WEAK_FILENAMEUTILS-1
        origin: community
  pattern-either:
  - patterns:
    - pattern-inside: |
        import org.apache.commons.io.FilenameUtils._
        ...
    - pattern-either:
      - pattern: normalize(...)
      - pattern: getExtension(...)
      - pattern: isExtensions(...)
      - pattern: isExtension(...)
      - pattern: getName(...)
      - pattern: getBaseName(...)
  - patterns:
    - pattern-either:
      - pattern: org.apache.commons.io.FilenameUtils.normalize(...)
      - pattern: org.apache.commons.io.FilenameUtils.getExtension(...)
      - pattern: org.apache.commons.io.FilenameUtils.isExtensions(...)
      - pattern: org.apache.commons.io.FilenameUtils.isExtension(...)
      - pattern: org.apache.commons.io.FilenameUtils.getName(...)
      - pattern: org.apache.commons.io.FilenameUtils.getBaseName(...)
  severity: ERROR
- id: gitlab.find_sec_bugs_scala.WEAK_HOSTNAME_VERIFIER-1.WEAK_TRUST_MANAGER-1
  languages:
  - scala
  message: |
    A HostnameVerifier that accept any host are often use because of certificate
    reuse on many hosts. As a consequence, this is vulnerable to Man-in-the-middle
    attacks since the client will trust any certificate.
  metadata:
    category: security
    cwe: CWE-295
    shortDescription: Improper Certificate Validation
    primary_identifier: find_sec_bugs.WEAK_HOSTNAME_VERIFIER-1.WEAK_TRUST_MANAGER-1
    secondary_identifiers:
    - name: Find Security Bugs-WEAK_HOSTNAME_VERIFIER
      type: find_sec_bugs_type
      value: WEAK_HOSTNAME_VERIFIER
    - name: Find Security Bugs-WEAK_TRUST_MANAGER
      type: find_sec_bugs_type
      value: WEAK_TRUST_MANAGER
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs_scala.WEAK_HOSTNAME_VERIFIER-1.WEAK_TRUST_MANAGER-1
    shortlink: https://sg.run/r2dn
    semgrep.dev:
      rule:
        rule_id: 0oU35P
        version_id: ExTj29l
        url: https://semgrep.dev/playground/r/ExTj29l/gitlab.find_sec_bugs_scala.WEAK_HOSTNAME_VERIFIER-1.WEAK_TRUST_MANAGER-1
        origin: community
  patterns:
  - pattern-either:
    - patterns:
      - pattern-inside: |
          class $V extends HostnameVerifier {
            ...
          }
      - pattern-either:
        - pattern: def verify(...) = true
        - pattern: |
            def verify(...) = {
              return true
            }
    - patterns:
      - pattern-inside: |
          class $V extends X509TrustManager {
            ...
          }
      - pattern-either:
        - pattern: 'def checkClientTrusted(...): Unit = {}'
        - pattern: 'def checkServerTrusted(...): Unit = {}'
        - pattern: def checkClientTrusted(...) = {}
        - pattern: def checkServerTrusted(...) = {}
        - pattern: 'def getAcceptedIssuers(): Array[X509Certificate] = null'
        - pattern: 'def getAcceptedIssuers(): Array[X509Certificate] = {}'
  severity: WARNING
- id: gitlab.find_sec_bugs_scala.WEAK_MESSAGE_DIGEST_MD5-1.WEAK_MESSAGE_DIGEST_SHA1-1
  languages:
  - scala
  message: |
    DES is considered strong ciphers for modern applications. Currently, NIST recommends the usage
    of AES block ciphers instead of DES.
  metadata:
    category: security
    cwe: CWE-326
    shortDescription: Inadequate Encryption Strength
    technology:
    - scala
    primary_identifier: find_sec_bugs.WEAK_MESSAGE_DIGEST_MD5-1.WEAK_MESSAGE_DIGEST_SHA1-1
    secondary_identifiers:
    - name: Find Security Bugs-WEAK_MESSAGE_DIGEST_MD5
      type: find_sec_bugs_type
      value: WEAK_MESSAGE_DIGEST_MD5
    - name: Find Security Bugs-WEAK_MESSAGE_DIGEST_SHA1
      type: find_sec_bugs_type
      value: WEAK_MESSAGE_DIGEST_SHA1
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs_scala.WEAK_MESSAGE_DIGEST_MD5-1.WEAK_MESSAGE_DIGEST_SHA1-1
    shortlink: https://sg.run/pzxg
    semgrep.dev:
      rule:
        rule_id: 5rUGO2
        version_id: xyTKnY9
        url: https://semgrep.dev/playground/r/xyTKnY9/gitlab.find_sec_bugs_scala.WEAK_MESSAGE_DIGEST_MD5-1.WEAK_MESSAGE_DIGEST_SHA1-1
        origin: community
  patterns:
  - pattern-either:
    - pattern: MessageDigest.getInstance("$ALG", ...)
    - pattern: Signature.getInstance("$ALG", ...)
  - metavariable-regex:
      metavariable: "$ALG"
      regex: "(.*(MD5|MD4|MD2|SHA1|SHA-1).*)"
  severity: WARNING
- id: gitlab.find_sec_bugs_scala.WICKET_XSS1-1
  languages:
  - scala
  message: 'Disabling HTML escaping put the application at risk for Cross-Site Scripting
    (XSS).

    '
  metadata:
    category: security
    cwe: CWE-79
    shortDescription: Improper Neutralization of Input During Web Page Generation
      ('Cross-site Scripting')
    primary_identifier: find_sec_bugs.WICKET_XSS1
    secondary_identifiers:
    - name: Find Security Bugs-WICKET_XSS1
      type: find_sec_bugs_type
      value: WICKET_XSS1
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs_scala.WICKET_XSS1-1
    shortlink: https://sg.run/XkLl
    semgrep.dev:
      rule:
        rule_id: GdUX0G
        version_id: O9TN3y7
        url: https://semgrep.dev/playground/r/O9TN3y7/gitlab.find_sec_bugs_scala.WICKET_XSS1-1
        origin: community
  patterns:
  - pattern: "($X: Label).setEscapeModelStrings(false);"
  severity: WARNING
- id: gitlab.find_sec_bugs_scala.XML_DECODER-1
  languages:
  - scala
  message: 'Avoid using XMLDecoder to parse content from an untrusted source.

    '
  metadata:
    category: security
    cwe: CWE-502
    shortDescription: Deserialization of Untrusted Data
    primary_identifier: find_sec_bugs.XML_DECODER
    secondary_identifiers:
    - name: Find Security Bugs-XML_DECODER
      type: find_sec_bugs_type
      value: XML_DECODER
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs_scala.XML_DECODER-1
    shortlink: https://sg.run/6wrw
    semgrep.dev:
      rule:
        rule_id: 3qUwBw
        version_id: bZTbwGp
        url: https://semgrep.dev/playground/r/bZTbwGp/gitlab.find_sec_bugs_scala.XML_DECODER-1
        origin: community
  patterns:
  - pattern-inside: |
      $D = new java.beans.XMLDecoder($IN);
      ...
  - pattern-not-inside: |
      $DX = new java.beans.XMLDecoder("...");
      ...
  - pattern: "$D.readObject"
  severity: WARNING
- id: gitlab.find_sec_bugs_scala.XPATH_INJECTION-1
  languages:
  - scala
  message: |
    The input values included in SQL queries need to be passed in safely. Bind
    variables in prepared statements can be used to easily mitigate the risk of
    SQL injection.
  metadata:
    category: security
    cwe: CWE-611
    shortDescription: Improper Restriction of XML External Entity Reference ('XXE')
    primary_identifier: find_sec_bugs.XPATH_INJECTION
    secondary_identifiers:
    - name: Find Security Bugs-XPATH_INJECTION
      type: find_sec_bugs_type
      value: XPATH_INJECTION
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs_scala.XPATH_INJECTION-1
    shortlink: https://sg.run/zNkz
    semgrep.dev:
      rule:
        rule_id: PeUGky
        version_id: kbTdk71
        url: https://semgrep.dev/playground/r/kbTdk71/gitlab.find_sec_bugs_scala.XPATH_INJECTION-1
        origin: community
  mode: taint
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern-inside: |-
          import javax.xml.xpath._
          ...
      - pattern-inside: |-
          import javax.xml.xpath.XPath
          ...
    - pattern-either:
      - pattern: "$Y.compile(...)"
      - pattern: "$X.evaluate(..., $ARG2)"
  pattern-sources:
  - patterns:
    - pattern-inside: |
        def $FUNC(..., $ARG: $TYPE,...): $RET = {
          ...
        }
    - pattern: "$ARG"
  severity: ERROR
- id: gitlab.find_sec_bugs_scala.XSS_REQUEST_PARAMETER_TO_SERVLET_WRITER-1
  languages:
  - scala
  message: 'Servlet reflected cross site scripting vulnerability

    '
  metadata:
    category: security
    cwe: CWE-79
    shortDescription: Improper Neutralization of Input During Web Page Generation
    technology:
    - scala
    primary_identifier: find_sec_bugs.XSS_REQUEST_PARAMETER_TO_SERVLET_WRITER
    secondary_identifiers:
    - name: Find Security Bugs-XSS_REQUEST_PARAMETER_TO_SERVLET_WRITER
      type: find_sec_bugs_type
      value: XSS_REQUEST_PARAMETER_TO_SERVLET_WRITER
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs_scala.XSS_REQUEST_PARAMETER_TO_SERVLET_WRITER-1
    shortlink: https://sg.run/jKNZ
    semgrep.dev:
      rule:
        rule_id: ReUxPb
        version_id: e1T08xj
        url: https://semgrep.dev/playground/r/e1T08xj/gitlab.find_sec_bugs_scala.XSS_REQUEST_PARAMETER_TO_SERVLET_WRITER-1
        origin: community
  mode: taint
  pattern-sanitizers:
  - pattern: Encode.forHtml(...)
  - pattern: org.owasp.esapi.Encoder.encodeForSQL(...)
  pattern-sinks:
  - patterns:
    - pattern-inside: 'def $FUNC(..., $RES: HttpServletResponse, ...): $TYPE = {...}'
    - pattern-inside: |
        $WRITER = $RES.getWriter
        ...
    - pattern: "$WRITER.write(...)"
  - patterns:
    - pattern-inside: 'def $FUNC(..., $RES: HttpServletResponse, ...): $TYPE = {...}'
    - pattern: "$RES.getWriter.write(...)"
  - patterns:
    - pattern-inside: 'def $FUNC(..., $RES: HttpServletResponse, ...): $TYPE = {...}'
    - pattern: "$RES.getWriter.print(...)"
  pattern-sources:
  - patterns:
    - pattern-inside: 'def $FUNC(..., $REQ: HttpServletRequest, ...): $TYPE = {...}'
    - pattern-either:
      - pattern: "$REQ.getParameter(...)"
      - pattern: "$REQ.getQueryString"
  severity: WARNING
- id: gitlab.find_sec_bugs_scala.XSS_REQUEST_WRAPPER-1
  languages:
  - scala
  message: 'Avoid using custom XSS filtering. Please use standard sanitization functions.

    '
  metadata:
    category: security
    cwe: CWE-79
    shortDescription: Improper Neutralization of Input During Web Page Generation
      ('Cross-site Scripting')
    primary_identifier: find_sec_bugs.XSS_REQUEST_WRAPPER
    secondary_identifiers:
    - name: Find Security Bugs-XSS_REQUEST_WRAPPER
      type: find_sec_bugs_type
      value: XSS_REQUEST_WRAPPER
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs_scala.XSS_REQUEST_WRAPPER-1
    shortlink: https://sg.run/2rbz
    semgrep.dev:
      rule:
        rule_id: 5rUG4X
        version_id: xyTKn4e
        url: https://semgrep.dev/playground/r/xyTKn4e/gitlab.find_sec_bugs_scala.XSS_REQUEST_WRAPPER-1
        origin: community
  patterns:
  - pattern-inside: |
      class $CLASS(...) extends HttpServletRequestWrapper(...) {
      ...
      }
  - pattern: def stripXSS(...) = { ... }
  severity: INFO
- id: gitlab.find_sec_bugs_scala.XSS_SERVLET-1
  languages:
  - scala
  message: |
    A potential XSS was found. It could be used to execute unwanted JavaScript in a
    client's browser.
  metadata:
    category: security
    cwe: CWE-79
    shortDescription: Improper Neutralization of Input During Web Page Generation
      ('Cross-site Scripting')
    primary_identifier: find_sec_bugs.XSS_SERVLET
    secondary_identifiers:
    - name: Find Security Bugs-XSS_SERVLET
      type: find_sec_bugs_type
      value: XSS_SERVLET
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs_scala.XSS_SERVLET-1
    shortlink: https://sg.run/1ynb
    semgrep.dev:
      rule:
        rule_id: AbUlWY
        version_id: vdTYn2R
        url: https://semgrep.dev/playground/r/vdTYn2R/gitlab.find_sec_bugs_scala.XSS_SERVLET-1
        origin: community
  mode: taint
  pattern-sanitizers:
  - patterns:
    - pattern-inside: org.owasp.encoder.Encode.forHtml($TAINTED);
    - pattern: "$TAINTED"
  pattern-sinks:
  - patterns:
    - pattern-inside: 'def $FUNC(..., $RES: HttpServletResponse, ...): $TYPE = {...}'
    - pattern-inside: |
        $WRITER = $RES.getWriter;
        ...
    - pattern: "$WRITER.write($DATA,...);"
    - pattern: "$DATA"
  - patterns:
    - pattern-inside: 'def $FUNC(..., $RES: HttpServletResponse, ...): $TYPE = {...}'
    - pattern: "$RES.getWriter.write($DATA,...);"
    - pattern: "$DATA"
  pattern-sources:
  - patterns:
    - pattern-inside: 'def $FUNC(..., $REQ: HttpServletRequest, ...): $TYPE = {...}'
    - pattern: "$REQ.getParameter(...);"
  severity: WARNING
- id: gitlab.find_sec_bugs_scala.XXE_DOCUMENT-1
  languages:
  - scala
  message: |
    XML External Entity (XXE) attacks can occur when an XML parser supports XML
    entities while processing XML received from an untrusted source.
  metadata:
    category: security
    cwe: CWE-611
    shortDescription: Improper Restriction of XML External Entity Reference ('XXE')
    primary_identifier: find_sec_bugs.XXE_DOCUMENT
    secondary_identifiers:
    - name: Find Security Bugs-XXE_DOCUMENT
      type: find_sec_bugs_type
      value: XXE_DOCUMENT
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs_scala.XXE_DOCUMENT-1
    shortlink: https://sg.run/9eqk
    semgrep.dev:
      rule:
        rule_id: BYULB2
        version_id: d6TrjDZ
        url: https://semgrep.dev/playground/r/d6TrjDZ/gitlab.find_sec_bugs_scala.XXE_DOCUMENT-1
        origin: community
  patterns:
  - pattern-inside: |
      $DF = DocumentBuilderFactory.newInstance
      ...
  - pattern-not-inside: |
      $DF.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true)
      ...
  - pattern-not-inside: |
      $DF.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true)
      ...
  - pattern: "$DB.parse(...)"
  severity: ERROR
- id: gitlab.find_sec_bugs_scala.XXE_DTD_TRANSFORM_FACTORY-1.XXE_XSLT_TRANSFORM_FACTORY-1
  languages:
  - scala
  message: |
    XML External Entity (XXE) attacks can occur when an XML parser supports XML
    entities while processing XML received from an untrusted source.
  metadata:
    category: security
    cwe: CWE-611
    shortDescription: Improper Restriction of XML External Entity Reference ('XXE')
    primary_identifier: find_sec_bugs.XXE_DTD_TRANSFORM_FACTORY-1.XXE_XSLT_TRANSFORM_FACTORY-1
    secondary_identifiers:
    - name: Find Security Bugs-XXE_DTD_TRANSFORM_FACTORY
      type: find_sec_bugs_type
      value: XXE_DTD_TRANSFORM_FACTORY
    - name: Find Security Bugs-XXE_XSLT_TRANSFORM_FACTORY
      type: find_sec_bugs_type
      value: XXE_XSLT_TRANSFORM_FACTORY
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs_scala.XXE_DTD_TRANSFORM_FACTORY-1.XXE_XSLT_TRANSFORM_FACTORY-1
    shortlink: https://sg.run/r2k6
    semgrep.dev:
      rule:
        rule_id: WAUnPW
        version_id: nWTxz76
        url: https://semgrep.dev/playground/r/nWTxz76/gitlab.find_sec_bugs_scala.XXE_DTD_TRANSFORM_FACTORY-1.XXE_XSLT_TRANSFORM_FACTORY-1
        origin: community
  mode: taint
  pattern-sanitizers:
  - pattern: $T.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, "");
  - pattern: $T.setAttribute(XMLConstants.ACCESS_EXTERNAL_SCHEMA, "");
  - pattern: "$T.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);"
  pattern-sinks:
  - pattern: "$T.transform(...)"
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern-inside: |-
          import javax.xml.transform._
          ...
      - pattern-inside: |-
          import javax.xml.transform.Transformer
          ...
    - pattern: "$FACT.newTransformer"
  severity: ERROR
- id: gitlab.find_sec_bugs_scala.XXE_SAXPARSER-1
  languages:
  - scala
  message: |
    XML External Entity (XXE) attacks can occur when an XML parser supports XML
    entities while processing XML received from an untrusted source.
  metadata:
    category: security
    cwe: CWE-611
    shortDescription: Improper Restriction of XML External Entity Reference ('XXE')
    primary_identifier: find_sec_bugs.XXE_SAXPARSER
    secondary_identifiers:
    - name: Find Security Bugs-XXE_SAXPARSER
      type: find_sec_bugs_type
      value: XXE_SAXPARSER
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs_scala.XXE_SAXPARSER-1
    shortlink: https://sg.run/yb68
    semgrep.dev:
      rule:
        rule_id: DbUyKd
        version_id: ZRTQ5wz
        url: https://semgrep.dev/playground/r/ZRTQ5wz/gitlab.find_sec_bugs_scala.XXE_SAXPARSER-1
        origin: community
  patterns:
  - pattern-inside: |
      val $SF = SAXParserFactory.newInstance
      ...
  - pattern-not-inside: |
      $SF.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true)
      ...
  - pattern-not-inside: |
      $SF.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true)
      ...
  - pattern-inside: |
      val $P = $SFP.newSAXParser
      ...
  - pattern: "$P.parse(...);"
  severity: ERROR
- id: gitlab.find_sec_bugs_scala.XXE_XMLREADER-1
  languages:
  - scala
  message: |
    XML External Entity (XXE) attacks can occur when an XML parser supports XML
    entities while processing XML received from an untrusted source.
  metadata:
    category: security
    cwe: CWE-611
    shortDescription: Improper Restriction of XML External Entity Reference ('XXE')
    primary_identifier: find_sec_bugs.XXE_XMLREADER
    secondary_identifiers:
    - name: Find Security Bugs-XXE_XMLREADER
      type: find_sec_bugs_type
      value: XXE_XMLREADER
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs_scala.XXE_XMLREADER-1
    shortlink: https://sg.run/b5rZ
    semgrep.dev:
      rule:
        rule_id: 0oU3Jy
        version_id: ExTj2nn
        url: https://semgrep.dev/playground/r/ExTj2nn/gitlab.find_sec_bugs_scala.XXE_XMLREADER-1
        origin: community
  patterns:
  - pattern-inside: |
      val $R = XMLReaderFactory.createXMLReader
      ...
  - pattern-not-inside: |
      $R.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true)
      ...
  - pattern: "$R.parse(...)"
  severity: ERROR
- id: gitlab.find_sec_bugs_scala.XXE_XMLSTREAMREADER-1
  languages:
  - scala
  message: |
    XML External Entity (XXE) attacks can occur when an XML parser supports XML
    entities while processing XML received from an untrusted source.
  metadata:
    category: security
    cwe: CWE-611
    shortDescription: Improper Restriction of XML External Entity Reference ('XXE')
    primary_identifier: find_sec_bugs.XXE_XMLSTREAMREADER
    secondary_identifiers:
    - name: Find Security Bugs-XXE_XMLSTREAMREADER
      type: find_sec_bugs_type
      value: XXE_XMLSTREAMREADER
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs_scala.XXE_XMLSTREAMREADER-1
    shortlink: https://sg.run/Np8x
    semgrep.dev:
      rule:
        rule_id: KxULYz
        version_id: 7ZTgQO7
        url: https://semgrep.dev/playground/r/7ZTgQO7/gitlab.find_sec_bugs_scala.XXE_XMLSTREAMREADER-1
        origin: community
  patterns:
  - pattern-inside: |
      $SF = XMLInputFactory.newFactory
      ...
  - pattern-not-inside: |
      $SF.setProperty(XMLInputFactory.SUPPORT_DTD, false)
      ...
  - pattern-not-inside: |
      $SF.setProperty(XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, false)
      ...
  - pattern: "$SF.createXMLStreamReader(...)"
  severity: ERROR
- id: gitlab.find_sec_bugs_scala.XXE_XPATH-1
  languages:
  - scala
  message: |
    XML External Entity (XXE) attacks can occur when an XML parser supports XML
    entities while processing XML received from an untrusted source.
  metadata:
    category: security
    cwe: CWE-611
    shortDescription: Improper Restriction of XML External Entity Reference ('XXE')
    primary_identifier: find_sec_bugs.XXE_XPATH
    secondary_identifiers:
    - name: Find Security Bugs-XXE_XPATH
      type: find_sec_bugs_type
      value: XXE_XPATH
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.find_sec_bugs_scala.XXE_XPATH-1
    shortlink: https://sg.run/kqkX
    semgrep.dev:
      rule:
        rule_id: qNUwbj
        version_id: LjTqy06
        url: https://semgrep.dev/playground/r/LjTqy06/gitlab.find_sec_bugs_scala.XXE_XPATH-1
        origin: community
  patterns:
  - pattern-inside: |
      val $DF = DocumentBuilderFactory.newInstance
      ...
  - pattern-not-inside: |
      $DF.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, "")
      ...
  - pattern-not-inside: |
      $DF.setAttribute(XMLConstants.ACCESS_EXTERNAL_SCHEMA, "")
      ...
  - pattern-not-inside: |
      $DF.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true)
      ...
  - pattern-not-inside: |
      $DF.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true)
      ...
  - pattern-inside: |
      $B = $DF.newDocumentBuilder
      ...
  - pattern: "$XPATH.evaluate(...)"
  severity: ERROR
- id: gitlab.security_code_scan.SCS0001-1
  languages:
  - csharp
  patterns:
  - pattern-inside: |
      using System.Diagnostics;
      ...
  - pattern-either:
    - patterns:
      - pattern: Process.Start($ARG)
      - pattern-not: Process.Start("...")
    - pattern: "(Process $PROC).StartInfo.FileName = <...$ARG...>;"
    - pattern: "(Process $PROC).StartInfo.Arguments = <...$ARG...>;"
    - patterns:
      - pattern-inside: |
          $PSINFO = new ProcessStartInfo(...)
          ...
          Process.Start($PSINFO)
      - pattern-either:
        - pattern: "$PSINFO.Arguments = <...$ARG...>;"
        - pattern: "$PSINFO.FileName = <...$ARG...>;"
  message: |
    OS command injection is a critical vulnerability that can lead to a full system
    compromise as it may allow an adversary to pass in arbitrary commands or arguments
    to be executed.

    User input should never be used in constructing commands or command arguments
    to functions which execute OS commands. This includes filenames supplied by
    user uploads or downloads.

    Ensure your application does not:

    - Use user-supplied information in the process name to execute.
    - Use user-supplied information in an OS command execution function which does
    not escape shell meta-characters.
    - Use user-supplied information in arguments to OS commands.

    The application should have a hardcoded set of arguments that are to be passed
    to OS commands. If filenames are being passed to these functions, it is
    recommended that a hash of the filename be used instead, or some other unique
    identifier. It is strongly recommended that a native library that implements
    the same functionality be used instead of using OS system commands, due to the
    risk of unknown attacks against third party commands.

    When specifying the OS command, ensure the application uses the full path
    information, otherwise the OS may attempt to look up which process to execute
    and could be vulnerable to untrusted search path vulnerabilities (CWE-426).

    Example of safely executing an OS command:
    ```
    public void ExecuteCommand(string userFileData) {
        // generate a random filename, do not using user input
        string fileName = "C:\\Temp\\" + Guid.NewGuid();
        File.WriteAllText(fileName, userFileData);

        using (Process process = new Process())
        {
            // hardcode the full process path
            ProcessStartInfo processInfo = new ProcessStartInfo("C:\\App\\FileReader.exe");
            // only pass in trust arguments, and never direct user input.
            processInfo.Arguments = fileName;
            processInfo.UseShellExecute = false;
            process.StartInfo = processInfo;
            process.Start();
        }
    }
    ```

    For more information on OS command injection, see OWASP's guide:
    https://cheatsheetseries.owasp.org/cheatsheets/OS_Command_Injection_Defense_Cheat_Sheet.html
  severity: ERROR
  metadata:
    shortDescription: Improper neutralization of special elements used in an OS command
      ('OS Command Injection')
    category: security
    cwe: CWE-78
    primary_identifier: security_code_scan.SCS0001-1
    secondary_identifiers:
    - name: SCS0001
      type: security_code_scan_rule_id
      value: SCS0001
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.security_code_scan.SCS0001-1
    shortlink: https://sg.run/WbD2
    semgrep.dev:
      rule:
        rule_id: 3qU2L1
        version_id: pZT16B4
        url: https://semgrep.dev/playground/r/pZT16B4/gitlab.security_code_scan.SCS0001-1
        origin: community
- id: gitlab.security_code_scan.SCS0002-1
  languages:
  - csharp
  patterns:
  - pattern-either:
    - patterns:
      - metavariable-regex:
          metavariable: "$FUNC"
          regex: "^(SqlQuery|ExecuteSqlCommand|ExecuteSqlCommandAsync|ExecuteSqlRaw|ExecuteSqlRawAsync|FromSqlRaw|FromSql|GetSqlStringCommand|ExecuteDataSet|ExecuteReader|ExecuteNonQuery|ExecuteScalar|CreateSQLQuery)$"
      - pattern: "$DB.$FUNC($ARG, ...);"
      - pattern-not: $DB.$FUNC("...", ...);
    - patterns:
      - metavariable-regex:
          metavariable: "$FUNC"
          regex: "^(ExecuteQuery|ExecuteCommand)$"
      - pattern-inside: |
          using System.Data.Linq;
          ...
      - pattern: "(DataContext $CTX).$FUNC($ARG, ...)"
    - patterns:
      - metavariable-regex:
          metavariable: "$IMPL"
          regex: "^(SqlCommand|OracleCommand|NpgsqlCommand|MySqlCommand|EntityCommand|OdbcCommand|OleDbCommand|SqliteCommand)$"
      - pattern-either:
        - patterns:
          - pattern: new $IMPL($ARG, ...);
          - pattern-not: new $IMPL("...", ...);
        - patterns:
          - pattern: "($IMPL $CMD).CommandText = <...$ARG...>;"
          - pattern-not: ($IMPL $CMD).CommandText = "...";
    - patterns:
      - metavariable-regex:
          metavariable: "$FUNC"
          regex: "^(ExecuteDataRow|ExecuteDataRowAsync|ExecuteDataset|ExecuteDatasetAsync|ExecuteNonQuery|ExecuteNonQueryAsync|ExecuteReader|ExecuteReaderAsync|ExecuteScalar|ExecuteScalarAsync|UpdateDataSet|UpdateDataSetAsync)$"
      - pattern-inside: |
          using MySql.Data.MySqlClient;
          ...
      - pattern: MySqlHelper.$FUNC("...", $ARG, ...);
    - patterns:
      - pattern-inside: |
          using Cassandra;
          ...
      - pattern: "(Session $SESS).Execute($ARG, ...);"
      - pattern-not: (Session $SESS).Execute("...", ...);
  message: |
    SQL Injection is a critical vulnerability that can lead to data or system compromise. By
    dynamically generating SQL query strings, user input may be able to influence the logic of
    the SQL statement. This could lead to an adversary accessing information they should
    not have access to, or in some circumstances, being able to execute OS functionality or code.

    Replace all dynamically generated SQL queries with parameterized queries. In situations where
    dynamic queries must be created, never use direct user input, but instead use a map or
    dictionary of valid values and resolve them using a user supplied key.

    For example, some database drivers do not allow parameterized queries for `>` or `<` comparison
    operators. In these cases, do not use a user supplied `>` or `<` value, but rather have the
    user
    supply a `gt` or `lt` value. The alphabetical values are then used to look up the `>` and `<`
    values to be used in the construction of the dynamic query. The same goes for other queries
    where
    column or table names are required but cannot be parameterized.

    Example using parameterized queries with `SqlCommand`:
    ```
    string userInput = "someUserInput";
    string connectionString = ...;
    using (SqlConnection connection = new SqlConnection(connectionString))
    {
        connection.Open();
        String sql = "SELECT name, value FROM table where name=@Name";

        using (SqlCommand command = new SqlCommand(sql, connection))
        {
            command.Parameters.Add("@Name", System.Data.SqlDbType.NVarChar);
            command.Parameters["@Name"].Value = userInput;
            using (SqlDataReader reader = command.ExecuteReader())
            {
                while (reader.Read())
                {
                    Console.WriteLine("{0} {1}", reader.GetString(0), reader.GetString(1));
                }
            }
        }
    }
    ```

    For more information on SQL Injection see OWASP:
    https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html
  severity: ERROR
  metadata:
    shortDescription: Improper Neutralization of Special Elements used in an SQL Command
      ('SQL Injection')
    category: security
    cwe: CWE-89
    primary_identifier: security_code_scan.SCS0002-1
    secondary_identifiers:
    - name: SCS0002
      type: security_code_scan_rule_id
      value: SCS0002
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.security_code_scan.SCS0002-1
    shortlink: https://sg.run/K1y5
    semgrep.dev:
      rule:
        rule_id: PeUejg
        version_id: X0TQwv1
        url: https://semgrep.dev/playground/r/X0TQwv1/gitlab.security_code_scan.SCS0002-1
        origin: community
- id: gitlab.security_code_scan.SCS0003-1
  languages:
  - csharp
  patterns:
  - pattern-inside: |
      using System.Xml;
      ...
  - pattern-either:
    - patterns:
      - metavariable-regex:
          metavariable: "$FUNC"
          regex: "^(SelectNodes|SelectSingleNode|Compile|Evaluate|Matches|Select|SelectAncestors|SelectChildren|SelectDescendants)$"
      - metavariable-regex:
          metavariable: "$TY"
          regex: "^(XPathNavigator|XmlDocument|XmlNode|XmlDocumentXPathExtensions)$"
      - pattern: "($TY $VAR).$FUNC(<...$ARG...>, ...)"
      - pattern-not: ($TY $VAR).$FUNC("...", ...)
    - patterns:
      - pattern-inside: |
          using System.Xml.Linq;
          ...
      - metavariable-regex:
          metavariable: "$FUNC"
          regex: "^(XPathEvaluate|XPathSelectElement|XPathSelectElements)$"
      - pattern: "$VAR.$FUNC(<...$ARG...>, ...)"
      - pattern-not: $VAR.$FUNC("...", ...)
    - patterns:
      - pattern-inside: |
          using System.Xml.Schema;
          ...
      - pattern-either:
        - patterns:
          - pattern: "$VAR.XPath = <...$ARG...>;"
          - pattern-not: $VAR.XPath = "..."
        - patterns:
          - pattern: new XmlSchemaXPath { XPath = <...$ARG...> };
          - focus-metavariable: "$ARG"
  message: |
    XPath injection is a vulnerability that can allow an adversary to inject or modify how an XML
    query
    is structured. Depending on the logic of the original query, this could lead to adversaries
    extracting unauthorized information or in rare cases bypassing authorization checks.

    It is recommended that LINQ to XML is used instead of XPath for querying XML documents. Care
    must be taken to **not** call these LINQ functions with user input as they can still lead to
    XPath
    injection:

    - `XPathEvaluate`
    - `XPathSelectElement`
    - `XPathSelectElements`

    Example using LINQ to XML to safely extract the first user from a list of users:
    ```
    // XDocument is safe from XXE attacks as the resolver is disabled by default
    XDocument doc = XDocument.Load("users.xml");
    XNamespace ns = "urn:users-schema";

    string userInput = "LastName";

    // Get all the users.
    var user = doc.Descendants(ns + "user")
                   .Select(u => new {
                      FirstName = (string)u.Element(ns + "first-name"),
                      LastName = (string)u.Element(ns + "last-name")
                   }).Where(u => u.LastName == userInput).FirstOrDefault();

    Console.WriteLine(user.FirstName + " " + user.LastName);
    ```

    For more information on LINQ to XML security see:
    https://learn.microsoft.com/en-us/dotnet/standard/linq/linq-xml-security

    For more information on XML security see OWASP's guide:
    https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html#net
  severity: INFO
  metadata:
    shortDescription: Improper neutralization of data within XPath expressions ('XPath
      Injection')
    category: security
    cwe: CWE-643
    primary_identifier: security_code_scan.SCS0003-1
    secondary_identifiers:
    - name: SCS0003
      type: security_code_scan_rule_id
      value: SCS0003
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.security_code_scan.SCS0003-1
    shortlink: https://sg.run/qeZ7
    semgrep.dev:
      rule:
        rule_id: JDUnoJ
        version_id: jQTg6EW
        url: https://semgrep.dev/playground/r/jQTg6EW/gitlab.security_code_scan.SCS0003-1
        origin: community
- id: gitlab.security_code_scan.SCS0004-1
  languages:
  - csharp
  patterns:
  - pattern-inside: |
      using System.Net;
      ...
  - pattern: ServicePointManager.ServerCertificateValidationCallback += $CALLBACK;
  - metavariable-pattern:
      metavariable: "$CALLBACK"
      patterns:
      - pattern-either:
        - pattern: "$RETURNTYPE $FUNC(...) { return true; }"
        - pattern: "(...) => true;"
  message: |
    The `ServicePointManager.ServerCertificateValidationCallback` event has been set
    to always return `true`, which effectively disables the validation of server
    certificates.

    This allows for an adversary who is in between the application and the target host to intercept
    potentially sensitive information or transmit malicious data.

    Remove the callback function that is returning true to allow normal certificate validation to
    proceed.
    When no callback is provided, the client will validate that the certificate name matches the
    hostname
    that was used when creating the request.

    For more information on the `ServerCertificateValidationCallback` property see:
    https://learn.microsoft.com/en-us/dotnet/api/system.net.servicepointmanager.servercertificatevalidationcallback
  severity: WARNING
  metadata:
    shortDescription: Certificate validation disabled
    category: security
    cwe: CWE-295
    primary_identifier: security_code_scan.SCS0004-1
    secondary_identifiers:
    - name: SCS0004
      type: security_code_scan_rule_id
      value: SCS0004
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.security_code_scan.SCS0004-1
    shortlink: https://sg.run/PwPz
    semgrep.dev:
      rule:
        rule_id: ZqUDen
        version_id: 0bTL74q
        url: https://semgrep.dev/playground/r/0bTL74q/gitlab.security_code_scan.SCS0004-1
        origin: community
- id: gitlab.security_code_scan.SCS0005-1
  languages:
  - csharp
  patterns:
  - pattern: "(Random $RNG).$METHOD(...);"
  - focus-metavariable: "$RNG"
  message: |
    Depending on the context, generating weak random numbers may expose cryptographic functions
    which rely on these numbers to be exploitable. When generating numbers for sensitive values
    such as tokens, nonces, and cryptographic keys, it is recommended that the
    `RandomNumberGenerator` class be used.

    Example `RandomNumberGenerator` usage:
    ```
    Int32 randInt = RandomNumberGenerator.GetInt32(32000);
    byte[] randomBytes = new byte[64];
    RandomNumberGenerator.Fill(randomBytes);
    Console.WriteLine("Random Int32: {0}", randInt);
    Console.WriteLine("Random Bytes: {0}", BitConverter.ToString(randomBytes).Replace("-", ""));
    ```

    For more information see:
    https://learn.microsoft.com/en-us/dotnet/api/system.security.cryptography.randomnumbergenerator
  severity: WARNING
  metadata:
    shortDescription: Use of cryptographically weak Pseudo-Random Number Generator
      (PRNG)
    category: security
    cwe: CWE-338
    primary_identifier: security_code_scan.SCS0005-1
    secondary_identifiers:
    - name: SCS0005
      type: security_code_scan_rule_id
      value: SCS0005
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.security_code_scan.SCS0005-1
    shortlink: https://sg.run/Rw5q
    semgrep.dev:
      rule:
        rule_id: L1URz8
        version_id: YDTp63x
        url: https://semgrep.dev/playground/r/YDTp63x/gitlab.security_code_scan.SCS0005-1
        origin: community
- id: gitlab.security_code_scan.SCS0006-1
  languages:
  - csharp
  patterns:
  - pattern-either:
    - patterns:
      - metavariable-regex:
          metavariable: "$HASH_PROVIDER"
          regex: "^(SHA1CryptoServiceProvider|MD5CryptoServiceProvider)$"
      - pattern: new $HASH_PROVIDER
    - patterns:
      - metavariable-regex:
          metavariable: "$HASH_CLASS"
          regex: "^System.Security.Cryptography.(SHA1|MD5)$"
      - pattern: "$HASH_CLASS.$METHOD();"
  message: |
    Both MD5 and SHA1 hash algorithms have been found to be vulnerable to producing collisions.
    This means
    that two different values, when hashed, can lead to the same hash value. If the application is
    trying
    to use these hash methods for storing passwords, then it is recommended to switch to a
    password hashing
    algorithm such as Argon2id or PBKDF2. Currently there is no vetted Argon2id implementation for
    C# so
    it is recommended that PBKDF2 be used until one is available.

    Example using PBKDF2 to generate and compare passwords:
    ```
    const int SaltSize = 24;
    const int HashSize = 24;
    // number of pbkdf2 iterations, Rfc2898DeriveBytes uses hmac-sha1
    // so set a high iteration count
    const int Iterations = 1_300_000;
    byte[] salt = new byte[SaltSize];
    RandomNumberGenerator.Fill(salt);

    Rfc2898DeriveBytes pbkdf2 = new Rfc2898DeriveBytes("some password", salt, Iterations);
    byte[] hashBytes = pbkdf2.GetBytes(HashSize);
    // Store salt and hashedBytes in a data store such as database for authentication
    Console.WriteLine("Hash {0}", BitConverter.ToString(hashBytes).Replace("-", ""));
    // Do a constant time comparison as to not leak data based on timing
    if (CryptographicOperations.FixedTimeEquals(hashBytes, hashBytes)) {
        Console.WriteLine("hashes are equal");
    }
    ```
    For more information on PBKDF2 see:
    https://learn.microsoft.com/en-us/dotnet/api/system.security.cryptography.rfc2898derivebytes

    For more information on secure password storage see OWASP:
    https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html
  severity: WARNING
  metadata:
    shortDescription: Use of a broken or risky cryptographic algorithm (SHA1/MD5)
    category: security
    cwe: CWE-327
    primary_identifier: security_code_scan.SCS0006-1
    secondary_identifiers:
    - name: SCS0006
      type: security_code_scan_rule_id
      value: SCS0006
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.security_code_scan.SCS0006-1
    shortlink: https://sg.run/Gzbq
    semgrep.dev:
      rule:
        rule_id: 7KUKbk
        version_id: l4T4rLe
        url: https://semgrep.dev/playground/r/l4T4rLe/gitlab.security_code_scan.SCS0006-1
        origin: community
- id: gitlab.security_code_scan.SCS0007-1
  languages:
  - csharp
  mode: taint
  pattern-sanitizers:
  - pattern: "(XmlReaderSettings $SETTINGS).ProhibitDtd = true;"
  - pattern: "(XmlReaderSettings $SETTINGS).DtdProcessing = DtdProcessing.Prohibit;"
  - pattern: "(XmlDocument $DOC).XmlResolver = null;"
  - pattern: var $DOC = new XmlDocument { ..., XmlResolver = null, ... };
  pattern-sinks:
  - pattern: XmlReader.Create(..., $SETTINGS);
  - pattern: "(XmlDocument $DOC).Load(...);"
  pattern-sources:
  - pattern: var $SETTINGS = new XmlReaderSettings();
  - pattern: var $DOC = new XmlDocument(...);
  - pattern: var $DOC = new XmlDocument {...};
  message: |
    External XML entities are a feature of XML parsers that allow documents to contain references
    to
    other documents or data. This feature can be abused to read files, communicate with external
    hosts,
    exfiltrate data, or cause a Denial of Service (DoS).

    XML parsers and document loaders must be configured to not resolve entities. This can be done
    by:
    - Ensuring you are running a version of .NET Framework greater than 4.5.2 (released in 2014).
    - Using `XDocument` which disables entity resolution and is generally safe from DoS.
    - Setting `XmlDocument`'s `XmlResolver` to null.
    - Setting `XmlTextReader`'s  `ProhibitDtd` to `true`
    - Setting `XmlReaderSettings` `DtdProcessing` to `DtdProcessing.Prohibit`

    Example of safely loading an XML file using `XmlDocument`:
    ```
    XmlDocument document = new XmlDocument();
    document.XmlResolver = null;
    document.Load("users.xml");
    ```

    For more information on XML security, see OWASP's guide:
    https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html#net
  severity: WARNING
  metadata:
    shortDescription: Improper restriction of XML external entity reference ('XXE')
    category: security
    cwe: CWE-611
    primary_identifier: security_code_scan.SCS0007-1
    secondary_identifiers:
    - name: SCS0007
      type: security_code_scan_rule_id
      value: SCS0007
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.security_code_scan.SCS0007-1
    shortlink: https://sg.run/lbWE
    semgrep.dev:
      rule:
        rule_id: 5rU7N6
        version_id: 1QTObD6
        url: https://semgrep.dev/playground/r/1QTObD6/gitlab.security_code_scan.SCS0007-1
        origin: community
- id: gitlab.security_code_scan.SCS0008-1
  languages:
  - csharp
  mode: taint
  pattern-sources:
  - pattern: 'var $COOKIE = new HttpCookie(...);

      '
  pattern-sinks:
  - pattern: "$COOKIE"
  pattern-sanitizers:
  - pattern: "$COOKIE.Secure = true;"
  message: |
    The `Secure` attribute when set to `true` protects the cookie value from being being
    transmitted over clear text
    communication paths such as HTTP. By enabling this protection, the cookie will only be sent
    over HTTPS.

    Example of protecting an HttpCookie:
    ```
    // Create an HttpOnly cookie.
    HttpCookie someCookie = new HttpCookie("SomeCookieName", "SomeValue");
    someCookie.Secure = true;
    ```

    For more information see:
    https://learn.microsoft.com/en-us/dotnet/api/system.web.httpcookie.secure

    Session cookies should be configured with the following security directives:

    - [HTTPOnly](https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies#restrict_access_to_cookies)
    - [SameSite](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite)
    - [Secure](https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies#restrict_access_to_cookies)
  severity: WARNING
  metadata:
    shortDescription: Sensitive cookie in HTTPS session without 'Secure' attribute
    category: security
    cwe: CWE-614
    primary_identifier: security_code_scan.SCS0008-1
    secondary_identifiers:
    - name: SCS0008
      type: security_code_scan_rule_id
      value: SCS0008
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.security_code_scan.SCS0008-1
    shortlink: https://sg.run/49k5
    semgrep.dev:
      rule:
        rule_id: d8U86o
        version_id: JdTNy22
        url: https://semgrep.dev/playground/r/JdTNy22/gitlab.security_code_scan.SCS0008-1
        origin: community
- id: gitlab.security_code_scan.SCS0009-1
  languages:
  - csharp
  mode: taint
  pattern-sources:
  - pattern: 'var $COOKIE = new HttpCookie(...);

      '
  pattern-sinks:
  - pattern: "$COOKIE"
  pattern-sanitizers:
  - pattern: "$COOKIE.HttpOnly = true;"
  message: |
    The `HttpOnly` attribute when set to `true` protects the cookie value from being accessed by
    client side JavaScript such
    as reading the `document.cookie` values. By enabling this protection, a website that is
    vulnerable to
    Cross-Site Scripting (XSS) will be able to block malicious scripts from accessing the cookie
    value from JavaScript.

    Example of protecting an HttpCookie:
    ```
    // Create an HttpOnly cookie.
    HttpCookie someCookie = new HttpCookie("SomeCookieName", "SomeValue");
    someCookie.HttpOnly = true;
    ```

    For more information see:
    https://learn.microsoft.com/en-us/dotnet/api/system.web.httpcookie.httponly

    Session cookies should be configured with the following security directives:

    - [HTTPOnly](https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies#restrict_access_to_cookies)
    - [Secure](https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies#restrict_access_to_cookies)
    - [SameSite](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite)
  severity: WARNING
  metadata:
    shortDescription: Sensitive cookie without 'HttpOnly' flag
    category: security
    cwe: CWE-1004
    primary_identifier: security_code_scan.SCS0009-1
    secondary_identifiers:
    - name: SCS0009
      type: security_code_scan_rule_id
      value: SCS0009
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.security_code_scan.SCS0009-1
    shortlink: https://sg.run/39QK
    semgrep.dev:
      rule:
        rule_id: v8ULvw
        version_id: PkTJZEn
        url: https://semgrep.dev/playground/r/PkTJZEn/gitlab.security_code_scan.SCS0009-1
        origin: community
- id: gitlab.security_code_scan.SCS0010-1
  patterns:
  - pattern-inside: |
      using System.Security.Cryptography;
      ...
  - pattern-either:
    - pattern-regex: ".*DES\\.Create\\(\\);"
    - pattern: new DESCryptoServiceProvider();
    - pattern-regex: ".*TripleDES\\.Create\\(\\);"
    - pattern: new TripleDESCryptoServiceProvider();
    - pattern-regex: ".*RC2\\.Create\\(\\);"
    - pattern: new RC2CryptoServiceProvider();
  message: |
    DES, TripleDES and RC2 are all considered broken or insecure cryptographic algorithms.
    If using .NET Framework greater than version 6.0 consider using `ChaCha20Poly1305`
    instead as it is easier and faster than the alternatives such as `AES-256-GCM`.

    For older applications, `AES-256-GCM` is recommended, however it has many drawbacks:
    - Slower than `ChaCha20Poly1305`.
    - Catastrophic failure if nonce values are reused.

    Example using `ChaCha20Poly1305`:
    ```
    // Generate a random key
    byte[] key = new byte[32];
    RandomNumberGenerator.Fill(key);

    // Note nonce values _must_ be regenerated every time they are used.
    byte[] nonce = new byte[12];
    RandomNumberGenerator.Fill(nonce);

    byte[] authTag = new byte[16];
    byte[] cipherText;

    using (ChaCha20Poly1305 encryptor = new ChaCha20Poly1305(key))
    {
        byte[] plainText = System.Text.Encoding.UTF8.GetBytes("Secret text to encrypt");
        cipherText = new byte[plainText.Length];
        encryptor.Encrypt(nonce, plainText, cipherText, authTag);
    }

    using (ChaCha20Poly1305 decryptor = new ChaCha20Poly1305(key))
    {
        byte[] output = new byte[cipherText.Length];
        decryptor.Decrypt(nonce, cipherText, authTag, output);
        Console.WriteLine("Output: {0}", System.Text.Encoding.UTF8.GetString(output));
    }
    ```

    Example using `AES-256-GCM`:
    ```
    // Generate a random key
    byte[] key = new byte[32];
    RandomNumberGenerator.Fill(key);

    // Note nonce values _must_ be regenerated every time they are used.
    byte[] nonce = new byte[AesGcm.NonceByteSizes.MaxSize];
    RandomNumberGenerator.Fill(nonce);

    byte[] authTag = new byte[AesGcm.TagByteSizes.MaxSize];
    byte[] cipherText;

    using (AesGcm encryptor = new AesGcm(key))
    {
        byte[] plainText = Encoding.UTF8.GetBytes("Secret text to encrypt");
        cipherText = new byte[plainText.Length];
        encryptor.Encrypt(nonce, plainText, cipherText, authTag);
    }

    using (AesGcm decryptor = new AesGcm(key))
    {
        byte[] output = new byte[cipherText.Length];
        decryptor.Decrypt(nonce, cipherText, authTag, output);
        Console.WriteLine("Output: {0}",  Encoding.UTF8.GetString(output));
    }
    ```
  languages:
  - csharp
  severity: WARNING
  metadata:
    shortDescription: Use of a broken or risky cryptographic algorithm
    category: security
    cwe: CWE-327
    primary_identifier: security_code_scan.SCS0010-1
    secondary_identifiers:
    - name: SCS0010
      type: security_code_scan_rule_id
      value: SCS0010
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.security_code_scan.SCS0010-1
    shortlink: https://sg.run/Jzwy
    semgrep.dev:
      rule:
        rule_id: nJUQnX
        version_id: K3TvzpQ
        url: https://semgrep.dev/playground/r/K3TvzpQ/gitlab.security_code_scan.SCS0010-1
        origin: community
- id: gitlab.security_code_scan.SCS0011-1
  patterns:
  - pattern-either:
    - pattern: new XsltSettings() {EnableScript = true};
    - pattern: |
        var $SETTINGS = new XsltSettings();
        ...
        $SETTINGS.EnableScript = true;
  message: |
    By setting `XsltSettings.EnableScript` to true, an adversary who is able to influence the
    loaded
    XSL document could directly inject code to compromise the system. It is strongly
    recommended that an alternative approach is used to work with XML data.

    For increased security:

    - Never process user-supplied XSL style sheets
    - Ensure `XsltSettings.EnableScript` is set to false
    - Ensure `XsltSettings.EnableDocumentFunction` is set to false

    If the application must calculate values from XML input, instead of using XSL scripts to
    execute functions, modify the XML document prior to running the
    `XslCompiledTransform.Transform` method.

    Example of modifying the XML prior to running `Transform`:
    ```
    const String filename = "number.xml";
    const String stylesheet = "calc.xsl";

    // Compile the style sheet.
    XsltSettings xslt_settings = new XsltSettings();
    xslt_settings.EnableScript = false; // disable script
    xslt_settings.EnableDocumentFunction = false; // disable document() function
    XslCompiledTransform xslt = new XslCompiledTransform();
    XmlResolver resolver = null; // set a null entity resolver
    xslt.Load(stylesheet, xslt_settings, resolver);

    // Load the XML source file, using XDocument for safety
    XDocument doc = XDocument.Load(filename);

    // do our modifications to the document before the transformation
    // instead of inside of a script.
    doc.Element("data").Add(new XElement("circle", new XElement("radius", 12)));

    // Create an XmlWriter.
    XmlWriterSettings settings = new XmlWriterSettings();
    settings.OmitXmlDeclaration = true;
    settings.Indent = true;
    XmlWriter writer = XmlWriter.Create("output.xml", settings);
    // Finally, execute the transformation.
    xslt.Transform(doc.CreateReader(), writer);
    writer.Close();
    ```

    For more information on security considerations when using XSL see the following URLs:
    - https://learn.microsoft.com/en-us/dotnet/standard/data/xml/xslt-security-considerations
    - https://learn.microsoft.com/en-us/dotnet/api/system.xml.xsl.xslcompiledtransform?view=net-7.0#security-considerations
  languages:
  - csharp
  severity: WARNING
  metadata:
    shortDescription: Improper restriction of XML external entity reference
    category: security
    cwe: CWE-611
    primary_identifier: security_code_scan.SCS0011-1
    secondary_identifiers:
    - name: SCS0011
      type: security_code_scan_rule_id
      value: SCS0011
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.security_code_scan.SCS0011-1
    shortlink: https://sg.run/64k1
    semgrep.dev:
      rule:
        rule_id: ReUE21
        version_id: 5PTdOBx
        url: https://semgrep.dev/playground/r/5PTdOBx/gitlab.security_code_scan.SCS0011-1
        origin: community
- id: gitlab.security_code_scan.SCS0013-1
  languages:
  - csharp
  patterns:
  - pattern-inside: |
      using System.Security.Cryptography;
      ...
  - metavariable-regex:
      metavariable: "$CIPHER"
      regex: "^(ECB|CBC|OFB|CFB|CTS)$"
  - pattern: CipherMode.$CIPHER
  message: |
    Cryptographic algorithms provide many different modes of operation, only some of which provide
    message integrity. Without message integrity it could be possible for an adversary to attempt
    to tamper with the ciphertext which could lead to compromising the encryption key. Newer
    algorithms
    apply message integrity to validate ciphertext has not been tampered with.

    Instead of using an algorithm that requires configuring a `CipherMode`, an algorithm
    that has built-in message integrity should be used. If using .NET Framework greater
    than version 6.0 consider using `ChaCha20Poly1305` or `AES-256-GCM`.

    For older applications, `AES-256-GCM` is recommended, however it has many drawbacks:
    - Slower than `ChaCha20Poly1305`.
    - Catastrophic failure if nonce values are re-used.

    Example using `ChaCha20Poly1305`:
    ```
    // Generate a random key
    byte[] key = new byte[32];
    RandomNumberGenerator.Fill(key);

    ChaCha20Poly1305 encryptor = new ChaCha20Poly1305(key);

    // Note nonce values _must_ be regenerated every time they are used.
    var nonce = new byte[12];
    RandomNumberGenerator.Fill(nonce);

    byte[] plainText = System.Text.Encoding.UTF8.GetBytes("Secret text to encrypt");
    byte[] cipherText = new byte[plainText.Length];
    var authTag = new byte[16];

    encryptor.Encrypt(nonce, plainText, cipherText, authTag);
    byte[] output = new byte[cipherText.Length];
    encryptor.Decrypt(nonce, cipherText, authTag, output);
    Console.WriteLine("Output: {0}", System.Text.Encoding.UTF8.GetString(output));
    ```

    Example using `AES-256-GCM`:
    ```
    var plaintextBytes = Encoding.UTF8.GetBytes("Secret text to encrypt");
    var key = new byte[32];
    RandomNumberGenerator.Fill(key);

    using var aes = new AesGcm(key);
    var nonce = new byte[AesGcm.NonceByteSizes.MaxSize];
    RandomNumberGenerator.Fill(nonce);

    var cipherText = new byte[plaintextBytes.Length];
    var tag = new byte[AesGcm.TagByteSizes.MaxSize];

    aes.Encrypt(nonce, plaintextBytes, cipherText, tag);

    // Decrypt
    using (var decrypt = new AesGcm(key))
    {
        var decryptedBytes = new byte[cipherText.Length];

        decrypt.Decrypt(nonce, cipherText, tag, decryptedBytes);

        Console.WriteLine("Decrypted: {0}",  Encoding.UTF8.GetString(decryptedBytes));
    }
    ```
  severity: WARNING
  metadata:
    shortDescription: Use of a broken or risky cryptographic algorithm
    category: security
    cwe: CWE-327
    primary_identifier: security_code_scan.SCS0013-1
    secondary_identifiers:
    - name: SCS0013
      type: security_code_scan_rule_id
      value: SCS0013
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.security_code_scan.SCS0013-1
    shortlink: https://sg.run/5gZ0
    semgrep.dev:
      rule:
        rule_id: EwUe1Z
        version_id: qkT210K
        url: https://semgrep.dev/playground/r/qkT210K/gitlab.security_code_scan.SCS0013-1
        origin: community
- id: gitlab.security_code_scan.SCS0016-1
  languages:
  - csharp
  patterns:
  - pattern: |
      [$HTTPMETHOD]
      public $RET $FOO(...) {
        ...
      }
  - pattern-not: |
      [ValidateAntiForgeryToken]
      public $RET $FOO(...) {
        ...
      }
  - metavariable-regex:
      metavariable: "$HTTPMETHOD"
      regex: Http(Post|Delete|Patch|Put)
  message: |
    The application failed to protect against Cross-Site Request Forgery (CSRF)
    due to not including the `[ValidateAntiForgeryToken]` attribute on an
    HTTP method handler that could change user state (usually in the form of POST or PUT
    methods).

    The vulnerability can be exploited by an adversary creating a link or form on a third
    party site and tricking an authenticated victim to access them.

    Add the `[ValidateAntiForgeryToken]` to all methods which take in user data and change
    user state (such as updating a database with a new value). This is especially true for
    functionality such as updating passwords or other security sensitive functions.

    Alternatively, applications can enable a global
    [AutoValidateAntiforgeryTokenAttribute](https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.mvc.autovalidateantiforgerytokenattribute)
    filter.

    For more information on ValidateAntiForgeryToken and other CSRF protections in .NET
    see the following URL:
    https://learn.microsoft.com/en-us/aspnet/core/security/anti-request-forgery

    Additionally, consider setting all session cookies to have the `SameSite=Strict` attribute.
    It should be noted that this may impact usability when sharing links across other mediums.
    It is recommended that a two cookie based approach is taken, as outlined in the
    [Top level
    navigations](https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis-08#section-8.8.2)
    section
    of the SameSite RFC.

    For more information on CSRF see OWASP's guide:
    https://owasp.org/www-community/attacks/csrf
  severity: WARNING
  metadata:
    shortDescription: Potential Cross-Site Request Forgery (CSRF)
    category: security
    cwe: CWE-352
    primary_identifier: security_code_scan.SCS0016-1
    secondary_identifiers:
    - name: SCS0016
      type: security_code_scan_rule_id
      value: SCS0016
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.security_code_scan.SCS0016-1
    shortlink: https://sg.run/AKL2
    semgrep.dev:
      rule:
        rule_id: 8GU3vk
        version_id: 6xTv5L4
        url: https://semgrep.dev/playground/r/6xTv5L4/gitlab.security_code_scan.SCS0016-1
        origin: community
- id: gitlab.security_code_scan.SCS0017-1
  languages:
  - csharp
  patterns:
  - pattern: |
      [ValidateInput(false)]
      public $RET $FOO(...)
      {
        ...
      }
  message: |
    By using the `[ValidateInput(false)]` attribute in a controller
    class, the application will disable request validation for that
    method. This disables ASP.NET from examining requests for injection
    attacks such as Cross-Site-Scripting (XSS).

    If possible, re-enable validation by using `ValidateInput(true)`.
    In some cases this may not be possible, in which case ensure how the
    request data used is validated and this method does not
    output user input directly into the view.

    For more information on protecting ASP.NET Core applications from XSS see:
    https://learn.microsoft.com/en-us/aspnet/core/security/cross-site-scripting

    Example of enabling `ValidateInput` attribute:
    ```
    class ControllerClass
    {
        [ValidateInput(true)]
        public void SomeActionMethod()
        {
        }
    }
    ```

    For more information on ASP.NET request validation see OWASP:
    https://owasp.org/www-community/ASP-NET_Request_Validation
  severity: WARNING
  metadata:
    shortDescription: ASP.NET input validation disabled
    category: security
    cwe: CWE-554
    primary_identifier: security_code_scan.SCS0017-1
    secondary_identifiers:
    - name: SCS0017
      type: security_code_scan_rule_id
      value: SCS0017
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.security_code_scan.SCS0017-1
    shortlink: https://sg.run/p16Z
    semgrep.dev:
      rule:
        rule_id: DbUwNq
        version_id: NdT39xR
        url: https://semgrep.dev/playground/r/NdT39xR/gitlab.security_code_scan.SCS0017-1
        origin: community
- id: gitlab.security_code_scan.SCS0026-1.SCS0031-1
  languages:
  - csharp
  patterns:
  - pattern-either:
    - patterns:
      - pattern: "(DirectorySearcher $SOURCE).Filter = ..."
      - pattern-not: (DirectorySearcher $SOURCE).Filter = "..."
    - patterns:
      - pattern: "(DirectorySearcher $SOURCE).Path = ..."
      - pattern-not: (DirectorySearcher $SOURCE).Path = "..."
  message: |
    LDAP injection attacks exploit LDAP queries to influence how data is returned by
    the LDAP, or in this case an Active Directory server.

    It is recommended that newer applications use the `System.DirectoryServices.AccountManagement`
    API instead of `DirectorySearcher` API as it hides the complexity of querying LDAP directly.
    However,
    the `AccountManagement` API is still susceptible to LDAP injection if a user inputs LDAP
    queries,
    including LDAP filter characters such as `*`.

    It is recommended that all input passed to LDAP querying systems encode the following values:

    - Any occurrence of the null character must be escaped as “\00”.
    - Any occurrence of the open parenthesis character must be escaped as “\28”.
    - Any occurrence of the close parenthesis character must be escaped as “\29”.
    - Any occurrence of the asterisk character must be escaped as “\2a”.
    - Any occurrence of the backslash character must be escaped as “\5c”.

    Example code that safely encodes input for use in an LDAP query using the `AccountManagement`
    API:
    ```
    using System.DirectoryServices.AccountManagement;

    string EncodeLDAPString(string input) {
        // Note the \ character is replaced first
        char[] chars = new char[] { '\\', '\0', '(', ')', '*' };
        string[] encoded = new string[] { "\\5c", "\\00", "\\28", "\\29", "\\2a" };

        for (int i = 0; i < chars.Length; i++)
        {
            input = input.Replace(chars[i].ToString(), encoded[i]);
        }

        return input;
    }

    // unsafe, do not use without encoding first
    string userInput = "Administrator";
    PrincipalContext AD = new PrincipalContext(ContextType.Domain, "ad.example.dev");

    UserPrincipal u = new UserPrincipal(AD);
    string encodedUserName = EncodeLDAPString(userInput);

    // The AD search term, encoded prior to calling search
    u.SamAccountName = encodedUserName;

    // Search for user
    PrincipalSearcher search = new PrincipalSearcher(u);

    // Use FindOne to only return a single result
    UserPrincipal result = (UserPrincipal)search.FindOne();
    search.Dispose();

    // show some details
    if (result != null) {
        Console.WriteLine("User: {0}", result.DisplayName);
    } else {
        Console.WriteLine("user not found");
    }
    ```

    The same encoding method shown in `EncodeLDAPString` can also be used when using the
    older `DirectorySearcher` API.

    For more information see OWASP's guide:
    https://cheatsheetseries.owasp.org/cheatsheets/LDAP_Injection_Prevention_Cheat_Sheet.html
  severity: WARNING
  metadata:
    shortDescription: Improper neutralization of special elements used in an LDAP
      query ('LDAP Injection')
    category: security
    cwe: CWE-90
    primary_identifier: security_code_scan.SCS0026-1.SCS0031-1
    secondary_identifiers:
    - name: SCS0026
      type: security_code_scan_rule_id
      value: SCS0026
    - name: SCS0031
      type: security_code_scan_rule_id
      value: SCS0031
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.security_code_scan.SCS0026-1.SCS0031-1
    shortlink: https://sg.run/0ZWj
    semgrep.dev:
      rule:
        rule_id: 4bUbeO
        version_id: 2KTzQDk
        url: https://semgrep.dev/playground/r/2KTzQDk/gitlab.security_code_scan.SCS0026-1.SCS0031-1
        origin: community
- id: gitlab.security_code_scan.SCS0027-1
  languages:
  - csharp
  mode: taint
  pattern-sources:
  - patterns:
    - pattern: "$SRC"
    - pattern-inside: 'public $RET $FUNC(...,$SRC,...){...}

        '
  pattern-sanitizers:
  - pattern-either:
    - pattern: TryCreate(...)
    - pattern: Action(...)
    - pattern: HttpRouteUrl(...)
    - pattern: RouteUrl(...)
  pattern-sinks:
  - patterns:
    - pattern-not-inside: |
        if (IsLocalUrl(...)) {
            ...
            Redirect(...);
            ...
        }
    - pattern-not-inside: |
        if ($URL.IsLocalUrl(...)) {
            ...
            Redirect(...);
            ...
        }
    - pattern-either:
      - pattern: Redirect(...)
      - pattern: RedirectPermanent(...)
      - pattern: RedirectToRoute(...)
      - pattern: RedirectToRoutePermanent(...)
      - pattern: new RedirectResult(...)
  message: |
    The application may allow open redirects if created using user supplied input. Open redirects
    are
    commonly
    abused in phishing attacks where the original domain or URL looks like a legitimate link, but
    then
    redirects a user to a malicious site. An example would be
    `https://example.com/redirect?url=https://%62%61%64%2e%63%6f%6d%2f%66%61%6b%65%6c%6f%67%69%6e`
    which,
    when decoded, turns into `bad.com/fakelogin`.

    Never redirect a client based on user input. It is recommended that the list of target links
    to
    redirect a user to are contained server side, and retrieved using a numerical value
    as an index to return the link to be redirected to. For example, `/redirect?id=1` would cause
    the
    application to look up the `1` index and return a URL such as `https://example.com`. This URL
    would
    then be used to redirect the user, using the 301 response code and `Location` header.

    For more information on open redirects see OWASP's guide:
    https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html
  metadata:
    shortDescription: URL redirection to untrusted site 'open redirect'
    category: security
    cwe: CWE-601
    primary_identifier: security_code_scan.SCS0027-1
    secondary_identifiers:
    - name: SCS0027
      type: security_code_scan_rule_id
      value: SCS0027
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.security_code_scan.SCS0027-1
    shortlink: https://sg.run/DYeP
    semgrep.dev:
      rule:
        rule_id: QrUE1q
        version_id: zyTKAxv
        url: https://semgrep.dev/playground/r/zyTKAxv/gitlab.security_code_scan.SCS0027-1
        origin: community
  severity: WARNING
- id: gitlab.security_code_scan.SCS0028-1
  mode: taint
  pattern-sources:
  - pattern: Request.Cookies[...]
  - pattern: Request.Cookies.Get(...)
  - pattern: Request.Form[...]
  - pattern: Request.Form.Get(...)
  - pattern: Request.Headers[...]
  - pattern: Request.Headers.Get(...)
  - pattern: Request.QueryString[...]
  - pattern: Request.QueryString.Get(...)
  - pattern: Request.Body
  - pattern: "$CTX.Request.Cookies[...]"
  - pattern: "$CTX.Request.Cookies.Get(...)"
  - pattern: "$CTX.Request.Form[...]"
  - pattern: "$CTX.Request.Form.Get(...)"
  - pattern: "$CTX.Request.Headers[...]"
  - pattern: "$CTX.Request.Headers.Get(...)"
  - pattern: "$CTX.Request.QueryString[...]"
  - pattern: "$CTX.Request.QueryString.Get(...)"
  - pattern: "$CTX.Request.Body"
  - pattern: System.IO.File.ReadAllText(...)
  - pattern: System.IO.File.ReadAllTextAsync(...)
  - pattern: System.IO.File.ReadAllLines(...)
  - pattern: System.IO.File.ReadAllLinesAsync(...)
  - pattern: System.IO.File.ReadAllBytes(...)
  - pattern: System.IO.File.ReadAllBytesAsync(...)
  - pattern: System.IO.File.ReadLines(...)
  - pattern: System.IO.File.ReadLinesAsync(...)
  - pattern: System.Environment.GetEnvironmentVariable(...)
  pattern-sinks:
  - pattern: "(System.Runtime.Serialization.Formatters.Binary.BinaryFormatter $OBJ).Deserialize(...)"
  - pattern: "(System.Runtime.Serialization.Formatters.Binary.BinaryFormatter $OBJ).UnsafeDeserialize(...)"
  - pattern: "(System.Runtime.Serialization.Formatters.Binary.BinaryFormatter $OBJ).UnsafeDeserializeMethod(...)"
  - pattern: "(System.Runtime.Serialization.Formatters.Soap.SoapFormatter $OBJ).Deserialize(...)"
  - pattern: "(System.Runtime.Serialization.NetDataContractSerializer $OBJ).Deserialize(...)"
  - pattern: "(System.Web.UI.LosFormatter $OBJ).Deserialize(...)"
  languages:
  - csharp
  message: |
    Deserialization attacks exploit the process of reading serialized data and turning it back into an
    object. By constructing malicious objects and serializing them, an adversary may attempt to:

    - Inject code that is executed upon object construction, which occurs during the deserialization process.
    - Exploit mass assignment by including fields that are not normally a part of the serialized data but are
      read in during deserialization.

    Microsoft recommends no longer using the following serialization formats:

    - BinaryFormatter
    - SoapFormatter
    - NetDataContractSerializer
    - LosFormatter
    - ObjectStateFormatter

    Consider safer alternatives such as serializing data in the JSON format. Ensure any format chosen allows
    the application to specify exactly which object types are allowed to be deserialized. Additionally, when
    deserializing, never deserialize to base object types like `Object` and only cast to the exact object
    type that is expected.

    To protect against mass assignment, only allow deserialization of the specific fields that are required.
    If this is not easily done, consider creating an intermediary type that can be serialized with only the
    necessary fields exposed.

    For more information see Microsoft's deserialization security guide:
    https://learn.microsoft.com/en-us/dotnet/standard/serialization/binaryformatter-security-guide

    For more details on deserialization attacks in general, see OWASP's guide:
    https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html

    It should be noted that [tools exist](https://github.com/pwntester/ysoserial.net) to automatically create
    exploit code for these vulnerabilities.
  metadata:
    shortDescription: Deserialization of potentially untrusted data
    category: security
    cwe: CWE-502
    primary_identifier: security_code_scan.SCS0028-1
    secondary_identifiers:
    - name: SCS0028
      type: security_code_scan_rule_id
      value: SCS0028
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.security_code_scan.SCS0028-1
    shortlink: https://sg.run/BqeA
    semgrep.dev:
      rule:
        rule_id: gxUrkX
        version_id: DkT6ND4
        url: https://semgrep.dev/playground/r/DkT6ND4/gitlab.security_code_scan.SCS0028-1
        origin: community
  severity: WARNING
- id: gitlab.security_code_scan.SCS0029-1
  mode: taint
  pattern-sources:
  - patterns:
    - pattern: "$PARAM"
    - metavariable-regex:
        metavariable: "$HTTP_ANNO"
        regex: "^(Http)"
    - pattern-inside: |
        public class $CLASS : Controller {
          ...
        }
    - pattern-inside: |
        [$HTTP_ANNO]
        public string $METHOD(...,$PARAM,...){...}
  pattern-sanitizers:
  - patterns:
    - metavariable-regex:
        metavariable: "$FUNC"
        regex: "(SerializeObject|HtmlAttributeEncode|HtmlEncode|HtmlFormUrlEncode|UrlEncode|UrlPathEncode|XmlAttributeEncode|XmlEncode|Encode)"
    - pattern: "$CLASS.$FUNC(...)"
  pattern-sinks:
  - pattern: "(System.Web.Mvc.HtmlHelper $E).Raw(...)"
  - pattern: "(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper $E).Raw(...)"
  - pattern: "(System.Web.HttpResponse $E).AddHeader(...)"
  - pattern: "(System.Web.HttpResponse $E).AppendHeader(...)"
  - pattern: "(System.Web.HttpResponse $E).Write(...)"
  - pattern: "(System.Web.HttpResponse $E).BinaryWrite(...)"
  - pattern: "(System.Web.HttpResponse $E).TransmitFile(...)"
  - pattern: "(System.Web.HttpResponse $E).WriteFile(...)"
  - pattern: "(System.Web.HttpResponseBase $E).AddHeader(...)"
  - pattern: "(System.Web.HttpResponseBase $E).AppendHeader(...)"
  - pattern: "(System.Web.HttpResponseBase $E).Write(...)"
  - pattern: "(System.Web.HttpResponseBase $E).BinaryWrite(...)"
  - pattern: "(System.Web.HttpResponseBase $E).WriteFile(...)"
  - pattern: "(System.Web.UI.HtmlTextWriter $E).AddAttribute(...)"
  - pattern: "(System.Web.UI.HtmlTextWriter $E).AddStyleAttribute(...)"
  - pattern: "(System.Web.UI.HtmlTextWriter $E).RenderBeginTag(...)"
  - pattern: "(System.Web.UI.HtmlTextWriter $E).Write(...)"
  - pattern: "(System.Web.UI.HtmlTextWriter $E).WriteAttribute(...)"
  - pattern: "(System.Web.UI.HtmlTextWriter $E).WriteBeginTag(...)"
  - pattern: "(System.Web.UI.HtmlTextWriter $E).WriteEndTag(...)"
  - pattern: "(System.Web.UI.HtmlTextWriter $E).WriteFullBeginTag(...)"
  - pattern: "(System.Web.UI.HtmlTextWriter $E).WriteStyleAttribute(...)"
  - pattern: "(System.Web.UI.ClientScriptManager $E).RegisterStartupScript(...)"
  - pattern: "(System.Web.UI.ClientScriptManager $E).RegisterClientScriptBlock(...)"
  - pattern: "(System.Web.UI.Page $E).RegisterStartupScript(...)"
  - pattern: "(System.Web.UI.Page $E).RegisterClientScriptBlock(...)"
  - pattern: return ...;
  languages:
  - csharp
  message: |
    Cross Site Scripting (XSS) is an attack which exploits a web application or system to treat
    user input
    as markup or script code. It is important to encode the data depending on the specific context
    it
    is used in. There are at least six context types:

    - Inside HTML tags `<div>context 1</div>`
    - Inside attributes: `<div class="context 2"></div>`
    - Inside event attributes `<button onclick="context 3">button</button>`
    - Inside script blocks: `<script>var x = "context 4"</script>`
    - Unsafe element HTML assignment: `element.innerHTML = "context 5"`
    - Inside URLs: `<iframe src="context 6"></iframe><a href="context 6">link</a>`

    Script blocks alone have multiple ways they need to be encoded. Extra care must be taken if
    user input
    is ever output inside of script tags.

    User input that is displayed within the application must be encoded, sanitized or validated
    to ensure it cannot be treated as HTML or executed as Javascript code. Care must also be
    taken
    to not mix server-side templating with client-side templating, as the server-side templating
    will
    not encode things like {{ 7*7 }} which may execute client-side templating features.

    It is _NOT_ advised to encode user input prior to inserting into a data store. The data will
    need to be
    encoded depending on context of where it is output. It is much safer to force the displaying
    system to
    handle the encoding and not attempt to guess how it should be encoded.

    Consider using built-in framework capabilities for automatically encoding user input.
    Depending
    on output context, consider using the following `System.Text.Encodings.Web` encoders:

    - [HtmlEncoder](https://learn.microsoft.com/en-us/dotnet/api/system.text.encodings.web.htmlencoder)
    - [JavaScriptEncoder](https://learn.microsoft.com/en-us/dotnet/api/system.text.encodings.web.javascriptencoder)
    - [UrlEncoder](https://learn.microsoft.com/en-us/dotnet/api/system.text.encodings.web.urlencoder)

    For more information on protecting ASP.NET Core applications from XSS see:
    https://learn.microsoft.com/en-us/aspnet/core/security/cross-site-scripting#accessing-encoders-in-code
  metadata:
    shortDescription: Improper neutralization of input during web page generation
      ('Cross-site Scripting')
    category: security
    cwe: CWE-79
    primary_identifier: security_code_scan.SCS0029-1
    secondary_identifiers:
    - name: SCS0029
      type: security_code_scan_rule_id
      value: SCS0029
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.security_code_scan.SCS0029-1
    shortlink: https://sg.run/2e5L
    semgrep.dev:
      rule:
        rule_id: WAU7El
        version_id: GxTv74b
        url: https://semgrep.dev/playground/r/GxTv74b/gitlab.security_code_scan.SCS0029-1
        origin: community
  severity: WARNING
- id: gitlab.security_code_scan.SCS0032-1.SCS0033-1.SCS0034-1
  languages:
  - csharp
  patterns:
  - pattern: |
      new PasswordValidator
      {
        ...,
      };
  - pattern: |
      new PasswordValidator
      {
        ...,
        RequiredLength = $LEN,
        ...,
      };
  - pattern-not: |
      new PasswordValidator
      {
        ...,
        RequireNonLetterOrDigit = true,
        ...,
      };
  - pattern-not: |
      new PasswordValidator
      {
        ...,
        RequireDigit = true,
        ...,
      };
  - pattern-not: |
      new PasswordValidator
      {
        ...,
        RequireLowercase = true,
        ...,
      };
  - pattern-not: |
      new PasswordValidator
      {
        ...,
        RequireUppercase = true,
        ...,
      };
  - metavariable-comparison:
      metavariable: "$LEN"
      comparison: "$LEN < 8"
  message: |
    The application's `PasswordValidator.RequiredLength` property allows passwords
    to be less than 8 characters. Consider requiring a length of at least 8 or more
    characters to reduce the chance of passwords being brute forced.

    Example of setting the RequiredLength to 8 in ASP.NET Core Identity:
    ```
    builder.Services.Configure<IdentityOptions>(options =>
    {
        // Default Password settings.
        options.Password.RequireDigit = true;
        options.Password.RequireLowercase = true;
        options.Password.RequireNonAlphanumeric = true;
        options.Password.RequireUppercase = true;
        options.Password.RequiredLength = 8;
        options.Password.RequiredUniqueChars = 1;
    });
    ```

    For more information on configuring ASP.NET Core Identity see:
    https://learn.microsoft.com/en-us/aspnet/core/security/authentication/identity-configuration
  severity: WARNING
  metadata:
    shortDescription: Weak password requirements
    category: security
    cwe: CWE-521
    primary_identifier: security_code_scan.SCS0032-1.SCS0033-1.SCS0034-1
    secondary_identifiers:
    - name: SCS0032
      type: security_code_scan_rule_id
      value: SCS0032
    - name: SCS0033
      type: security_code_scan_rule_id
      value: SCS0033
    - name: SCS0034
      type: security_code_scan_rule_id
      value: SCS0034
    license: MIT
    vulnerability_class:
    - Other
    source: https://semgrep.dev/r/gitlab.security_code_scan.SCS0032-1.SCS0033-1.SCS0034-1
    shortlink: https://sg.run/o1e0
    semgrep.dev:
      rule:
        rule_id: AbUEJj
        version_id: rxTyo57
        url: https://semgrep.dev/playground/r/rxTyo57/gitlab.security_code_scan.SCS0032-1.SCS0033-1.SCS0034-1
        origin: community
